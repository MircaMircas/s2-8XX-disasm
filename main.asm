; Sonic the Hedgehog 2 (Simon Wai prototype) disassembly
; Originally created by Esrael L.G. Neto around 2008
;
; Alright, time for some info...
; Internally, the zone order goes like this:
; 00 - Green Hill
; 01 - Zone 01 (UNUSED)
; 02 - Wood
; 03 - Zone 03 (UNUSED)
; 04 - Metropolis
; 05 - Metropolis Act 3
; 06 - Zone 06 (UNUSED)
; 07 - Hill Top
; 08 - Hidden Palace
; 09 - Zone 09 (UNUSED)
; 0A - Oil Ocean
; 0B - Dust Hill
; 0C - Casino Night
; 0D - Chemical Plant
; 0E - Genocide City (EMPTY)
; 0F - Neo Green Hill
; 10 - Death Egg (EMPTY)
; Going off the concept art,the unused zone IDs would've been for Ocean Wind,Sand Shower,
; Blue Lake/Blue Ocean,and Rock World,so they will be referred to as such here
;
; Death Egg doesn't have its entries defined for any music lists,so,by default,the compiler
; will put up an error for missing entries; just uncomment the commented-out entries on the
; list to fix this (it's only not compiled by default for accuracy)
;
; For certain bits of information,search for "NOTE:"

; AniArt_Load,Tails_RollSpeed,Obj_0x4C

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; ASSEMBLY OPTIONS:
;
padToPowerOfTwo = 1
;	| If 1, pads the end of the ROM to the next power of two bytes (for real hardware)
;
zeroOffsetOptimization = 0
;	| If 1, makes a handful of zero-offset instructions smaller
;
useFullWaterTables = 0
;	| If 1, zone offset tables for water levels cover all level slots instead of only slots 8-$F
;	| Set to 1 if you've shifted level IDs around or you want water in levels with a level slot below 8
;

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; AS-specific macros and assembler settings
	CPU 68000
	include	"macrosetup.asm"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; Equates section - Names for variables.
	include	"constants.asm"
SonicDriverVer = 2
FixMusicAndSFXDataBugs = 0
	include	"sound/_smps2asm_inc.asm"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; Simplifying macros and functions
	include	"macros.asm"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; start of ROM

StartOfRom:
Vectors:	dc.l System_Stack,EntryPoint,BusError,AddressError
		dc.l IllegalInstr,ZeroDivide,ChkInstr,TrapvInstr
		dc.l PrivilegeViol,Trace,Line1010Emu,Line1111Emu
		dc.l ErrorExcept,ErrorExcept,ErrorExcept,ErrorExcept
		dc.l ErrorExcept,ErrorExcept,ErrorExcept,ErrorExcept
		dc.l ErrorExcept,ErrorExcept,ErrorExcept,ErrorExcept
		dc.l ErrorExcept,ErrorTrap,ErrorTrap,ErrorTrap
		dc.l H_int,ErrorTrap,V_int,ErrorTrap
		dc.l ErrorTrap,ErrorTrap,ErrorTrap,ErrorTrap
		dc.l ErrorTrap,ErrorTrap,ErrorTrap,ErrorTrap
		dc.l ErrorTrap,ErrorTrap,ErrorTrap,ErrorTrap
		dc.l ErrorTrap,ErrorTrap,ErrorTrap,ErrorTrap
		dc.l ErrorTrap,ErrorTrap,ErrorTrap,ErrorTrap
		dc.l ErrorTrap,ErrorTrap,ErrorTrap,ErrorTrap
		dc.l ErrorTrap,ErrorTrap,ErrorTrap,ErrorTrap
		dc.l ErrorTrap,ErrorTrap,ErrorTrap,ErrorTrap
Header:	dc.b "SEGA MEGA DRIVE " ; Console name
		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year,leftover from Sonic 1)
		dc.b "SONIC THE             HEDGEHOG 2                " ; Domestic title
		dc.b "SONIC THE             HEDGEHOG 2                " ; International title
		dc.b "GM 00004049-01"	; Serial number (leftover from Sonic 1)
Checksum:	dc.w $AFC7		; Checksum (leftover from Sonic 1)
		dc.b "J               " ; I/O support
		dc.l StartOfRom		; Start address of ROM
RomEndLoc:	dc.l $7FFFF		; End address of ROM (leftover from Sonic 1)
		dc.l RAM_Start&$FFFFFF	; Start address of RAM
		dc.l (RAM_End-1)&$FFFFFF; End address of RAM
		dc.b "                " ; Backup RAM
		dc.b "                                                " ; notes (can be anything,but must be 52 bytes)
		dc.b "JUE             " ; Country code
; ===========================================================================
; Freeze execution and loop here; since Sonic 2 uses a Z80 driver,the sound
; does NOT stop playing unlike Sonic 1
; loc_200:
ErrorTrap:
		nop
		nop
		bra.s	ErrorTrap
; ===========================================================================
; loc_206:
EntryPoint:
		tst.l	(HW_Port_1_Control-1).l
		bne.s	PortA_OK
		tst.w	(HW_Expansion_Control-1).l
; loc_214:
PortA_OK:
		bne.s	PortC_OK		; skip the VDP and Z80 setup code if port A,B or C is ok...?
		lea	SetupValues(pc),a5	; load setup values array address
		movem.w	(a5)+,d5-d7
		movem.l	(a5)+,a0-a4
		move.b	HW_Version-Z80_Bus_Request(a1),d0	; get hardware version
		andi.b	#$F,d0
		beq.s	SkipSecurity		; if the console has no TMSS,skip the security stuff
		move.l	#'SEGA',Security_Addr-Z80_Bus_Request(a1)	; satisfy the TMSS
; loc_234:
SkipSecurity:
		move.w	(a4),d0	; check if VDP works
		moveq	#0,d0	; clear d0
		movea.l	d0,a6	; clear a6
		move.l	a6,usp	; set usp to $0

		moveq	#VDPInitValues_End-VDPInitValues-1,d1 ; run the following loop $18 times
; loc_23E:
VDPInitLoop:
		move.b	(a5)+,d5	; add $8000 to value
		move.w	d5,(a4)	; move value to VDP register
		add.w	d7,d5	; next register
		dbf	d1,VDPInitLoop

		move.l	(a5)+,(a4)	; set VRAM write mode
		move.w	d0,(a3)	; clear the screen
		move.w	d7,(a1)	; stop the Z80
		move.w	d7,(a2)	; reset the Z80
; loc_250:
WaitForZ80:
		btst	d0,(a1)	; has the Z80 stopped?
		bne.s	WaitForZ80	; if not,branch

		moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2
; loc_256:
Z80InitLoop:
		move.b	(a5)+,(a0)+
		dbf	d2,Z80InitLoop

		move.w	d0,(a2)
		move.w	d0,(a1)	; start the Z80
		move.w	d7,(a2)	; reset the Z80
; loc_262:
ClrRAMLoop:
		move.l	d0,-(a6)	; clear 4 bytes of RAM
		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
		move.l	(a5)+,(a4)	; set VDP to CRAM write

		moveq	#bytesToLcnt($80),d3	; set repeat times
; loc_26E:
ClrCRAMLoop:
		move.l	d0,(a3)	; clear 2 palettes
		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
		move.l	(a5)+,(a4)	; set VDP to VSRAM write

		moveq	#bytesToLcnt($50),d4	; set repeat times
; loc_278: ClrVDPStuff:
ClrVSRAMLoop:
		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
		moveq	#PSGInitValues_End-PSGInitValues-1,d5	; set repeat times.
; loc_280:
PSGInitLoop:
		move.b	(a5)+,PSG_input-VDP_data_port(a3) ; reset the PSG
		dbf	d5,PSGInitLoop	; repeat for other channels
		move.w	d0,(a2)
		movem.l	(a6),d0-a6	; clear all registers
		move	#$2700,sr	; set the sr
 ; loc_292:
PortC_OK:
		bra.s	GameProgram	; Branch to game program.
; ===========================================================================
; byte_294: InitValues:
SetupValues:
		dc.w	$8000,bytesToLcnt($10000),$100

		dc.l	Z80_RAM
		dc.l	Z80_Bus_Request
		dc.l	Z80_Reset
		dc.l	VDP_data_port,VDP_control_port

VDPInitValues:	; values for VDP registers
		dc.b 4			; Command $8004 - HInt off,Enable HV counter read
		dc.b $14		; Command $8114 - Display off,VInt off,DMA on,PAL off
		dc.b $30		; Command $8230 - Scroll A Address $C000
		dc.b $3C		; Command $833C - Window Address $F000
		dc.b 7			; Command $8407 - Scroll B Address $E000
		dc.b $6C		; Command $856C - Sprite Table Address $D800
		dc.b 0			; Command $8600 - Null
		dc.b 0			; Command $8700 - Background color Pal 0 Color 0
		dc.b 0			; Command $8800 - Null
		dc.b 0			; Command $8900 - Null
		dc.b $FF		; Command $8AFF - Hint timing $FF scanlines
		dc.b 0			; Command $8B00 - Ext Int off,VScroll full,HScroll full
		dc.b $81		; Command $8C81 - 40 cell mode,shadow/highlight off,no interlace
		dc.b $37		; Command $8d37 - HScroll Table Address $DC00
		dc.b 0			; Command $8E00 - Null
		dc.b 1			; Command $8F01 - VDP auto increment 1 byte
		dc.b 1			; Command $9001 - 64x32 cell scroll size
		dc.b 0			; Command $9100 - Window H left side,Base Point 0
		dc.b 0			; Command $9200 - Window V upside,Base Point 0
		dc.b $FF		; Command $93FF - DMA Length Counter $FFFF
		dc.b $FF		; Command $94FF - See above
		dc.b 0			; Command $9500 - DMA Source Address $0
		dc.b 0			; Command $9600 - See above
		dc.b $80		; Command $9780	- See above + VRAM fill mode
VDPInitValues_End:

		dc.l	vdpComm($0000,VRAM,DMA) ; value for VRAM write mode

	; Z80 instructions (not the sound driver; that gets loaded later)
Z80StartupCodeBegin: ; loc_2CA:
	save
	CPU Z80 ; start assembling Z80 code
	phase 0 ; pretend we're at address 0
		xor	a	; clear a to 0
		ld	bc,((Z80_RAM_End-Z80_RAM)-zStartupCodeEndLoc)-1 ; prepare to loop this many times
		ld	de,zStartupCodeEndLoc+1	; initial destination address
		ld	hl,zStartupCodeEndLoc	; initial source address
		ld	sp,hl	; set the address the stack starts at
		ld	(hl),a	; set first byte of the stack to 0
		ldir		; loop to fill the stack (entire remaining available Z80 RAM) with 0
		pop	ix	; clear ix
		pop	iy	; clear iy
		ld	i,a	; clear i
		ld	r,a	; clear r
		pop	de	; clear de
		pop	hl	; clear hl
		pop	af	; clear af
		ex	af,af'	; swap af with af'
		exx		; swap bc/de/hl with their shadow registers too
		pop	bc	; clear bc
		pop	de	; clear de
		pop	hl	; clear hl
		pop	af	; clear af
		ld	sp,hl	; clear sp
		di		; clear iff1 (for interrupt handler)
		im	1	; interrupt handling mode = 1
		ld	(hl),0E9h ; replace the first instruction with a jump to itself
		jp	(hl)	; jump to the first instruction (to stay there forever)
zStartupCodeEndLoc:
	dephase ; stop pretending
	restore
	padding off ; unfortunately our flags got reset so we have to set them again...
Z80StartupCodeEnd:

		dc.w	$8104	; value for VDP display mode
		dc.w	$8F02	; value for VDP increment
		dc.l	vdpComm($0000,CRAM,WRITE)	; value for CRAM write mode
		dc.l	vdpComm($0000,VSRAM,WRITE)	; value for VSRAM write mode

PSGInitValues:
		dc.b	$9F,$BF,$DF,$FF	; values for PSG channel volumes
PSGInitValues_End:
; ===========================================================================
; loc_300:
GameProgram:
		tst.w	(VDP_control_port).l
		btst	#6,(HW_Expansion_Control).l
		beq.s	ChecksumTest
		cmpi.l	#'init',(Checksum_fourcc).w
		beq.w	GameInit
; loc_31C:
ChecksumTest:
		move.l	#ErrorTrap,a0
		move.l	#RomEndLoc,a1
		move.l	(a1),d0
		move.l	#$7FFFF,d0
		moveq	#0,d1
; loc_332:
ChecksumLoop:
		add.w	(a0)+,d1
		cmp.l	a0,d0
		bcc.s	ChecksumLoop
		move.l	#Checksum,a1
		cmp.w	(a1),d1
		nop
		nop
		lea	(CrossResetRAM).w,a6
		moveq	#0,d7
		move.w	#bytesToLcnt(CrossResetRAM_End-CrossResetRAM),d6
; loc_34E:
GameClrStack:
		move.l	d7,(a6)+
		dbf	d6,GameClrStack
		move.b	(HW_Version).l,d0
		andi.b	#$C0,d0
		move.b	d0,(Graphics_Flags).w
		move.l	#'init',(Checksum_fourcc).w
; loc_36A:
GameInit:
		lea	(RAM_Start&$FFFFFF).l,a6
		moveq	#0,d7
		move.w	#bytesToLcnt(CrossResetRAM-RAM_Start),d6
; loc_376:
GameClrRAM:
		move.l	d7,(a6)+
		dbf	d6,GameClrRAM

		bsr.w	VDPSetupGame
		bsr.w	JmpTo_SoundDriverLoad
		bsr.w	JoypadInit
		; Strangely,this loads the title screen,and not the Sega screen,
		; and the August 21st prototype suggests this was NOT done by the pirates...
		move.b	#GameModeID_TitleScreen,(Game_Mode).w
; loc_38E:
MainGameLoop:
		move.b	(Game_Mode).w,d0
		andi.w	#$1C,d0
		jsr	GameModesArray(pc,d0.w)
		bra.s	MainGameLoop
; ===========================================================================
; loc_39C:
GameModesArray:
GameMode_SegaScreen:	bra.w	SegaScreen
GameMode_TitleScreen:	bra.w	TitleScreen
GameMode_Demo:		bra.w	Level
GameMode_Level:		bra.w	Level
GameMode_SpecialStage:	bra.w	SpecialStage
; ===========================================================================
; Leftover from Sonic 1,turned the screen red if the checksum ever failed
ChecksumError:
		bsr.w	VDPSetupGame
		move.l	#$C0000000,(VDP_control_port).l	; write to CRAM
		moveq	#$3F,d7
; loc_3C0:
Checksum_Red:
		move.w	#$E,(VDP_data_port).l		; color a line red
		dbf	d7,Checksum_Red		; repeat $3F times
; loc_3CC:
Checksum_Loop:
		bra.s	Checksum_Loop
; ===========================================================================
; loc_3CE:
BusError:
		move.b	#2,(Object_Respawn_Table+$44).w
		bra.s	ErrorMsg_TwoAddresses
; ---------------------------------------------------------------------------
; loc_3d6:
AddressError:
		move.b	#4,(Object_Respawn_Table+$44).w
		bra.s	ErrorMsg_TwoAddresses
; ---------------------------------------------------------------------------
; loc_3DE:
IllegalInstr:
		move.b	#6,(Object_Respawn_Table+$44).w
		addq.l	#2,2(sp)
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_3EA:
ZeroDivide:
		move.b	#8,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_3F2:
ChkInstr:
		move.b	#$A,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_3FA:
TrapvInstr:
		move.b	#$C,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_402:
PrivilegeViol:
		move.b	#$E,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_40A:
Trace:
		move.b	#$10,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_412:
Line1010Emu:
		move.b	#$12,(Object_Respawn_Table+$44).w
		addq.l	#2,2(sp)
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_41E:
Line1111Emu:
		move.b	#$14,(Object_Respawn_Table+$44).w
		addq.l	#2,2(sp)
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_42A:
ErrorExcept:
		move.b	#0,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ===========================================================================
; sub_432:
ErrorMsg_TwoAddresses:
		move	#$2700,sr
		addq.w	#2,sp
		move.l	(sp)+,(Object_Respawn_Table+$40).w
		addq.w	#2,sp
		movem.l	d0-a7,(Object_Respawn_Table).w
		bsr.w	ShowErrorMsg
		move.l	2(sp),d0
		bsr.w	ShowErrAddress
		move.l	(Object_Respawn_Table+$40).w,d0
		bsr.w	ShowErrAddress
		bra.s	ErrorMsg_Wait
; ---------------------------------------------------------------------------
; loc_45A:
ErrorMessage:
		move	#$2700,sr
		movem.l	d0-a7,(Object_Respawn_Table).w
		bsr.w	ShowErrorMsg
		move.l	2(sp),d0
		bsr.w	ShowErrAddress
; loc_470:
ErrorMsg_Wait:
		bsr.w	Error_WaitForC
		movem.l	(Object_Respawn_Table).w,d0-a7
		move	#$2300,sr
		rte
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load an error message
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_480:
ShowErrorMsg:
		lea	(VDP_data_port).l,a6
		move.l	#$78000003,(VDP_control_port).l
		lea	(ArtUnc_DbgText).l,a0
		move.w	#$27F,d1
; loc_49A;
Error_LoadGfx:
		move.w	(a0)+,(a6)
		dbf	d1,Error_LoadGfx
		moveq	#0,d0
		move.b	(Object_Respawn_Table+$44).w,d0	; load error code
		move.w	ErrorTextTbl(pc,d0.w),d0
		lea	ErrorTextTbl(pc,d0.w),a0
		move.l	#$46040003,(VDP_control_port).l	; position on screen
		moveq	#$13-1,d1			; number of characters
; loc_4BA:
Error_LoopChars:
		moveq	#0,d0
		move.b	(a0)+,d0
		addi.w	#$790,d0
		move.w	d0,(a6)
		dbf	d1,Error_LoopChars	; repeat for number of characters
		rts
; End of function ShowErrorMsg

; ===========================================================================
ErrorTextTbl:	dc.w ErrTxt_Except-ErrorTextTbl
		dc.w ErrTxt_BusError-ErrorTextTbl
		dc.w ErrTxt_AddressError-ErrorTextTbl
		dc.w ErrTxt_IllegalInstr-ErrorTextTbl
		dc.w ErrTxt_ZeroDivide-ErrorTextTbl
		dc.w ErrTxt_ChkInstr-ErrorTextTbl
		dc.w ErrTxt_TrapvInstr-ErrorTextTbl
		dc.w ErrTxt_PrivilegeViol-ErrorTextTbl
		dc.w ErrTxt_Trace-ErrorTextTbl
		dc.w ErrTxt_Line1010Emu-ErrorTextTbl
		dc.w ErrTxt_Line1111Emu-ErrorTextTbl
ErrTxt_Except:		dc.b "ERROR EXCEPTION    "
ErrTxt_BusError:	dc.b "BUS ERROR          "
ErrTxt_AddressError:	dc.b "ADDRESS ERROR      "
ErrTxt_IllegalInstr:	dc.b "ILLEGAL INSTRUCTION"
ErrTxt_ZeroDivide:	dc.b "@ERO DIVIDE        " ; '@' displays as 'Z' in-game
ErrTxt_ChkInstr:	dc.b "CHK INSTRUCTION    "
ErrTxt_TrapvInstr:	dc.b "TRAPV INSTRUCTION  "
ErrTxt_PrivilegeViol:	dc.b "PRIVILEGE VIOLATION"
ErrTxt_Trace:		dc.b "TRACE              "
ErrTxt_Line1010Emu:	dc.b "LINE 1010 EMULATOR "
ErrTxt_Line1111Emu:	dc.b "LINE 1111 EMULATOR "
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load address of where the error occurred
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_5B2:
ShowErrAddress:
		move.w	#$7CA,(a6)
		moveq	#7,d2

-		rol.l	#4,d0
		bsr.s	ShowErrDigit
		dbf	d2,-
		rts
; ---------------------------------------------------------------------------
; loc_5C2:
ShowErrDigit:
		move.w	d0,d1
		andi.w	#$F,d1
		cmpi.w	#$A,d1
		bcs.s	ShowErrDigit_NoOverflow
		addq.w	#7,d1
; loc_5d0:
ShowErrDigit_NoOverflow:
		addi.w	#$7C0,d1
		move.w	d1,(a6)
		rts
; ---------------------------------------------------------------------------
; loc_5D8:
Error_WaitForC:
		bsr.w	ReadJoypads
		cmpi.b	#$20,(Ctrl_1_Press).w
		bne.w	Error_WaitForC
		rts
; End of function ShowErrAddress

; ===========================================================================
; ---------------------------------------------------------------------------
; Uncompressed art
; Text for level select and error messages	; ArtUnc_5E8: Art_Text:
ArtUnc_DbgText:	binclude	"art/uncompressed/Error message and level select text.bin"
		even

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; vertical and horizontal interrupt handlers
; VERTICAL INTERRUPT HANDLER:
; loc_B08: VBlank:
V_int:
		movem.l	d0-a6,-(sp)
		tst.b	(Vint_routine).w
		beq.w	Vint_Lag

loc_B14:
		move.w	(VDP_control_port).l,d0
		andi.w	#8,d0
		beq.s	loc_B14
		move.l	#$40000010,(VDP_control_port).l
		move.l	(Vscroll_Factor).w,(VDP_data_port).l
		btst	#6,(Graphics_Flags).w
		beq.s	loc_B42
		move.w	#$700,d0

loc_B3E:
		dbf	d0,loc_B3E

loc_B42:
		move.b	(Vint_routine).w,d0
		move.b	#VintID_Lag,(Vint_routine).w
		move.w	#1,(Hint_flag).w
		andi.w	#$3E,d0
		move.w	Vint_SwitchTbl(pc,d0.w),d0
		jsr	Vint_SwitchTbl(pc,d0.w)
; loc_B5E:
VintRet:
		addq.l	#1,(Vint_runcount).w
		movem.l	(sp)+,d0-a6
		rte
; ===========================================================================
; off_B68:
Vint_SwitchTbl:		offsetTable
Vint_Lag_ptr:		offsetTableEntry.w Vint_Lag
Vint_SEGA_ptr:		offsetTableEntry.w Vint_SEGA
Vint_Title_ptr:		offsetTableEntry.w Vint_Title
Vint_Unused6_ptr:	offsetTableEntry.w Vint_Unused6
Vint_Level_ptr:		offsetTableEntry.w Vint_Level
Vint_S1SS_ptr:		offsetTableEntry.w Vint_S1SS
Vint_TitleCard_ptr:	offsetTableEntry.w Vint_TitleCard
Vint_UnusedE_ptr:	offsetTableEntry.w Vint_UnusedE
Vint_Pause_ptr:		offsetTableEntry.w Vint_Pause
Vint_Fade_ptr:		offsetTableEntry.w Vint_Fade
Vint_PCM_ptr:		offsetTableEntry.w Vint_PCM
Vint_SSResults_ptr:	offsetTableEntry.w Vint_SSResults
Vint_TitleCardDup_ptr:	offsetTableEntry.w Vint_TitleCard
; ===========================================================================
; loc_B82: VintSub00:
Vint_Lag:
		cmpi.b	#GameModeID_TitleCard|GameModeID_Level,(Game_Mode).w
		beq.s	loc_BBC
		cmpi.b	#GameModeID_Demo,(Game_Mode).w
		beq.s	loc_BBC
		cmpi.b	#GameModeID_Level,(Game_Mode).w
		beq.s	loc_BBC
		stopZ80
		jsr	(sndDriverInput).l
		startZ80
		bra.s	VintRet

loc_BBC:
		tst.b	(Water_flag).w
		beq.w	Vint0_NoWater
		move.w	(VDP_control_port).l,d0
		btst	#6,(Graphics_Flags).w
		beq.s	loc_BDA
		move.w	#$700,d0

loc_Bd6:
		dbf	d0,loc_Bd6

loc_BDA:
		move.w	#1,(Hint_flag).w
		stopZ80
		tst.b	(Water_fullscreen_flag).w
		bne.s	loc_C1E
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		bra.s	loc_C42
; ---------------------------------------------------------------------------

loc_C1E:
		dma68kToVDP Underwater_palette,$0000,palette_line_size*4,CRAM

loc_C42:
		move.w	(Hint_counter_reserve).w,(a5)
		move.w	#$8230,(VDP_control_port).l
		jsr	(sndDriverInput).l
		startZ80
		bra.w	VintRet
; ---------------------------------------------------------------------------
; loc_C60:
Vint0_NoWater:
		move.w	(VDP_control_port).l,d0
		move.l	#$40000010,(VDP_control_port).l
		move.l	(Vscroll_Factor).w,(VDP_data_port).l
		btst	#6,(Graphics_Flags).w
		beq.s	loc_C88
		move.w	#$700,d0

loc_C84:
		dbf	d0,loc_C84

loc_C88:
		move.w	#1,(Hint_flag).w
		move.w	(Hint_counter_reserve).w,(VDP_control_port).l
		move.w	#$8230,(VDP_control_port).l
		move.l	(Vscroll_Factor_P2).w,(Vscroll_Factor_P2_HInt).w
		stopZ80
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		jsr	(sndDriverInput).l
		startZ80
		bra.w	VintRet
; ===========================================================================
; loc_CEC: VintSub2:
Vint_SEGA:
		bsr.w	Do_ControllerPal
		tst.w	(Demo_Time_left).w
		beq.w	return_CFC
		subq.w	#1,(Demo_Time_left).w

return_CFC:
		rts
; ===========================================================================
; loc_CFE: VintSub14:
Vint_PCM:
		stopZ80
		bsr.w	ReadJoypads
		startZ80
		tst.w	(Demo_Time_left).w
		beq.w	return_d28
		subq.w	#1,(Demo_Time_left).w

return_d28:
		rts
; ===========================================================================
; loc_d2A: VintSub4:
Vint_Title:
		bsr.w	Do_ControllerPal
		bsr.w	ProcessDPLC
		tst.w	(Demo_Time_left).w
		beq.w	return_d3E
		subq.w	#1,(Demo_Time_left).w

return_d3E:
		rts
; ===========================================================================
; loc_d40: VintSub6:
Vint_Unused6:
		bsr.w	Do_ControllerPal
		rts
; ===========================================================================
; loc_d46: VintSub10:
Vint_Pause:
		cmpi.b	#GameModeID_SpecialStage,(Game_Mode).w	; is this the Special Stage?
		beq.w	Vint_S1SS	; if yes,branch
; loc_d50: VintSub8:
Vint_Level:
		stopZ80
		bsr.w	ReadJoypads
		tst.b	(Water_fullscreen_flag).w
		bne.s	loc_D92
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		bra.s	loc_DB6
; ---------------------------------------------------------------------------

loc_D92:
		dma68kToVDP Underwater_palette,$0000,palette_line_size*4,CRAM

loc_DB6:
		move.w	(Hint_counter_reserve).w,(a5)
		move.w	#$8230,(VDP_control_port).l
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		bsr.w	ProcessDMAQueue
		jsr	(sndDriverInput).l
		startZ80
		movem.l	(Camera_RAM).w,d0-d7
		movem.l	d0-d7,(Camera_RAM_copy).w
		movem.l	(Camera_X_pos_P2).w,d0-d7
		movem.l	d0-d7,(Camera_P2_copy).w
		movem.l	(Scroll_flags).w,d0-d3
		movem.l	d0-d3,(Scroll_flags_copy).w
		move.l	(Vscroll_Factor_P2).w,(Vscroll_Factor_P2_HInt).w
		cmpi.b	#92,(Hint_counter_reserve+1).w
		bcc.s	Do_Updates
		move.b	#1,(Do_Updates_in_H_int).w
		rts

; ---------------------------------------------------------------------------
; Subroutine to run a demo for an amount of time
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_E56: DemoTime:
Do_Updates:
		bsr.w	LoadTilesAsYouMove
		jsr	(HudUpdate).l
		bsr.w	ProcessDPLC2
		tst.w	(Demo_Time_left).w
		beq.w	return_E70
		subq.w	#1,(Demo_Time_left).w

return_E70:
		rts
; End of function Do_Updates

; ===========================================================================
; loc_E72: VintSubA:
Vint_S1SS:
		stopZ80
		bsr.w	ReadJoypads
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		bsr.w	ProcessDMAQueue
		jsr	(sndDriverInput).l
		startZ80
		bsr.w	S1_Pal_Cycle_Special_Stage
		tst.w	(Demo_Time_left).w
		beq.w	return_F16
		subq.w	#1,(Demo_Time_left).w

return_F16:
		rts
; ===========================================================================
; loc_F18: VintSubC: VintSub16:
Vint_TitleCard:
		stopZ80
		bsr.w	ReadJoypads
		tst.b	(Water_fullscreen_flag).w
		bne.s	loc_F5A
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		bra.s	loc_F7E
; ---------------------------------------------------------------------------

loc_F5A:
		dma68kToVDP Underwater_palette,$0000,palette_line_size*4,CRAM

loc_F7E:
		move.w	(Hint_counter_reserve).w,(a5)
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		bsr.w	ProcessDMAQueue
		jsr	(sndDriverInput).l
		startZ80
		movem.l	(Camera_RAM).w,d0-d7
		movem.l	d0-d7,(Camera_RAM_copy).w
		movem.l	(Scroll_flags).w,d0-d1
		movem.l	d0-d1,(Scroll_flags_copy).w
		bsr.w	LoadTilesAsYouMove
		jsr	(HudUpdate).l
		bsr.w	ProcessDPLC
		rts
; ===========================================================================
; loc_1004: VintSubE:
Vint_UnusedE:
		bsr.w	Do_ControllerPal
		addq.b	#1,(VIntSubE_RunCount).w
		move.b	#VintID_UnusedE,(Vint_routine).w
		rts
; ===========================================================================
; loc_1014: VintSub12:
Vint_Fade:
		bsr.w	Do_ControllerPal
		move.w	(Hint_counter_reserve).w,(a5)
		bra.w	ProcessDPLC
; ===========================================================================
; loc_1020: VintSub16:
Vint_SSResults:
		stopZ80
		bsr.w	ReadJoypads
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		jsr	(sndDriverInput).l
		startZ80
		tst.w	(Demo_Time_left).w
		beq.w	return_10BC
		subq.w	#1,(Demo_Time_left).w

return_10BC:
		rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_10BE:
Do_ControllerPal:
		stopZ80
		bsr.w	ReadJoypads
		tst.b	(Water_fullscreen_flag).w
		bne.s	loc_1100
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		bra.s	loc_1124
; ---------------------------------------------------------------------------

loc_1100:
		dma68kToVDP Underwater_palette,$0000,palette_line_size*4,CRAM

loc_1124:
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		jsr	(sndDriverInput).l
		startZ80
		rts

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; HORIZONTAL INTERRUPT HANDLER:
; loc_117C: HBlank:
H_int:
		tst.w	(Hint_flag).w
		beq.w	return_1226
		tst.w	(Two_player_mode).w
		beq.w	PalToCRAM
		move.w	#0,(Hint_flag).w
		move.l	a5,-(sp)
		move.l	d0,-(sp)

loc_1196:
		move.w	(VDP_control_port).l,d0
		andi.w	#4,d0
		beq.s	loc_1196
		move.w	(VDP_Reg1_val).w,d0
		andi.b	#$BF,d0
		move.w	d0,(VDP_control_port).l
		move.w	#$8228,(VDP_control_port).l
		move.l	#$40000010,(VDP_control_port).l
		move.l	(Vscroll_Factor_P2_HInt).w,(VDP_data_port).l
		stopZ80
		dma68kToVDP Sprite_Table_2,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		startZ80

loc_1208:
		move.w	(VDP_control_port).l,d0
		andi.w	#4,d0
		beq.s	loc_1208
		move.w	(VDP_Reg1_val).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_control_port).l
		move.l	(sp)+,d0
		move.l	(sp)+,a5

return_1226:
		rte
; ---------------------------------------------------------------------------
; loc_1228: H_int_Not2pMode:
PalToCRAM:
		move	#$2700,sr
		move.w	#0,(Hint_flag).w
		movem.l	a0-a1,-(sp)
		lea	(VDP_data_port).l,a1
		lea	(Underwater_palette).w,a0	; load palette from RAM
		move.l	#$C0000000,4(a1)	; set VDP to write to CRAM address $00
	rept 32
		move.l	(a0)+,(a1)	; move palette to CRAM (all 64 colors at once)
	endm
		move.w	#$8ADF,4(a1)	; write %1101 %1111 to register 10 (interrupt every 224th line)
		movem.l	(sp)+,a0-a1
		tst.b	(Do_Updates_in_H_int).w
		bne.s	loc_129A
		rte
; ---------------------------------------------------------------------------

loc_129A:
		clr.b	(Do_Updates_in_H_int).w
		movem.l	d0-a6,-(sp)
		bsr.w	Do_Updates
		movem.l	(sp)+,d0-a6
		rte

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; game code

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Input our music/sound selection to the sound driver.
; loc_12AC:
sndDriverInput:
		lea	(Sound_Queue&$FFFFFF).l,a0
		lea	(Z80_RAM+zStack).l,a1

		cmpi.b	#$80,zVar.QueueToPlay(a1)	; is the sound driver still processing a request?
		bne.s	loc_12E0	; if yes,branch

		_move.b	SoundQueue.Music0(a0),d0
		beq.s	loc_12E0
		_clr.b	SoundQueue.Music0(a0)
		move.b	d0,d1
		subi.b	#MusID_Pause,d1
		bcs.s	loc_12DC
		addi.b	#$7F,d1
		move.b	d1,zVar.StopMusic(a1)
		bra.s	loc_12E0

loc_12DC:
		move.b	d0,zVar.QueueToPlay(a1)

loc_12E0:
		moveq	#4-1,d1	; this is one digit too high,meaning the first byte of the voice table pointer is overwritten

loc_12E2:
		move.b	SoundQueue.SFX0(a0,d1.w),d0
		beq.s	loc_12F6
		tst.b	zVar.Queue0(a1,d1.w)
		bne.s	loc_12F6
		clr.b	SoundQueue.SFX0(a0,d1.w)
		move.b	d0,zVar.Queue0(a1,d1.w)

loc_12F6:
		dbf	d1,loc_12E2
		rts
; End of function sndDriverInput

; ---------------------------------------------------------------------------
; Subroutine to initialize joypads
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_12FC:
JoypadInit:
		stopZ80
		moveq	#$40,d0
		move.b	d0,(HW_Port_1_Control).l	; init port 1 (joypad 1)
		move.b	d0,(HW_Port_2_Control).l	; init port 2 (joypad 2)
		move.b	d0,(HW_Expansion_Control).l	; init port 3 (expansion/extra)
		startZ80
		rts
; End of function JoypadInit

; ---------------------------------------------------------------------------
; Subroutine to read joypad input,and send it to the RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_132C:
ReadJoypads:
		lea	(Ctrl_1).w,a0		; address where joypad states are written
		lea	(HW_Port_1_Data).l,a1	; first joypad port
		bsr.s	Joypad_Read		; do the first joypad
		addq.w	#2,a1			; do the second joypad
; loc_133A:
Joypad_Read:
		move.b	#0,(a1)
		nop
		nop
		move.b	(a1),d0
		lsl.b	#2,d0
		andi.b	#$C0,d0
		move.b	#$40,(a1)
		nop
		nop
		move.b	(a1),d1
		andi.b	#$3F,d1
		or.b	d1,d0
		not.b	d0
		move.b	(a0),d1
		eor.b	d0,d1
		move.b	d0,(a0)+
		and.b	d0,d1
		move.b	d1,(a0)+
		rts
; End of function ReadJoypads

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1368: VDPRegSetup:
VDPSetupGame:
		lea	(VDP_control_port).l,a0
		lea	(VDP_data_port).l,a1
		lea	(VDPSetupArray).l,a2
		moveq	#bytesToWcnt(VDPSetupArray_End-VDPSetupArray),d7
; loc_137C: VDPRegSetup_Loop:
-		move.w	(a2)+,(a0)
		dbf	d7,-

		move.w	(VDPSetupArray+2).l,d0
		move.w	d0,(VDP_Reg1_val).w
		move.w	#$8A00+224-1,(Hint_counter_reserve).w	; H-INT every 224th scanline
		moveq	#0,d0

		move.l	#$40000010,(VDP_control_port).l
		move.w	d0,(a1)
		move.w	d0,(a1)

		move.l	#$C0000000,(VDP_control_port).l

		move.w	#bytesToWcnt(palette_line_size*4),d7
; loc_13B0: VDPRegSetup_ClearCRAM:
-		move.w	d0,(a1)
		dbf	d7,-

		clr.l	(Vscroll_Factor).w
		clr.l	(unk_F61A).w
		move.l	d1,-(sp)
		; fill entire VRAM with 0
		lea	(VDP_control_port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$94FF93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$40000080,(a5)
		move.w	#0,(VDP_data_port).l
; loc_13E2: VDPRegSetup_DMAWait:
-		move.w	(a5),d1
		btst	#1,d1
		bne.s	-
		move.w	#$8F02,(a5)
		move.l	(sp)+,d1
		rts
; End of function VDPSetupGame

; ===========================================================================
; loc_13F2: VDPRegSetup_Array:
VDPSetupArray:
		dc.w	$8004
		dc.w	$8134
		dc.w	$8230
		dc.w	$8328
		dc.w	$8407
		dc.w	$857C
		dc.w	$8600
		dc.w	$8700
		dc.w	$8800
		dc.w	$8900
		dc.w	$8A00
		dc.w	$8B00
		dc.w	$8C81
		dc.w	$8d3F
		dc.w	$8E00
		dc.w	$8F02
		dc.w	$9001
		dc.w	$9100
		dc.w	$9200
VDPSetupArray_End:

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1418:
ClearScreen:
		stopZ80
		lea	(VDP_control_port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$940F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(VDP_data_port).l
; loc_144C: ClearScreen_DMAWait:
-		move.w	(a5),d1
		btst	#1,d1
		bne.s	-
		move.w	#$8F02,(a5)

		lea	(VDP_control_port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$940F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$60000083,(a5)
		move.w	#0,(VDP_data_port).l
; loc_147A: ClearScreen_DMA2Wait:
-		move.w	(a5),d1
		btst	#1,d1
		bne.s	-
		move.w	#$8F02,(a5)

		clr.l	(Vscroll_Factor).w
		clr.l	(unk_F61A).w

		; These '+4's shouldn't be here; clearRAM accidentally clears an additional 4 bytes
		clearRAM Sprite_Table,Sprite_Table_End+$80+4
		clearRAM Horiz_Scroll_Buf,Horiz_Scroll_Buf_End_Padded+4

		startZ80
		rts
; ===========================================================================
; loc_14B8:
JmpTo_SoundDriverLoad: ; JmpTo
		nop
		jmp	(SoundDriverLoad).l
		; strange,seemingly leftover Sonic 1 sound driver code isn't here...
		; I wonder if it was used whenever the code was actually meant for
		; whenver the sound driver was uncompressed

; ---------------------------------------------------------------------------
; Sound queues; they're used interchangably,however symbol tables in
; the Nick Arcade build confirm they are specific to music and sfx
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_14C0:
PlayMusic:
		move.b	d0,(Sound_Queue.Music0).w
		rts
; End of function PlayMusic


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_14C6:
PlaySound:
		move.b	d0,(Sound_Queue.SFX0).w
		rts
; End of function PlaySound


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Unreferenced sound queue,but is indeed functional unlike Sonic 1
; sub_14CC:
PlaySound2:
		move.b	d0,(Sound_Queue.SFX1).w
		rts
; End of function PlaySound2

; ---------------------------------------------------------------------------
; Subroutine to pause the game
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_14d2: Pause:
PauseGame:
		nop
		tst.b	(Life_count).w
		beq.w	Unpause
		tst.w	(Game_paused).w
		bne.s	+
		btst	#7,(Ctrl_1_Press).w
		beq.s	Pause_DoNothing
+
		move.w	#1,(Game_paused).w
		move.b	#MusID_Pause,(Sound_Queue.Music0).w
; loc_14F6:
Pause_Loop:
		move.b	#VintID_Pause,(Vint_routine).w
		bsr.w	WaitForVint
		tst.b	(Slow_motion_flag).w
		beq.s	Pause_ChkStart
		btst	#6,(Ctrl_1_Press).w
		beq.s	Pause_ChkBC
		move.b	#GameModeID_TitleScreen,(Game_Mode).w
		nop
		bra.s	Pause_Resume
; ===========================================================================
; loc_1518:
Pause_ChkBC:
		btst	#4,(Ctrl_1_Held).w
		bne.s	Pause_SlowMo
		btst	#5,(Ctrl_1_Press).w
		bne.s	Pause_SlowMo
; loc_1528:
Pause_ChkStart:
		btst	#7,(Ctrl_1_Press).w
		beq.s	Pause_Loop
; loc_1530:
Pause_Resume:
		move.b	#MusID_Unpause,(Sound_Queue.Music0).w
; loc_1536:
Unpause:
		move.w	#0,(Game_paused).w
; return_153C:
Pause_DoNothing:
		rts
; ===========================================================================
; loc_153E:
Pause_SlowMo:
		move.w	#1,(Game_paused).w
		move.b	#MusID_Unpause,(Sound_Queue.Music0).w
		rts
; End of function PauseGame

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to transfer a plane map to VRAM
; ---------------------------------------------------------------------------

; control register:
;    Cd1 Cd0 A13 A12 A11 A10 A09 A08     (d31-d24)
;    A07 A06 A05 A04 A03 A02 A01 A00     (d23-d16)
;     ?   ?   ?   ?   ?   ?   ?   ?      (d15-D8)
;    Cd5 Cd4 Cd3 Cd2  ?   ?  A15 A14     (d7-d0)
;
;	A00-A15 - address
;	Cd0-Cd3 - code
;	Cd4 - 1 if VRAM copy DMA mode. 0 otherwise.
;	Cd5 - DMA operation
;
;	Bits Cd3-Cd0:
;	0000 - VRAM read
;	0001 - VRAM write
;	0011 - CRAM write
;	0100 - VSRAM read
;	0101 - VSRAM write
;	1000 - CRAM read
;
; d0 = control register
; d1 = width
; d2 = heigth
; a1 = source address

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_154C: ShowVDPGraphics: PlaneMapToVRAM:
PlaneMapToVRAM_H40:
		lea	(VDP_data_port).l,a6
		move.l	#$800000,d4

-		move.l	d0,VDP_control_port-VDP_data_port(a6)
		move.w	d1,d3

-		move.w	(a1)+,(a6)	; from source address to destination in VDP
		dbf	d3,-		; next tile
		add.l	d4,d0		; increase destination address by $80 (1 line)
		dbf	d2,--		; next line
		rts
; End of function PlaneMapToVRAM_H40

; ---------------------------------------------------------------------------
; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
; to be issued the next time ProcessDMAQueue is called.
; Can be called a maximum of 18 times before the buffer needs to be cleared
; by issuing the commands (this subroutine DOES check for overflow)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_154C: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
QueueDMATransfer:
		movea.l	(VDP_Command_Buffer_Slot).w,a1
		cmpa.w	#VDP_Command_Buffer_Slot,a1
		beq.s	QueueDMATransfer_Done	; return if there's no more room in the buffer

		; piece together some VDP commands and store them for later...
		move.w	#$9300,d0	; command to specify DMA transfer length & $00FF
		move.b	d3,d0
		move.w	d0,(a1)+	; store command

		move.w	#$9400,d0	; command to specify DMA transfer length & $FF00
		lsr.w	#8,d3
		move.b	d3,d0
		move.w	d0,(a1)+	; store command

		move.w	#$9500,d0	; command to specify source address & $0001FE
		lsr.l	#1,d1
		move.b	d1,d0
		move.w	d0,(a1)+	; store command

		move.w	#$9600,d0	; command to specify source address & $01FE00
		lsr.l	#8,d1
		move.b	d1,d0
		move.w	d0,(a1)+	; store command

		move.w	#$9700,d0	; command to specify source address & $FE0000
		lsr.l	#8,d1
		move.b	d1,d0
		move.w	d0,(a1)+	; store command

		andi.l	#$FFFF,d2	; command to specify destination address and begin DMA
		lsl.l	#2,d2
		lsr.w	#2,d2
		swap	d2
		ori.l	#$40000080,d2	; set bits to specify VRAM transfer
		move.l	d2,(a1)+	; store command

		move.l	a1,(VDP_Command_Buffer_Slot).w	; set the next free slot address
		cmpa.w	#VDP_Command_Buffer_Slot,a1
		beq.s	QueueDMATransfer_Done	; return if there's no more room in the buffer
		move.w	#0,(a1)			; put a stop token at the end of the used part of the buffer
; loc_15C8:
QueueDMATransfer_Done:
		rts
; End of function QueueDMATransfer

; ---------------------------------------------------------------------------
; Subroutine for issuing all VDP commands that were queued
; (by earlier calls to QueueDMATransfer)
; Resets the queue when it's done
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_15CA: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
ProcessDMAQueue:
		lea	(VDP_control_port).l,a5
		lea	(VDP_Command_Buffer).w,a1
; loc_15d4:
ProcessDMAQueue_Loop:
		move.w	(a1)+,d0
		beq.s	ProcessDMAQueue_Done	; branch if we reached a stop token
		; issue a set of VDP commands
		move.w	d0,(a5)			; transfer length
		move.w	(a1)+,(a5)		; transfer length
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; destination
		move.w	(a1)+,(a5)		; destination
		cmpa.w	#VDP_Command_Buffer_Slot,a1
		bne.s	ProcessDMAQueue_Loop	; loop if we haven't reached end of buffer
; loc_15EC:
ProcessDMAQueue_Done:
		move.w	#0,(VDP_Command_Buffer).w
		move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
		rts
; End of function ProcessDMAQueue

; ---------------------------------------------------------------------------
; START OF NEMESIS DECOMPRESSOR

; For format explanation see http://info.sonicretro.org/Nemesis_compression
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Nemesis decompression to VRAM
; loc_15FC:
NemDec:
		movem.l	d0-d7/a0/a1/a3-a5,-(sp)
		lea	(NemDec_Output).l,a3
		lea	(VDP_data_port).l,a4
		bra.s	loc_1618

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Nemesis decompression to RAM
; input: a4 = starting address of destination
; loc_160E:
NemDecToRAM:
		movem.l	d0-d7/a0/a1/a3-a5,-(sp)
		lea	(NemDec_OutputRAM).l,a3

loc_1618:
		lea	(Decomp_Buffer).w,a1
		move.w	(a0)+,d2
		lsl.w	#1,d2
		bcc.s	loc_1626
		adda.w	#$A,a3
loc_1626:
		lsl.w	#2,d2
		move.w	d2,a5
		moveq	#8,d3
		moveq	#0,d2
		moveq	#0,d4
		bsr.w	NemDec4
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(a0)+,d5
		move.w	#$10,d6
		bsr.s	loc_1646
		movem.l	(sp)+,d0-d7/a0/a1/a3-a5
		rts
loc_1646:
		move.w	d6,d7
		subq.w	#8,d7
		move.w	d5,d1
		lsr.w	d7,d1
		cmpi.b	#$FC,d1
		bcc.s	loc_1692
		andi.w	#$FF,d1
		add.w	d1,d1
		move.b	(a1,d1.w),d0
		ext.w	d0
		sub.w	d0,d6
		cmpi.w	#9,d6
		bcc.s	loc_166E
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
loc_166E:
		move.b	1(a1,d1.w),d1
		move.w	d1,d0
		andi.w	#$F,d1
		andi.w	#$F0,d0
loc_167C:
		lsr.w	#4,d0
loc_167E:
		lsl.l	#4,d4
		or.b	d1,d4
		subq.w	#1,d3
		bne.s	loc_168C
		jmp	(a3)
NemDec3: ; loc_1688:
		moveq	#0,d4
		moveq	#8,d3
loc_168C:
		dbf	d0,loc_167E
		bra.s	loc_1646
loc_1692:
		subq.w	#6,d6
		cmpi.w	#9,d6
		bcc.s	loc_16A0
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
loc_16A0:
		subq.w	#7,d6
		move.w	d5,d1
		lsr.w	d6,d1
		move.w	d1,d0
		andi.w	#$F,d1
		andi.w	#$70,d0
		cmpi.w	#9,d6
		bcc.s	loc_167C
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
		bra.s	loc_167C
NemDec_Output: ; loc_16BE:
		move.l	d4,(a4)
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemDec3
		rts
;NemDec_Output_XOR: ; loc_16C8:
		eor.l	d4,d2
		move.l	d2,(a4)
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemDec3
		rts
NemDec_OutputRAM: ; loc_16d4:
		move.l	d4,(a4)+
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemDec3
		rts
;NemDec_OutputRAM_XOR: ; loc_16DE:
		eor.l	d4,d2
		move.l	d2,(a4)+
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemDec3
		rts
NemDec4: ; loc_16EA:
		move.b	(a0)+,d0
loc_16EC:
		cmpi.b	#$FF,d0
		bne.s	loc_16F4
		rts
loc_16F4:
		move.w	d0,d7
loc_16F6:
		move.b	(a0)+,d0
		cmpi.b	#$80,d0
		bcc.s	loc_16EC
		move.b	d0,d1
		andi.w	#$F,d7
		andi.w	#$70,d1
		or.w	d1,d7
		andi.w	#$F,d0
		move.b	d0,d1
		lsl.w	#8,d1
		or.w	d1,d7
		moveq	#8,d1
		sub.w	d0,d1
		bne.s	loc_1724
		move.b	(a0)+,d0
		add.w	d0,d0
		move.w	d7,(a1,d0.w)
		bra.s	loc_16F6
loc_1724:
		move.b	(a0)+,d0
		lsl.w	d1,d0
		add.w	d0,d0
		moveq	#1,d5
		lsl.w	d1,d5
		subq.w	#1,d5
loc_1730:
		move.w	d7,(a1,d0.w)
		addq.w	#2,d0
		dbf	d5,loc_1730
		bra.s	loc_16F6

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (aka to queue pattern load requests)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; ARGUMENTS
; d0 = index of PLC list (see ArtLoadCues)

; NOTICE: This subroutine does not check for buffer overruns. The programmer
;	  (or hacker) is responsible for making sure that no more than
;	  16 (well,15 because of a bug in ProcessDPLC_Pop) load requests
;         are copied into the buffer.
;    _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
;         (or if you change the size of Plc_Buffer,the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)

; sub_173C:
LoadPLC:
		movem.l	a1-a2,-(sp)
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		lea	(Plc_Buffer).w,a2

loc_1754:
		tst.l	(a2)
		beq.s	loc_175C	; if it's zero,exit this loop
		addq.w	#6,a2
		bra.s	loc_1754

loc_175C:
		move.w	(a1)+,d0
		bmi.s	loc_1768	; if it's negative,skip the next loop

loc_1760:
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+
		dbf	d0,loc_1760

loc_1768:
		movem.l (sp)+,a1-a2
		rts
; End of function LoadPLC

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (but after we clear it)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_176E:
LoadPLC2:
		movem.l	a1-a2,-(sp)
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		bsr.s	ClearPLC
		lea	(Plc_Buffer).w,a2
		move.w	(a1)+,d0
		bmi.s	loc_1794	; if it's negative,skip the next loop

loc_178C:
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+
		dbf	d0,loc_178C

loc_1794:
		movem.l	(sp)+,a1-a2
		rts
; End of function LoadPLC2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Clear the pattern load queue ($FFF680 - $FFF700)
; loc_179A:
ClearPLC:
		lea	(Plc_Buffer).w,a2

		moveq	#bytesToLcnt(Plc_Buffer_End-Plc_Buffer),d0
-		clr.l	(a2)+
		dbf	d0,-
		rts
; End of function ClearPLC

; ---------------------------------------------------------------------------
; Subroutine to use graphics listed in a pattern load cue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_17A8: RunPLC:
RunPLC_RAM:
		tst.l	(Plc_Buffer).w
		beq.s	return_17FC
		tst.w	(Plc_Buffer_Reg18).w
		bne.s	return_17FC
		move.l	(Plc_Buffer).w,a0
		lea	NemDec_Output(pc),a3
		nop
		lea	(Decomp_Buffer).w,a1
		move.w	(a0)+,d2
		bpl.s	loc_17CA
		adda.w	#$A,a3

loc_17CA:
		andi.w	#$7FFF,d2
		move.w	d2,(Plc_Buffer_Reg18).w
		bsr.w	NemDec4
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(a0)+,d5
		moveq	#$10,d6
		moveq	#0,d0
		move.l	a0,(Plc_Buffer).w
		move.l	a3,(Plc_Buffer_Reg0).w
		move.l	d0,(Plc_Buffer_Reg4).w
		move.l	d0,(Plc_Buffer_Reg8).w
		move.l	d0,(Plc_Buffer_RegC).w
		move.l	d5,(Plc_Buffer_Reg10).w
		move.l	d6,(Plc_Buffer_Reg14).w

return_17FC:
		rts
; End of function RunPLC_RAM


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Process one PLC from the queue
; loc_17FE:
ProcessDPLC:
		tst.w	(Plc_Buffer_Reg18).w
		beq.w	return_1896
		move.w	#9,(Plc_Buffer_Reg1A).w
		moveq	#0,d0
		move.w	(Plc_Buffer+4).w,d0
		addi.w	#$120,(Plc_Buffer+4).w
		bra.s	ProcessDPLC_Main

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Process one PLC from the queue
; loc_181A:
ProcessDPLC2:
		tst.w	(Plc_Buffer_Reg18).w
		beq.s	return_1896
		move.w	#3,(Plc_Buffer_Reg1A).w
		moveq	#0,d0
		move.w	(Plc_Buffer+4).w,d0
		addi.w	#$60,(Plc_Buffer+4).w
; loc_1832:
ProcessDPLC_Main:
		lea	(VDP_control_port).l,a4
		lsl.l	#2,d0	; setup target VRAM address
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,(a4)
		subq.w	#4,a4
		move.l	(Plc_Buffer).w,a0
		move.l	(Plc_Buffer_Reg0).w,a3
		move.l	(Plc_Buffer_Reg4).w,d0
		move.l	(Plc_Buffer_Reg8).w,d1
		move.l	(Plc_Buffer_RegC).w,d2
		move.l	(Plc_Buffer_Reg10).w,d5
		move.l	(Plc_Buffer_Reg14).w,d6
		lea	(Decomp_Buffer).w,a1

loc_1866:
		move.w	#8,a5
		bsr.w	NemDec3
		subq.w	#1,(Plc_Buffer_Reg18).w
		beq.s	ProcessDPLC_Pop
		subq.w	#1,(Plc_Buffer_Reg1A).w
		bne.s	loc_1866
		move.l	a0,(Plc_Buffer).w
		move.l	a3,(Plc_Buffer_Reg0).w
		move.l	d0,(Plc_Buffer_Reg4).w
		move.l	d1,(Plc_Buffer_Reg8).w
		move.l	d2,(Plc_Buffer_RegC).w
		move.l	d5,(Plc_Buffer_Reg10).w
		move.l	d6,(Plc_Buffer_Reg14).w

return_1896:
		rts
; ===========================================================================
; Pop one request off the buffer so that the next one can be filled,except
; queue 16 can't be used due to a bug; link to the fix below:
; https://forums.sonicretro.org/index.php?threads/how-to-fix-pattern-load-cues-queue-shifting-bug.28339/
; loc_1898:
ProcessDPLC_Pop:
		lea	(Plc_Buffer).w,a0

		moveq	#bytesToLcnt(Plc_Buffer_Only_End-Plc_Buffer-6),d0
-		move.l	6(a0),(a0)+
		dbf	d0,-
		rts
; End of function ProcessDPLC

; ---------------------------------------------------------------------------
; Subroutine to execute a pattern load cue directly from the ROM
; rather than loading them into the queue first
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_18A8:
RunPLC_ROM:
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,d1

loc_18BA:
		move.l	(a1)+,a0
		moveq	#0,d0
		move.w	(a1)+,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,(VDP_control_port).l
		bsr.w	NemDec
		dbf	d1,loc_18BA
		rts
; End of function RunPLC_ROM

		include	"Decompression/Enigma Decompression.asm"
		include	"Decompression/Kosinski Decompression.asm"
		include	"Decompression/Kid Chameleon Decompression.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to cycle through selected palette entries
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1F18:
PalCycle_Load:
		bsr.w	PalCycle_SuperSonic
		moveq	#0,d2
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		add.w	d0,d0
		move.w	PalCycle(pc,d0.w),d0
		jmp	PalCycle(pc,d0.w)
; ---------------------------------------------------------------------------
		rts
; ===========================================================================
; off_1F30:
PalCycle:	zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w PalCycle_GHZ
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_WZ
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_Mz
	zoneOffsetTableEntry.w PalCycle_Mz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_HTz
	zoneOffsetTableEntry.w PalCycle_HPz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_OOz
	zoneOffsetTableEntry.w PalCycle_DHz
	zoneOffsetTableEntry.w PalCycle_CNz
	zoneOffsetTableEntry.w PalCycle_CPz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_NGHz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneTableEnd

; ===========================================================================
; return_1F52:
PalCycle_Null:
		rts
; ===========================================================================
; loc_1F54:
PalCycle_GHZ:
		lea	(Pal_GHzCyc).l,a0
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	+ ; rts
		move.w	#7,(PalCycle_Timer).w
		move.w	(PalCycle_Frame).w,d0
		addq.w	#1,(PalCycle_Frame).w
		andi.w	#3,d0
		lsl.w	#3,d0
		move.l	(a0,d0.w),(Normal_palette_line2+6).w
		move.l	4(a0,d0.w),(Normal_palette_line2+$1C).w
+
		rts
; ===========================================================================
; loc_1F82:
PalCycle_WZ:
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	return_1FB0
		move.w	#2,(PalCycle_Timer).w
		lea	(Pal_WzCyc).l,a0
		move.w	(PalCycle_Frame).w,d0
		subq.w	#2,(PalCycle_Frame).w
		bcc.s	loc_1FA4
		move.w	#6,(PalCycle_Frame).w

loc_1FA4:
		lea	(Normal_palette_line4+6).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)

return_1FB0:
		rts
; ===========================================================================
; loc_1FB2:
PalCycle_Mz:
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	loc_1FE2
		move.w	#$11,(PalCycle_Timer).w
		lea	(Pal_MzCyc1).l,a0
		move.w	(PalCycle_Frame).w,d0
		addq.w	#2,(PalCycle_Frame).w
		cmpi.w	#$C,(PalCycle_Frame).w
		bcs.s	loc_1FDA
		move.w	#0,(PalCycle_Frame).w
loc_1FDA:
		lea	(Normal_palette_line3+$A).w,a1
		move.w	(a0,d0.w),(a1)
loc_1FE2:
		subq.w	#1,(PalCycle_Timer2).w
		bpl.s	loc_2016
		move.w	#2,(PalCycle_Timer2).w
		lea	(Pal_MzCyc2).l,a0
		move.w	(PalCycle_Frame2).w,d0
		addq.w	#2,(PalCycle_Frame2).w
		cmpi.w	#6,(PalCycle_Frame2).w
		bcs.s	loc_200A
		move.w	#0,(PalCycle_Frame2).w
loc_200A:
		lea	(Normal_palette_line3+2).w,a1
		move.l	(a0,d0.w),(a1)+
		move.w	4(a0,d0.w),(a1)
loc_2016:
		subq.w	#1,(PalCycle_Timer3).w
		bpl.s	loc_2046
		move.w	#9,(PalCycle_Timer3).w
		lea	(Pal_MzCyc3).l,a0
		move.w	(PalCycle_Frame3).w,d0
		addq.w	#2,(PalCycle_Frame3).w
		cmpi.w	#$14,(PalCycle_Frame3).w
		bcs.s	loc_203E
		move.w	#0,(PalCycle_Frame3).w
loc_203E:
		lea	(Normal_palette_line3+$1E).w,a1
		move.w	(a0,d0.w),(a1)
loc_2046:
		rts
; ===========================================================================

PalCycle_HTz: ; loc_2048: ; $07 - Hill Top Rotating Palette routine
		lea	(Pal_HTzCyc1).l,a0
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	loc_207A
		move.w	#0,(PalCycle_Timer).w
		move.w	(PalCycle_Frame).w,d0
		addq.w	#1,(PalCycle_Frame).w
		andi.w	#$F,d0
		move.b	Pal_HTzCyc2(pc,d0.w),(PalCycle_Timer+1).w
		lsl.w	#3,d0
		move.l	(a0,d0.w),(Normal_palette_line2+6).w
		move.l	4(a0,d0.w),(Normal_palette_line2+$1C).w
loc_207A:
		rts
Pal_HTzCyc2: ; loc_207C:
		dc.w	$B0B,$B0A,$80A,$B0B,$B0B,$D0F,$D0B,$B0B
PalCycle_HPz: ; loc_208C: ; $08 - Hidden Palace Rotating Palette routine
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	loc_20CC
		move.w	#4,(PalCycle_Timer).w
		lea	(Pal_HPzCyc1).l,a0
		move.w	(PalCycle_Frame).w,d0
		subq.w	#2,(PalCycle_Frame).w
		bcc.s	loc_20AE
		move.w	#6,(PalCycle_Frame).w
loc_20AE:
		lea	(Normal_palette_line4+$12).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
		lea	(Pal_HPzCyc2).l,a0
		lea	(Underwater_palette_line4+$12).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
loc_20CC:
		rts
PalCycle_OOz: ; loc_20CE: ; $0A - Oil Ocean Rotating Palette routine
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	loc_20FA
		move.w	#7,(PalCycle_Timer).w
		lea	(Pal_OOzCyc).l,a0
		move.w	(PalCycle_Frame).w,d0
		addq.w	#2,(PalCycle_Frame).w
		andi.w	#6,(PalCycle_Frame).w
		lea	(Normal_palette_line3+$14).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
loc_20FA:
		rts
PalCycle_DHz: ; loc_20FC: ; $0B - Dust Hill Rotating Palette routine
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	loc_2122
		move.w	#1,(PalCycle_Timer).w
		lea	(Pal_DHzCyc).l,a0
		move.w	(PalCycle_Frame).w,d0
		addq.w	#2,(PalCycle_Frame).w
		andi.w	#6,(PalCycle_Frame).w
		move.w	(a0,d0.w),(Normal_palette_line2+$16).w
loc_2122:
		rts
PalCycle_CNz: ; loc_2124: ; $0C - Casino Night Rotating Palette routine
		subq.w	#1,(PalCycle_Timer).w
		bpl.w	loc_21C2
		move.w	#7,(PalCycle_Timer).w
		lea	(Pal_CNzCyc1).l,a0
		move.w	(PalCycle_Frame).w,d0
		addq.w	#2,(PalCycle_Frame).w
		cmpi.w	#6,(PalCycle_Frame).w
		bcs.s	loc_214E
		move.w	#0,(PalCycle_Frame).w
loc_214E:
		lea	(a0,d0.w),a0
		lea	(Normal_palette).w,a1
		_move.w	0(a0),$4A(a1)
		move.w	6(a0),$4C(a1)
		move.w	$C(a0),$4E(a1)
		move.w	$12(a0),$56(a1)
		move.w	$18(a0),$58(a1)
		move.w	$1E(a0),$5A(a1)
		lea	(Pal_CNzCyc2).l,a0
		lea	(a0,d0.w),a0
		_move.w	0(a0),$64(a1)
		move.w	6(a0),$66(a1)
		move.w	$C(a0),$68(a1)
		lea	(Pal_CNzCyc3).l,a0
		move.w	(PalCycle_Frame2).w,d0
		addq.w	#2,(PalCycle_Frame2).w
		cmpi.w	#$1C,(PalCycle_Frame2).w
		bcs.s	loc_21B2
		move.w	#0,(PalCycle_Frame2).w
loc_21B2:
		lea	(Normal_palette_line4+$12).w,a1
		move.w	(a0,d0.w),(a1)+
		move.w	$1C(a0,d0.w),(a1)+
		move.w	$38(a0,d0.w),(a1)+
loc_21C2:
		rts
PalCycle_CPz: ; loc_21C4: ; $0D - Chemical Plant Rotating Palette routine
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	loc_2234
		move.w	#7,(PalCycle_Timer).w
		lea	(Pal_CPzCyc1).l,a0
		move.w	(PalCycle_Frame).w,d0
		addq.w	#6,(PalCycle_Frame).w
		cmpi.w	#$36,(PalCycle_Frame).w
		bcs.s	loc_21EC
		move.w	#0,(PalCycle_Frame).w
loc_21EC:
		lea	(Normal_palette_line4+$18).w,a1
		move.l	(a0,d0.w),(a1)+
		move.w	4(a0,d0.w),(a1)
		lea	(Pal_CPzCyc2).l,a0
		move.w	(PalCycle_Frame2).w,d0
		addq.w	#2,(PalCycle_Frame2).w
		cmpi.w	#$2A,(PalCycle_Frame2).w
		bcs.s	loc_2214
		move.w	#0,(PalCycle_Frame2).w
loc_2214:
		move.w	(a0,d0.w),(Normal_palette_line4+$1E).w
		lea	(Pal_CPzCyc3).l,a0
		move.w	(PalCycle_Frame3).w,d0
		addq.w	#2,(PalCycle_Frame3).w
		andi.w	#$1E,(PalCycle_Frame3).w
		move.w	(a0,d0.w),(Normal_palette_line3+$1E).w
loc_2234:
		rts
PalCycle_NGHz: ; loc_2236: ; $0F - Neo Green Hill Rotating Palette routine
		lea	(Pal_GHzCyc).l,a0
		subq.w	#1,(PalCycle_Timer).w
		bpl.s	loc_2262
		move.w	#5,(PalCycle_Timer).w
		move.w	(PalCycle_Frame).w,d0
		addq.w	#1,(PalCycle_Frame).w
		andi.w	#3,d0
		lsl.w	#3,d0
		lea	(Normal_palette_line3+4).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
loc_2262:
		rts
;Pal_S1TitleCyc: ;loc_2264: ; Left Over - Unused Rotating Palette
		dc.w	$0C42,$0E86,$0ECA,$0EEC,$0EEC,$0C42,$0E86,$0ECA
		dc.w	$0ECA,$0EEC,$0C42,$0E86,$0E86,$0ECA,$0EEC,$0C42
Pal_GHzCyc: ; loc_2284: ; $00 - Green Hill Rotating Palette
		dc.w	$0A86,$0E86,$0EA8,$0ECA,$0ECA,$0A86,$0E86,$0EA8
		dc.w	$0EA8,$0ECA,$0A86,$0E86,$0E86,$0EA8,$0ECA,$0A86
Pal_HTzCyc1: ; loc_22A4: ; $07 - Hill Top Rotating Palette
		dc.w	$000E,$006E,$00AE,$00EE,$00EE,$000E,$006E,$00AE
		dc.w	$02CE,$00EE,$000E,$006E,$006E,$04EE,$08EE,$002E
		dc.w	$004E,$008E,$06EE,$0AEE,$08EE,$002E,$006E,$04EE
		dc.w	$02CE,$00EE,$000E,$006E,$006E,$02CE,$00EE,$000E
		dc.w	$000E,$006E,$00AE,$00EE,$00CE,$000C,$004E,$008E
		dc.w	$006E,$00AC,$000A,$002E,$000C,$004C,$008E,$0008
		dc.w	$000A,$002E,$006E,$00AC,$00CE,$000C,$004E,$008E
		dc.w	$00AE,$00EE,$000E,$006E,$006E,$00AE,$00EE,$000E
Pal_WzCyc: ; loc_2324: ; $02 - Wood Rotating Palette
		dc.w	$0248,$046A,$048C,$06CE,$0248,$046A,$048C,$06CE
Pal_MzCyc1: ; loc_2334: ; $04/$05 - Metropolis Rotating Palette
		dc.w	$0006,$0008,$000A,$000C,$000A,$0008
Pal_MzCyc2: ; loc_2340: ; $04/$05 - Metropolis Rotating Palette
		dc.w	$0422,$0866,$0ECC,$0422,$0866,$0ECC
Pal_MzCyc3: ;loc_234C: ; $04/$05 - Metropolis Rotating Palette
		dc.w	$00A0,$0000,$00EE,$0000,$002E,$0000,$0E2E,$0000
		dc.w	$0E80,$0000
Pal_HPzCyc1: ; loc_2360: ; $08 - Hidden Palace Rotating Palette
		dc.w	$0E44,$0E82,$0EA8,$0EEE,$0E44,$0E82,$0EA8,$0EEE
Pal_HPzCyc2: ; loc_2370: ; $08 - Hidden Palace Rotating Palette
		dc.w	$0E84,$0EA6,$0EC6,$0EE6,$0E84,$0EA6,$0EC6,$0EE6
Pal_OOzCyc: ; loc_2380: ; $0A - Oil Ocean Rotating Palette
		dc.w	$0400,$0602,$0804,$0806,$0400,$0602,$0804,$0806
Pal_DHzCyc: ; loc_2390: ; $0B - Dust Hill Rotating Palette
		dc.w	$000C,$006E,$00CE,$08EE
Pal_CNzCyc1: ; loc_2398: ; $0C - Casino Night Rotating Palette
		dc.w	$000C,$00CC,$004C,$004C,$000C,$00CC,$00CC,$004C
		dc.w	$000C,$00EC,$0080,$00C4,$00C4,$00EC,$0080,$0080
		dc.w	$00C4,$00EC
Pal_CNzCyc2: ; loc_23BC: ; $0C - Casino Night Rotating Palette
		dc.w	$0044,$0088,$00EE,$0088,$00EE,$0044,$00EE,$0044
		dc.w	$0088
Pal_CNzCyc3: ; loc_23CE: ; $0C - Casino Night Rotating Palette
		dc.w	$00EC,$0EEE,$00EA,$00E4,$06C0,$0CC4,$0E80,$0E40
		dc.w	$0E04,$0C08,$0C2E,$000E,$006E,$00AE,$00AE,$00EC
		dc.w	$0EEE,$00EA,$00E4,$06C0,$0CC4,$0E80,$0E40,$0E04
		dc.w	$0C08,$0C2E,$000E,$006E,$00EE,$00AE,$00EC,$0EEE
		dc.w	$00EA,$00E4,$06C0,$0CC4,$0E80,$0E40,$0E04,$0C08
		dc.w	$0C2E,$000E
Pal_CPzCyc1: ; loc_2422: ; $0D - Chemical Plant Rotating Palette
		dc.w	$0E40,$0C00,$0C00,$0E60,$0C20,$0C00,$0E40,$0E40
		dc.w	$0C00,$0C20,$0E60,$0C20,$0C00,$0E40,$0C40,$0C00
		dc.w	$0C20,$0E40,$0C00,$0C00,$0E60,$0C20,$0C00,$0E40
		dc.w	$0E20,$0C00,$0C20
Pal_CPzCyc2: ; loc_2458: ; $0D - Chemical Plant Rotating Palette
		dc.w	$00E0,$00C2,$00A4,$0086,$0068,$004A,$002C,$000E
		dc.w	$020C,$040A,$0608,$0806,$0A04,$0C02,$0E00,$0C20
		dc.w	$0A40,$0860,$0680,$04A0,$02C0
Pal_CPzCyc3: ; loc_2482: ; $0D - Chemical Plant Rotating Palette
		dc.w	$000E,$000C,$000A,$0008,$0006,$0004,$0002,$0004
		dc.w	$0006,$0008,$000A,$000C,$000E,$002E,$004E,$002E
; ===========================================================================
; loc_24A2:
PalCycle_SuperSonic:
		tst.b	(Super_Sonic_palette).w
		beq.s	return_24DE
		bmi.s	loc_24E0
		subq.b	#1,(Palette_timer).w
		bpl.s	return_24DE
		move.b	#3,(Palette_timer).w
		lea	(pal_2516).l,a0
		move.w	(Palette_frame).w,d0
		addq.w	#8,(Palette_frame).w
		cmpi.w	#$30,(Palette_frame).w
		bcs.s	loc_24d2
		move.b	#$FF,(Super_Sonic_palette).w

loc_24d2:
		lea	(Normal_palette+4).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)

return_24DE:
		rts
; ===========================================================================

loc_24E0:
		subq.b	#1,(Palette_timer).w
		bpl.s	return_24DE
		move.b	#7,(Palette_timer).w
		lea	(pal_2516).l,a0
		move.w	(Palette_frame).w,d0
		addq.w	#8,(Palette_frame).w
		cmpi.w	#$78,(Palette_frame).w
		bcs.s	loc_2508
		move.w	#$30,(Palette_frame).w

loc_2508:
		lea	(Normal_palette+4).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
		rts
; ===========================================================================

pal_2516:
		dc.w	$0A22,$0C42,$0E44,$0E66,$0844,$0A64,$0E66,$0E88
		dc.w	$0666,$0A86,$0E88,$0EAA,$0488,$0AA8,$0EAA,$0ECC
		dc.w	$04AA,$0ACA,$0ECC,$0EEE,$04CC,$0AEC,$0EEE,$0EEE
		dc.w	$04EE,$0AEE,$0EEE,$0EEE,$06EE,$0EEE,$0EEE,$0EEE
		dc.w	$08EE,$0EEE,$0EEE,$0EEE,$06EE,$0CEE,$0EEE,$0EEE
		dc.w	$04EE,$0AEE,$0EEE,$0EEE,$02EE,$08EE,$0CEE,$0EEE
		dc.w	$00EE,$06EE,$0AEE,$0EEE,$00EE,$04EE,$08EE,$0CEE
		dc.w	$00EE,$06EE,$0AEE,$0EEE,$00EE,$08EE,$0CEE,$0EEE

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to fade in from black
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_2596: Pal_FadeTo:
Pal_FadeFromBlack:
		move.w	#$3F,(Palette_fade_range).w
; loc_259C: Pal_FadeTo2:
Pal_FadeFromBlack2:
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		moveq	#0,d1
		move.b	(Palette_fade_length).w,d0
; loc_25AE:
.palettewrite:
		move.w	d1,(a0)+
		dbf	d0,.palettewrite	; fill palette with $000 (black)

		move.w	#$15,d4
; loc_25B8:
.nextframe:
		move.b	#VintID_Fade,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.s	.UpdateAllColours
		bsr.w	RunPLC_RAM
		dbf	d4,.nextframe

		rts
; End of function Pal_FadeFromBlack

; ---------------------------------------------------------------------------
; Subroutine to update all colours once
; ---------------------------------------------------------------------------
; sub_25CE: Pal_FadeIn:
.UpdateAllColours:
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		lea	(Target_palette).w,a1
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_fade_length).w,d0
loc_25E4:
		bsr.s	Pal_AddColor
		dbf	d0,loc_25E4
		tst.b	(Water_flag).w
		beq.s	loc_260C
		moveq	#0,d0
		lea	(Underwater_palette).w,a0
		lea	(Underwater_target_palette).w,a1
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_fade_length).w,d0
loc_2606:
		bsr.s	Pal_AddColor
		dbf	d0,loc_2606
loc_260C:
		rts
Pal_AddColor: ; loc_260E:
		move.w	(a1)+,d2
		move.w	(a0),d3
		cmp.w	d2,d3
		beq.s	Pal_NoAdd
		move.w	d3,d1
		addi.w	#$200,d1
		cmp.w	d2,d1
		bhi.s	Pal_AddGreen
		move.w	d1,(a0)+
		rts
Pal_AddGreen: ; loc_2624:
		move.w	d3,d1
		addi.w	#$20,d1
		cmp.w	d2,d1
		bhi.s	Pal_AddRed
		move.w	d1,(a0)+
		rts
Pal_AddRed: ; loc_2632:
		addq.w	#2,(a0)+
		rts
Pal_NoAdd: ; loc_2636:
		addq.w	#2,a0
		rts
Pal_FadeFrom: ; loc_263A:
		move.w	#$3F,(Palette_fade_range).w
		move.w	#$15,d4
loc_2644:
		move.b	#VintID_Fade,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.s	Pal_FadeOut
		bsr.w	RunPLC_RAM
		dbf	d4,loc_2644
		rts
Pal_FadeOut: ; loc_265A:
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		move.b	(Palette_fade_length).w,d0
loc_266A:
		bsr.s	Pal_DecColor
		dbf	d0,loc_266A
		moveq	#0,d0
		lea	(Underwater_palette).w,a0
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		move.b	(Palette_fade_length).w,d0
loc_2680:
		bsr.s	Pal_DecColor
		dbf	d0,loc_2680
		rts
Pal_DecColor: ; loc_2688:
		move.w	(a0),d2
		beq.s	Pal_NoDec
		move.w	d2,d1
		andi.w	#$E,d1
		beq.s	Pal_DecGreen
		subq.w	#2,(a0)+
		rts
Pal_DecGreen: ; loc_2698:
		move.w	d2,d1
		andi.w	#$E0,d1
		beq.s	Pal_DecBlue
		subi.w	#$20,(a0)+
		rts
Pal_DecBlue: ; loc_26A6:
		move.w	d2,d1
		andi.w	#$E00,d1
		beq.s	Pal_NoDec
		subi.w	#$200,(a0)+
		rts
Pal_NoDec: ; loc_26B4:
		addq.w	#2,a0
		rts
Pal_MakeWhite: ; loc_26B8:		; Special Stage Blank Screen
		move.w	#$003F,(Palette_fade_range).w
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		move.w	#$EEE,d1
		move.b	(Palette_fade_length).w,d0
loc_26d2:
		move.w	d1,(a0)+
		dbf	d0,loc_26d2
		move.w	#$15,d4
loc_26DC:
		move.b	#VintID_Fade,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.s	Pal_WhiteToBlack
		bsr.w	RunPLC_RAM
		dbf	d4,loc_26DC
		rts
Pal_WhiteToBlack: ; loc_26F2:
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		lea	(Target_palette).w,a1
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_fade_length).w,d0
loc_2708:
		bsr.s	Pal_DecColor2
		dbf	d0,loc_2708
		tst.b	(Water_flag).w
		beq.s	loc_2730
		moveq	#0,d0
		lea	(Underwater_palette).w,a0
		lea	(Underwater_target_palette).w,a1
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_fade_length).w,d0
loc_272A:
		bsr.s	Pal_DecColor2
		dbf	d0,loc_272A
loc_2730:
		rts
Pal_DecColor2: ; loc_2732:
		move.w	(a1)+,d2
		move.w	(a0),d3
		cmp.w	d2,d3
		beq.s	loc_275E
		move.w	d3,d1
		subi.w	#$200,d1
		bcs.s	loc_274A
		cmp.w	d2,d1
		bcs.s	loc_274A
		move.w	d1,(a0)+
		rts
loc_274A:
		move.w	d3,d1
		subi.w	#$20,d1
		bcs.s	loc_275A
		cmp.w	d2,d1
		bcs.s	loc_275A
		move.w	d1,(a0)+
		rts
loc_275A:
		subq.w	#2,(a0)+
		rts
loc_275E:
		addq.w	#2,a0
		rts		; Special Stage Blank Screen End...
Pal_MakeFlash: ; loc_2762:	; Called by Special Stage Routine
		move.w	#$003F,(Palette_fade_range).w
		move.w	#$15,d4
loc_276C:
		move.b	#VintID_Fade,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.s	Pal_ToWhite
		bsr.w	RunPLC_RAM
		dbf	d4,loc_276C
		rts
Pal_ToWhite: ; loc_2782:
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		move.b	(Palette_fade_length).w,d0
loc_2792:
		bsr.s	Pal_AddColor2
		dbf	d0,loc_2792
		moveq	#0,d0
		lea	(Underwater_palette).w,a0
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		move.b	(Palette_fade_length).w,d0
loc_27A8:
		bsr.s	Pal_AddColor2
		dbf	d0,loc_27A8
		rts
Pal_AddColor2: ; loc_27B0:
		move.w	(a0),d2
		cmpi.w	#$EEE,d2
		beq.s	loc_27EC
		move.w	d2,d1
		andi.w	#$E,d1
		cmpi.w	#$E,d1
		beq.s	loc_27C8
		addq.w	#2,(a0)+
		rts
loc_27C8:
		move.w	d2,d1
		andi.w	#$E0,d1
		cmpi.w	#$E0,d1
		beq.s	loc_27DA
		addi.w	#$20,(a0)+
		rts
loc_27DA:
		move.w	d2,d1
		andi.w	#$E00,d1
		cmpi.w	#$E00,d1
		beq.s	loc_27EC
		addi.w	#$200,(a0)+
		rts
loc_27EC:
		addq.w	#2,a0
		rts
PalCycle_Sega: ; loc_27F0: ; "Sega" Logo rotating Palette
		tst.b	(PalCycle_Timer+1).w
		bne.s	loc_2850
		lea	(Normal_palette_line2).w,a1
		lea	(Pal_Sega1).l,a0	; Load "Sega" Logo Palette
		moveq	#5,d1
		move.w	(PalCycle_Frame).w,d0
loc_2806:
		bpl.s	loc_2810
		addq.w	#2,A0
		subq.w	#1,d1
		addq.w	#2,d0
		bra.s	loc_2806
loc_2810:
		move.w	d0,d2
		andi.w	#$1E,d2
		bne.s	loc_281A
		addq.w	#2,d0
loc_281A:
		cmpi.w	#$60,d0
		bcc.s	loc_2824
		move.w	(a0)+,(A1,d0)
loc_2824:
		addq.w	#2,d0
		dbf	d1,loc_2810
		move.w	(PalCycle_Frame).w,d0
		addq.w	#2,d0
		move.w	d0,d2
		andi.w	#$1E,d2
		bne.s	loc_283A
		addq.w	#2,d0
loc_283A:
		cmpi.w	#$64,d0
		blt.s	loc_2848
		move.w	#$401,(PalCycle_Timer).w
		moveq	#-$C,d0
loc_2848:
		move.w	d0,(PalCycle_Frame).w
		moveq	#1,d0
		rts
loc_2850:
		subq.b	#1,(PalCycle_Timer).w
		bpl.s	loc_28A2
		move.b	#4,(PalCycle_Timer).w
		move.w	(PalCycle_Frame).w,d0
		addi.w	#$C,d0
		cmpi.w	#$30,d0
		bcs.s	loc_286E
		moveq	#0,d0
		rts
loc_286E:
		move.w	d0,(PalCycle_Frame).w
		lea	(Pal_Sega2).l,a0	; Load "Sega" Logo Palette
		lea	(a0,d0.w),a0
		lea	(Normal_palette+4).w,a1
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.w	(a0)+,(a1)
		lea	(Normal_palette_line2).w,a1
		moveq	#0,d0
		moveq	#$2C,d1
loc_288E:		
		move.w	d0,d2
		andi.w	#$1E,d2
		bne.s	loc_2898
		addq.w	#2,d0
loc_2898:
		move.w	(a0),(a1,d0)
		addq.w	#2,d0
		dbf	d1,loc_288E
loc_28A2:
		moveq	#1,d0
		rts
Pal_Sega1: ; loc_28A6: ; "Sega" Logo Palette
		dc.w $0EEE,$0EEA,$0EE4,$0EC0,$0EE4,$0EEA
Pal_Sega2: ; loc_28B2: ; "Sega" Logo Palette
		dc.w $0EEC,$0EEA,$0EEA,$0EEA,$0EEA,$0EEA,$0EEC,$0EEA
		dc.w $0EE4,$0EC0,$0EC0,$0EC0,$0EEC,$0EEA,$0EE4,$0EC0
		dc.w $0EA0,$0E60,$0EEA,$0EE4,$0EC0,$0EA0,$0E80,$0E00
PalLoad1: ; loc_28E2:
		lea	(PalPointers).l,A1
		lsl.w	#3,d0
		adda.w	d0,A1
		move.l	(a1)+,A2
		move.w	(a1)+,A3
		adda.w	#$80,A3
		move.w	(a1)+,d7
loc_28F6:
		move.l	(a2)+,(a3)+
		dbf	d7,loc_28F6
		rts
PalLoad2: ;loc_28FE:
		lea	(PalPointers).l,A1
		lsl.w	#3,d0
		adda.w	d0,A1
		move.l	(a1)+,A2
		move.w	(a1)+,A3
		move.w	(a1)+,d7
loc_290E:
		move.l	(a2)+,(a3)+
		dbf	d7,loc_290E
		rts
PalLoad3_Water: ; loc_2916: ; Load Underwater palette routine
		lea	(PalPointers).l,A1
		lsl.w	#3,d0
		adda.w	d0,A1
		move.l	(a1)+,A2
		move.w	(a1)+,A3
		suba.w	#$80,A3
		move.w	(a1)+,d7
loc_292A:
		move.l	(a2)+,(a3)+
		dbf	d7,loc_292A
		rts
PalLoad4_Water: ;loc_2932:
		lea	(PalPointers).l,A1
		lsl.w	#3,d0
		adda.w	d0,A1
		move.l	(a1)+,A2
		move.w	(a1)+,A3
		suba.w	#$100,A3
		move.w	(a1)+,d7
loc_2946:
		move.l	(a2)+,(a3)+
		dbf	d7,loc_2946
		rts
PalPointers: ; loc_294E: ; Palette List		
PalPtr_SEGA:		dc.l	Pal_SEGA,$FB00001F
PalPtr_Title:		dc.l	Pal_Title,$FB00001F
PalPtr_LevelSel:	dc.l	Pal_LevelSelect,$FB00001F
PalPtr_SonicTails:	dc.l	Pal_SonicTails,$FB000007
PalPtr_GHZ:	dc.l	Pal_GHZ,$FB200017
PalPtr_OWZ:	dc.l	Pal_GHZ,$FB200017
PalPtr_WZ:	dc.l	Pal_WZ,$FB200017
PalPtr_SSZ:	dc.l	Pal_GHZ,$FB200017
PalPtr_MTZ:	dc.l	Pal_MTZ,$FB200017
PalPtr_MTZ2:	dc.l	Pal_MTZ,$FB200017
PalPtr_BLZ:	dc.l	Pal_BLZ,$FB200017	; also apparently meant for CNZ2 at one point
PalPtr_HTZ:	dc.l	Pal_HTZ,$FB200017
PalPtr_HPZ:	dc.l	Pal_HPZ,$FB200017
PalPtr_RWZ:	dc.l	Pal_GHZ,$FB200017
PalPtr_OOZ:	dc.l	Pal_OOZ,$FB200017
PalPtr_DHZ:	dc.l	Pal_DHZ,$FB200017
PalPtr_CNZ:	dc.l	Pal_CNZ,$FB200017
PalPtr_CPZ:	dc.l	Pal_CPZ,$FB200017
PalPtr_GCZ:	dc.l	Pal_GHZ,$FB200017
PalPtr_NGHZ:	dc.l	Pal_NGHZ,$FB200017
PalPtr_DEZ:	dc.l	Pal_GHZ,$FB200017
PalPtr_HPZ_U:	dc.l	Pal_HPZ_U,$FB00001F
PalPtr_CPZ_U:	dc.l	Pal_CPZ_U,$FB00001F
PalPtr_NGHZ_U:	dc.l	Pal_NGHZ_U,$FB00001F
PalPtr_SpecStg:	dc.l	Pal_SpecialStage,$FB00001F

Pal_SEGA:		binclude	"art/palettes/Sega screen.bin"
Pal_Title:		binclude	"art/palettes/Title screen.bin"
Pal_LevelSelect:	binclude	"art/palettes/Level select.bin"
Pal_SonicTails:		binclude	"art/palettes/Sonic and Tails.bin"
Pal_GHZ:		binclude	"art/palettes/GHZ.bin"
Pal_WZ:			binclude	"art/palettes/WZ.bin"
Pal_MTZ:		binclude	"art/palettes/MTZ.bin"
Pal_HTZ:		binclude	"art/palettes/HTZ.bin"
Pal_HPZ:		binclude	"art/palettes/HPZ.bin"
Pal_HPZ_U:		binclude	"art/palettes/HPZ underwater.bin"
Pal_OOZ:		binclude	"art/palettes/OOZ.bin"
Pal_DHZ:		binclude	"art/palettes/DHZ.bin"
Pal_CNZ:		binclude	"art/palettes/CNZ.bin"
Pal_BLZ:		binclude	"art/palettes/BLZ.bin" ; duplicate of CNZ palette
Pal_CPZ:		binclude	"art/palettes/CPZ.bin"
Pal_CPZ_U:		binclude	"art/palettes/CPZ underwater.bin"
Pal_NGHZ:		binclude	"art/palettes/NGHZ.bin"
Pal_NGHZ_U:		binclude	"art/palettes/NGHZ underwater.bin"
Pal_SpecialStage:	binclude	"art/palettes/Special Stage.bin"

		nop
; ---------------------------------------------------------------------------
; Subroutine to perform vertical synchronization
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_31D8: DelayProgram:
WaitForVint:
		move.w	#$2300,sr

-		tst.b	(Vint_routine).w
		bne.s	-
		rts
; End of function WaitForVint

PseudoRandomNumber: ; loc_31E4:
		move.l	(RNG_seed).w,d1
		bne.s	loc_31F0
		move.l	#$2A6D365A,d1
loc_31F0:
		move.l	d1,d0
		asl.l	#2,d1
		add.l	d0,d1
		asl.l	#3,d1
		add.l	d0,d1		
		move.w	d1,d0
		swap	d1
		add.w	d1,d0
		move.w	d0,d1
		swap	d1
		move.l	d1,(RNG_seed).w
		rts
CalcSine: ; loc_320A:		
		andi.w	#$FF,d0
		add.w	d0,d0
		addi.w	#$80,d0
		move.w	Sine_Data(pc,d0.w),d1
		subi.w	#$80,d0
		move.w	Sine_Data(pc,d0.w),d0
		rts
Sine_Data: ; loc_3222:		 
		dc.w	$0000,$0006,$000C,$0012,$0019,$001F,$0025,$002B
		dc.w	$0031,$0038,$003E,$0044,$004A,$0050,$0056,$005C
		dc.w	$0061,$0067,$006D,$0073,$0078,$007E,$0083,$0088
		dc.w	$008E,$0093,$0098,$009D,$00A2,$00A7,$00AB,$00B0
		dc.w	$00B5,$00B9,$00BD,$00C1,$00C5,$00C9,$00CD,$00d1
		dc.w	$00d4,$00D8,$00DB,$00DE,$00E1,$00E4,$00E7,$00EA
		dc.w	$00EC,$00EE,$00F1,$00F3,$00F4,$00F6,$00F8,$00F9
		dc.w	$00FB,$00FC,$00FD,$00FE,$00FE,$00FF,$00FF,$00FF
		dc.w	$0100,$00FF,$00FF,$00FF,$00FE,$00FE,$00FD,$00FC
		dc.w	$00FB,$00F9,$00F8,$00F6,$00F4,$00F3,$00F1,$00EE
		dc.w	$00EC,$00EA,$00E7,$00E4,$00E1,$00DE,$00DB,$00D8
		dc.w	$00d4,$00d1,$00CD,$00C9,$00C5,$00C1,$00BD,$00B9
		dc.w	$00B5,$00B0,$00AB,$00A7,$00A2,$009D,$0098,$0093
		dc.w	$008E,$0088,$0083,$007E,$0078,$0073,$006D,$0067
		dc.w	$0061,$005C,$0056,$0050,$004A,$0044,$003E,$0038
		dc.w	$0031,$002B,$0025,$001F,$0019,$0012,$000C,$0006
		dc.w	$0000,$FFFA,$FFF4,$FFEE,$FFE7,$FFE1,$FFDB,$FFd5
		dc.w	$FFCF,$FFC8,$FFC2,$FFBC,$FFB6,$FFB0,$FFAA,$FFA4
		dc.w	$FF9F,$FF99,$FF93,$FF8B,$FF88,$FF82,$FF7D,$FF78
		dc.w	$FF72,$FF6D,$FF68,$FF63,$FF5E,$FF59,$FF55,$FF50
		dc.w	$FF4B,$FF47,$FF43,$FF3F,$FF3B,$FF37,$FF33,$FF2F
		dc.w	$FF2C,$FF28,$FF25,$FF22,$FF1F,$FF1C,$FF19,$FF16
		dc.w	$FF14,$FF12,$FF0F,$FF0D,$FF0C,$FF0A,$FF08,$FF07
		dc.w	$FF05,$FF04,$FF03,$FF02,$FF02,$FF01,$FF01,$FF01
		dc.w	$FF00,$FF01,$FF01,$FF01,$FF02,$FF02,$FF03,$FF04
		dc.w	$FF05,$FF07,$FF08,$FF0A,$FF0C,$FF0D,$FF0F,$FF12
		dc.w	$FF14,$FF16,$FF19,$FF1C,$FF1F,$FF22,$FF25,$FF28
		dc.w	$FF2C,$FF2F,$FF33,$FF37,$FF3B,$FF3F,$FF43,$FF47
		dc.w	$FF4B,$FF50,$FF55,$FF59,$FF5E,$FF63,$FF68,$FF6D
		dc.w	$FF72,$FF78,$FF7D,$FF82,$FF88,$FF8B,$FF93,$FF99
		dc.w	$FF9F,$FFA4,$FFAA,$FFB0,$FFB6,$FFBC,$FFC2,$FFC8
		dc.w	$FFCF,$FFd5,$FFDB,$FFE1,$FFE7,$FFEE,$FFF4,$FFFA
		dc.w	$0000,$0006,$000C,$0012,$0019,$001F,$0025,$002B
		dc.w	$0031,$0038,$003E,$0044,$004A,$0050,$0056,$005C
		dc.w	$0061,$0067,$006D,$0073,$0078,$007E,$0083,$0088
		dc.w	$008E,$0093,$0098,$009D,$00A2,$00A7,$00AB,$00B0
		dc.w	$00B5,$00B9,$00BD,$00C1,$00C5,$00C9,$00CD,$00d1
		dc.w	$00d4,$00D8,$00DB,$00DE,$00E1,$00E4,$00E7,$00EA
		dc.w	$00EC,$00EE,$00F1,$00F3,$00F4,$00F6,$00F8,$00F9
		dc.w	$00FB,$00FC,$00FD,$00FE,$00FE,$00FF,$00FF,$00FF
CalcAngle: ; loc_34A2:
		movem.l d3-d4,-(sp)
		moveq	#0,d3
		moveq	#0,d4
		move.w	d1,d3
		move.w	d2,d4
		or.w	d3,d4
		beq.s	loc_34FE
		move.w	d2,d4
		tst.w	d3
		bpl.w	loc_34BC
		neg.w	d3
loc_34BC:
		tst.w	d4
		bpl.w	loc_34C4
		neg.w	d4
loc_34C4:
		cmp.w	d3,d4
		bcc.w	loc_34d6
		lsl.l	#8,d4
		divu.w	d3,d4
		moveq	#0,d0
		move.b	AngleData(pc,d4.w),d0
		bra.s	loc_34E0
loc_34d6:
		lsl.l	#8,d3
		divu.w	d4,d3
		moveq	#$40,d0
		sub.b	AngleData(pc,d3.w),d0
loc_34E0:
		tst.w	d1
		bpl.w	loc_34EC
		neg.w	d0
		addi.w	#$80,d0
loc_34EC:
		tst.w	d2
		bpl.w	loc_34F8
		neg.w	d0
		addi.w	#$100,d0
loc_34F8:
		movem.l (sp)+,d3-d4
		rts
loc_34FE:
		move.w	#$40,d0
		movem.l (sp)+,d3-d4
		rts
AngleData: ; loc_3508:
		dc.b	$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$02
		dc.b	$03,$03,$03,$03,$03,$03,$03,$04,$04,$04,$04,$04,$04,$05,$05,$05
		dc.b	$05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$07
		dc.b	$08,$08,$08,$08,$08,$08,$08,$09,$09,$09,$09,$09,$09,$0A,$0A,$0A
		dc.b	$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$0C,$0C
		dc.b	$0C,$0C,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E
		dc.b	$0F,$0F,$0F,$0F,$0F,$0F,$0F,$10,$10,$10,$10,$10,$10,$10,$11,$11
		dc.b	$11,$11,$11,$11,$11,$11,$12,$12,$12,$12,$12,$12,$12,$13,$13,$13
		dc.b	$13,$13,$13,$13,$13,$14,$14,$14,$14,$14,$14,$14,$14,$15,$15,$15
		dc.b	$15,$15,$15,$15,$15,$15,$16,$16,$16,$16,$16,$16,$16,$16,$17,$17
		dc.b	$17,$17,$17,$17,$17,$17,$17,$18,$18,$18,$18,$18,$18,$18,$18,$18
		dc.b	$19,$19,$19,$19,$19,$19,$19,$19,$19,$19,$1A,$1A,$1A,$1A,$1A,$1A
		dc.b	$1A,$1A,$1A,$1B,$1B,$1B,$1B,$1B,$1B,$1B,$1B,$1B,$1B,$1C,$1C,$1C
		dc.b	$1C,$1C,$1C,$1C,$1C,$1C,$1C,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
		dc.b	$1D,$1D,$1D,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1F,$1F
		dc.b	$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$20,$20,$20,$20,$20,$20
		dc.b	$20
		even
		nop
;===============================================================================
; Sega Logo
; [ Begin ]
;===============================================================================
SegaScreen: ; loc_360C: ; SEGA Logo
		move.b	#MusID_Stop,d0
		bsr.w	PlayMusic
		bsr.w	ClearPLC
		bsr.w	Pal_FadeFrom
		lea	(VDP_control_port),a6
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$8700,(a6)
		move.w	#$8B00,(a6)
		move.w	#$8C81,(a6)
		clr.b	(Water_fullscreen_flag).w
		move	#$2700,sr
		move.w	(VDP_Reg1_val).w,d0
		andi.b	#$BF,d0
		move.w	d0,(VDP_control_port)
		bsr.w	ClearScreen
		move.l	#$40000000,(VDP_control_port)
		lea	(SegaLogo).l,a0	; Load Sega Sprites
		bsr.w	NemDec
		lea	(Chunk_Table),a1
		lea	(SegaLogo_Mappings).l,a0	; Load Sega Mappings
		move.w	#0,d0
		bsr.w	EniDec
		lea	(Chunk_Table),a1
		move.l	#$65100003,d0
		moveq	#$17,d1
		moveq	#7,d2
		bsr.w	PlaneMapToVRAM_H40
		lea	(Chunk_Table+$180),a1
		move.l	#$40000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		bsr.w	PlaneMapToVRAM_H40
		tst.b	(Graphics_Flags).w
		bmi.s	loc_36BE
		lea	(Chunk_Table+$A40),a1
		move.l	#$453A0003,d0
		moveq	#2,d1
		moveq	#1,d2
		bsr.w	PlaneMapToVRAM_H40
loc_36BE:
		moveq	#PalID_SEGA,d0
		bsr.w	PalLoad2
		move.w	#$FFF6,(PalCycle_Frame).w
		move.w	#0,(PalCycle_Timer).w
		move.w	#0,(unk_F662).w
		move.w	#0,(unk_F660).w
		move.w	#$B4,(Demo_Time_left).w
		move.w	(VDP_Reg1_val).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_control_port)
Sega_WaitPalette: ; loc_36F0:
		move.b	#VintID_SEGA,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.w	PalCycle_Sega	; Load "Sega" rotating palette
		bne.s	Sega_WaitPalette
		move.b	#SndID_SegaSound,d0	; Load "Sega" sound
		bsr.w	PlaySound
		move.b	#VintID_SEGA,(Vint_routine).w
		bsr.w	WaitForVint
		move.w	#$B4,(Demo_Time_left).w
Sega_WaitEnd: ; loc_3718:
		move.b	#VintID_PCM,(Vint_routine).w
		bsr.w	WaitForVint
		tst.w	(Demo_Time_left).w
		beq.s	Sega_GoToTitleScreen
		andi.b	#$80,(Ctrl_1_Press).w
		beq.s	Sega_WaitEnd
Sega_GoToTitleScreen: ; loc_3730:
		move.b	#GameModeID_TitleScreen,(Game_Mode).w
		rts
;===============================================================================
; Sega Logo
; [ End ]
;===============================================================================

; ---------------------------------------------------------------------------
; Title screen game screen; also contains the level select screen
; ---------------------------------------------------------------------------

; loc_3738:
TitleScreen:
		move.b	#MusID_Stop,d0
		bsr.w	PlayMusic
		bsr.w	ClearPLC
		bsr.w	Pal_FadeFrom
		move	#$2700,sr
		lea	(VDP_control_port),a6
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$9001,(a6)
		move.w	#$9200,(a6)
		move.w	#$8B03,(a6)
		move.w	#$8720,(a6)
		clr.b	(Water_fullscreen_flag).w
		move.w	#$8C81,(a6)
		bsr.w	ClearScreen
		clearRAM Sprite_Table_Input,Sprite_Table_Input_End
		clearRAM Object_RAM,Object_RAM_End
		clearRAM Misc_Variables,Misc_Variables_End
		clearRAM Camera_RAM,Camera_RAM_End
		clearRAM Target_palette,Target_palette_End

		; Leftover from Sonic 1,which had a "SONIC TEAM PRESENTS"
		; screen load Sonic's palette for the font
		moveq	#PalID_SonicTails,d0
		bsr.w	PalLoad1
		bsr.w	Pal_FadeFromBlack

		move	#$2700,sr
		move.l	#$40000000,(VDP_control_port).l
		lea	(Title_Screen_Bg_Wings).l,a0
		bsr.w	NemDec
		move.l	#$40000001,(VDP_control_port).l
		lea	(Title_Screen_Sonic_Tails).l,a0
		bsr.w	NemDec
		lea	(VDP_data_port).l,a6
		move.l	#$50000003,4(a6)
		lea	(ArtUnc_DbgText).l,a5
		move.w	#$28F,d1

loc_3818:
		move.w	(a5)+,(a6)
		dbf	d1,loc_3818
		nop
		move.b	#0,(Last_star_pole_hit).w
		move.w	#0,(Debug_placement_mode).w
		move.w	#0,(Demo_mode_flag).w
		move.w	#0,(unk_FFDA).w
		move.w	#neo_green_hill_zone_act_1,(Current_ZoneAndAct).w
		move.w	#0,(PalCycle_Timer).w
		bsr.w	Pal_FadeFrom

		move	#$2700,sr
		lea	(Chunk_Table).l,a1
		lea	(TS_Wings_MapUnc_Sonic).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		lea	(Chunk_Table).l,a1
		move.l	#$40000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		bsr.w	PlaneMapToVRAM_H40
		lea	(Chunk_Table).l,a1
		lea	(Title_Screen_Bg_Mappings).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		lea	(Chunk_Table).l,a1
		move.l	#$60000003,d0
		moveq	#$1F,d1
		moveq	#$1B,d2
		bsr.w	PlaneMapToVRAM_H40
		lea	(Chunk_Table).l,a1
		lea	(Title_Screen_R_Bg_Mappings).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		lea	(Chunk_Table).l,a1
		move.l	#$60400003,d0
		moveq	#$1F,d1
		moveq	#$1B,d2
		bsr.w	PlaneMapToVRAM_H40
		moveq	#PalID_Title,d0
		bsr.w	PalLoad1
		move.b	#MusID_Title,d0
		bsr.w	PlayMusic
		move.b	#0,(Debug_mode_flag).w
		move.w	#0,(Two_player_mode).w
		move.w	#$178,(Demo_Time_left).w
		lea	(TitleScreen_Tails).w,a1
		moveq	#0,d0
		move.w	#$F,d1	; hilarious,they actually fixed the bug that caused the "PRESS START BUTTON" text to not display in Sonic 1

loc_38EE:
		move.l	d0,(a1)+
		dbf	d1,loc_38EE

		move.b	#$E,(TitleScreen_Sonic).w
		move.b	#$E,(TitleScreen_Tails).w
		move.b	#1,(TitleScreen_Tails+mapping_frame).w
		jsr	(RunObjects).l
		jsr	(BuildSprites).l
		moveq	#PLCID_Std1,d0
		bsr.w	LoadPLC2
		move.w	#0,(Correct_cheat_entries).w
		move.w	#0,(Correct_cheat_entries_2).w
		move.b	#1,(Level_select_flag).w	; enable "level select" flag without using the cheat
		move.w	#4,(Sonic_Pos_Record_Index).w
		move.w	#0,(Sonic_Pos_Record_Buf).w
		move.w	(VDP_Reg1_val).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_control_port).l
		bsr.w	Pal_FadeFromBlack
; loc_3948:
TitleScreen_Loop:
		move.b	#VintID_Title,(Vint_routine).w
		bsr.w	WaitForVint
		jsr	(RunObjects).l
		bsr.w	loc_5E38
		jsr	(BuildSprites).l
		bsr.w	RunPLC_RAM

; Title_ChkRegion:
		tst.b	(Graphics_Flags).w
		bpl.s	Title_RegionJ
		lea	(LevelSelectCode_US).l,a0
		bra.s	Title_EnterCheat
; loc_3974: Code_Sequence_J:
Title_RegionJ:
		lea	(LevelSelectCode_J).l,a0
; loc_397A: Level_Select_Cheat_Test:
Title_EnterCheat:
		move.w	(Correct_cheat_entries).w,d0
		adda.w	d0,a0
		move.b	(Ctrl_1_Press).w,d0
		andi.b	#$F,d0
		cmp.b	(a0),d0
		bne.s	Title_CheatFail
		addq.w	#1,(Correct_cheat_entries).w
		tst.b	d0
		bne.s	Title_CountC
		lea	(Level_select_flag).w,a0
		move.w	(Correct_cheat_entries_2).w,d1
		lsr.w	#1,d1
		andi.w	#3,d1
		beq.s	Title_PlayRing
		tst.b	(Graphics_Flags).w
		bpl.s	Title_PlayRing
		moveq	#1,d1
		move.b	d1,1(a0,d1.w)
; loc_39B0:
Title_PlayRing:
		move.b	#1,(a0,d1.w)
		move.b	#SndID_Ring,d0
		bsr.w	PlaySound
		bra.s	Title_CountC
; ===========================================================================
; loc_39C0: Title_Cheat_NoMatch:
Title_CheatFail:
		tst.b	d0
		beq.s	Title_CountC
		cmpi.w	#9,(Correct_cheat_entries).w
		beq.s	Title_CountC
		move.w	#0,(Correct_cheat_entries).w
; loc_39d2:
Title_CountC:
		move.b	(Ctrl_1_Press).w,d0
		andi.b	#$20,d0
		beq.s	TitleScreen_SkipC
		addq.w	#1,(Correct_cheat_entries_2).w

; loc_39E0: Title_Cheat_NoC:
TitleScreen_SkipC:
		tst.w	(Demo_Time_left).w
		beq.w	Demo_Mode
		andi.b	#$80,(Ctrl_1_Press).w
		beq.w	TitleScreen_Loop
; loc_39F2:
Title_ChkLevSel:
		tst.b	(Level_select_flag).w
		beq.w	PlayLevel
		btst	#6,(Ctrl_1_Held).w
		beq.w	PlayLevel
		move.b	#MusID_LevelSel,d0
		bsr.w	PlayMusic
		moveq	#PalID_LevelSel,d0
		bsr.w	PalLoad2

		clearRAM Horiz_Scroll_Buf,Horiz_Scroll_Buf_End

		move.l	d0,(Vscroll_Factor).w
		move	#$2700,sr
		lea	(VDP_data_port).l,a6
		move.l	#$60000003,(VDP_control_port).l
		move.w	#$400-1,d1
; loc_3A3E: LevelSelect_ClearVRAM:
Title_ClrVram:
		move.l	d0,(a6)
		dbf	d1,Title_ClrVram
		bsr.w	LevelSelect_TextLoad
; ===========================================================================
; loc_3A48:
LevelSelect_Loop:
		move.b	#VintID_Title,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.w	LevelSelect_Controls
		bsr.w	RunPLC_RAM
		tst.l	(Plc_Buffer).w
		bne.s	LevelSelect_Loop
		andi.b	#$F0,(Ctrl_1_Press).w
		beq.s	LevelSelect_Loop
		move.w	#0,(Two_player_mode).w
		btst	#4,(Ctrl_1_Held).w
		beq.s	loc_3A7C
		move.w	#1,(Two_player_mode).w

loc_3A7C:
		move.w	(Level_select_zone).w,d0
		cmpi.w	#$1A,d0
		bne.s	LevelSelect_PressStart
		btst	#6,(Ctrl_1_Press).w
		bne.s	LevelSelect_Loop
		move.w	(Sound_test_sound).w,d0
		addi.w	#$80,d0
		bsr.w	PlaySound
		bra.s	LevelSelect_Loop
; ===========================================================================
; loc_3A9C:
LevelSelect_PressStart:
		add.w	d0,d0
		move.w	LevelSelect_Order(pc,d0.w),d0
		bmi.w	LevelSelect_Loop
		; The original value was seemingly a hackish way to make the
		; Special Stages inaccessable,remove the '+1' from here and
		; from LevelSelect_Order to "access" the remnants
		cmpi.w	#$7FFF+1,d0
		bne.s	LevelSelect_StartZone

; LevelSelect_SpecialStage:
		move.b	#GameModeID_SpecialStage,(Game_Mode).w
		clr.w	(Current_ZoneAndAct).w
		move.b	#3,(Life_count).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score).w
		move.l	#5000,(Next_Extra_life_score).w
		rts
; ===========================================================================
; word_A3d4: Level_Select_Array:
LevelSelect_Order:
		dc.w	green_hill_zone_act_1,green_hill_zone_act_2
		dc.w	wood_zone_act_1,wood_zone_act_2
		dc.w	metropolis_zone_act_1,metropolis_zone_act_2,metropolis_zone_act_3
		dc.w	hill_top_zone_act_1,hill_top_zone_act_2
		dc.w	hidden_palace_zone_act_1,hidden_palace_zone_act_2
		dc.w	oil_ocean_zone_act_1,oil_ocean_zone_act_2
		dc.w	dust_hill_zone_act_1,dust_hill_zone_act_2
		dc.w	casino_night_zone_act_1,casino_night_zone_act_2
		dc.w	chemical_plant_zone_act_1,chemical_plant_zone_act_2
		dc.w	genocide_city_zone_act_1,genocide_city_zone_act_2
		dc.w	neo_green_hill_zone_act_1,neo_green_hill_zone_act_2
		dc.w	death_egg_zone_act_1,death_egg_zone_act_2
		dc.w	$7FFF+1			; SS
		dc.w	0			; Sound Test
; ===========================================================================
; loc_3B0A: Level_Select_Level:
LevelSelect_StartZone:
		andi.w	#$3FFF,d0
		move.w	d0,(Current_ZoneAndAct).w
; loc_3B12:
PlayLevel:
		move.b	#GameModeID_Level,(Game_Mode).w
		move.b	#3,(Life_count).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score).w
		move.b	d0,(Current_Special_Stage).w
		move.b	d0,(Emerald_count).w
		move.l	d0,(Got_Emeralds_array).w
		move.l	d0,(Got_Emeralds_array+4).w
		move.b	d0,(Continue_count).w
		move.l	#5000,(Next_Extra_life_score).w
		move.b	#SndID_SpindashRev,d0	; Bug: This should be using MusID_Stop
		bsr.w	PlaySound
		rts
; ===========================================================================
; byte_3B52:
LevelSelectCode_J:
		dc.b	1		; up
		dc.b	2		; down
		dc.b	2		; down
		dc.b	2		; down
		dc.b	2		; down
		dc.b	1		; up
		dc.b	0
		dc.b	$FF
		even
; byte_3B5A:
LevelSelectCode_US:
		dc.b	1		; up
		dc.b	2		; down
		dc.b	2		; down
		dc.b	2		; down
		dc.b	2		; down
		dc.b	1		; up
		dc.b	0
		dc.b	$FF
		even
; ===========================================================================
Demo_Mode: ; loc_3B62:
		move.w	#30,(Demo_Time_left).w
loc_3B68:
		move.b	#VintID_Title,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.w	RunPLC_RAM
		move.w	(MainCharacter+x_pos).w,d0
		addq.w	#2,d0
		move.w	d0,(MainCharacter+x_pos).w
		cmpi.w	#$1C00,d0
		bcs.s	Run_Demo_Mode
		move.b	#GameModeID_SegaScreen,(Game_Mode).w
		rts
Run_Demo_Mode: ; loc_3B8E:
		andi.b	#$80,(Ctrl_1_Press).w
		bne.w	Title_ChkLevSel
		tst.w	(Demo_Time_left).w
		bne.w	loc_3B68
		move.b	#SndID_SpindashRev,d0	; Bug: This should be using MusID_Stop
		bsr.w	PlaySound
		move.w	(Demo_number).w,d0
		andi.w	#7,d0
		add.w	d0,d0
		move.w	Demo_Mode_Level_Array(pc,d0.w),d0	; Load Demo sequence array
		move.w	d0,(Current_ZoneAndAct).w
		addq.w	#1,(Demo_number).w
		cmpi.w	#4,(Demo_number).w
		bcs.s	loc_3BCC
		move.w	#0,(Demo_number).w
loc_3BCC:
		move.w	#1,(Demo_mode_flag).w
		move.b	#GameModeID_Demo,(Game_Mode).w
		cmpi.w	#0,d0
		bne.s	loc_3BE4
		move.w	#1,(Two_player_mode).w
loc_3BE4:
		cmpi.w	#$600,d0
		bne.s	loc_3BF8
		move.b	#GameModeID_SpecialStage,(Game_Mode).w
		clr.w	(Current_ZoneAndAct).w
		clr.b	(Current_Special_Stage).w
loc_3BF8:
		move.b	#3,(Life_count).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score).w
		move.l	#5000,(Next_Extra_life_score).w
		rts
Demo_Mode_Level_Array: ; loc_3C16: ; Demo sequence array
		dc.w	chemical_plant_zone_act_1
		dc.w	green_hill_zone_act_1
		dc.w	hidden_palace_zone_act_1
		dc.w	hill_top_zone_act_1
		; These entries are leftovers from the Nick Arcade prototype,in which zone IDs $04 and
		; $05 were taken up by Hidden Palace and Hill Top Zone respectively
		dc.w	metropolis_zone_act_3
		dc.w	metropolis_zone_act_3
		dc.w	metropolis_zone_act_3
		dc.w	metropolis_zone_act_3
		dc.w	metropolis_zone_act_1
		dc.w	metropolis_zone_act_1
		dc.w	metropolis_zone_act_1
		dc.w	metropolis_zone_act_1
; ===========================================================================
; loc_3C2E:
LevelSelect_Controls:
		move.b	(Ctrl_1_Press).w,d1
		andi.b	#3,d1
		bne.s	loc_3C3E
		subq.w	#1,(LevSel_HoldTimer).w
		bpl.s	LevelSelect_Controls2

loc_3C3E:
		move.w	#$B,(LevSel_HoldTimer).w
		move.b	(Ctrl_1_Held).w,d1
		andi.b	#3,d1
		beq.s	LevelSelect_Controls2
		move.w	(Level_select_zone).w,d0
		btst	#0,d1
		beq.s	loc_3C5E
		subq.w	#1,d0
		bcc.s	loc_3C5E
		moveq	#$1A,d0

loc_3C5E:
		btst	#1,d1
		beq.s	loc_3C6E
		addq.w	#1,d0
		cmpi.w	#$1B,d0
		bcs.s	loc_3C6E
		moveq	#0,d0

loc_3C6E:
		move.w	d0,(Level_select_zone).w
		bsr.w	LevelSelect_TextLoad
		rts
; ===========================================================================
; loc_3C78:
LevelSelect_Controls2:
		cmpi.w	#$1A,(Level_select_zone).w
		bne.s	return_3CC2
		move.w	(Sound_test_sound).w,d0
		move.b	(Ctrl_1_Press).w,d1
		andi.b	#$C,d1
		beq.s	loc_3CAA
		btst	#2,d1
		beq.s	loc_3C9A
		subq.b	#1,d0
		bcc.s	loc_3C9A
		moveq	#$7F,d0

loc_3C9A:
		btst	#3,d1
		beq.s	loc_3CAA
		addq.b	#1,d0
		cmpi.w	#$80,d0
		bcs.s	loc_3CAA
		moveq	#0,d0

loc_3CAA:
		btst	#6,(Ctrl_1_Press).w
		beq.s	loc_3CBA
		addi.b	#$10,d0
		andi.b	#$7F,d0

loc_3CBA:
		move.w	d0,(Sound_test_sound).w
		bsr.w	LevelSelect_TextLoad

return_3CC2:		
		rts
; ===========================================================================
; loc_3CC4:
LevelSelect_TextLoad:
		lea	(Level_Select_Text).l,a1
		lea	(VDP_data_port).l,a6
		move.l	#$608C0003,d4
		move.w	#$8680,d3
		moveq	#$1A,d1

loc_3CDC:		
		move.l	d4,4(a6)
		bsr.w	loc_3d60
		addi.l	#$800000,d4
		dbf	d1,loc_3CDC 
		moveq	#0,d0
		move.w	(Level_select_zone).w,d0
		move.w	d0,d1
		move.l	#$608C0003,d4
		lsl.w	#7,d0
		swap	d0
		add.l	d0,d4
		lea	(Level_Select_Text).l,a1
		mulu.w	#$1B,d1
		adda.w	d1,a1
		move.w	#$C680,d3
		move.l	d4,4(a6)
		bsr.w	loc_3d60
		move.w	#$8680,d3
		cmpi.w	#$1A,(Level_select_zone).w
		bne.s	loc_3d2A
		move.w	#$C680,d3

loc_3d2A:
		move.l	#$6DB00003,(VDP_control_port).l
		move.w	(Sound_test_sound).w,d0
		addi.w	#$80,d0
		move.b	d0,d2
		lsr.b	#4,d0
		bsr.w	loc_3d4C
		move.b	d2,d0
		bsr.w	loc_3d4C
		rts

loc_3d4C:
		andi.w	#$F,d0
		cmpi.b	#$A,d0
		bcs.s	loc_3d5A
		addi.b	#7,d0
loc_3d5A:
		add.w	d3,d0
		move.w	d0,(a6)
		rts
loc_3d60:
		moveq	#$1A,d2
loc_3d62:		
		moveq	#0,d0
		move.b	(a1)+,d0
		bpl.s	loc_3d72
		move.w	#0,(a6)
		dbf	d2,loc_3d62 
		rts
loc_3d72:
		add.w	d3,d0
		move.w	d0,(a6)
		dbf	d2,loc_3d62
		rts
; ===========================================================================

_0 = $00
_1 = $01
_2 = $02		
_A = $11
_B = $12
_C = $13
_D = $14		
_E = $15
_F = $16
_G = $17
_H = $18
_I = $19
_J = $1A
_K = $1B
_L = $1C
_M = $1D
_N = $1E
_O = $1F
_P = $20
_Q = $21
_R = $22
_S = $23
_T = $24
_U = $25
_V = $26
_W = $27
_X = $28
_Y = $0F
_Z = $10
__ = $FF		
Level_Select_Text: ; loc_3d7C: ; Level Select Menu Text		 
		dc.b	_G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_W,_O,_O,_D,__,_Z,_O,_N,_E,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_M,_E,_T,_R,_O,_P,_O,_L,_I,_S,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2
		dc.b	_H,_I,_L,_L,__,_T,_O,_P,__,_Z,_O,_N,_E,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_H,_I,_D,_D,_E,_N,__,_P,_A,_L,_A,_C,_E,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_O,_I,_L,__,_O,_C,_E,_A,_N,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_D,_U,_S,_T,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_C,_A,_S,_I,_N,_O,__,_N,_I,_G,_H,_T,__,_Z,_O,_N,_E,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_C,_H,_E,_M,_I,_C,_A,_L,__,_P,_L,_A,_N,_T,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_G,_E,_N,_O,_C,_I,_D,_E,__,_C,_I,_T,_Y,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_N,_E,_O,__,_G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_D,_E,_A,_T,_H,__,_E,_G,_G,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b	__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b	_S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E,__,__,__,__,__,__,__,__,__,__,__,__,__,__
		dc.b	_S,_O,_U,_N,_D,__,_S,_E,_L,_E,_C,_T,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; These subroutines overwrite data in the ROM,likely similar
; to ConvertCollisionArray (but need special read/write carts to work)
; ---------------------------------------------------------------------------
; For some reason,this is similar to the MainLoadBlock code,but with the
; registers reversed...
; loc_4056: Unused_Code1:
		lea	(Chunk_Table).l,a1
		move.w	#$2EB,d2

-		move.w	(a1),d0
		move.w	d0,d1
		andi.w	#$F800,d1
		andi.w	#$7FF,d0
		lsr.w	#$01,d0
		or.w	d0,d1
		move.w	d1,(a1)+
		dbf	d2,-
		rts
; ---------------------------------------------------------------------------
; This chunk is duplicated after loc_78F8 for some reason; its' purpose
; was to convert Sonic 1's chunk data to the Sonic 2 format
; ConvertChunksFrom256x256To128x128: Unused_Code2: loc_4078:
		lea	($FE0000).l,a1
		lea	($FE0080).l,a2
		lea	(Chunk_Table).l,a3
		move.w	#$3F,d1
	
-		bsr.w	Unused_Code4
		bsr.w	Unused_Code4
		dbf	d1,-
		lea	($FE0000).l,a1
		lea	($FF0000).l,a2
		move.w	#$3F,d1

-		move.w	#0,(a2)+
		dbf	d1,-
		move.w	#$3FBF,d1
	
-		move.w	(a1)+,(a2)+
		dbf	d1,-
		rts
; ===========================================================================
; This code removes duplicate chunks
; EliminateChunkDuplicates: Unused_Code3: loc_40BE:
		lea	($FE0000).l,a1
		lea	(Chunk_Table).l,a3
		moveq	#$1F,d0

-		move.l	(a1)+,(a3)+
		dbf	d0,-
		moveq	#0,d7
		lea	($FE0000),a1
		move.w	#$FF,d5

Unused_Code3_Loop2: ; loc_40DE:		
		lea	(Chunk_Table),A3
		move.w	d7,d6
Unused_Code3_Loop3: ; loc_40E6:		
		movem.l A1-A3,-(sp)
		move.w	#$3F,d0
Unused_Code3_Loop4: ; loc_40EE:		
		cmpm.w	(a1)+,(a3)+
		bne.s	Unused_Code3_loc_4104
		dbf	d0,Unused_Code3_Loop4	; loc_40EE
		movem.l (sp)+,A1-A3
		adda.w	#$80,A1
		dbf	d5,Unused_Code3_Loop2	; loc_40DE
		bra.s	Unused_Code3_loc_411E
Unused_Code3_loc_4104:
		movem.l (sp)+,A1-A3
		adda.w	#$80,A3
		dbf	d6,Unused_Code3_Loop3	; loc_40E6
		moveq	#$1F,d0
Unused_Code3_Loop5: ; loc_4112:		
		move.l	(a1)+,(a3)+
		dbf	d0,Unused_Code3_Loop5	; loc_4112
		addq.l	#1,d7
		dbf	d5,Unused_Code3_Loop2	; loc_40DE
Unused_Code3_loc_411E:
		bra.s	Unused_Code3_loc_411E
Unused_Code4: ; loc_4120:
		moveq	#7,d0
Unused_Code4_Loop: ; loc_4122:		
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		dbf	d0,Unused_Code4_Loop	; loc_4122
		adda.w	#$80,A1
		adda.w	#$80,A2
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Music Playlist
; ---------------------------------------------------------------------------
; byte_4140:
MusicList:	zoneOrderedTable 1,1
	zoneTableEntry.b	MusID_GHZ	; GHZ
	zoneTableEntry.b	MusID_GHZ	; OWZ
	zoneTableEntry.b	MusID_MTZ	; WZ
	zoneTableEntry.b	MusID_SSZ	; SSZ
	zoneTableEntry.b	MusID_MTZ	; MTZ
	zoneTableEntry.b	MusID_MTZ	; MTZ2
	zoneTableEntry.b	MusID_BOZ	; BLZ
	zoneTableEntry.b	MusID_HTZ	; HTZ
	zoneTableEntry.b	MusID_HPZ	; HPZ
	zoneTableEntry.b	MusID_RWZ	; RWZ
	zoneTableEntry.b	MusID_OOZ	; OOZ
	zoneTableEntry.b	MusID_DHZ	; DHZ
	zoneTableEntry.b	MusID_CNZ	; CNZ
	zoneTableEntry.b	MusID_CPZ	; CPZ
	zoneTableEntry.b	MusID_CPZ	; GCZ
	zoneTableEntry.b	MusID_NGHZ	; NGHZ
	; no *proper* entry for DEZ,so it instead uses the alignment to play sound $08
	;zoneTableEntry.b	MusID_DEZ	; DEZ
	zoneTableEnd
	even

; ===========================================================================
; ---------------------------------------------------------------------------
; Level
; DEMO AND ZONE LOOP (MLS values $08,$0C; bit 7 set indicates that load routine is running)
; ---------------------------------------------------------------------------
; loc_4150:
Level:
		bset	#GameModeFlag_TitleCard,(Game_Mode).w	; add $80 to screen mode (for pre level sequence)
		tst.w	(Demo_mode_flag).w	; test the old flag for the credits demos (now unused)
		bmi.s	+
		move.b	#MusID_FadeOut,d0
		bsr.w	PlaySound
+
		bsr.w	ClearPLC
		bsr.w	Pal_FadeFrom
		tst.w	(Demo_mode_flag).w
		bmi.s	Level_ClrRAM
		move	#$2700,sr
		move.l	#$70000002,(VDP_control_port).l
		lea	(Title_Cards).l,a0	; load title card patterns
		bsr.w	NemDec
		bsr.w	ClearScreen
		move	#$2300,sr
		moveq	#0,d0
		move.w	d0,(Timer_frames).w
		move.b	(Current_Zone).w,d0

		; multiply d0 by 12,the size of a level art load block
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0

		lea	(LevelArtPointers).l,a2
		lea	(a2,d0.w),a2
		moveq	#0,d0
		move.b	(a2),d0		; PLC1 ID
		beq.s	+
		bsr.w	LoadPLC
+
		moveq	#PLCID_Std2,d0
		bsr.w	LoadPLC
; loc_41C0:
Level_ClrRAM:
		clearRAM Sprite_Table_Input,Sprite_Table_Input_End
		clearRAM Object_RAM,Object_RAM_End
		clearRAM MiscLevelVariables,MiscLevelVariables_End
		clearRAM Misc_Variables,Misc_Variables_End
		clearRAM Oscillating_variables,Oscillating_variables_End

		cmpi.w	#chemical_plant_zone_act_2,(Current_ZoneAndAct).w	; is it CPZ2?
		beq.s	Level_InitWater			; if yes,branch
		cmpi.b	#neo_green_hill_zone,(Current_ZoneAndAct).w	; is it NGHZ?
		beq.s	Level_InitWater			; if yes,branch
		cmpi.b	#hidden_palace_zone,(Current_ZoneAndAct).w	; is it HPZ?
		bne.s	+				; if not,branch
; loc_4228: Init_Water:
Level_InitWater:
		move.b	#1,(Water_flag).w
		move.w	#0,(Two_player_mode).w
+
		lea	(VDP_control_port).l,a6
		move.w	#$8B03,(a6)		; EXT-INT disabled,V scroll by screen,H scroll by line
		move.w	#$8230,(a6)		; PNT A base: $C000
		move.w	#$8407,(a6)		; PNT B base: $E000
		move.w	#$857C,(a6)		; Sprite attribute table base: $F800
		move.w	#$9001,(a6)		; Scroll table size: 64x32
		move.w	#$8004,(a6)		; H-INT disabled
		move.w	#$8720,(a6)		; Background palette/color: 2/0
		btst	#5,(Ctrl_1_Held).w
		beq.s	loc_4262
		move.w	#$8C89,(a6)		; H res 40 cells,no interlace,S/H enabled

loc_4262:
		move.w	#$8ADF,(Hint_counter_reserve).w	; H-INT every 223rd scanline
		tst.w	(Two_player_mode).w
		beq.s	loc_427C
		move.w	#$8A6B,(Hint_counter_reserve).w	; H-INT every 108th scanline
		move.w	#$8014,(a6)		; H-INT enabled
		move.w	#$8C87,(a6)		; H res 40 cells,double res interlace

loc_427C:
		move.w	(Hint_counter_reserve).w,(a6)
		move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
		tst.b	(Water_flag).w		; does this level have water?
		beq.s	Level_LoadPal		; if not,branch
		move.w	#$8014,(a6)		; H-INT enabled
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		; this limits the water table to stages after HPZ
	if ~~useFullWaterTables
		subi.w	#hidden_palace_zone_act_1,d0
	endif
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0
		lea	(WaterHeight).l,a1	; load water height array
		move.w	(a1,d0.w),d0
		move.w	d0,(Water_Level_1).w	; set water heights
		move.w	d0,(Water_Level_2).w
		move.w	d0,(Water_Level_3).w
		clr.b	(Water_routine).w	; clear water routine counter
		clr.b	(Water_fullscreen_flag).w	; clear water movement
		move.b	#1,(Water_on).w		; enable water
; loc_42C8: LevelInit_NoWater:
Level_LoadPal:
		move.w	#30,(Current_Air).w

		moveq	#PalID_SonicTails,d0
		bsr.w	PalLoad2	; load Sonic's (and Tails') palette

		tst.b	(Water_flag).w	; is this a water level?
		beq.s	Level_GetBgm	; if not,branch

		moveq	#PalID_HPZ_U,d0		; use HPZ underwater palette
		cmpi.b	#hidden_palace_zone,(Current_Zone).w	; is this Hidden Palace Zone?
		beq.s	Level_WaterPal		; if yes,branch
		moveq	#PalID_CPZ_U,d0		; use CPZ underwater palette
		cmpi.b	#chemical_plant_zone,(Current_Zone).w	; if this Chemical Plant Zone?
		beq.s	Level_WaterPal		; if yes,branch
		moveq	#PalID_NGHZ_U,d0	; use NGHZ underwater palette
; loc_42F0: LevelInit_UnderwaterPalette:
Level_WaterPal:
		bsr.w	PalLoad3_Water		; ACTUALLY load the underwater palette
		tst.b	(Last_star_pole_hit).w	; is this the start of a level?
		beq.s	Level_GetBgm		; if yes,branch
		move.b	(Saved_Water_move).w,(Water_fullscreen_flag).w
; loc_4300: LevelInit_NoUnderwaterPalette:
Level_GetBgm:
		tst.w	(Demo_mode_flag).w
		bmi.s	Level_LoadData
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lea	MusicList(pc),a1
		move.b	(a1,d0.w),d0
		bsr.w	PlayMusic
		move.b	#$34,(TitleCard).w
; loc_431E: LevelInit_TitleCard:
Level_TtlCard:
		move.b	#VintID_TitleCard,(Vint_routine).w
		bsr.w	WaitForVint
		jsr	(RunObjects).l
		jsr	(BuildSprites).l
		bsr.w	RunPLC_RAM
		move.w	(TitleCard_ActNumber+x_pos).w,d0
		cmp.w	(TitleCard_ActNumber+$30).w,d0	; has the title card sequence finished?
		bne.s	Level_TtlCard		; if not,branch
		tst.l	(Plc_Buffer).w		; are there any items in the pattern load cue?
		bne.s	Level_TtlCard		; if yes,branch
		jsr	(Head_Up_Display_Base).l
; loc_434E:
Level_LoadData:
		moveq	#PalID_SonicTails,d0
		bsr.w	PalLoad1		; load Sonic's palette line
		bsr.w	LevelSizeLoad
		bsr.w	DeformBgLayer
		bset	#2,(Scroll_flags).w
		bsr.w	loadZoneBlockMaps
		jsr	(Load_16x16_Mappings_For_Dyn_Sprites).l
		bsr.w	Load_Tiles_From_Start
		jsr	(ConvertCollisionArray).l
		bsr.w	LoadCollisionIndexes
		bsr.w	WaterEffects
		move.b	#1,(MainCharacter).w	; load Sonic object
		tst.w	(Demo_mode_flag).w	; is ending demo flag set? (leftover from Sonic 1)
		bmi.s	Level_SkipHUD		; if not,branch
		move.b	#$21,(HeadsUpDisplay).w	; load HUD object
; loc_4390: Skip_Head_Up_Display:
Level_SkipHUD:
		move.b	#2,(Sidekick).w		; load Tails object
		move.w	(MainCharacter+x_pos).w,(Sidekick+x_pos).w
		move.w	(MainCharacter+y_pos).w,(Sidekick+y_pos).w
		subi.w	#32,(Sidekick+x_pos).w
		tst.b	(Debug_options_flag).w
		beq.s	Level_ChkWater
		btst	#6,(Ctrl_1_Held).w
		beq.s	Level_ChkWater
		move.b	#1,(Debug_mode_flag).w
; loc_43BC:
Level_ChkWater:
		move.w	#0,(Ctrl_1_Logical).w
		move.w	#0,(Ctrl_1).w
		tst.b	(Water_flag).w
		beq.s	Level_ChkOil
		move.b	#4,(Object_RAM+object_size*$1E).w
		move.w	#$60,(Object_RAM+object_size*$1E+x_pos).w
		move.b	#4,(Object_RAM+object_size*$1F).w
		move.w	#$120,(Object_RAM+object_size*$1F+x_pos).w
; loc_43E6:
Level_ChkOil:
		cmpi.b	#oil_ocean_zone,(Current_Zone).w
		bne.s	Level_LoadObj
		move.b	#7,(Object_RAM+object_size*$1E).w
; loc_43F4:
Level_LoadObj:
		jsr	(ObjectsManager).l
		jsr	(RingsManager).l
		jsr	(RunObjects).l
		jsr	(BuildSprites).l
		bsr.w	JmpTo_AniArt_Load
		moveq	#0,d0
		tst.b	(Last_star_pole_hit).w
		bne.s	Level_FromCheckpoint
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.b	d0,(Extra_life_flags).w
; loc_4424:
Level_FromCheckpoint:
		move.b	d0,(Time_Over_flag).w
		move.b	d0,(Shield_flag).w
		move.b	d0,(Invincibility_flag).w
		move.b	d0,(Speed_shoes).w
		move.b	d0,(unk_FE2F).w
		move.w	d0,(Debug_placement_mode).w
		move.w	d0,(Level_Inactive_flag).w
		bsr.w	OscillateNumInit
		move.b	#1,(Update_HUD_score).w
		move.b	#1,(Update_HUD_rings).w
		move.b	#1,(Update_HUD_timer).w
		move.w	#4,(Sonic_Pos_Record_Index).w
		move.w	#0,(Sonic_Pos_Record_Buf).w
		move.w	#0,(Demo_button_index).w
		move.w	#0,(Demo_button_index_2P).w
		lea	(Demo_Index).l,a1
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),a1
		tst.w	(Demo_mode_flag).w
		bpl.s	+
		lea	(Demo_End_Index).l,a1
		move.w	(Ending_demo_number).w,d0
		subq.w	#1,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),a1
+
		move.b	1(a1),(Demo_press_counter).w
		subq.b	#1,(Demo_press_counter).w
		lea	(Demo_Tails_Ghz).l,a1
		move.b	1(a1),(Demo_press_counter_2P).w
		subq.b	#1,(Demo_press_counter_2P).w
		move.w	#$668,(Demo_Time_left).w
		tst.w	(Demo_mode_flag).w
		bpl.s	loc_44d2
		move.w	#$21C,(Demo_Time_left).w
		cmpi.w	#4,(Ending_demo_number).w
		bne.s	loc_44d2
		move.w	#$1FE,(Demo_Time_left).w

loc_44d2:
		tst.b	(Water_flag).w
		beq.s	loc_44F2
		moveq	#PalID_HPZ_U,d0
		cmpi.b	#hidden_palace_zone,(Current_Zone).w
		beq.s	loc_44EE
		moveq	#PalID_CPZ_U,d0
		cmpi.b	#chemical_plant_zone,(Current_Zone).w
		beq.s	loc_44EE
		moveq	#PalID_NGHZ_U,d0

loc_44EE:
		bsr.w	PalLoad4_Water

loc_44F2:
		move.w	#4-1,d1

loc_44F6:
		move.b	#VintID_Level,(Vint_routine).w
		bsr.w	WaitForVint
		dbf	d1,loc_44F6
		move.w	#$202F,(Palette_fade_range).w
		bsr.w	Pal_FadeFromBlack2
		tst.w	(Demo_mode_flag).w
		bmi.s	Level_ClrTitleCard
		addq.b	#2,(TitleCard_ZoneName+routine).w
		addq.b	#4,(TitleCard_Zone+routine).w
		addq.b	#4,(TitleCard_ActNumber+routine).w
		addq.b	#4,(TitleCard_Background+routine).w
		bra.s	loc_452E
; loc_4526:
Level_ClrTitleCard:
		moveq	#PLCID_StdExp,d0
		jsr	(LoadPLC).l

loc_452E:
		bclr	#GameModeFlag_TitleCard,(Game_Mode).w

; ===========================================================================
; ---------------------------------------------------------------------------
; Main level loop (when all title card and loading sequences are finished)
; ---------------------------------------------------------------------------
; loc_4534:
Level_MainLoop:
		bsr.w	PauseGame
		move.b	#VintID_Level,(Vint_routine).w
		bsr.w	WaitForVint
		addq.w	#1,(Timer_frames).w		; add 1 to the level counter
		bsr.w	Move_Sonic_In_Demo
		bsr.w	WaterEffects
		jsr	(RunObjects).l
		tst.w	(Level_Inactive_flag).w
		bne.w	Level
		tst.w	(Debug_placement_mode).w
		bne.s	loc_456A
		cmpi.b	#6,(MainCharacter+routine).w
		bcc.s	loc_456E

loc_456A:
		bsr.w	DeformBgLayer

loc_456E:
		bsr.w	UpdateWaterSurface
		jsr	(RingsManager).l
		bsr.w	JmpTo_AniArt_Load
		bsr.w	PalCycle_Load
		bsr.w	RunPLC_RAM
		bsr.w	Oscillate_Num_Do
		bsr.w	Change_Ring_Frame
		bsr.w	End_Level_Art_Load
		jsr	(BuildSprites).l
		jsr	(ObjectsManager).l
		cmpi.b	#GameModeID_Demo,(Game_Mode).w
		beq.s	loc_45B0
		cmpi.b	#GameModeID_Level,(Game_Mode).w
		beq.w	Level_MainLoop
		rts
; ---------------------------------------------------------------------------

loc_45B0:
		tst.w	(Level_Inactive_flag).w
		bne.s	loc_45CE
		tst.w	(Demo_Time_left).w
		beq.s	loc_45CE
		cmpi.b	#GameModeID_Demo,(Game_Mode).w
		beq.w	Level_MainLoop
		move.b	#GameModeID_SegaScreen,(Game_Mode).w
		rts
; ---------------------------------------------------------------------------

loc_45CE:
		cmpi.b	#GameModeID_Demo,(Game_Mode).w
		bne.s	loc_45E8
		move.b	#GameModeID_SegaScreen,(Game_Mode).w
		tst.w	(Demo_mode_flag).w
		bpl.s	loc_45E8
		move.b	#S1GameModeID_Credits,(Game_Mode).w
; ---------------------------------------------------------------------------

loc_45E8:
		move.w	#60,(Demo_Time_left).w
		move.w	#$3F,(Palette_fade_range).w
		clr.w	(PalChangeSpeed).w

loc_45F8:
		move.b	#VintID_Level,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.w	Move_Sonic_In_Demo
		jsr	(RunObjects).l
		jsr	(BuildSprites).l
		jsr	(ObjectsManager).l
		subq.w	#1,(PalChangeSpeed).w
		bpl.s	loc_4628
		move.w	#2,(PalChangeSpeed).w
		bsr.w	Pal_FadeOut

loc_4628:
		tst.w	(Demo_Time_left).w
		bne.s	loc_45F8
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to move the water or oil surface sprites to where the screen is at
; (the closest match to this subroutine in Sonic 1 is Obj1B_Action)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4630:  Change_Water_Surface_Pos:
UpdateWaterSurface:
		tst.b	(Water_flag).w
		beq.s	loc_4658
		move.w	(Camera_X_pos).w,d1
		btst	#0,(Timer_frames+1).w
		beq.s	loc_4646
		addi.w	#32,d1

loc_4646:
		move.w	d1,d0
		addi.w	#$60,d0
		move.w	d0,(Object_RAM+$780+x_pos).w
		addi.w	#$120,d1
		move.w	d1,(Object_RAM+$7C0+x_pos).w

loc_4658:
		rts
; End of function UpdateWaterSurface

; ---------------------------------------------------------------------------
; Subroutine to do special water effects
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_465A:
WaterEffects:
		tst.b	(Water_flag).w		; does the level have water?
		beq.s	return_46B6		; if not,branch
		tst.b	(Deform_lock).w
		bne.s	MoveWater
		cmpi.b	#6,(MainCharacter+routine).w	; is Sonic dead?
		bcc.s	MoveWater		; if yes,branch
		bsr.w	DynamicWater
; loc_4672:
MoveWater:
		clr.b	(Water_fullscreen_flag).w
		moveq	#0,d0
		cmpi.b	#neo_green_hill_zone,(Current_Zone).w	; is this NGHZ?
		beq.s	loc_4686		; if yes,branch
		move.b	(Oscillating_Data).w,d0
		lsr.w	#1,d0

loc_4686:
		add.w	(Water_Level_2).w,d0
		move.w	d0,(Water_Level_1).w
		; calculate distance between water surface and top of screen
		move.w	(Water_Level_1).w,d0
		sub.w	(Camera_Y_pos).w,d0
		bcc.s	loc_46A8
		tst.w	d0
		bpl.s	loc_46A8
		move.b	#224-1,(Hint_counter_reserve+1).w	; H-INT every 224th scanline
		move.b	#1,(Water_fullscreen_flag).w

loc_46A8:
		cmpi.w	#224-1,d0
		bcs.s	loc_46B2
		move.w	#224-1,d0

loc_46B2:
		move.b	d0,(Hint_counter_reserve+1).w	; H-INT every d0 scanlines

return_46B6:
		rts
; ===========================================================================
; The code that handles initializing the water tables effectively makes
; it start at $08 instead of $00 to save space
; word_46B8: Water_Height_Array:
	if useFullWaterTables
WaterHeight: zoneOrderedTable 2,2
	zoneTableEntry.w  $600,$600	; GHZ
	zoneTableEntry.w  $600,$600	; OWZ
	zoneTableEntry.w  $600,$600	; WZ
	zoneTableEntry.w  $600,$600	; SSZ
	zoneTableEntry.w  $600,$600	; MTZ
	zoneTableEntry.w  $600,$600	; MTZ
	zoneTableEntry.w  $600,$600	; BLZ
	zoneTableEntry.w  $600,$600	; HTZ
	zoneTableEntry.w  $600,$600	; HPZ
	zoneTableEntry.w  $600,$600	; RWZ
	zoneTableEntry.w  $600,$600	; OOZ
	zoneTableEntry.w  $600,$600	; DHZ
	zoneTableEntry.w  $600,$600	; CNZ
	zoneTableEntry.w  $600,$710	; CPZ
	zoneTableEntry.w  $600,$600	; GCZ
	zoneTableEntry.w  $410,$510	; NGHZ
	zoneTableEntry.w  $600,$600	; DEZ
	zoneTableEnd
	else
WaterHeight:
	dc.w  $600,$600	; HPZ
	dc.w  $600,$600	; RWZ
	dc.w  $600,$600	; OOZ
	dc.w  $600,$600	; DHZ
	dc.w  $600,$600	; CNZ
	dc.w  $600,$710	; CPZ
	dc.w  $600,$600	; GCZ
	dc.w  $410,$510	; NGHZ
	; no entry for DEZ...
	endif
; ===========================================================================
; sub_46D8: Dynamic_Water_Height:
DynamicWater:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
	if ~~useFullWaterTables
		subi.w	#hidden_palace_zone_act_1,d0
	endif
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0
		move.w	DynamicWater_Index(pc,d0.w),d0
		jsr	DynamicWater_Index(pc,d0.w)
		moveq	#0,d1
		move.b	(Water_on).w,d1
		move.w	(Water_Level_3).w,d0
		sub.w	(Water_Level_2).w,d0
		beq.s	loc_470A
		bcc.s	loc_4706
		neg.w	d1

loc_4706:
		add.w	d1,(Water_Level_2).w

loc_470A:
		rts
; End of function DynamicWater

; ===========================================================================
; Like with the water height table,the index starts at $08,rather than $00
; off_470C:
	if useFullWaterTables
DynamicWater_Index: zoneOrderedOffsetTable 2,2
	zoneOffsetTableEntry.w DynamicWater_Null ; GHZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; GHZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; OWZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; OWZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; WZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; WZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; SSZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; SSZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; MTZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; MTZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; MTZ 3
	zoneOffsetTableEntry.w DynamicWater_Null ; MTZ 4
	zoneOffsetTableEntry.w DynamicWater_Null ; BLZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; BLZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; HTZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; HTZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; HPZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; HPZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; RWZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; RWZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; OOZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; OOZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; DHZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; DHZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; CNZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; CNZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; CPZ 1
	zoneOffsetTableEntry.w DynamicWater_CPZ2 ; CPZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; GCZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; GCZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; NGHZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; NGHZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; DEZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; DEZ 2
	zoneTableEnd
	else
DynamicWater_Index: offsetTable
	offsetTableEntry.w DynamicWater_Null ; HPZ 1
	offsetTableEntry.w DynamicWater_Null ; HPZ 2
	offsetTableEntry.w DynamicWater_Null ; RWZ 1
	offsetTableEntry.w DynamicWater_Null ; RWZ 2
	offsetTableEntry.w DynamicWater_Null ; OOZ 1
	offsetTableEntry.w DynamicWater_Null ; OOZ 2
	offsetTableEntry.w DynamicWater_Null ; DHZ 1
	offsetTableEntry.w DynamicWater_Null ; DHZ 2
	offsetTableEntry.w DynamicWater_Null ; CNZ 1
	offsetTableEntry.w DynamicWater_Null ; CNZ 2
	offsetTableEntry.w DynamicWater_Null ; CPZ 1
	offsetTableEntry.w DynamicWater_CPZ2 ; CPZ 2
	offsetTableEntry.w DynamicWater_Null ; GCZ 1
	offsetTableEntry.w DynamicWater_Null ; GCZ 2
	offsetTableEntry.w DynamicWater_Null ; NGHZ 1
	offsetTableEntry.w DynamicWater_Null ; NGHZ 2
	endif
; ===========================================================================
; return_472C:
DynamicWater_Null:
		rts
; ===========================================================================
; loc_472E:
DynamicWater_CPZ2:
		cmpi.w	#$1DE0,(Camera_X_pos).w
		bcs.s	return_473C
		move.w	#$510,(Water_Level_3).w

return_473C:
		rts
; ===========================================================================

S1_LZ_Wind_Tunnels:; loc_473E: leftover from Sonic 1's LZ
		tst.w	(Debug_placement_mode).w
		bne.w	loc_481A
		lea	(S1_LZ_Wind_Data).l,a2	; loc_4824
		moveq	#0,d0
		move.b	(Current_Act).w,d0
		lsl.w	#3,d0
		adda.w	d0,a2
		moveq	#0,d1
		tst.b	(Current_Act).w
		bne.s	loc_4762
		moveq	#1,d1
		subq.w	#8,a2
loc_4762:
		lea	(MainCharacter).w,a1
loc_4766:
		move.w	x_pos(a1),d0
		cmp.w	(a2),d0
		bcs.w	loc_4804
		cmp.w	4(a2),d0
		bcc.w	loc_4804
		move.w	y_pos(a1),d2
		cmp.w	2(a2),d2
		bcs.w	loc_4804
		cmp.w	6(a2),d2
		bcc.s	loc_4804
		move.b	(Vint_runcount+3).w,d0
		andi.b	#$3F,d0
		bne.s	loc_479E
		move.w	#SndID_CNZBossZap,d0
		jsr	(PlaySound).l	; loc_14C6
loc_479E:
		tst.b	(WindTunnel_holding_flag).w
		bne.w	loc_481A
		cmpi.b	#4,routine(a1)
		bcc.s	loc_4816
		move.b	#1,(WindTunnel_flag).w
		subi.w	#$80,d0
		cmp.w	(a2),d0
		bcc.s	loc_47CC
		moveq	#2,d0
		cmpi.b	#1,(Current_Act).w
		bne.s	loc_47C8
		neg.w	d0
loc_47C8:
		add.w	d0,y_pos(a1)
loc_47CC:
		addi.w	#4,x_pos(a1)
		move.w	#$400,x_vel(a1)
		move.w	#0,y_vel(a1)
		move.b	#$F,anim(a1)
		bset	#1,status(a1)
		btst	#0,(Ctrl_1_Held).w
		beq.s	loc_47F6
		subq.w	#1,y_pos(a1)
loc_47F6:
		btst	#1,(Ctrl_1_Held).w
		beq.s	loc_4802
		addq.w	#1,y_pos(a1)
loc_4802:
		rts
loc_4804:
		addq.w	#8,a2
		dbf	d1,loc_4766
		tst.b	(WindTunnel_flag).w
		beq.s	loc_481A
		move.b	#0,anim(a1)
loc_4816:
		clr.b	(WindTunnel_flag).w
loc_481A:
		rts		
;loc_481C:
		dc.w	$A80,$300,$C10,$380
S1_LZ_Wind_Data: ; loc_4824:
		dc.w	$F80,$100,$1410,$180,$460,$400,$710,$480
		dc.w	$A20,$600,$1610,$6E0,$C80,$600,$13D0,$680		
S1_LZ_Water_Slides: ; loc_4844:
		lea	(MainCharacter).w,A1
		btst	#1,status(a1)
		bne.s	loc_4878
		move.w	y_pos(a1),d0
		andi.w	#$700,d0
		move.b	x_pos(a1),d1
		andi.w	#$7F,d1
		add.w	d1,d0
		lea	(Level_Layout).w,A2
		move.b	(A2,d0),d0
		lea	loc_48DD(pc),A2
		moveq	#6,d1
loc_4870:		
		cmp.b	-(a2),d0
		dbeq.w	d1,loc_4870
		beq.s	loc_488A
loc_4878:
		tst.b	(Sliding_flag).w
		beq.s	loc_4888
		move.w	#5,$2E(a1)
		clr.b	(Sliding_flag).w
loc_4888:
		rts
loc_488A:
		cmpi.w	#3,d1
		bcc.s	loc_4892
		nop
loc_4892:
		bclr	#0,status(a1)
		move.b	loc_48CE(pc,d1),d0
		move.b	d0,inertia(a1)
		bpl.s	loc_48A8
		bset	#0,status(a1)
loc_48A8:
		clr.b	inertia+1(a1)
		move.b	#$1B,anim(a1)
		move.b	#1,(Sliding_flag).w
		move.b	(Vint_runcount+3).w,d0
		andi.b	#$1F,d0
		bne.s	loc_48CC
		move.w	#SndID_CNZBossZap,d0
		jsr	(PlaySound).l	; loc_14C6
loc_48CC:
		rts
loc_48CE:
		dc.b	$A,$F5,$A,$F6,$F5,$F4,$B,0,2,7,3,$4C,$4B,8,$04 
loc_48DD:
		dc.b	0
Move_Sonic_In_Demo: ; loc_48DE:
		tst.w	(Demo_mode_flag).w
		bne.s	Move_Demo_On	; loc_495C
		rts
Move_Sonic_Demo_Record: ; unused subroutine for	recording demos
		lea	($FE8000),A1
		move.w	(Demo_button_index).w,d0
		adda.w	d0,A1
		move.b	(Ctrl_1_Held).w,d0
		cmp.b	(a1),d0
		bne.s	loc_4908
		addq.b	#1,1(a1)
		cmpi.b	#$FF,1(a1)
		beq.s	loc_4908
		bra.s	loc_491C
loc_4908:
		move.b	d0,2(a1)
		move.b	#0,3(a1)
		addq.w	#2,(Demo_button_index).w
		andi.w	#$3FF,(Demo_button_index).w
loc_491C:
		cmpi.b	#green_hill_zone,(Current_Zone).w
		bne.s	loc_495A
		lea	($FEC000),A1
		move.w	(Demo_button_index_2P).w,d0
		adda.w	d0,A1
		move.b	(Ctrl_2_Held).w,d0
		cmp.b	(a1),d0
		bne.s	loc_4946
		addq.b	#1,1(a1)
		cmpi.b	#$FF,1(a1)
		beq.s	loc_4946
		bra.s	loc_495A
loc_4946:
		move.b	d0,2(a1)
		move.b	#0,3(a1)
		addq.w	#2,(Demo_button_index_2P).w
		andi.w	#$3FF,(Demo_button_index_2P).w
loc_495A:
		rts
Move_Demo_On: ; loc_495C:
		tst.b	(Ctrl_1_Held).w
		bpl.s	loc_496E
		tst.w	(Demo_mode_flag).w
		bmi.s	loc_496E
		move.b	#GameModeID_TitleScreen,(Game_Mode).w
loc_496E:
		lea	(Demo_Index).l,a1	; loc_49F2
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		cmpi.b	#GameModeID_SpecialStage,(Game_Mode).w
		bne.s	loc_4984
		moveq	#6,d0
loc_4984:
		lsl.w	#2,d0
		move.l	(a1,d0),a1
		move.w	(Demo_button_index).w,d0
		adda.w	d0,a1
		move.b	(a1),d0
		lea	(Ctrl_1).w,a0
		move.b	d0,d1
		moveq	#0,d2
		eor.b	d2,d0
		move.b	d1,(a0)+
		and.b	d1,d0
		move.b	d0,(a0)+
		subq.b	#1,(Demo_press_counter).w
		bcc.s	loc_49B2
		move.b	3(a1),(Demo_press_counter).w
		addq.w	#2,(Demo_button_index).w
loc_49B2:
		cmpi.b	#green_hill_zone,(Current_Zone).w
		bne.s	loc_49EA
		lea	(Demo_Tails_Ghz).l,a1	; loc_4DF8
		move.w	(Demo_button_index_2P).w,d0
		adda.w	d0,a1
		move.b	(a1),d0
		lea	(Ctrl_2).w,a0
		move.b	d0,d1
		moveq	#0,d2
		eor.b	d2,d0
		move.b	d1,(a0)+
		and.b	d1,d0
		move.b	d0,(a0)+
		subq.b	#1,(Demo_press_counter_2P).w
		bcc.s	loc_49E8
		move.b	3(a1),(Demo_press_counter_2P).w
		addq.w	#2,(Demo_button_index_2P).w
loc_49E8:
		rts
loc_49EA:
		move.w	#0,(Ctrl_2).w
		rts
Demo_Index: ; loc_49F2: ; Demo sequence array
		dc.l	Demo_Green_Hill	; $00 - Green Hill
		dc.l	Demo_Green_Hill	; $01
		dc.l	Demo_Green_Hill	; $02 - Wood
		dc.l	Demo_Green_Hill	; $03
		dc.l	Demo_Green_Hill	; $04 - Metropolis
		dc.l	Demo_Green_Hill	; $05 - Metropolis
		dc.l	Demo_Green_Hill	; $06
		dc.l	Demo_Hill_Top	; $07 - Hill Top
		dc.l	Demo_Hidden_Palace	; $08 - Hidden Palace
		dc.l	Demo_Green_Hill	; $09
		dc.l	Demo_Green_Hill	; $0A - Oil Ocean
		dc.l	Demo_Green_Hill	; $0B - Dust Hill
		dc.l	Demo_Green_Hill	; $0C - Casino Night
		dc.l	Demo_Chemical_Plant	; $0D - Chemical Plant
		dc.l	Demo_Green_Hill	; $0E - Genocide City
		dc.l	Demo_Green_Hill	; $0F - Neo Green Hill
		dc.l	Demo_Green_Hill	; $10 - Death Egg
;loc_4A36:
		dc.l	$FE8000,$FE8000,$FE8000,$FE8000
		dc.l	$FE8000,$FE8000,$FE8000,$FE8000
		dc.l	$FE8000,$FE8000,$FE8000,$FE8000
		dc.l	$FE8000,$FE8000,$FE8000,$FE8000
		dc.l	$FE8000
Demo_End_Index: ; loc_4A7A:
		dc.w	$008B,$0837,$0042,$085C,$006A,$085F,$002F,$082C
		dc.w	$0021,$0803,$2830,$0808,$002E,$0815,$000F,$0846
		dc.w	$001A,$08FF,$08CA,$0000,$0000,$0000,$0000,$0000

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_4AAA: Load_Colision_Index:
LoadCollisionIndexes:
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lsl.w	#2,d0
		move.l	#Primary_Collision,(Collision_addr).w
		move.l	Off_ColP(pc,d0.w),a1
		lea	(Primary_Collision).w,a2
		bsr.s	levelCollisionLoad
		move.l	Off_ColS(pc,d0.w),a1
		lea	(Secondary_Collision).w,a2
; loc_4ACC: Load_Colision
levelCollisionLoad:
		move.w	#$300-1,d1
		moveq	#0,d2

-		move.b	(a1)+,d2
		move.w	d2,(a2)+
		dbf	d1,-
		rts
; End of function LoadCollisionIndexes

; ===========================================================================
; ---------------------------------------------------------------------------
; Pointers to primary collision indexes

; Contains an array of pointers to the primary collision index data for each
; level. 1 pointer for each level,pointing the primary collision index.
; ---------------------------------------------------------------------------
; off_4ADC: Primary_Colision_Index:
Off_ColP: zoneOrderedTable 4,1
	zoneTableEntry.l Green_Hill_Colision_1
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Wood_Colision
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Metropolis_Colision
	zoneTableEntry.l Metropolis_Colision
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Green_Hill_Colision_1
	zoneTableEntry.l Hidden_Palace_Colision_1
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Oil_Ocean_Colision
	zoneTableEntry.l Dust_Hill_Colision
	zoneTableEntry.l Casino_Night_Colision_1
	zoneTableEntry.l Chemical_Plant_Colision_1
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Neo_Green_Hill_Colision_1
	zoneTableEntry.l Special_Stage_1
	zoneTableEnd

; ---------------------------------------------------------------------------
; Pointers to secondary collision indexes

; Contains an array of pointers to the secondary collision index data for
; each level. 1 pointer for each level,pointing the secondary collision
; index.
; ---------------------------------------------------------------------------
; off_4B20: Secundary_Colision_Index:
Off_ColS: zoneOrderedTable 4,1
	zoneTableEntry.l Green_Hill_Colision_2
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Wood_Colision
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Metropolis_Colision
	zoneTableEntry.l Metropolis_Colision
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Green_Hill_Colision_2
	zoneTableEntry.l Hidden_Palace_Colision_2
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Oil_Ocean_Colision
	zoneTableEntry.l Dust_Hill_Colision
	zoneTableEntry.l Casino_Night_Colision_2
	zoneTableEntry.l Chemical_Plant_Colision_2
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Neo_Green_Hill_Colision_2
	zoneTableEntry.l Special_Stage_1
	zoneTableEnd

; ===========================================================================
; ---------------------------------------------------------------------------
; Oscillating number subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_4B64:
OscillateNumInit:
		lea	(Oscillating_Numbers).w,a1
		lea	(Osc_Data).l,a2
		moveq	#bytesToWcnt(Osc_Data_End-Osc_Data),d1
; loc_4B70:
Osc_Loop:
		move.w	(a2)+,(a1)+
		dbf	d1,Osc_Loop
		rts
; ===========================================================================
; word_4B78: Oscillate_Data:
Osc_Data:	dc.w	$7D,$80,0,$80,0,$80,0,$80
		dc.w	0,$80,0,$80,0,$80,0,$80
		dc.w	0,$80,0,$3848,$EE,$2080,$B4,$3080
		dc.w	$10E,$5080,$1C2,$7080,$276,$80,0,$4000
		dc.w	$FE
Osc_Data_End:

Oscillate_Num_Do: ; loc_4BBA:
		cmpi.b	#6,(MainCharacter+routine).w
		bcc.s	loc_4C10
		lea	(Oscillating_Numbers).w,A1
		lea	(Oscillate_Data2).l,A2	; loc_4C12
		move.w	(a1)+,d3
		moveq	#$F,d1
loc_4Bd0:
		move.w	(a2)+,d2
		move.w	(a2)+,d4
		btst	d1,d3
		bne.s	loc_4BF0
		move.w	2(a1),d0
		add.w	d2,d0
		move.w	d0,2(a1)
		_add.w	d0,0(a1)
		_cmp.b	0(a1),d4
		bhi.s	loc_4C06
		bset	d1,d3
		bra.s	loc_4C06
loc_4BF0:
		move.w	2(a1),d0
		sub.w	d2,d0
		move.w	d0,2(a1)
		_add.w	d0,0(a1)
		_cmp.b	0(a1),d4
		bls.s	loc_4C06
		bclr	d1,d3
loc_4C06:
		addq.w	#4,a1
		dbf	d1,loc_4Bd0
		move.w	d3,(Oscillation_Control).w
loc_4C10:
		rts
Oscillate_Data2: ; loc_4C12:
		dc.w	$0002,$0010,$0002,$0018,$0002,$0020,$0002,$0030
		dc.w	$0004,$0020,$0008,$0008,$0008,$0040,$0004,$0040
		dc.w	$0002,$0038,$0002,$0038,$0002,$0020,$0003,$0030
		dc.w	$0005,$0050,$0007,$0070,$0002,$0040,$0002,$0040
Change_Ring_Frame: ; loc_4C52:
		subq.b	#1,(Logspike_anim_counter).w
		bpl.s	loc_4C68
		move.b	#$B,(Logspike_anim_counter).w
		subq.b	#1,(Logspike_anim_frame).w
		andi.b	#7,(Logspike_anim_frame).w
loc_4C68:
		subq.b	#1,(Rings_anim_counter).w
		bpl.s	loc_4C7E
		move.b	#7,(Rings_anim_counter).w
		addq.b	#1,(Rings_anim_frame).w
		andi.b	#3,(Rings_anim_frame).w
loc_4C7E:
		subq.b	#1,(Unknown_anim_counter).w
		bpl.s	loc_4C9C
		move.b	#7,(Unknown_anim_counter).w
		addq.b	#1,(Unknown_anim_frame).w
		cmpi.b	#6,(Unknown_anim_frame).w
		bcs.s	loc_4C9C
		move.b	#0,(Unknown_anim_frame).w
loc_4C9C:
		tst.b	(Ring_spill_anim_counter).w
		beq.s	loc_4CBE
		moveq	#0,d0
		move.b	(Ring_spill_anim_counter).w,d0
		add.w	(Ring_spill_anim_accum).w,d0
		move.w	d0,(Ring_spill_anim_accum).w
		rol.w	#7,d0
		andi.w	#3,d0
		move.b	d0,(Ring_spill_anim_frame).w
		subq.b	#1,(Ring_spill_anim_counter).w
loc_4CBE:
		rts
End_Level_Art_Load: ; loc_4CC0: ; Test for load end level sprites...
		tst.w	(Debug_placement_mode).w
		bne.w	Skip_End_Level_Art_Load ; loc_4CF6
		cmpi.w	#green_hill_zone_act_2,(Current_ZoneAndAct).w
		beq.s	Skip_End_Level_Art_Load ; loc_4CF6
		move.w	(Camera_X_pos).w,d0
		move.w	(Camera_Max_X_pos).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	Skip_End_Level_Art_Load ; loc_4CF6
		tst.b	(Update_HUD_timer).w
		beq.s	Skip_End_Level_Art_Load ; loc_4CF6
		cmp.w	(Camera_Min_X_pos).w,d1
		beq.s	Skip_End_Level_Art_Load ; loc_4CF6
		move.w	d1,(Camera_Min_X_pos).w
		moveq	#PLCID_Signpost,d0
		bra.w	LoadPLC2		; loc_176E
Skip_End_Level_Art_Load: ; loc_4CF6:
		rts
Demo_Green_Hill: ; loc_4CF8: ; $00 - Green Hill Sonic Demo control
		dc.w	$0044,$0800,$2805,$0859,$2804,$0835,$2806,$0842
		dc.w	$2804,$0819,$000F,$080A,$2809,$084A,$2809,$0810
		dc.w	$0005,$041B,$0200,$084B,$282D,$0855,$2809,$0826
		dc.w	$281C,$0819,$2808,$08FF,$0896,$2813,$081D,$2819
		dc.w	$082A,$2807,$0900,$0100,$0520,$0402,$0501,$0000
		dc.w	$083A,$0025,$040A,$2409,$041C,$0003,$083A,$2806
		dc.w	$080C,$0016,$0800,$280F,$0833,$2807,$0804,$0046
		dc.w	$086A,$0029,$8000,$C000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
Demo_Tails_Ghz: ; loc_4DF8: ; $00 - Green Hill Tails Demo control
		dc.w	$0046,$081E,$280A,$085E,$2830,$0866,$000F,$080F
		dc.w	$282E,$0800,$001F,$0812,$0013,$080A,$0016,$040D
		dc.w	$0008,$0410,$0030,$086B,$2814,$0880,$0A02,$0223
		dc.w	$0007,$0813,$2817,$0800,$0003,$0403,$0500,$0100
		dc.w	$0901,$083C,$2807,$0018,$084D,$2812,$0801,$0004
		dc.w	$080B,$0007,$081B,$0009,$2005,$2813,$0804,$0021
		dc.w	$0811,$0020,$0851,$000B,$0457,$000D,$0227,$0A00
		dc.w	$0002,$0901,$082A,$2815,$0803,$2819,$080A,$000A
		dc.w	$0802,$281B,$0833,$0027,$083A,$0912,$0107,$0013
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
Demo_Hill_Top: ; loc_4EF8: ; $07 - Hill Top Sonic Demo control
		dc.w	$0005,$011D,$0903,$2905,$0910,$0100,$0013,$0400
		dc.w	$050A,$2507,$0510,$0401,$000C,$0804,$090C,$290A
		dc.w	$0910,$0803,$001C,$2007,$000B,$0406,$0025,$2006
		dc.w	$0022,$0805,$0025,$040E,$0033,$0807,$0039,$080A
		dc.w	$2808,$0816,$0024,$0874,$2802,$2907,$0903,$000F
		dc.w	$080D,$0005,$040C,$0001,$2002,$2800,$2A08,$2802
		dc.w	$081E,$0004,$0413,$0012,$0818,$280B,$0811,$002C
		dc.w	$080C,$000D,$2004,$2803,$0805,$0022,$0412,$0004
		dc.w	$081A,$000D,$0406,$0037,$080C,$0019,$080D,$000C
		dc.w	$0409,$0003,$0820,$001A,$0406,$0022,$0809,$0009
		dc.w	$0816,$002F,$080E,$2804,$2002,$0008,$0419,$0005
		dc.w	$0806,$2808,$0808,$0024,$0872,$0A09,$020E,$0A6B
		dc.w	$8A00,$4000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
Demo_Hidden_Palace: ; loc_4FF8: ; $07 - Hidden Palace Sonic Demo control
		dc.w	$0040,$0833,$2806,$0839,$2805,$080D,$0025,$0810
		dc.w	$282A,$081C,$0200,$2603,$2200,$2A00,$2806,$0822
		dc.w	$0200,$060F,$0408,$0600,$020E,$062F,$0279,$0601
		dc.w	$0443,$240F,$0417,$0009,$081C,$2803,$0845,$0005
		dc.w	$081A,$2833,$0872,$000F,$0415,$2410,$040B,$0024
		dc.w	$0401,$2408,$0407,$0006,$0404,$001E,$240E,$0415
		dc.w	$001E,$2003,$240F,$0400,$0007,$0812,$0409,$240F
		dc.w	$0406,$000A,$0462,$2412,$2004,$0021,$280E,$0816
		dc.w	$0019,$0829,$0063,$0415,$2409,$0439,$0031,$0825
		dc.w	$2802,$0812,$0093,$8000,$C000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
Demo_Chemical_Plant: ; loc_50F8: ; $07 - Chemical Plant Sonic Demo control
		dc.w	$001B,$0130,$0019,$0829,$2813,$0803,$001D,$2003
		dc.w	$281E,$0802,$0009,$0405,$002E,$081E,$2805,$2003
		dc.w	$000B,$0401,$0507,$0400,$002F,$2803,$2A04,$0A00
		dc.w	$0806,$0024,$0802,$2806,$0801,$0026,$08FF,$0814
		dc.w	$280A,$0803,$0060,$080E,$2807,$080C,$0008,$040B
		dc.w	$0023,$0805,$0093,$0819,$2811,$0878,$280F,$08FF
		dc.w	$0883,$280D,$0882,$001F,$8000,$4000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000

; ===========================================================================
; loc_51F8: JumpToDynamic_Art_Cues:
JmpTo_AniArt_Load ; JmpTo
	jmp	(AniArt_Load).l
	align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic 1 Special Stages
; You can technically "access" them,unlike the Nick Arcade prototype,but
; it has to be done on less accurate emulators such as Kega; more accurate
; emulations/hardware tends to hang before or after loading
; ---------------------------------------------------------------------------
; loc_5200:
SpecialStage:
		move.w	#SndID_SpecStageEntry,d0
		bsr.w	PlaySound
		bsr.w	Pal_MakeFlash
		move	#$2700,sr
		lea	(VDP_control_port).l,a6
		move.w	#$8B03,(a6)
		move.w	#$8004,(a6)
		move.w	#$8AAF,(Hint_counter_reserve).w
		move.w	#$9011,(a6)
		move.w	(VDP_Reg1_val).w,d0
		andi.b	#$BF,d0
		move.w	d0,(VDP_control_port).l
		bsr.w	ClearScreen
		move	#$2300,sr
		lea	(VDP_control_port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$946F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$50000081,(a5)
		move.w	#0,(VDP_data_port).l

loc_5260:
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_5260
		move.w	#$8F02,(a5)
		bsr.w	SS_Background_Load
		moveq	#S1PLCID_SpecStg,d0
		bsr.w	RunPLC_ROM

		clearRAM Primary_Collision,Primary_Collision+$2000
		clearRAM Misc_Variables,Misc_Variables_End
		clearRAM Oscillating_Data,Oscillating_Numbers_End
		clearRAM Decomp_Buffer,Decomp_Buffer_End

		clr.b	(Water_fullscreen_flag).w
		clr.w	(Level_Inactive_flag).w

		moveq	#S1PalID_SpecStg,d0
		bsr.w	PalLoad1
		jsr	(S1_Special_Stage_Load).l

		move.l	#0,(Camera_X_pos).w
		move.l	#0,(Camera_Y_pos).w
		move.b	#9,(MainCharacter).w
		bsr.w	S1_Pal_Cycle_Special_Stage
		clr.w	(SpecialStage_angle).w
		move.w	#$40,(SpecialStage_speed).w
		move.w	#MusID_SpecStg,d0
		bsr.w	PlayMusic
		move.w	#0,(Demo_button_index).w
		lea	(Demo_Index).l,a1
		moveq	#6,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),a1
		move.b	1(a1),(Demo_press_counter).w
		subq.b	#1,(Demo_press_counter).w
		clr.w	(Ring_count).w
		clr.b	(Extra_life_flags).w
		move.w	#0,(Debug_placement_mode).w
		move.w	#$708,(Demo_Time_left).w
		tst.b	(Debug_options_flag).w
		beq.s	loc_533C
		btst	#6,(Ctrl_1_Held).w
		beq.s	loc_533C
		move.b	#1,(Debug_mode_flag).w

loc_533C:
		move.w	(VDP_Reg1_val).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_control_port)
		bsr.w	Pal_MakeWhite

loc_534E:
		bsr.w	PauseGame
		move.b	#VintID_S1SS,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.w	Move_Sonic_In_Demo
		move.w	(Ctrl_1).w,(Ctrl_1_Logical).w
		jsr	(RunObjects).l
		jsr	(BuildSprites).l
		jsr	(S1_SS_Show_Layout).l
		bsr.w	S1_SS_Bg_Animate
		tst.w	(Demo_mode_flag).w
		beq.s	loc_538A
		tst.w	(Demo_Time_left).w
		beq.w	loc_54B8
loc_538A:
		cmpi.b	#GameModeID_SpecialStage,(Game_Mode).w
		beq.w	loc_534E
		tst.w	(Demo_mode_flag).w
		bne.w	loc_54C0
		move.b	#GameModeID_Level,(Game_Mode).w
		cmpi.w	#metropolis_zone_act_6,(Current_ZoneAndAct).w
		bcs.s	loc_53AE
		clr.w	(Current_ZoneAndAct).w
loc_53AE:
		move.w	#60,(Demo_Time_left).w
		move.w	#$3F,(Palette_fade_range).w
		clr.w	(PalChangeSpeed).w
loc_53BE:
		move.b	#VintID_SSResults,(Vint_routine).w
		bsr.w	WaitForVint
		bsr.w	Move_Sonic_In_Demo
		move.w	(Ctrl_1).w,(Ctrl_1_Logical).w
		jsr	(RunObjects).l
		jsr	(BuildSprites).l
		jsr	(S1_SS_Show_Layout).l
		bsr.w	S1_SS_Bg_Animate
		subq.w	#1,(PalChangeSpeed).w
		bpl.s	loc_53F8
		move.w	#2,(PalChangeSpeed).w
		bsr.w	Pal_ToWhite
loc_53F8:
		tst.w	(Demo_Time_left).w
		bne.s	loc_53BE
		move    #$2700,sr
		lea	(VDP_control_port),A6
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$9001,(a6)
		bsr.w	ClearScreen             ; loc_1418
		move.l	#$70000002,(VDP_control_port)
		lea	(Title_Cards).l,A0 ; loc_7EA04
		bsr.w	NemDec              ; loc_15FC
		jsr	(Head_Up_Display_Base).l  ; loc_23184
		move    #$2300,sr
		moveq	#S1PalID_SpecStg,d0	; same wrong palette
		bsr.w	PalLoad2		; loc_28FE
		moveq	#PLCID_Std1,d0
		bsr.w	LoadPLC2		; loc_176E
		moveq	#S1PLCID_SpecRes,d0
		bsr.w	LoadPLC		 ; loc_173C
		move.b	#1,(Update_HUD_score).w
		move.b	#1,(Update_Bonus_score).w
		move.w	(Ring_count).w,d0
		mulu.w  #10,d0
		move.w	d0,(Bonus_Countdown_2).w
		move.w	#S1MusID_ActClear,d0
		jsr	(PlaySound).l              ; loc_14C6
		clearRAM Object_RAM,Object_RAM_End
		move.b	#$7E,($FFFFB5C0).w
loc_5480:
		bsr.w	PauseGame		   ; loc_14d2
		move.b	#VintID_TitleCard,(Vint_routine).w
		bsr.w	WaitForVint
		jsr	(RunObjects).l          ; loc_CFd0
		jsr	(BuildSprites).l         ; loc_d4DA
		bsr.w	RunPLC_RAM              ; loc_17A8
		tst.w	(Level_Inactive_flag).w
		beq.s	loc_5480
		tst.l	(Plc_Buffer).w
		bne.s	loc_5480
		move.w	#SndID_SpecStageEntry,d0
		bsr.w	PlaySound		; loc_14C6
		bsr.w	Pal_MakeFlash           ; loc_2762
		rts
loc_54B8:
		move.b	#GameModeID_SegaScreen,(Game_Mode).w
		rts
loc_54C0:
		cmpi.b	#GameModeID_Level,(Game_Mode).w
		beq.s	loc_54B8
		rts
SS_Background_Load: ; loc_54CA:
		lea	(Chunk_Table),A1
		move.w	#$4051,d0
		bsr.w	EniDec               ; loc_18DA
		move.l	#$50000001,d3
		lea	(Chunk_Table+$80),A2
		moveq	#6,d7
loc_54E6:
		move.l	d3,d0
		moveq	#3,d6
		moveq	#0,d4
		cmpi.w	#3,d7
		bcc.s	loc_54F4
		moveq	#1,d4
loc_54F4:
		moveq	#7,d5
loc_54F6:
		move.l	A2,A1
		eori.b  #1,d4
		bne.s	loc_550A
		cmpi.w	#6,d7
		bne.s	loc_551A
		lea	(Chunk_Table),A1
loc_550A:
		movem.l d0-d4,-(sp)
		moveq	#7,d1
		moveq	#7,d2
		bsr.w	PlaneMapToVRAM_H40         ; loc_154C
		movem.l (sp)+,d0-d4
loc_551A:
		addi.l	#$100000,d0
		dbf	d5,loc_54F6
		addi.l	#$3800000,d0
		eori.b  #1,d4
		dbf	d6,loc_54F4
		addi.l	#$10000000,d3
		bpl.s	loc_5544
		swap	d3
		addi.l	#$C000,d3
		swap	d3
loc_5544:
		adda.w	#$80,A2
		dbf	d7,loc_54E6
		lea	(Chunk_Table),A1
		move.w	#$4000,d0
		bsr.w	EniDec               ; loc_18DA
		lea	(Chunk_Table),A1
		move.l	#$40000003,d0
		moveq	#$3F,d1
		moveq	#$1F,d2
		bsr.w	PlaneMapToVRAM_H40         ; loc_154C
		lea	(Chunk_Table),A1
		move.l	#$50000003,d0
		moveq	#$3F,d1
		moveq	#$3F,d2
		bsr.w	PlaneMapToVRAM_H40         ; loc_154C
		rts
S1_Pal_Cycle_Special_Stage: ; loc_5584:
		tst.w	(Game_paused).w
		bne.s	loc_5608
		subq.w	#1,(SSPalCycle_Timer).w
		bpl.s	loc_5608
		lea	(VDP_control_port),A6
		move.w	(SSPalCycle_Frame).w,d0
		addq.w	#1,(SSPalCycle_Frame).w
		andi.w	#$1F,d0
		lsl.w	#2,d0
		lea	(loc_565E).l,A0
		adda.w	d0,A0
		move.b	(a0)+,d0
		bpl.s	loc_55B4
		move.w	#$1FF,d0
loc_55B4:
		move.w	d0,(SSPalCycle_Timer).w
		moveq	#0,d0
		move.b	(a0)+,d0
		move.w	d0,(unk_F7A0).w
		lea	(loc_56DE).l,A1
		lea	(A1,d0),A1
		move.w	#$8200,d0
		move.b	(a1)+,d0
		move.w	d0,(a6)
		move.b	(a1),(Vscroll_Factor_FG).w
		move.w	#$8400,d0
		move.b	(a0)+,d0
		move.w	d0,(a6)
		move.l	#$40000010,(VDP_control_port)
		move.l	(Vscroll_Factor).w,(VDP_data_port)
		moveq	#0,d0
		move.b	(a0)+,d0
		bmi.s	loc_560A
		lea	(Pal_S1_SS_Cycle1).l,A1  ; loc_56EC
		adda.w	d0,A1
		lea	(Normal_palette_line3+$E).w,A2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
loc_5608:
		rts
loc_560A:
		move.w	(unk_F79E).w,d1
		cmpi.w	#$8A,d0
		bcs.s	loc_5616
		addq.w	#1,d1
loc_5616:
		mulu.w  #$2A,d1
		lea	(Pal_S1_SS_Cycle2).l,A1  ; loc_5734
		adda.w	d1,A1
		andi.w	#$7F,d0
		bclr	#0,d0
		beq.s	loc_563A
		lea	(Normal_palette_line4+$E).w,A2
		move.l	(a1),(a2)+
		move.l	4(a1),(a2)+
		move.l	8(a1),(a2)+
loc_563A:
		adda.w	#$C,A1
		lea	(Normal_palette_line3+$1A).w,A2
		cmpi.w	#$A,d0
		bcs.s	loc_5650
		subi.w	#$A,d0
		lea	(Normal_palette_line4+$1A).w,A2
loc_5650:
		move.w	d0,d1
		add.w   d0,d0
		add.w   d1,d0
		adda.w	d0,A1
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+
		rts
loc_565E:
		dc.w	$0300,$0792,$0300,$0790,$0300,$078E,$0300,$078C
		dc.w	$0300,$078B,$0300,$0780,$0300,$0782,$0300,$0784
		dc.w	$0300,$0786,$0300,$0788,$0708,$0700,$070A,$070C
		dc.w	$FF0C,$0718,$FF0C,$0718,$070A,$070C,$0708,$0700
		dc.w	$0300,$0688,$0300,$0686,$0300,$0684,$0300,$0682
		dc.w	$0300,$0681,$0300,$068A,$0300,$068C,$0300,$068E
		dc.w	$0300,$0690,$0300,$0692,$0702,$0624,$0704,$0630
		dc.w	$FF06,$063C,$FF06,$063C,$0704,$0630,$0702,$0624
loc_56DE:
		dc.w	$1001,$1800,$1801,$2000,$2001,$2800,$2801
Pal_S1_SS_Cycle1: ; loc_56EC:
		dc.w	$0400,$0600,$0620,$0624,$0664,$0666,$0600,$0820
		dc.w	$0A64,$0A68,$0AA6,$0AAA,$0800,$0C42,$0E86,$0ECA
		dc.w	$0EEC,$0EEE,$0400,$0420,$0620,$0620,$0864,$0666
		dc.w	$0420,$0620,$0842,$0842,$0A86,$0AAA,$0620,$0842
		dc.w	$0A64,$0C86,$0EA8,$0EEE
Pal_S1_SS_Cycle2: ; loc_5734:
		dc.w	$0EEA,$0EE0,$0AA0,$0880,$0660,$0440,$0EE0,$0AA0
		dc.w	$0440,$0AA0,$0AA0,$0AA0,$0860,$0860,$0860,$0640
		dc.w	$0640,$0640,$0400,$0400,$0400,$0AEC,$06EA,$04C6
		dc.w	$02A4,$0082,$0060,$06EA,$04C6,$0060,$04C6,$04C6
		dc.w	$04C6,$0484,$0484,$0484,$0442,$0442,$0442,$0400
		dc.w	$0400,$0400,$0ECC,$0E8A,$0C68,$0A46,$0824,$0602
		dc.w	$0E8A,$0C68,$0602,$0C68,$0C68,$0C68,$0846,$0846
		dc.w	$0846,$0624,$0624,$0624,$0400,$0400,$0400,$0AEC
		dc.w	$08CA,$06A8,$0486,$0264,$0042,$08CA,$06A8,$0042
		dc.w	$06A8,$06A8,$06A8,$0684,$0684,$0684,$0442,$0442
		dc.w	$0442,$0400,$0400,$0400,$0EEC,$0CCA,$0AA8,$0886
		dc.w	$0664,$0442,$0CCA,$0AA8,$0442,$0AA8,$0AA8,$0AA8
		dc.w	$0864,$0864,$0864,$0642,$0642,$0642,$0400,$0400
		dc.w	$0400
S1_SS_Bg_Animate: ; loc_5806:
		move.w	(unk_F7A0).w,d0
		bne.s	loc_5818
		move.w	#0,(Camera_BG_Y_pos).w
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
loc_5818:
		cmpi.w	#8,d0
		bcc.s	loc_5870
		cmpi.w	#6,d0
		bne.s	loc_5832
		addq.w	#1,(Camera_BG3_X_pos).w
		addq.w	#1,(Camera_BG_Y_pos).w
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
loc_5832:
		moveq	#0,d0
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
		swap	d0
		lea	(loc_58ED).l,A1
		lea	(Decomp_Buffer).w,A3
		moveq	#9,d3
loc_5848:
		move.w	2(a3),d0
		bsr.w	CalcSine		; loc_320A
		moveq	#0,d2
		move.b	(a1)+,d2
		muls.w  d2,d0
		asr.l   #8,d0
		move.w	d0,(a3)+
		move.b	(a1)+,d2
		ext.w   d2
		add.w   d2,(a3)+
		dbf	d3,loc_5848
		lea	(Decomp_Buffer).w,A3
		lea	(loc_58DA).l,A2
		bra.s	loc_58A0
loc_5870:
		cmpi.w	#$C,d0
		bne.s	loc_5896
		subq.w	#1,(Camera_BG3_X_pos).w
		lea	(Decomp_Buffer+$100).w,A3
		move.l	#$18000,d2
		moveq	#6,d1
loc_5886:
		move.l	(a3),d0
		sub.l   d2,d0
		move.l	d0,(a3)+
		subi.l	#$2000,d2
		dbf	d1,loc_5886
loc_5896:
		lea	(Decomp_Buffer+$100).w,A3
		lea	(loc_58E5).l,A2
loc_58A0:
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	(Camera_BG3_X_pos).w,d0
		neg.w	d0
		swap	d0
		moveq	#0,d3
		move.b	(a2)+,d3
		move.w	(Camera_BG_Y_pos).w,d2
		neg.w	d2
		andi.w	#$FF,d2
		lsl.w	#2,d2
loc_58BC:
		move.w	(a3)+,d0
		addq.w	#2,A3
		moveq	#0,d1
		move.b	(a2)+,d1
		subq.w	#1,d1
loc_58C6:
		move.l	d0,(A1,d2)
		addq.w	#4,d2
		andi.w	#$3FC,d2
		dbf	d1,loc_58C6
		dbf	d3,loc_58BC
		rts
loc_58DA:
		dc.b	$09,$28,$18,$10,$28,$18,$10,$30,$18,$08,$10
loc_58E5:
		dc.b	$06,$30,$30,$30,$28,$18,$18,$18
loc_58ED:
		dc.b	$08,$02,$04,$FF,$02,$03,$08,$FF,$04,$02,$02,$03,$08,$FD,$04,$02
		dc.b	$02,$03,$02,$FF,$00
;===============================================================================
; Special Stage
; [ End ]
;===============================================================================
		nop		             ; Filler
; ---------------------------------------------------------------------------
; Subroutine to load level boundaries and start locations
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_5904:
LevelSizeLoad:
		clr.w	(Scroll_flags).w
		clr.w	(Scroll_flags_BG).w
		clr.w	(Scroll_flags_BG2).w
		clr.w	(Scroll_flags_BG3).w
		clr.w	(Scroll_flags_P2).w
		clr.w	(Scroll_flags_BG_P2).w
		clr.w	(Scroll_flags_BG2_P2).w
		clr.w	(Scroll_flags_BG3_P2).w
		clr.w	(Scroll_flags_copy).w
		clr.w	(Scroll_flags_BG_copy).w
		clr.w	(Scroll_flags_BG2_copy).w
		clr.w	(Scroll_flags_BG3_copy).w
		clr.w	(Scroll_flags_copy_P2).w
		clr.w	(Scroll_flags_BG_copy_P2).w
		clr.w	(Scroll_flags_BG2_copy_P2).w
		clr.w	(Scroll_flags_BG3_copy_P2).w
		clr.b	(Deform_lock).w
		clr.b	(Screen_Shaking_Flag_HTZ).w
		clr.b	(Screen_Shaking_Flag).w
		moveq	#0,d0
		move.b	d0,(Dynamic_Resize_Routine).w
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		lea	LevelSize(pc,d0.w),a0
		move.l	(a0)+,d0
		move.l	d0,(Camera_Min_X_pos).w
		move.l	d0,(unk_EEC0).w
		move.l	(a0)+,d0
		move.l	d0,(Camera_Min_Y_pos).w
		move.l	d0,(unk_EEC4).w
		move.w	#$1010,(Horiz_block_crossed_flag).w
		move.w	#$60,(Camera_Y_pos_bias).w
		bra.w	LevelSize_CheckLamp
; ===========================================================================
; ---------------------------------------------------------------------------
; LEVEL SIZE ARRAY

; This array defines the screen boundaries for each act in the game.
; ---------------------------------------------------------------------------
; loc_5986: Level_Size_Array:
LevelSize:	zoneOrderedTable 4,4
	zoneTableEntry.l    $000029A0,$00000320,$00002940,$00000420 ; $00 - Green Hill
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $01
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $02 - Wood
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $03
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $04 - Metropolis
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $05 - Metropolis
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $06
	zoneTableEntry.l    $00002800,$00000720,$00002880,$00000720 ; $07 - Hill Top
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $08 - Hidden Palace
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $09
	zoneTableEntry.l    $00002F80,$00000680,$00002580,$00000680 ; $0A - Oil Ocean
	zoneTableEntry.l    $00002380,$03C00720,$00002180,$00600720 ; $0B - Dust Hill
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $0C - Casino Night
	zoneTableEntry.l    $00002780,$00000720,$00002880,$00000720 ; $0D - Chemical Plant
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $0E - Genocide City
	zoneTableEntry.l    $000028C0,$020003A0,$000026C0,$018005A0 ; $0F - Neo Green Hill
	zoneTableEntry.l    $00003FFF,$00000720,$00003FFF,$00000720 ; $10 - Death Egg
    zoneTableEnd

; ===========================================================================
; loc_5A96: Level_Size_Check_Lamp_Post:
LevelSize_CheckLamp:
		tst.b	(Last_star_pole_hit).w
		beq.s	LevelSize_StartLoc
		jsr	(Lamp_Post_Load_Info).l
		move.w	(MainCharacter+x_pos).w,d1
		move.w	(MainCharacter+y_pos).w,d0
		bra.s	LevelSize_PreventUnderflow
; ===========================================================================
; loc_5AAC: Level_Size_Start_Loc:
LevelSize_StartLoc:
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	StartLocations(pc,d0.w),a1
		moveq	#0,d1
		move.w	(a1)+,d1
		move.w	d1,(MainCharacter+x_pos).w
		moveq	#0,d0
		move.w	(a1),d0
		move.w	d0,(MainCharacter+y_pos).w
; loc_5AC8: Level_Size_Start_Loc_Loaded:
LevelSize_PreventUnderflow:
		subi.w	#$A0,d1
		bcc.s	loc_5Ad0
		moveq	#0,d1

loc_5Ad0:
		move.w	(Camera_Max_X_pos).w,d2
		cmp.w	d2,d1
		bcs.s	loc_5ADA
		move.w	d2,d1

loc_5ADA:
		move.w	d1,(Camera_X_pos).w
		move.w	d1,(Camera_X_pos_P2).w
		subi.w	#$60,d0
		bcc.s	loc_5AEA
		moveq	#0,d0

loc_5AEA:
		cmp.w	(Camera_Max_Y_pos_now).w,d0
		blt.s	loc_5AF4
		move.w	(Camera_Max_Y_pos_now).w,d0

loc_5AF4:
		move.w	d0,(Camera_Y_pos).w
		move.w	d0,(Camera_Y_pos_P2).w
		bsr.w	InitCameraValues
		rts
; End of function LevelSizeLoad

; ===========================================================================
; ---------------------------------------------------------------------------
; CHARACTER START LOCATION ARRAY

; 2 entries per act,corresponding to the X and Y locations that you want the player to
; appear at when the level starts. Empty levels (and CNZ) simply use GHZ's starting
; values,indicating they were the default when new entries were added.
; ---------------------------------------------------------------------------
; loc_5B02: Player_Start_Position_Array:
StartLocations: zoneOrderedTable 2,4
	zoneTableBinEntry	2,"level/startpos/GHZ_1.bin"	; $00 - GHZ
	zoneTableBinEntry	2,"level/startpos/GHZ_2.bin"
	zoneTableEntry.w	$60,$28F			; $01 - OWZ
	zoneTableEntry.w	$40,$2AF
	zoneTableBinEntry	2,"level/startpos/WZ_1.bin"	; $02 - WZ
	zoneTableBinEntry	2,"level/startpos/WZ_2.bin"
	zoneTableEntry.w	$60,$28F			; $03 - SSZ
	zoneTableEntry.w	$40,$2AF
	zoneTableBinEntry	2,"level/startpos/MTZ_1.bin"	; $04 - MTZ
	zoneTableBinEntry	2,"level/startpos/MTZ_2.bin"
	zoneTableBinEntry	2,"level/startpos/MTZ_3.bin"	; $05 - MTZ2
	zoneTableBinEntry	2,"level/startpos/MTZ_4.bin"
	zoneTableEntry.w	$60,$28F			; $06 - BLZ
	zoneTableEntry.w	$40,$2AF
	zoneTableBinEntry	2,"level/startpos/HTZ_1.bin"	; $07 - HTZ
	zoneTableBinEntry	2,"level/startpos/HTZ_2.bin"
	zoneTableBinEntry	2,"level/startpos/HPZ_1.bin"	; $08 - HPZ
	zoneTableBinEntry	2,"level/startpos/HPZ_2.bin"
	zoneTableEntry.w	$60,$28F			; $09 - RWZ
	zoneTableEntry.w	$40,$2AF
	zoneTableBinEntry	2,"level/startpos/OOZ_1.bin"	; $0A - OOZ
	zoneTableBinEntry	2,"level/startpos/OOZ_2.bin"
	zoneTableBinEntry	2,"level/startpos/DHZ_1.bin"	; $0B - DHZ
	zoneTableBinEntry	2,"level/startpos/DHZ_2.bin"
	zoneTableBinEntry	2,"level/startpos/CNZ_1.bin"	; $0C - CNZ
	zoneTableBinEntry	2,"level/startpos/CNZ_2.bin"
	zoneTableBinEntry	2,"level/startpos/CPZ_1.bin"	; $0D - CPZ
	zoneTableBinEntry	2,"level/startpos/CPZ_2.bin"
	zoneTableEntry.w	$60,$28F			; $0E - GCZ
	zoneTableEntry.w	$40,$2AF
	zoneTableBinEntry	2,"level/startpos/NGHZ_1.bin"	; $0F - NGHZ
	zoneTableBinEntry	2,"level/startpos/NGHZ_2.bin"
	zoneTableEntry.w	$60,$28F			; $10 - DEZ
	zoneTableEntry.w	$40,$2AF

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_5B8A: Background_Scroll_Speed:
InitCameraValues:
		tst.b	(Last_star_pole_hit).w
		bne.s	+
		move.w	d0,(Camera_BG_Y_pos).w
		move.w	d0,(Camera_BG2_Y_pos).w
		move.w	d1,(Camera_BG_X_pos).w
		move.w	d1,(Camera_BG2_X_pos).w
		move.w	d1,(Camera_BG3_X_pos).w
		move.w	d0,(Camera_BG_Y_pos_P2).w
		move.w	d0,(Camera_BG2_Y_pos_P2).w
		move.w	d1,(Camera_BG_X_pos_P2).w
		move.w	d1,(Camera_BG2_X_pos_P2).w
		move.w	d1,(Camera_BG3_X_pos_P2).w
+
		moveq	#0,d2
		move.b	(Current_Zone).w,d2
		add.w	d2,d2
		move.w	InitCam_Index(pc,d2.w),d2
		jmp	InitCam_Index(pc,d2.w)
; End of function InitCameraValues

; ===========================================================================
; off_5BC8: Bg_Scroll_Speed_Index:
InitCam_Index:	zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w	InitCam_GHZ
	zoneOffsetTableEntry.w	InitCam_Null0
	zoneOffsetTableEntry.w	InitCam_WZ
	zoneOffsetTableEntry.w	InitCam_Null0
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_Mz
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_Mz
	zoneOffsetTableEntry.w	InitCam_Null0
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_HTz
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_HPz
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_Null2
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_OOz
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_DHz
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_CNz
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_CPz
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_Null3
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_NGHz
	zoneOffsetTableEntry.w	Bg_Scroll_Speed_Null4
    zoneTableEnd
; ===========================================================================
; loc_5BEA: Bg_Scroll_Speed_GHz:
InitCam_GHZ:
		clr.l	(Camera_BG_X_pos).w
		clr.l	(Camera_BG_Y_pos).w
		clr.l	(Camera_BG2_Y_pos).w
		clr.l	(Camera_BG3_Y_pos).w
		lea	(TempArray_LayerDef).w,a2
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(Camera_BG_X_pos_P2).w
		clr.l	(Camera_BG_Y_pos_P2).w
		clr.l	(Camera_BG2_Y_pos_P2).w
		clr.l	(Camera_BG3_Y_pos_P2).w
		rts
; ===========================================================================
; loc_5C16: Bg_Scroll_Speed_Null:
InitCam_Null0:
		rts
; ===========================================================================
; loc_5C18: Bg_Scroll_Speed_Wz:
InitCam_WZ:
		asr.w	#2,d0
		addi.w	#$400,d0
		move.w	d0,(Camera_BG_Y_pos).w
		asr.w	#3,d1
		move.w	d1,(Camera_BG_X_pos).w
		rts
; ===========================================================================

Bg_Scroll_Speed_Mz: ; loc_5C2A: ; Metropolis Background Position
		asr.w   #2,d0
		move.w	d0,(Camera_BG_Y_pos).w
		asr.w   #3,d1
		move.w	d1,(Camera_BG_X_pos).w
		rts
Bg_Scroll_Speed_HTz: ; loc_5C38: ; Hill Top Background Position
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG_Y_pos).w
		clr.l   (Camera_BG2_Y_pos).w
		clr.l   (Camera_BG3_Y_pos).w
		lea	(TempArray_LayerDef).w,A2
		clr.l   (a2)+
		clr.l   (a2)+
		clr.l   (a2)+
		clr.l   (Camera_BG_X_pos_P2).w
		clr.l   (Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG2_Y_pos_P2).w
		clr.l   (Camera_BG3_Y_pos_P2).w
		rts
Bg_Scroll_Speed_HPz: ; loc_5C64: ; Hidden Palace Background Position
		asr.w   #1,d0
		move.w	d0,(Camera_BG_Y_pos).w
		clr.l   (Camera_BG_X_pos).w
		rts
Bg_Scroll_Speed_S1_Spring_Yard: ; loc_5C70:
		asl.l   #4,d0
		move.l	d0,d2
		asl.l   #1,d0
		add.l   d2,d0
		asr.l   #8,d0
		addq.w	#1,d0
		move.w	d0,(Camera_BG_Y_pos).w
		clr.l   (Camera_BG_X_pos).w
		rts
Bg_Scroll_Speed_Null2: ; loc_5C86:
		rts
Bg_Scroll_Speed_OOz: ; loc_5C88: ; Oil Ocean Background Position
		lsr.w	#3,d0
		addi.w	#$50,d0
		move.w	d0,(Camera_BG_Y_pos).w
		clr.l   (Camera_BG_X_pos).w
		rts
Bg_Scroll_Speed_S1_Spring_Yard2: ; loc_5C98:
		asl.l   #4,d0
		move.l	d0,d2
		asl.l   #1,d0
		add.l   d2,d0
		asr.l   #8,d0
		addq.w	#1,d0
		move.w	d0,(Camera_BG_Y_pos).w
		clr.l   (Camera_BG_X_pos).w
		rts
;loc_5CAE:
		asr.w   #$03,d0
		move.w	d0,(Camera_BG_Y_pos).w
		rts
Bg_Scroll_Speed_DHz: ; loc_5CB6: ; Dust Hill Background Position
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG_X_pos_P2).w
		tst.b	(Current_Act).w
		bne.s	loc_5Cd6
		divu.w  #3,d0
		subi.w	#$140,d0
		move.w	d0,(Camera_BG_Y_pos).w
		move.w	d0,(Camera_BG_Y_pos_P2).w
		rts
loc_5Cd6:
		divu.w  #6,d0
		subi.w	#$10,d0
		move.w	d0,(Camera_BG_Y_pos).w
		move.w	d0,(Camera_BG_Y_pos_P2).w
		rts
Bg_Scroll_Speed_CNz: ; loc_5CE8: ; Casino Night Background Position
		lsr.w	#6,d0
		move.w	d0,(Camera_BG_Y_pos).w
		move.w	d0,(Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG_X_pos).w
		lea	(TempArray_LayerDef).w,A2
		clr.l   (a2)+
		clr.l   (a2)+
		clr.l   (a2)+
		clr.l   (Camera_BG_X_pos_P2).w
		clr.l   (Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG2_Y_pos_P2).w
		clr.l   (Camera_BG3_Y_pos_P2).w
		rts
Bg_Scroll_Speed_CPz: ; loc_5d12: ; Chemical Plant Background Position
		lsr.w	#2,d0
		move.w	d0,(Camera_BG_Y_pos).w
		move.w	d0,(Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG2_X_pos).w
		rts
Bg_Scroll_Speed_Null3: ; loc_5d26: ; Genocide City Background Position (Null)
		rts
Bg_Scroll_Speed_NGHz: ; loc_5d28: ; Neo Green Hill Background Position
		tst.b	(Current_Act).w
		beq.s	loc_5d3A
		subi.w	#$E0,d0
		lsr.w	#1,d0
		move.w	d0,(Camera_BG_Y_pos).w
		bra.s	loc_5d42
loc_5d3A:
		subi.w	#$180,d0
		move.w	d0,(Camera_BG_Y_pos).w
loc_5d42:
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG2_Y_pos).w
		clr.l   (Camera_BG3_Y_pos).w
		lea	(TempArray_LayerDef).w,A2
		clr.l   (a2)+
		clr.l   (a2)+
		clr.l   (a2)+
		rts
Bg_Scroll_Speed_Null4: ; loc_5d5A: ; Death Egg Background Position (Null)
		rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; sub_5d5C: Background_Scroll_Layer:
DeformBgLayer:
		tst.b	(Deform_lock).w
		beq.s	+
		rts
; ---------------------------------------------------------------------------
+
		clr.w	(Scroll_flags).w
		clr.w	(Scroll_flags_BG).w
		clr.w	(Scroll_flags_BG2).w
		clr.w	(Scroll_flags_BG3).w
		clr.w	(Scroll_flags_P2).w
		clr.w	(Scroll_flags_BG_P2).w
		clr.w	(Scroll_flags_BG2_P2).w
		clr.w	(Scroll_flags_BG3_P2).w
		lea	(MainCharacter).w,a0
		lea	(Camera_X_pos).w,a1
		lea	(Horiz_block_crossed_flag).w,a2
		lea	(Scroll_flags).w,a3
		lea	(Camera_X_pos_diff).w,a4
		lea	(Horiz_scroll_delay_val).w,a5
		lea	(Sonic_Pos_Record_Buf).w,a6
		bsr.w	Scroll_Horizontal
		lea	(Camera_Y_pos).w,a1
		lea	(Verti_block_crossed_flag).w,a2
		lea	(Camera_Y_pos_diff).w,a4
		bsr.w	Scroll_Vertical
		tst.w	(Two_player_mode).w
		beq.s	loc_5DEA
		lea	(Sidekick).w,a0
		lea	(Camera_X_pos_P2).w,a1
		lea	(Horiz_block_crossed_flag_P2).w,a2
		lea	(Scroll_flags_P2).w,a3
		lea	(Camera_X_pos_diff_P2).w,a4
		lea	(Horiz_scroll_delay_val_P2).w,a5
		lea	(Tails_Pos_Record_Buf).w,a6
		bsr.w	Scroll_Horizontal
		lea	(Camera_Y_pos_P2).w,a1
		lea	(Verti_block_crossed_flag_P2).w,a2
		lea	(Camera_Y_pos_diff_P2).w,a4
		bsr.w	Scroll_Vertical

loc_5DEA:
		bsr.w	Dyn_Screen_Boss_Loader
		move.w	(Camera_Y_pos).w,(Vscroll_Factor_FG).w
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		move.l	(Camera_X_pos).w,(Camera_X_pos_copy).w
		move.l	(Camera_Y_pos).w,(Camera_Y_pos_copy).w
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		add.w	d0,d0
		move.w	Bg_Scroll_Index(pc,d0.w),d0
		jmp	Bg_Scroll_Index(pc,d0.w)

; off_5E16:
Bg_Scroll_Index: zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w    Bg_Scroll_GHz; $00 - Green Hill Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $01 - Null Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Wz; $02 - Wood Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $03 - Null Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Mz; $04 - Metropolis Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Mz; $05 - Metropolis Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $06 - Null Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_HTz; $07 - Hill Top Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_HPz; $08 - Hidden Palace Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $09 - Null Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_OOz; $0A - Oil Ocean Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_DHz; $0B - Dust Hill Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_CNz; $0C - Casino Night Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_CPz; $0D - Chemical Plant Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $0E - Genocide City (Null) Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_NGHz; $0F - Neo Green Hill Background Scroll
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $10 - Death Egg (Null) Background Scroll
    zoneTableEnd

loc_5E38: ; Title Screen Background Scroll
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		move.w	(Camera_X_pos).w,d0
		cmpi.w	#$1C00,d0
		bcc.s	loc_5E4A
		addq.w	#8,d0
loc_5E4A:
		move.w	d0,(Camera_X_pos).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	(Camera_X_pos).w,d2
		neg.w	d2
		moveq	#0,d0
		bra.s	loc_5E78
Bg_Scroll_GHz: ; loc_5E5C: ; $00 - Green Hill Background Scroll
		tst.w	(Two_player_mode).w
		bne.w	 loc_5FA2
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		move.w	d0,d2
		swap	d0
loc_5E78:
		move.w	#0,d0
		move.w	#$15,d1
loc_5E80:
		move.l	d0,(a1)+
		dbf	d1,loc_5E80
		move.w	d2,d0
		asr.w   #6,d0
		move.w	#$39,d1
loc_5E8E:
		move.l	d0,(a1)+
		dbf	d1,loc_5E8E
		move.w	d0,d3
		move.b	(Vint_runcount+3).w,d1
		andi.w	#7,d1
		bne.s	loc_5EA4
		subq.w	#1,(TempArray_LayerDef).w
loc_5EA4:
		move.w	(TempArray_LayerDef).w,d1
		andi.w	#$1F,d1
		lea	(loc_5F60).l,A2
		lea	(A2,d1),A2
		move.w	#$14,d1
loc_5EBA:
		move.b	(a2)+,d0
		ext.w   d0
		add.w   d3,d0
		move.l	d0,(a1)+
		dbf	d1,loc_5EBA

		move.w	#0,d0
		move.w	#$A,d1
loc_5ECE:
		move.l	d0,(a1)+
		dbf	d1,loc_5ECE
		move.w	d2,d0
		asr.w   #4,d0
		move.w	#$F,d1
loc_5EDC:
		move.l	d0,(a1)+
		dbf	d1,loc_5EDC
		move.w	d2,d0
		asr.w   #4,d0
		move.w	d0,d1
		asr.w   #1,d1
		add.w   d1,d0
		move.w	#$F,d1
loc_5EF0:
		move.l	d0,(a1)+
		dbf	d1,loc_5EF0
		move.l	d0,d4
		swap	d4
		move.w	d2,d0
		asr.w   #1,d0
		move.w	d2,d1
		asr.w   #3,d1
		sub.w   d1,d0
		ext.l   d0
		asl.l   #8,d0
		divs.w  #$30,d0
		ext.l   d0
		asl.l   #8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w   #3,d3
		move.w	#$E,d1
loc_5F1A:
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l   d0,d3
		swap	d3
		dbf	d1,loc_5F1A
		move.w	#8,d1
loc_5F2C:
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		dbf	d1,loc_5F2C
		move.w	#$E,d1
loc_5F44:
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		dbf	d1,loc_5F44
		rts
loc_5F60:
		dc.b	$01,$02,$01,$03,$01,$02,$02,$01,$02,$03,$01,$02,$01,$02,$00,$00
		dc.b	$02,$00,$03,$02,$02,$03,$02,$02,$01,$03,$00,$00,$01,$00,$01,$03
		dc.b	$01,$02,$01,$03,$01,$02,$02,$01,$02,$03,$01,$02,$01,$02,$00,$00
		dc.b	$02,$00,$03,$02,$02,$03,$02,$02,$01,$03,$00,$00,$01,$00,$01,$03
		dc.b	$01,$02
loc_5FA2:
		move.b	(Vint_runcount+3).w,d1
		andi.w	#7,d1
		bne.s	loc_5FB0
		subq.w	#$01,(TempArray_LayerDef).w
loc_5FB0:
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		andi.l	#$FFFEFFFE,(Vscroll_Factor).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	(Camera_X_pos).w,d0
		move.w	#$A,d1
		bsr.s	loc_5FF8
		moveq	#0,d0
		move.w	d0,(Vscroll_Factor_P2_BG).w
		subi.w	#$E0,(Vscroll_Factor_P2_BG).w
		move.w	(Camera_Y_pos_P2).w,(Vscroll_Factor_P2_FG).w
		subi.w	#$E0,(Vscroll_Factor_P2_FG).w
		andi.l	#$FFFEFFFE,(Vscroll_Factor_P2).w
		lea	($FFFFE1B0).w,A1
		move.w	(Camera_X_pos_P2).w,d0
		move.w	#$E,d1
loc_5FF8:
		neg.w	d0
		move.w	d0,d2
		swap	d0
		move.w	#0,d0
loc_6002:
		move.l	d0,(a1)+
		dbf	d1,loc_6002
		move.w	d2,d0
		asr.w   #6,d0
		move.w	#$1C,d1
loc_6010:
		move.l	d0,(a1)+
		dbf	d1,loc_6010
		move.w	d0,d3
		move.w	(TempArray_LayerDef).w,d1
		andi.w	#$1F,d1
		lea	loc_5F60(pc),A2
		lea	(A2,d1),A2
		move.w	#$A,d1
loc_602C:
		move.b	(a2)+,d0
		ext.w   d0
		add.w   d3,d0
		move.l	d0,(a1)+
		dbf	d1,loc_602C
		move.w	#0,d0
		move.w	#4,d1
loc_6040:
		move.l	d0,(a1)+
		dbf	d1,loc_6040
		move.w	d2,d0
		asr.w   #4,d0
		move.w	#7,d1
loc_604E:
		move.l	d0,(a1)+
		dbf	d1,loc_604E
		move.w	d2,d0
		asr.w   #4,d0
		move.w	d0,d1
		asr.w   #1,d1
		add.w   d1,d0
		move.w	#7,d1
loc_6062:
		move.l	d0,(a1)+
		dbf	d1,loc_6062
		move.w	d2,d0
		asr.w   #1,d0
		move.w	d2,d1
		asr.w   #3,d1
		sub.w   d1,d0
		ext.l   d0
		asl.l   #8,d0
		divs.w  #$30,d0
		ext.l   d0
		asl.l   #8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w   #3,d3
		move.w	#$27,d1
loc_6088:
		move.w	d2,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l   d0,d3
		swap	d3
		dbf	d1,loc_6088
		rts
Bg_Scroll_Wz: ; loc_6098: ; Wood Background Scroll
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #5,d4
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #6,d5
		bsr.w	Scroll_Block1           ; loc_6CB4
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$DF,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
loc_60C8:
		move.l	d0,(a1)+
		dbf	d1,loc_60C8
		rts
Bg_Scroll_Mz: ; loc_60d0: ; Metropolis Background Scroll
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #5,d4
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #6,d5
		bsr.w	Scroll_Block1           ; loc_6CB4
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$DF,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
loc_6100:
		move.l	d0,(a1)+
		dbf	d1,loc_6100
		rts
Bg_Scroll_HTz: ; loc_6108: ; Hill Top Background Scroll
		tst.w	(Two_player_mode).w
		bne.w	loc_62B4
		tst.b	(Screen_Shaking_Flag_HTZ).w
		bne.w	loc_6236
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		move.w	d0,d2
		swap	d0
		move.w	d2,d0
		asr.w   #3,d0
		move.w	#$7F,d1
loc_6134:
		move.l	d0,(a1)+
		dbf	d1,loc_6134
		move.l	d0,d4
		move.w	(TempArray_LayerDef+$22).w,d0
		addq.w	#4,(TempArray_LayerDef+$22).w
		sub.w   d0,d2
		move.w	d2,d0
		move.w	d0,d1
		asr.w   #1,d0
		asr.w   #4,d1
		sub.w   d1,d0
		ext.l   d0
		asl.l   #8,d0
		divs.w  #$70,d0
		ext.l   d0
		asl.l   #8,d0
		lea	(TempArray_LayerDef).w,A2
		moveq	#0,d3
		move.w	d1,d3
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,(a2)+
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,(a2)+
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		moveq	#3,d1
loc_6188:
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		dbf	d1,loc_6188
		add.l   d0,d0
		add.l   d0,d0
		move.w	d3,d4
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,d4
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#6,d1
loc_61C6:
		move.l	d4,(a1)+
		dbf	d1,loc_61C6
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#7,d1
loc_61DA:
		move.l	d4,(a1)+
		dbf	d1,loc_61DA
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#9,d1
loc_61EE:
		move.l	d4,(a1)+
		dbf	d1,loc_61EE
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#$E,d1
loc_6204:
		move.l	d4,(a1)+
		dbf	d1,loc_6204
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		move.w	#2,d2
loc_6218:
		move.w	d3,d4
		move.w	#$F,d1
loc_621E:
		move.l	d4,(a1)+
		dbf	d1,loc_621E
		swap	d3
		add.l   d0,d3
		add.l   d0,d3
		add.l   d0,d3
		add.l   d0,d3
		swap	d3
		dbf	d2,loc_6218
		rts
loc_6236:
		move.w	(Camera_BG_X_pos_diff).w,d4
		ext.l   d4
		lsl.l   #8,d4
		moveq	#2,d6
		bsr.w	Scroll_Block2           ; loc_6d1E
		move.w	(Camera_BG_Y_pos_diff).w,d5
		ext.l   d5
		lsl.l   #8,d5
		moveq	#0,d6
		bsr.w	Scroll_Block3           ; loc_6d52
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		move.w	(Camera_Y_pos).w,(Vscroll_Factor_FG).w
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		moveq	#0,d2
		tst.b	(Screen_Shaking_Flag).w
		beq.s	loc_6292
		move.w	(Timer_frames).w,d0
		andi.w	#$3F,d0
		lea	loc_5F60(pc),A1
		lea	(A1,d0),A1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w   d0,(Vscroll_Factor_FG).w
		add.w   d0,(Vscroll_Factor_BG).w
		add.w   d0,(Camera_Y_pos_copy).w
		move.b	(a1)+,d2
		add.w   d2,(Camera_X_pos_copy).w
loc_6292:
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$DF,d1
		move.w	(Camera_X_pos).w,d0
		add.w   d2,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos).w,d0
		add.w   d2,d0
		neg.w	d0
loc_62AC:
		move.l	d0,(a1)+
		dbf	d1,loc_62AC
		rts
loc_62B4:
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #6,d4
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #2,d5
		moveq	#0,d5
		bsr.w	Scroll_Block1           ; loc_6CB4
		move.b	#0,(Scroll_flags_BG).w
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		andi.l	#$FFFEFFFE,(Vscroll_Factor).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$6F,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
loc_62F4:
		move.l	d0,(a1)+
		dbf	d1,loc_62F4
		move.w	(Camera_X_pos_diff_P2).w,d4
		ext.l   d4
		asl.l   #6,d4
		add.l   d4,(Camera_BG_X_pos_P2).w
		moveq	#0,d0
		move.w	d0,(Vscroll_Factor_P2_BG).w
		subi.w	#$E0,(Vscroll_Factor_P2_BG).w
		move.w	(Camera_Y_pos_P2).w,(Vscroll_Factor_P2_FG).w
		subi.w	#$E0,(Vscroll_Factor_P2_FG).w
		andi.l	#$FFFEFFFE,(Vscroll_Factor_P2).w
		lea	($FFFFE1B0).w,A1
		move.w	#$73,d1
		move.w	(Camera_X_pos_P2).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos_P2).w,d0
		neg.w	d0
loc_633C:
		move.l	d0,(a1)+
		dbf	d1,loc_633C
		rts
Bg_Scroll_HPz: ; loc_6344: ; Hidden Palace Background Scroll
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #6,d4
		moveq	#2,d6
		bsr.w	Scroll_Block2           ; loc_6d1E
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #7,d5
		moveq	#6,d6
		bsr.w	Scroll_Block3           ; loc_6d52
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(TempArray_LayerDef).w,A1
		move.w	(Camera_X_pos).w,d2
		neg.w	d2
		move.w	d2,d0
		asr.w   #1,d0
		move.w	#7,d1
loc_6378:
		move.w	d0,(a1)+
		dbf	d1,loc_6378
		move.w	d2,d0
		asr.w   #3,d0
		sub.w   d2,d0
		ext.l   d0
		asl.l   #3,d0
		divs.w  #8,d0
		ext.l   d0
		asl.l   #4,d0
		asl.l   #8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w   #1,d3
		lea	(TempArray_LayerDef+$60).w,A2
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		swap	d3
		add.l   d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
		move.w	#$19,d1
loc_63DA:
		move.w	d0,(a1)+
		dbf	d1,loc_63DA
		adda.w	#$E,A1
		move.w	d2,d0
		asr.w   #1,d0
		move.w	#$17,d1
loc_63EC:
		move.w	d0,(a1)+
		dbf	d1,loc_63EC
		lea	(TempArray_LayerDef).w,A2
		move.w	(Camera_BG_Y_pos).w,d0
		move.w	d0,d2
		andi.w	#$3F0,d0
		lsr.w	#3,d0
		lea	(A2,d0),A2
		bra.w	loc_6AA8
Bg_Scroll_OOz: ; loc_640A: ; Oil Ocean Background Scroll
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #5,d4
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #5,d5
		bsr.w	Scroll_Block1           ; loc_6CB4
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$DF,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
loc_643A:
		move.l	d0,(a1)+
		dbf	d1,loc_643A
		rts
Bg_Scroll_DHz: ; loc_6442: ; Dust Hill Background Scroll
		tst.w	(Two_player_mode).w
		bne.w	loc_656C
		move.w	(Camera_Y_pos).w,d0
		move.l	(Camera_BG_Y_pos).w,d3
		tst.b	(Current_Act).w
		bne.s	loc_6462
		divu.w  #3,d0
		subi.w	#$140,d0
		bra.s	loc_646A
loc_6462:
		divu.w  #6,d0
		subi.w	#$10,d0
loc_646A:
		swap	d0
		moveq	#6,d6
		bsr.w	loc_6d5A
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(TempArray_LayerDef).w,A2
		lea	$1E(a2),A3
		move.w	(Camera_X_pos).w,d0
		ext.l   d0
		asl.l   #4,d0
		divs.w  #$A,d0
		ext.l   d0
		asl.l   #4,d0
		asl.l   #8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$E(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$C(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$A(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,8(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6(a2)
		move.w	d1,$10(a2)
		move.w	d1,$1C(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4(a2)
		move.w	d1,$12(a2)
		move.w	d1,$1A(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2(a2)
		move.w	d1,$14(a2)
		move.w	d1,$18(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,$16(a2)
		lea	(loc_6554).l,A3
		lea	(TempArray_LayerDef).w,A2
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	(Camera_BG_Y_pos).w,d1
		moveq	#0,d0
loc_6526:
		move.b	(a3)+,d0
		addq.w	#2,A2
		sub.w   d0,d1
		bcc.s	loc_6526
		neg.w	d1
		subq.w	#2,A2
		move.w	#$DF,d2
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0
loc_6542:
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_654E
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0
loc_654E:
		dbf	d2,loc_6542
		rts
loc_6554:
		dc.b	$25,$17,$12,$07,$07,$02,$02,$30,$0D,$13,$20,$40,$20,$13,$0D,$30
		dc.b	$02,$02,$07,$07,$20,$12,$17,$25
loc_656C:
		moveq	#0,d0
		move.w	(Camera_Y_pos).w,d0
		tst.b	(Current_Act).w
		bne.s	loc_6582
		divu.w  #3,d0
		subi.w	#$140,d0
		bra.s	loc_658A
loc_6582:
		divu.w  #6,d0
		subi.w	#$10,d0
loc_658A:
		move.w	d0,(Camera_BG_Y_pos).w
		move.w	d0,(Vscroll_Factor_BG).w
		andi.l	#$FFFEFFFE,(Vscroll_Factor).w
		lea	(TempArray_LayerDef).w,A2
		lea	$1E(a2),A3
		move.w	(Camera_X_pos).w,d0
		ext.l   d0
		asl.l   #4,d0
		divs.w  #$A,d0
		ext.l   d0
		asl.l   #4,d0
		asl.l   #8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$E(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$C(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$A(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,8(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6(a2)
		move.w	d1,$10(a2)
		move.w	d1,$1C(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4(a2)
		move.w	d1,$12(a2)
		move.w	d1,$1A(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2(a2)
		move.w	d1,$14(a2)
		move.w	d1,$18(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,$16(a2)
		lea	(loc_6678).l,A3
		lea	(TempArray_LayerDef).w,A2
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	(Camera_BG_Y_pos).w,d1
		lsr.w	#1,d1
		moveq	#0,d0
loc_664A:
		move.b	(a3)+,d0
		addq.w	#2,A2
		sub.w   d0,d1
		bcc.s	loc_664A
		neg.w	d1
		subq.w	#2,A2
		move.w	#$6F,d2
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0
loc_6666:
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_6672
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0
loc_6672:
		dbf	d2,loc_6666
		bra.s	loc_6690
loc_6678:
		dc.b	$13
loc_6679:
		dc.b	$0B,$09,$04,$03,$01,$01,$18,$06,$0A,$10,$20,$10,$0A,$06,$18,$01
		dc.b	$01,$03,$04,$10,$09,$0B,$13
loc_6690:
		moveq	#0,d0
		move.w	(Camera_Y_pos_P2).w,d0
		tst.b	(Current_Act).w
		bne.s	loc_66A6
		divu.w  #3,d0
		subi.w	#$140,d0
		bra.s	loc_66AE
loc_66A6:
		divu.w  #6,d0
		subi.w	#$10,d0
loc_66AE:
		move.w	d0,(Camera_BG_Y_pos_P2).w
		move.w	d0,(Vscroll_Factor_P2_BG).w
		subi.w	#$E0,(Vscroll_Factor_P2_BG).w
		move.w	(Camera_Y_pos_P2).w,(Vscroll_Factor_P2_FG).w
		subi.w	#$E0,(Vscroll_Factor_P2_FG).w
		andi.l	#$FFFEFFFE,(Vscroll_Factor_P2).w
		lea	(TempArray_LayerDef).w,A2
		lea	$1E(a2),A3
		move.w	(Camera_X_pos_P2).w,d0
		ext.l   d0
		asl.l   #4,d0
		divs.w  #$A,d0
		ext.l   d0
		asl.l   #4,d0
		asl.l   #8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$E(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$C(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$A(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,8(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6(a2)
		move.w	d1,$10(a2)
		move.w	d1,$1C(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4(a2)
		move.w	d1,$12(a2)
		move.w	d1,$1A(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2(a2)
		move.w	d1,$14(a2)
		move.w	d1,$18(a2)
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,$16(a2)
		lea	loc_6679(pc),A3
		lea	(TempArray_LayerDef).w,A2
		lea	($FFFFE1B0).w,A1
		move.w	(Camera_BG_Y_pos_P2).w,d1
		lsr.w	#1,d1
		moveq	#$17,d0
		bra.s	loc_6782
loc_6780:
		move.b	(a3)+,d0
loc_6782:
		addq.w	#2,A2
		sub.w   d0,d1
		bcc.s	loc_6780
		neg.w	d1
		subq.w	#2,A2
		move.w	#$73,d2
		move.w	(Camera_X_pos_P2).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0
loc_679C:
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_67A8
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0
loc_67A8:
		dbf	d2,loc_679C
		rts
Bg_Scroll_CNz: ; loc_67AE: ; Casino Night Background Scroll
		tst.w	(Two_player_mode).w
		bne.w	loc_67F2
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #6,d4
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #2,d5
		bsr.w	Scroll_Block1           ; loc_6CB4
		clr.b   (Scroll_flags_BG).w
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$DF,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
loc_67EA:
		move.l	d0,(a1)+
		dbf	d1,loc_67EA
		rts
loc_67F2:
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #6,d4
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #2,d5
		moveq	#0,d5
		bsr.w	Scroll_Block1           ; loc_6CB4
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		andi.l	#$FFFEFFFE,(Vscroll_Factor).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$6F,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
loc_682C:
		move.l	d0,(a1)+
		dbf	d1,loc_682C
		move.w	(Camera_X_pos_diff_P2).w,d4
		ext.l   d4
		asl.l   #6,d4
		add.l   d4,(Camera_BG_X_pos_P2).w
		moveq	#0,d0
		move.w	d0,(Vscroll_Factor_P2_BG).w
		subi.w	#$E0,(Vscroll_Factor_P2_BG).w
		move.w	(Camera_Y_pos_P2).w,(Vscroll_Factor_P2_FG).w
		subi.w	#$E0,(Vscroll_Factor_P2_FG).w
		andi.l	#$FFFEFFFE,(Vscroll_Factor_P2).w
		lea	($FFFFE1B0).w,A1
		move.w	#$73,d1
		move.w	(Camera_X_pos_P2).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos_P2).w,d0
		neg.w	d0
loc_6874:
		move.l	d0,(a1)+
		dbf	d1,loc_6874
		rts
Bg_Scroll_CPz: ; loc_687C: ; Chemical Plant Background Scroll
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #5,d4
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #6,d5
		bsr.w	Scroll_Block1           ; loc_6CB4
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #7,d4
		moveq	#4,d6
		bsr.w	Scroll_Block4           ; loc_6D86
		move.w	(Camera_BG_Y_pos).w,d0
		move.w	d0,(Camera_BG2_Y_pos).w
		move.w	d0,(Vscroll_Factor_BG).w
		move.b	(Scroll_flags_BG).w,d0
		or.b    (Scroll_flags_BG2).w,d0
		move.b	d0,(Scroll_flags_BG3).w
		clr.b   (Scroll_flags_BG).w
		clr.b   (Scroll_flags_BG2).w
		move.b	(Vint_runcount+3).w,d1
		andi.w	#7,d1
		bne.s	loc_68CC
		subq.w	#1,(TempArray_LayerDef).w
loc_68CC:
		lea	(loc_718F).l,A0
		move.w	(Camera_BG_Y_pos).w,d0
		move.w	d0,d2
		andi.w	#$3F0,d0
		lsr.w	#4,d0
		lea	(A0,d0),A0
		move.w	d0,d4
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$E,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		andi.w	#$F,d2
		move.w	(Camera_BG_X_pos).w,d0
		cmpi.b	#$12,d4
		beq.s	loc_694A
		bcs.s	loc_6908
		move.w	(Camera_BG2_X_pos).w,d0
loc_6908:
		neg.w	d0
		add.w   d2,d2
		jmp     loc_6922(pc,d2)
loc_6910:
		move.w	(Camera_BG_X_pos).w,d0
		cmpi.b	#$12,d4
		beq.s	loc_6954
		bcs.s	loc_6920
		move.w	(Camera_BG2_X_pos).w,d0
loc_6920:
		neg.w	d0
loc_6922:
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		addq.b	#1,d4
		dbf	d1,loc_6910
		rts
loc_694A:
		move.w	#$F,d0
		sub.w   d2,d0
		move.w	d0,d2
		bra.s	loc_6958
loc_6954:
		move.w	#$F,d2
loc_6958:
		move.w	(Camera_BG_X_pos).w,d3
		neg.w	d3
		move.w	(TempArray_LayerDef).w,d0
		andi.w	#$1F,d0
		lea	loc_5F60(pc),A2
		lea	(A2,d0),A2
loc_696E:
		move.b	(a2)+,d0
		ext.w   d0
		add.w   d3,d0
		move.l	d0,(a1)+
		dbf	d2,loc_696E
		addq.b	#1,d4
		dbf	d1,loc_6910
		rts
Bg_Scroll_NGHz: ; loc_6982: ; Neo Green Hill Background Scroll
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		muls.w  #$119,d4
		moveq	#2,d6
		bsr.w	Scroll_Block2           ; loc_6d1E
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #7,d5
		tst.b	(Current_Act).w
		bne.s	loc_69A2
		asl.l   #1,d5
loc_69A2:
		moveq	#6,d6
		bsr.w	Scroll_Block3           ; loc_6d52
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(TempArray_LayerDef).w,A2
		lea	6(a2),A3
		move.w	(Camera_X_pos).w,d0
		ext.l   d0
		asl.l   #4,d0
		divs.w  #$A,d0
		ext.l   d0
		asl.l   #4,d0
		asl.l   #8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d1,d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l   d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,4(a2)
		move.w	(Camera_BG_X_pos).w,d0
		move.w	d0,2(a2)
		move.w	d0,$16(a2)
		_move.w	d0,0(a2)
		move.w	d0,4(a2)
		lea	(loc_6A64).l,A3
		lea	(TempArray_LayerDef).w,A2
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	(Camera_BG_Y_pos).w,d1
		moveq	#0,d0
loc_6A36:
		move.b	(a3)+,d0
		addq.w	#2,A2
		sub.w   d0,d1
		bcc.s	loc_6A36
		neg.w	d1
		subq.w	#2,A2
		move.w	#$DF,d2
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0
loc_6A52:
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_6A5E
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0
loc_6A5E:
		dbf	d2,loc_6A52
		rts
loc_6A64:
		dc.b	$B0,$70,$30,$60,$15,$0C,$0E,$06,$0C,$1F,$30,$C0
Bg_Scroll_Null: ; loc_6A70: ; Null Background Scroll
		move.w	(Camera_X_pos_diff).w,d4
		ext.l   d4
		asl.l   #5,d4
		move.w	(Camera_Y_pos_diff).w,d5
		ext.l   d5
		asl.l   #6,d5
		bsr.w	Scroll_Block1           ; loc_6CB4
		move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor_BG).w
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$DF,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(Camera_BG_X_pos).w,d0
		neg.w	d0
loc_6AA0:
		move.l	d0,(a1)+
		dbf	d1,loc_6AA0
		rts
loc_6AA8:
		lea	(Horiz_Scroll_Buf).w,A1
		move.w	#$E,d1
		move.w	(Camera_X_pos).w,d0
		neg.w	d0
		swap	d0
		andi.w	#$F,d2
		add.w   d2,d2
		move.w	(a2)+,d0
		jmp     loc_6AC6(pc,d2)
loc_6AC4:
		move.w	(a2)+,d0
loc_6AC6:
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		dbf	d1,loc_6AC4
		rts
Scroll_Horizontal: ; loc_6AEC:
		move.w	(a1),d4
		bsr.s	loc_6B12
		move.w	(a1),d0
		andi.w	#$10,d0
		move.b	(a2),d1
		eor.b   d1,d0
		bne.s	loc_6B10
		eori.b  #$10,(a2)
		move.w	(a1),d0
		sub.w   d4,d0
		bpl.s	loc_6B0C
		bset	#2,(a3)
		rts
loc_6B0C:
		bset	#3,(a3)
loc_6B10:
		rts
loc_6B12:
		move.w	(a5),d1
		beq.s	loc_6B34
		subi.w	#$100,d1
		move.w	d1,(a5)
		moveq	#0,d1
		move.b	(a5),d1
		lsl.b   #2,d1
		addq.b	#4,d1
		move.w	2(a5),d0
		sub.b   d1,d0
		move.w	(A6,d0),d0
		andi.w	#$3FFF,d0
		bra.s	loc_6B38
loc_6B34:
		move.w	8(a0),d0
loc_6B38:
		sub.w   (a1),d0
		subi.w	#$90,d0
		blt.s   loc_6B4A
		subi.w	#$10,d0
		bge.s   loc_6B62
		clr.w	(a4)
		rts
loc_6B4A:
		cmpi.w	#-$10,d0
		bgt.s   loc_6B54
		move.w	#-$10,d0
loc_6B54:
		add.w   (a1),d0
		cmp.w	(Camera_Min_X_pos).w,d0
		bgt.s   loc_6B78
		move.w	(Camera_Min_X_pos).w,d0
		bra.s	loc_6B78
loc_6B62:
		cmpi.w	#$10,d0
		bcs.s	loc_6B6C
		move.w	#$10,d0
loc_6B6C:
		add.w   (a1),d0
		cmp.w	(Camera_Max_X_pos).w,d0
		blt.s   loc_6B78
		move.w	(Camera_Max_X_pos).w,d0
loc_6B78:
		move.w	d0,d1
		sub.w   (a1),d1
		asl.w   #8,d1
		move.w	d0,(a1)
		move.w	d1,(a4)
		rts
Scroll_Vertical: ; loc_6B84:
		moveq	#0,d1
		move.w	$C(a0),d0
		sub.w   (a1),d0
		btst	#2,$22(a0)
		beq.s	loc_6B96
		subq.w	#5,d0
loc_6B96:
		btst	#1,$22(a0)
		beq.s	loc_6BB6
		addi.w	#$20,d0
		sub.w   (Camera_Y_pos_bias).w,d0
		bcs.s	loc_6C00
		subi.w	#$40,d0
		bcc.s	loc_6C00
		tst.b	(Camera_Max_Y_Pos_Changing).w
		bne.s	loc_6C12
		bra.s	loc_6BC2
loc_6BB6:
		sub.w   (Camera_Y_pos_bias).w,d0
		bne.s	loc_6BC6
		tst.b	(Camera_Max_Y_Pos_Changing).w
		bne.s	loc_6C12
loc_6BC2:
		clr.w	(a4)
		rts
loc_6BC6:
		cmpi.w	#$60,(Camera_Y_pos_bias).w
		bne.s	loc_6BEE
		move.w	$14(a0),d1
		bpl.s	loc_6Bd6
		neg.w	d1
loc_6Bd6:
		cmpi.w	#$800,d1
		bcc.s	loc_6C00
		move.w	#$600,d1
		cmpi.w	#6,d0
		bgt.s   loc_6C5A
		cmpi.w	#$FFFA,d0
		blt.s   loc_6C28
		bra.s	loc_6C18
loc_6BEE:
		move.w	#$200,d1
		cmpi.w	#2,d0
		bgt.s   loc_6C5A
		cmpi.w	#$FFFE,d0
		blt.s   loc_6C28
		bra.s	loc_6C18
loc_6C00:
		move.w	#$1000,d1
		cmpi.w	#$10,d0
		bgt.s   loc_6C5A
		cmpi.w	#$FFF0,d0
		blt.s   loc_6C28
		bra.s	loc_6C18
loc_6C12:
		moveq	#0,d0
		move.b	d0,(Camera_Max_Y_Pos_Changing).w
loc_6C18:
		moveq	#0,d1
		move.w	d0,d1
		add.w   (a1),d1
		tst.w	d0
		bpl.w	loc_6C62
		bra.w	loc_6C32
loc_6C28:
		neg.w	d1
		ext.l   d1
		asl.l   #8,d1
		add.l   (a1),d1
		swap	d1
loc_6C32:
		cmp.w	(Camera_Min_Y_pos).w,d1
		bgt.s   loc_6C84
loc_6C38:
		cmpi.w	#$FF00,d1
		bgt.s   loc_6C54
		andi.w	#$7FF,d1
		andi.w	#$7FF,$C(a0)
		andi.w	#$7FF,(a1)
		andi.w	#$3FF,8(a1)
		bra.s	loc_6C84
loc_6C54:
		move.w	(Camera_Min_Y_pos).w,d1
		bra.s	loc_6C84
loc_6C5A:
		ext.l   d1
		asl.l   #8,d1
		add.l   (a1),d1
		swap	d1
loc_6C62:
		cmp.w	(Camera_Max_Y_pos_now).w,d1
		blt.s   loc_6C84
		subi.w	#$800,d1
		bcs.s	loc_6C80
		andi.w	#$7FF,$C(a0)
		subi.w	#$800,(a1)
		andi.w	#$3FF,8(a1)
		bra.s	loc_6C84
loc_6C80:
		move.w	(Camera_Max_Y_pos_now).w,d1
loc_6C84:
		move.w	(a1),d4
		swap	d1
		move.l	d1,d3
		sub.l   (a1),d3
		ror.l   #8,d3
		move.w	d3,(a4)
		move.l	d1,(a1)
		move.w	(a1),d0
		andi.w	#$10,d0
		move.b	(a2),d1
		eor.b   d1,d0
		bne.s	loc_6CB2
		eori.b  #$10,(a2)
		move.w	(a1),d0
		sub.w   d4,d0
		bpl.s	loc_6CAE
		bset	#0,(a3)
		rts
loc_6CAE:
		bset	#1,(a3)
loc_6CB2:
		rts
Scroll_Block1: ; loc_6CB4:
		move.l	(Camera_BG_X_pos).w,d2
		move.l	d2,d0
		add.l   d4,d0
		move.l	d0,(Camera_BG_X_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(Horiz_block_crossed_flag_BG).w,d3
		eor.b   d3,d1
		bne.s	loc_6CE8
		eori.b  #$10,(Horiz_block_crossed_flag_BG).w
		sub.l   d2,d0
		bpl.s	loc_6CE2
		bset	#2,(Scroll_flags_BG).w
		bra.s	loc_6CE8
loc_6CE2:
		bset	#3,(Scroll_flags_BG).w
loc_6CE8:
		move.l	(Camera_BG_Y_pos).w,d3
		move.l	d3,d0
		add.l   d5,d0
		move.l	d0,(Camera_BG_Y_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(Verti_block_crossed_flag_BG).w,d2
		eor.b   d2,d1
		bne.s	loc_6d1C
		eori.b  #$10,(Verti_block_crossed_flag_BG).w
		sub.l   d3,d0
		bpl.s	loc_6d16
		bset	#0,(Scroll_flags_BG).w
		rts
loc_6d16:
		bset	#1,(Scroll_flags_BG).w
loc_6d1C:
		rts
Scroll_Block2: ;  loc_6d1E:
		move.l	(Camera_BG_X_pos).w,d2
		move.l	d2,d0
		add.l   d4,d0
		move.l	d0,(Camera_BG_X_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(Horiz_block_crossed_flag_BG).w,d3
		eor.b   d3,d1
		bne.s	loc_6d50
		eori.b  #$10,(Horiz_block_crossed_flag_BG).w
		sub.l   d2,d0
		bpl.s	loc_6d4A
		bset	d6,(Scroll_flags_BG).w
		bra.s	loc_6d50
loc_6d4A:
		addq.b	#1,d6
		bset	d6,(Scroll_flags_BG).w
loc_6d50:
		rts
Scroll_Block3: ; loc_6d52:
		move.l	(Camera_BG_Y_pos).w,d3
		move.l	d3,d0
		add.l   d5,d0
loc_6d5A:
		move.l	d0,(Camera_BG_Y_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(Verti_block_crossed_flag_BG).w,d2
		eor.b   d2,d1
		bne.s	loc_6D84
		eori.b  #$10,(Verti_block_crossed_flag_BG).w
		sub.l   d3,d0
		bpl.s	loc_6d7E
		bset	d6,(Scroll_flags_BG).w
		rts
loc_6d7E:
		addq.b	#1,d6
		bset	d6,(Scroll_flags_BG).w
loc_6D84:
		rts
Scroll_Block4: ; loc_6D86:
		move.l	(Camera_BG2_X_pos).w,d2
		move.l	d2,d0
		add.l   d4,d0
		move.l	d0,(Camera_BG2_X_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(Horiz_block_crossed_flag_BG2).w,d3
		eor.b   d3,d1
		bne.s	loc_6DB8
		eori.b  #$10,(Horiz_block_crossed_flag_BG2).w
		sub.l   d2,d0
		bpl.s	loc_6DB2
		bset	d6,(Scroll_flags_BG2).w
		bra.s	loc_6DB8
loc_6DB2:
		addq.b	#1,d6
		bset	d6,(Scroll_flags_BG2).w
loc_6DB8:
		rts
; Scroll_Block5: ;loc_6DBA:  Left Over GHz S1 Scroll
		move.l	(Camera_BG3_X_pos).w,d2
		move.l	d2,d0
		add.l   d4,d0
		move.l	d0,(Camera_BG3_X_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(Horiz_block_crossed_flag_BG3).w,d3
		eor.b   d3,d1
		bne.s	loc_6DEC
		eori.b  #$10,(Horiz_block_crossed_flag_BG3).w
		sub.l   d2,d0
		bpl.s	loc_6DE6
		bset	d6,(Scroll_flags_BG3).w
		bra.s	loc_6DEC
loc_6DE6:
		addq.b	#1,d6
		bset	d6,(Scroll_flags_BG3).w
loc_6DEC:
		rts
; ============================================================================
; ----------------------------------------------------------------------------
; Unused subroutine to display the correct BACKGROUND tiles as you move
; Used in Sonic 1 on its title screen
; ----------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_6DEE: LoadTilesAsYouMove_BGOnly:
		lea	(VDP_control_port).l,a5
		lea	(VDP_data_port).l,a6
		lea	(Scroll_flags_BG).w,a2
		lea	(Camera_BG_X_pos).w,a3
		lea	(Level_Layout+$80).w,a4
		move.w	#$6000,d2
		bsr.w	Draw_BG1
		lea	(Scroll_flags_BG2).w,a2
		lea	(Camera_BG2_X_pos).w,a3
		bra.w	Draw_BG2

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to display correct tiles as you move
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_6E1A:
LoadTilesAsYouMove:
		lea	(VDP_control_port).l,a5
		lea	(VDP_data_port).l,a6
		lea	(Scroll_flags_BG_copy).w,a2
		lea	(Camera_BG_copy).w,a3
		lea	(Level_Layout+$80).w,a4	; first background line
		move.w	#$6000,d2
		bsr.w	Draw_BG1

		lea	(Scroll_flags_BG2_copy).w,a2
		lea	(Camera_BG2_copy).w,a3
		bsr.w	Draw_BG2

		lea	(Scroll_flags_BG3_copy).w,a2
		lea	(Camera_BG3_copy).w,a3
		bsr.w	Draw_BG3

		tst.w	(Two_player_mode).w
		beq.s	loc_6E6C
		lea	(Scroll_flags_copy_P2).w,a2
		lea	(Camera_P2_copy).w,a3
		lea	(Level_Layout).w,a4
		move.w	#$6000,d2
		bsr.w	Draw_FG_P2

loc_6E6C:
		lea	(Scroll_flags_copy).w,a2
		lea	(Camera_RAM_copy).w,a3
		lea	(Level_Layout).w,a4
		move.w	#$4000,d2

		tst.b	(Screen_redraw_flag).w	; is the screen redraw flag set?
		beq.s	Draw_FG			; is not,branch

		move.b	#0,(Screen_redraw_flag).w	; clear the flag immediately

		moveq	#-16,d4			; X (relative to camera)
		moveq	#(1+224/16+1)-1,d6	; cover the screen,plus an extra row at the top and bottom
; loc_6E8C:
Draw_All:
		; This redraws the WHOLE screen,although it is only used
		; by the unused CPZ background routine at this point.
		movem.l	d4-d6,-(sp)
		moveq	#-16,d5		; X (relative)
		move.w	d4,d1
		bsr.w	loc_7644
		move.w	d1,d4
		moveq	#-16,d5		; X (relative)
		bsr.w	loc_7350	; draw the current row
		movem.l	(sp)+,d4-d6
		addi.w	#16,d4		; move onto the next row
		dbf	d6,Draw_All	; repeat for all rows

		move.b	#0,(Scroll_flags_copy).w
		rts
; ===========================================================================
; loc_6EB4:
Draw_FG:
		tst.b	(a2)
		beq.s	loc_6F18
		bclr	#0,(a2)
		beq.s	loc_6ECE
		moveq	#-16,d4
		moveq	#-16,d5
		bsr.w	loc_7644
		moveq	#-16,d4
		moveq	#-16,d5
		bsr.w	loc_7350

loc_6ECE:
		bclr	#1,(a2)
		beq.s	loc_6EE8
		move.w	#224,d4
		moveq	#-16,d5
		bsr.w	loc_7644
		move.w	#224,d4
		moveq	#-16,d5
		bsr.w	loc_7350

loc_6EE8:
		bclr	#2,(a2)
		beq.s	loc_6EFE
		moveq	#-16,d4
		moveq	#-16,d5
		bsr.w	loc_7644
		moveq	#-16,d4
		moveq	#-16,d5
		bsr.w	loc_72C2

loc_6EFE:
		bclr	#3,(a2)
		beq.s	loc_6F18
		moveq	#-16,d4
		move.w	#320,d5
		bsr.w	loc_7644
		moveq	#-16,d4
		move.w	#320,d5
		bsr.w	loc_72C2

loc_6F18:
		rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_6F1A:
Draw_FG_P2:
		tst.b	(a2)
		beq.s	loc_6F7E
		bclr	#0,(a2)
		beq.s	loc_6F34
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_7680
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_7350
loc_6F34:
		bclr	#1,(a2)
		beq.s	loc_6F4E
		move.w	#224,d4
		moveq	#-$10,d5
		bsr.w	loc_7680
		move.w	#224,d4
		moveq	#-$10,d5
		bsr.w	loc_7350
loc_6F4E:
		bclr	#2,(a2)
		beq.s	loc_6F64
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_7680
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_72C2
loc_6F64:
		bclr	#3,(a2)
		beq.s	loc_6F7E
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	loc_7680
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	loc_72C2
loc_6F7E:
		rts
; loc_6F80:
Draw_BG1:
		tst.b	(a2)
		beq.w	loc_704E
		bclr	#0,(a2)
		beq.s	loc_6F9C
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_7644
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_7350
loc_6F9C:
		bclr	#1,(a2)
		beq.s	loc_6FB6
		move.w	#$E0,d4
		moveq	#-$10,d5
		bsr.w	loc_7644
		move.w	#$E0,d4
		moveq	#-$10,d5
		bsr.w	loc_7350
loc_6FB6:
		bclr	#2,(a2)
		beq.s	loc_6FCC
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_7644
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_72C2
loc_6FCC:
		bclr	#3,(a2)
		beq.s	loc_6FE6
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	loc_7644
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	loc_72C2
loc_6FE6:
		bclr	#4,(a2)
		beq.s	loc_6FFE
		moveq	#-$10,d4
		moveq	#0,d5
		bsr.w	loc_7646
		moveq	#-$10,d4
		moveq	#0,d5
		moveq	#$1F,d6
		bsr.w	loc_7354
loc_6FFE:
		bclr	#5,(a2)
		beq.s	loc_701A
		move.w	#$E0,d4
		moveq	#0,d5
		bsr.w	loc_7646
		move.w	#$E0,d4
		moveq	#0,d5
		moveq	#$1F,d6
		bsr.w	loc_7354
loc_701A:
		bclr	#6,(a2)
		beq.s	loc_7032
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	loc_7644
		moveq	#-$10,d4
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	loc_7348
loc_7032:
		bclr	#7,(a2)
		beq.s	loc_704E
		move.w	#$E0,d4
		moveq	#-$10,d5
		bsr.w	loc_7644
		move.w	#$E0,d4
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	loc_7348
loc_704E:
		rts
; loc_7050:
Draw_BG2:
		tst.b	(a2)
		beq.w	loc_7092
		bclr	#0,(a2)
		beq.s	loc_7072
		move.w	#$70,d4
		moveq	#-$10,d5
		bsr.w	loc_7644
		move.w	#$70,d4
		moveq	#-$10,d5
		moveq	#2,d6
		bsr.w	loc_72C4
loc_7072:
		bclr	#1,(a2)
		beq.s	loc_7092
		move.w	#$70,d4
		move.w	#$140,d5
		bsr.w	loc_7644
		move.w	#$70,d4
		move.w	#$140,d5
		moveq	#2,d6
		bsr.w	loc_72C4
loc_7092:
		rts

loc_7094:
		dc.b	$00
loc_7095:
		dc.b	$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04,$04
		dc.b	$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
		dc.b	$00
;loc_70B6:
		moveq	#-$10,d4
		bclr	#0,(a2)
		bne.s	loc_70C8
		bclr	#1,(a2)
		beq.s	loc_7110
		move.w	#$E0,d4
loc_70C8:
		lea	loc_7095(pc),A0
		move.w	(Camera_BG_Y_pos).w,d0
		add.w   d4,d0
		andi.w	#$1F0,d0
		lsr.w	#4,d0
		move.b	(A0,d0),d0
		lea	(loc_723C).l,A3
		move.w	(A3,d0),A3
		beq.s	loc_70FC
		moveq	#-$10,d5
		movem.l d4/d5,-(sp)
		bsr.w	loc_7644
		movem.l (sp)+,d4/d5
		bsr.w	loc_7350
		bra.s	loc_7110
loc_70FC:
		moveq	#0,d5
		movem.l d4/d5,-(sp)
		bsr.w	loc_7646
		movem.l (sp)+,d4/d5
		moveq	#$1F,d6
		bsr.w	loc_7354
loc_7110:
		tst.b	(a2)
		bne.s	loc_7116
		rts
loc_7116:
		moveq	#-$10,d4
		moveq	#-$10,d5
		move.b	(a2),d0
		andi.b	#$A8,d0
		beq.s	loc_712A
		lsr.b	#1,d0
		move.b	d0,(a2)
		move.w	#$140,d5
loc_712A:
		lea	loc_7094(pc),A0
		move.w	(Camera_BG_Y_pos).w,d0
		andi.w	#$1F0,d0
		lsr.w	#4,d0
		lea	(A0,d0),A0
		bra.w	loc_7244
; loc_7140:
Draw_BG3:
		tst.b	(a2)
		beq.w	loc_718C
		cmpi.b	#chemical_plant_zone,(Current_Zone).w
		beq.w	loc_71d0
		bclr	#0,(a2)
		beq.s	loc_716C
		move.w	#$40,d4
		moveq	#-$10,d5
		bsr.w	loc_7644
		move.w	#$40,d4
		moveq	#-$10,d5
		moveq	#2,d6
		bsr.w	loc_72C4
loc_716C:
		bclr	#1,(a2)
		beq.s	loc_718C
		move.w	#$40,d4
		move.w	#$140,d5
		bsr.w	loc_7644
		move.w	#$40,d4
		move.w	#$140,d5
		moveq	#2,d6
		bsr.w	loc_72C4
loc_718C:
		rts
loc_718E:
		dc.b	$02
loc_718F:
		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
		dc.b	$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
		even
loc_71d0:
		moveq	#-$10,d4
		bclr	#0,(a2)
		bne.s	loc_71E2
		bclr	#1,(a2)
		beq.s	loc_720C
		move.w	#$E0,d4
loc_71E2:
		lea	loc_718F(pc),A0
		move.w	(Camera_BG_Y_pos).w,d0
		add.w   d4,d0
		andi.w	#$3F0,d0
		lsr.w	#4,d0
		move.b	(A0,d0),d0
		move.w	loc_723C(pc,d0),A3
		moveq	#-$10,d5
		movem.l d4-d5,-(sp)
		bsr.w	loc_7644
		movem.l (sp)+,d4-d5
		bsr.w	loc_7350
loc_720C:
		tst.b	(a2)
		bne.s	loc_7212
		rts
loc_7212:
		moveq	#-$10,d4
		moveq	#-$10,d5
		move.b	(a2),d0
		andi.b	#$A8,d0
		beq.s	loc_7226
		lsr.b	#1,d0
		move.b	d0,(a2)
		move.w	#$140,d5
loc_7226:
		lea	loc_718E(pc),A0
		move.w	(Camera_BG_Y_pos).w,d0
		andi.w	#$7F0,d0
		lsr.w	#4,d0
		lea	(A0,d0),A0
		bra.w	loc_7244
loc_723C:
		dc.w    Camera_BG_copy,Camera_BG_copy,Camera_BG2_copy,Camera_BG3_copy
loc_7244:
		tst.w	(Two_player_mode).w
		bne.s	loc_7286
		moveq	#$F,d6
		move.l	#$800000,d7
loc_7252:
		moveq	#0,d0
		move.b	(a0)+,d0
		btst	d0,(a2)
		beq.s	loc_727A
		move.w	loc_723C(pc,d0),A3
		movem.l d4-d5/A0,-(sp)
		movem.l d4-d5,-(sp)
		bsr.w	loc_7602
		movem.l (sp)+,d4-d5
		bsr.w	loc_7644
		bsr.w	loc_7532
		movem.l (sp)+,d4-d5/A0
loc_727A:
		addi.w	#$10,d4
		dbf	d6, loc_7252
		clr.b   (a2)
		rts
loc_7286:
		moveq	#$F,d6
		move.l	#$800000,d7
loc_728E:
		moveq	#0,d0
		move.b	(a0)+,d0
		btst	d0,(a2)
		beq.s	loc_72B6
		move.w	loc_723C(pc,d0),A3
		movem.l d4-d5/A0,-(sp)
		movem.l d4-d5,-(sp)
		bsr.w	loc_7602
		movem.l (sp)+,d4-d5
		bsr.w	loc_7644
		bsr.w	loc_75B8
		movem.l (sp)+,d4-d5/A0
loc_72B6:
		addi.w	#$10,d4
		dbf	d6, loc_728E
		clr.b   (a2)
		rts
loc_72C2:
		moveq	#$F,d6
loc_72C4:
		add.w   (a3),d5
		add.w   4(a3),d4
		move.l	#$800000,d7
		move.l	d0,d1
		bsr.w	loc_745C
		tst.w	(Two_player_mode).w
		bne.s	loc_7312
loc_72DC:
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(Block_Table).w,A1
		adda.w	d3,A1
		move.l	d1,d0
		bsr.w	loc_7532
		adda.w	#$10,A0
		addi.w	#$100,d1
		andi.w	#$FFF,d1
		addi.w	#$10,d4
		move.w	d4,d0
		andi.w	#$70,d0
		bne.s	loc_730C
		bsr.w	loc_745C
loc_730C:
		dbf	d6,loc_72DC
		rts
loc_7312:
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(Block_Table).w,A1
		adda.w	d3,A1
		move.l	d1,d0
		bsr.w	loc_75B8
		adda.w	#$10,A0
		addi.w	#$80,d1
		andi.w	#$FFF,d1
		addi.w	#$10,d4
		move.w	d4,d0
		andi.w	#$70,d0
loc_733C:
		bne.s	loc_7342
		bsr.w	loc_745C
loc_7342:
		dbf	d6,loc_7312
		rts
loc_7348:
		add.w   (a3),d5
		add.w   4(a3),d4
		bra.s	loc_7358
loc_7350:
		moveq	#$15,d6
		add.w   (a3),d5
loc_7354:
		add.w   4(a3),d4
loc_7358:
		tst.w	(Two_player_mode).w
		bne.s	loc_73d6
		move.l	A2,-(sp)
		move.w	d6,-(sp)
		lea	(Block_cache).w,A2
		move.l	d0,d1
		or.w    d2,d1
		swap	d1
		move.l	d1,-(sp)
		move.l	d1,(a5)
		swap	d1
		bsr.w	loc_745C
loc_7376:
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(Block_Table).w,A1
		adda.w	d3,A1
		bsr.w	loc_7492
		addq.w	#2,A0
		addq.b	#4,d1
		bpl.s	loc_7398
		andi.b	#$7F,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1
loc_7398:
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0
		bne.s	loc_73A8
		bsr.w	loc_745C
loc_73A8:
		dbf	d6,loc_7376
		move.l	(sp)+,d1
		addi.l	#$800000,d1
		lea	(Block_cache).w,A2
		move.l	d1,(a5)
		swap	d1
		move.w	(sp)+,d6
loc_73BE:
		move.l	(a2)+,(a6)
		addq.b	#4,d1
		bmi.s	loc_73CE
		ori.b   #$80,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1
loc_73CE:
		dbf	d6,loc_73BE
		move.l	(sp)+,A2
		rts
loc_73d6:
		move.l	d0,d1
		or.w    d2,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1
		tst.b	d1
		bmi.s	loc_7420
		bsr.w	loc_745C
loc_73E8:
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(Block_Table).w,A1
		adda.w	d3,A1
		bsr.w	loc_74F4
		addq.w	#2,A0
		addq.b	#4,d1
		bpl.s	loc_740A
		andi.b	#$7F,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1
loc_740A:
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0
		bne.s	loc_741A
		bsr.w	loc_745C
loc_741A:
		dbf	d6,loc_73E8
		rts
loc_7420:
		bsr.w	loc_745C
loc_7424:
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(Block_Table).w,A1
		adda.w	d3,A1
		bsr.w	loc_74F4
		addq.w	#2,A0
		addq.b	#4,d1
		bmi.s	loc_7446
		ori.b   #$80,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1
loc_7446:
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0
		bne.s	loc_7456
		bsr.w	loc_745C
loc_7456:
		dbf	d6,loc_7424
		rts
loc_745C:
		movem.l d4-d5,-(sp)
		move.w	d4,d3
		add.w   d3,d3
		andi.w	#$F00,d3
		lsr.w	#3,d5
		move.w	d5,d0
		lsr.w	#4,d0
		andi.w	#$7F,d0
		add.w   d3,d0
		moveq	#-1,d3
		clr.w	d3
		move.b	(A4,d0),d3
		lsl.w	#7,d3
		andi.w	#$70,d4
		andi.w	#$E,d5
		add.w   d4,d3
		add.w   d5,d3
		move.l	d3,A0
		movem.l (sp)+,d4-d5
		rts
loc_7492:
		btst	#3,(a0)
		bne.s	loc_74BE
		btst	#2,(a0)
		bne.s	loc_74A4
		move.l	(a1)+,(a6)
		move.l	(a1)+,(a2)+
		rts
loc_74A4:
		move.l	(a1)+,d3
		eori.l  #$8000800,d3
		swap	d3
		move.l	d3,(a6)
		move.l	(a1)+,d3
		eori.l  #$8000800,d3
		swap	d3
		move.l	d3,(a2)+
		rts
loc_74BE:
		btst	#2,(a0)
		bne.s	loc_74DA
		move.l	(a1)+,d0
		move.l	(a1)+,d3
		eori.l  #$10001000,d3
		move.l	d3,(a6)
		eori.l  #$10001000,d0
		move.l	d0,(a2)+
		rts
loc_74DA:
		move.l	(a1)+,d0
		move.l	(a1)+,d3
		eori.l  #$18001800,d3
		swap	d3
		move.l	d3,(a6)
		eori.l  #$18001800,d0
		swap	d0
		move.l	d0,(a2)+
		rts
loc_74F4:
		btst	#3,(a0)
		bne.s	loc_7512
		btst	#2,(a0)
		bne.s	loc_7504
		move.l	(a1)+,(a6)
		rts
loc_7504:
		move.l	(a1)+,d3
		eori.l  #$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts
loc_7512:
		btst	#2,(a0)
		bne.s	loc_7524
		move.l	(a1)+,d3
		eori.l  #$10001000,d3
		move.l	d3,(a6)
		rts
loc_7524:
		move.l	(a1)+,d3
		eori.l  #$18001800,d3
		swap	d3
		move.l	d3,(a6)
		rts
loc_7532:
		or.w    d2,d0
		swap	d0
		btst	#3,(a0)
		bne.s	loc_756E
		btst	#2,(a0)
		bne.s	loc_754E
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		add.l   d7,d0
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		rts
loc_754E:
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l  #$8000800,d3
		swap	d3
		move.l	d3,(a6)
		add.l   d7,d0
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l  #$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts
loc_756E:
		btst	#2,(a0)
		bne.s	loc_7594
		move.l	d5,-(sp)
		move.l	d0,(a5)
		move.l	(a1)+,d5
		move.l	(a1)+,d3
		eori.l  #$10001000,d3
		move.l	d3,(a6)
		add.l   d7,d0
		move.l	d0,(a5)
		eori.l  #$10001000,d5
		move.l	d5,(a6)
		move.l	(sp)+,d5
		rts
loc_7594:
		move.l	d5,-(sp)
		move.l	d0,(a5)
		move.l	(a1)+,d5
		move.l	(a1)+,d3
		eori.l  #$18001800,d3
		swap	d3
		move.l	d3,(a6)
		add.l   d7,d0
		move.l	d0,(a5)
		eori.l  #$18001800,d5
		swap	d5
		move.l	d5,(a6)
		move.l	(sp)+,d5
		rts
loc_75B8:
		or.w    d2,d0
		swap	d0
		btst	#3,(a0)
		bne.s	loc_75DE
		btst	#2,(a0)
		bne.s	loc_75CE
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		rts
loc_75CE:
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l  #$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts
loc_75DE:
		btst	#2,(a0)
		bne.s	loc_75F2
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l  #$10001000,d3
		move.l	d3,(a6)
		rts
loc_75F2:
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l  #$18001800,d3
		swap	d3
		move.l	d3,(a6)
		rts
loc_7602:
		add.w   (a3),d5
		add.w   4(a3),d4
		lea	(Block_Table).w,A1
		move.w	d4,d3
		add.w   d3,d3
		andi.w	#$F00,d3
		lsr.w	#3,d5
		move.w	d5,d0
		lsr.w	#4,d0
		andi.w	#$7F,d0
		add.w   d3,d0
		moveq	#-1,d3
		clr.w	d3
		move.b	(A4,d0),d3
		lsl.w	#7,d3
		andi.w	#$70,d4
		andi.w	#$E,d5
		add.w   d4,d3
		add.w   d5,d3
		move.l	d3,A0
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		adda.w	d3,A1
		rts
loc_7644:
		add.w   (a3),d5
loc_7646:
		tst.w	(Two_player_mode).w
		bne.s	loc_7666
		add.w   4(a3),d4
		andi.w	#$F0,d4
		andi.w	#$1F0,d5
		lsl.w	#4,d4
		lsr.w	#2,d5
		add.w   d5,d4
		moveq	#3,d0
		swap	d0
		move.w	d4,d0
		rts
loc_7666:
		add.w   4(a3),d4
loc_766A:
		andi.w	#$1F0,d4
		andi.w	#$1F0,d5
		lsl.w	#3,d4
		lsr.w	#2,d5
		add.w   d5,d4
		moveq	#3,d0
		swap	d0
		move.w	d4,d0
		rts
loc_7680:
		tst.w	(Two_player_mode).w
		bne.s	loc_76A2
		add.w   4(a3),d4
		add.w   (a3),d5
		andi.w	#$F0,d4
		andi.w	#$1F0,d5
		lsl.w	#4,d4
		lsr.w	#2,d5
		add.w   d5,d4
		moveq	#2,d0
		swap	d0
		move.w	d4,d0
		rts
loc_76A2:
		add.w   4(a3),d4
		add.w   (a3),d5
		andi.w	#$1F0,d4
		andi.w	#$1F0,d5
		lsl.w	#3,d4
		lsr.w	#2,d5
		add.w   d5,d4
		moveq	#2,d0
		swap	d0
		move.w	d4,d0
		rts
Load_Tiles_From_Start: ; loc_76BE:
		lea	(VDP_control_port),A5
		lea	(VDP_data_port),A6
		tst.w	(Two_player_mode).w
		beq.s	loc_76DE
		lea	(Camera_X_pos_P2).w,A3
		lea	(Level_Layout).w,A4
		move.w	#$6000,d2
		bsr.s	loc_773A
loc_76DE:
		lea	(Camera_X_pos).w,A3
		lea	(Level_Layout).w,A4
		move.w	#$4000,d2
		bsr.s	loc_770A
		lea	(Camera_BG_X_pos).w,A3
		lea	(Level_Layout+$80).w,A4
		move.w	#$6000,d2
		tst.w	(Two_player_mode).w
		beq.w	loc_770A
		cmpi.b	#dust_hill_zone,(Current_Zone).w
		beq.w	loc_776A
loc_770A:
		moveq	#-$10,d4
		moveq	#$F,d6
loc_770E
		movem.l d4-d6,-(sp)
		moveq	#0,d5
		move.w	d4,d1
		bsr.w	loc_7644
		move.w	d1,d4
		moveq	#0,d5
		moveq	#$1F,d6
		move    #$2700,sr
		bsr.w	loc_7348
		move    #$2300,sr
		movem.l (sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_770E
		rts
loc_773A:
		moveq	#-$10,d4
		moveq	#$F,d6
loc_773E
		movem.l d4-d6,-(sp)
		moveq	#0,d5
		move.w	d4,d1
		bsr.w	loc_7680
		move.w	d1,d4
		moveq	#0,d5
		moveq	#$1F,d6
		move    #$2700,sr
		bsr.w	loc_7348
		move    #$2300,sr
		movem.l (sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_773E
		rts
loc_776A:
		moveq	#0,d4
		moveq	#$1F,d6
loc_776E:
		movem.l d4-d6,-(sp)
		moveq	#0,d5
		move.w	d4,d1
		bsr.w	loc_766A
		move.w	d1,d4
		moveq	#0,d5
		moveq	#$1F,d6
		move    #$2700,sr
		bsr.w	loc_7358
		move    #$2300,sr
		movem.l (sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_776E
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load blocks,chunks,PLCs,and tiles for the current zone
; ---------------------------------------------------------------------------
; loc_779A: Main_Level_Load_16_128_Blocks:
loadZoneBlockMaps:
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(LevelArtPointers).l,a2
		lea	(a2,d0.w),a2
		move.l	a2,-(sp)
		addq.w	#4,a2
		move.l	(a2)+,a0
		bra.s	+
; ===========================================================================
; This code has been unused since the Nick Arcade prototype,loading blocks
; compressed in Enigma format; was used in Sonic 1 before they swapped to
; Kosinski for whatever reason
; loc_77BC: loadBlocksInEnigma:
		lea	(Block_Table).w,a1
		move.w	#0,d0
		bsr.w	EniDec
		bra.s	loc_77EE
; ===========================================================================
; loc_77CA: Main_Level_Load_Blocks_Convert16:
+		lea	(Block_Table).w,a1
		move.w	#bytesToWcnt(Block_Table_End-Block_Table),d2

-		move.w	(a0)+,d0
		tst.w	(Two_player_mode).w
		beq.s	+
		; In 2P mode,adjust the block table to halve the pattern index on each block
		move.w	d0,d1		; read an entry
		andi.w	#$F800,d0	; filter for upper five bits
		andi.w	#$7FF,d1	; filter for lower eleven bits (patternIndex)
		lsr.w	#1,d1		; halve the pattern index
		or.w	d1,d0		; put the parts back together
+
		move.w	d0,(a1)+	; change the entry with the adjusted value
		dbf	d2,-

loc_77EE:
		cmpi.b	#hill_top_zone,(Current_Zone).w
		bne.s	++
		lea	(Block_Table+$980).w,a1
		lea	(BM16_HTZ).l,a0
		move.w	#$400-1,d2

-		move.w	(a0)+,d0
		tst.w	(Two_player_mode).w
		beq.s	+
		; same as the above function,but handling HTZ's unique
		; blocks as well since they get patched in after the fact
		move.w	d0,d1
		andi.w	#$F800,d0
		andi.w	#$7FF,d1
		lsr.w	#1,d1
		or.w	d1,d0
+
		move.w	d0,(a1)+
		dbf	d2,-
+
		move.l	(a2)+,a0
		lea	(Chunk_Table).l,a1
		bsr.w	KosDec
		bra.s	loadLevelPatternsAndPalettes
; ===========================================================================
; All this does is skip below the (already unused) code,presumably before
; the chunks were recompressed in Kosinski again in this build
; loc_782E: loadChunksUncompressed:
		bra.s	loadChunksUncompressedPart2
; ===========================================================================
; This WAS used in the Nick Arcade,for GHZ's (and technically LZ's,but
; it uses the Kosinski-compressed CPZ data) chunks
; loc_7830: loadChunksInChameleon:
		moveq	#0,d1
		moveq	#0,d2
		move.w	(a0)+,d0
		lea	(a0,d0.w),a1
		lea	(Chunk_Table).l,a2
		lea	(Level_Layout).w,a3

-		bsr.w	KC_Dec
		tst.w	d0
		bmi.s	-
		bra.s	loadLevelPatternsAndPalettes
; ===========================================================================
; loc_784E:
loadChunksUncompressedPart2:
		lea	(Chunk_Table).l,a1
		move.w	#bytesToWcnt(Chunk_Table_End-Chunk_Table),d0

-		move.w	(a0)+,(a1)+
		dbf	d0,-
; ===========================================================================
; loc_785E: Load_Level_Sprites:
loadLevelPatternsAndPalettes:
		bsr.w	Load_Level_Layout
		move.l	(sp)+,a2
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		beq.s	+
		bsr.w	LoadPLC
+
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		cmpi.w	#casino_night_zone_act_2,(Current_ZoneAndAct).w
		bne.s	.notCNZ2
		moveq	#PalID_CNZ2,d0	; identical to CNZ1,but uses BOZ's entry

.notCNZ2:
		bsr.w	PalLoad1
		rts
; End of subroutine loadZoneBlockMaps

;===============================================================================
; Sub Routine Load_Level_Layout
; [ Begin ]
;===============================================================================
Load_Level_Layout: ; loc_7886: ; Load Level Layout
;		clearRAM Level_Layout,Level_Layout_End
		lea	(Level_Layout).w,a3
		move.w	#bytesToLcnt((Level_Layout_End-Level_Layout)-((Level_Layout)&1)),d1
		moveq	#0,d0
.loop:		move.l	d0,(a3)+
		dbf	d1,.loop
		lea	(Level_Layout).w,A3 ; Foreground
		moveq	#0,d1
		bsr.w	Interleave_Level_Layout ; loc_78A6
		lea	(Level_Layout+$80).w,A3 ; Background
		moveq	#2,d1
Interleave_Level_Layout: ; loc_78A6:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b   #1,d0
		lsr.w	#5,d0
		add.w   d1,d0
		lea	(Off_Level).l,A1   ; loc_3334E
		move.w	(A1,d0),d0
		lea	(A1,d0.l),A1
		moveq	#0,d1
		move.w	d1,d2
		move.b	(a1)+,d1
		move.b	(a1)+,d2
		move.l	d1,d5
		addq.l	#1,d5
		moveq	#0,d3
		move.w	#$80,d3
		divu.w  d5,d3
		subq.w	#1,d3
loc_78d6:
		move.l	A3,A0
		move.w	d3,d4
loc_78DA:
		move.l	A1,-(sp)
		move.w	d1,d0
loc_78DE:
		move.b	(a1)+,(a0)+
		dbf	d0,loc_78DE
		move.l	(sp)+,A1
		dbf	d4,loc_78DA
		lea	(A1,d5),A1
		lea	$100(a3),A3
		dbf	d2,loc_78d6
		rts
;===============================================================================
; Sub Routine Load_Level_Layout
; [ End ]
;===============================================================================

;===============================================================================
; Sub Routine Unused #2
; [ Begin ]
;===============================================================================
;loc_78F8:
		lea	($FE0000),A1
		lea	($FE0080),A2
		lea	(Chunk_Table),A3
		move.w	#$3F,d1
loc_790E:
		bsr.w	loc_79A0
		bsr.w	loc_79A0
		dbf	d1,loc_790E
		lea	($FE0000),A1
		lea	($FF0000),A2
		move.w	#$3F,d1
loc_792A:
		move.w	#0,(a2)+
		dbf	d1,loc_792A
		move.w	#$3FBF,d1
loc_7936:
		move.w	(a1)+,(a2)+
		dbf	d1,loc_7936
		rts
		lea	($FE0000),A1
		lea	(Chunk_Table),A3
		moveq	#$1F,d0
loc_794C:
		move.l	(a1)+,(a3)+
		dbf	d0,loc_794C
		moveq	#0,d7
		lea	($FE0000),A1
		move.w	#$FF,d5
loc_795E:
		lea	(Chunk_Table),A3
		move.w	d7,d6
loc_7966:
		movem.l A1-A3,-(sp)
		move.w	#$3F,d0
loc_796E:
		cmpm.w  (a1)+,(a3)+
		bne.s	loc_7984
		dbf	d0,loc_796E
		movem.l (sp)+,A1-A3
		adda.w	#$80,A1
		dbf	d5,loc_795E
		bra.s	loc_799E
loc_7984:
		movem.l (sp)+,A1-A3
		adda.w	#$80,A3
		dbf	d6,loc_7966
		moveq	#$1F,d0
loc_7992:
		move.l	(a1)+,(a3)+
		dbf	d0,loc_7992
		addq.l	#1,d7
		dbf	d5,loc_795E
loc_799E:
		bra.s	loc_799E
loc_79A0:
		moveq	#7,d0
loc_79A2:
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		dbf	d0,loc_79A2
		adda.w	#$80,A1
		adda.w	#$80,A2
		rts
;===============================================================================
; Sub Routine Unused #2
; [ Begin ]
;===============================================================================

;===============================================================================
; Sub Routine Dyn_Screen_Boss_Loader
; [ Begin ]
;===============================================================================
Dyn_Screen_Boss_Loader: ; loc_79C0: ; Boss Loader / Level Dynamic Resize
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		add.w   d0,d0
		move.w	DynResize_Index(pc,d0.w),d0 ; loc_7A26
		jsr	DynResize_Index(pc,d0.w)     ; loc_7A26
		moveq	#2,d1
		move.w	(Camera_Max_Y_pos).w,d0
		sub.w   (Camera_Max_Y_pos_now).w,d0
		beq.s	loc_79FE
		bcc.s	loc_7A00
		neg.w	d1
		move.w	(Camera_Y_pos).w,d0
		cmp.w	(Camera_Max_Y_pos).w,d0
		bls.s   loc_79F4
		move.w	d0,(Camera_Max_Y_pos_now).w
		andi.w	#$FFFE,(Camera_Max_Y_pos_now).w
loc_79F4:
		add.w   d1,(Camera_Max_Y_pos_now).w
		move.b	#1,(Camera_Max_Y_Pos_Changing).w
loc_79FE:
		rts
loc_7A00:
		move.w	(Camera_Y_pos).w,d0
		addi.w	#8,d0
		cmp.w	(Camera_Max_Y_pos_now).w,d0
		bcs.s	loc_7A1A
		btst	#1,(MainCharacter+$22).w
		beq.s	loc_7A1A
		add.w   d1,d1
		add.w   d1,d1
loc_7A1A:
		add.w   d1,(Camera_Max_Y_pos_now).w
		move.b	#1,(Camera_Max_Y_Pos_Changing).w
		rts
; off_7A26:
DynResize_Index: zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w    loc_7A48
	zoneOffsetTableEntry.w    loc_7AD8
	zoneOffsetTableEntry.w    loc_7ADA
	zoneOffsetTableEntry.w    loc_7ADC
	zoneOffsetTableEntry.w    loc_7ADE
	zoneOffsetTableEntry.w    loc_7AE0
	zoneOffsetTableEntry.w    loc_7AE2
	zoneOffsetTableEntry.w    loc_7AE4
	zoneOffsetTableEntry.w    loc_7FC8
	zoneOffsetTableEntry.w    loc_7FCA
	zoneOffsetTableEntry.w    loc_7FCC
	zoneOffsetTableEntry.w    loc_7FCE
	zoneOffsetTableEntry.w    DynResize_CNz  ; loc_7Fd0
	zoneOffsetTableEntry.w    DynResize_CPz  ; loc_7Fd2
	zoneOffsetTableEntry.w    DynResize_GCz  ; loc_7Fd4
	zoneOffsetTableEntry.w    DynResize_NGHz ; loc_7Fd6
	zoneOffsetTableEntry.w    DynResize_DEz  ; loc_7FD8
    zoneTableEnd

loc_7A48:
		tst.b	(Current_Act).w
		bne.s	loc_7A50
		rts
loc_7A50:
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0
		move.w	loc_7A5E(pc,d0),d0
		jmp     loc_7A5E(pc,d0)
loc_7A5E:
		dc.w    loc_7A64-loc_7A5E
		dc.w    loc_7AB4-loc_7A5E
		dc.w    loc_7AC8-loc_7A5E
loc_7A64:
		cmpi.w	#$26E0,(Camera_X_pos).w
		bcs.s	loc_7AB2
		move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
		move.w	#$390,(Camera_Max_Y_pos).w
		move.w	#$390,(Camera_Max_Y_pos_now).w
		addq.b	#2,(Dynamic_Resize_Routine).w
		bsr.w	SingleObjLoad        ; loc_E772
		bne.s	loc_7A9E
		move.b	#$55,id(a1)
		move.b	#$81,subtype(a1)
		move.w	#$29D0,x_pos(a1)
		move.w	#$426,y_pos(a1)
loc_7A9E:
		move.w	#MusID_Boss,d0
		bsr.w	PlayMusic              ; loc_14C0
		move.b	#1,(Current_Boss_ID).w
		moveq	#PLCID_GhzBoss,d0
		bra.w	LoadPLC		 ; loc_173C
loc_7AB2:
		rts
loc_7AB4:
		cmpi.w	#$2880,(Camera_X_pos).w
		bcs.s	loc_7AC6
		move.w	#$2880,(Camera_Min_X_pos).w
		addq.b	#2,(Dynamic_Resize_Routine).w
loc_7AC6:
		rts
loc_7AC8:
		tst.b	(Boss_defeated_flag).w
		beq.s	loc_7Ad4
		move.b	#GameModeID_SegaScreen,(Game_Mode).w
loc_7Ad4:
		rts
		rts
loc_7AD8:
		rts
loc_7ADA:
		rts
loc_7ADC:
		rts
loc_7ADE:
		rts
loc_7AE0:
		rts
loc_7AE2:
		rts
loc_7AE4:
		tst.b	(Current_Act).w
		bne.w	loc_7CF6
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0
		move.w	loc_7AFA(pc,d0),d0
		jmp     loc_7AFA(pc,d0)
loc_7AFA:
		dc.w    loc_7B00-loc_7AFA
		dc.w    loc_7B6C-loc_7AFA
		dc.w    loc_7C20-loc_7AFA
loc_7B00:
		cmpi.w	#$400,(Camera_Y_pos).w
		bcs.s	loc_7B48
		cmpi.w	#$1800,(Camera_X_pos).w
		bcs.s	loc_7B48
		move.b	#1,(Screen_Shaking_Flag_HTZ).w
		move.l	(Camera_X_pos).w,(Camera_BG_X_pos).w
		move.l	(Camera_Y_pos).w,(Camera_BG_Y_pos).w
		moveq	#0,d0
		move.w	d0,(Camera_BG_X_pos_diff).w
		move.w	d0,(Camera_BG_Y_pos_diff).w
		move.w	d0,(Camera_BG_X_offset).w
		move.w	#$140,(Camera_BG_Y_offset).w
		subi.w	#$100,(Camera_BG_Y_pos).w
		move.w	#0,(HTZ_Terrain_Delay).w
		addq.b	#2,(Dynamic_Resize_Routine).w
loc_7B46:
		rts
loc_7B48:
		tst.b	(Screen_Shaking_Flag_HTZ).w
		beq.s	loc_7B46
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(Camera_BG_X_pos_diff).w
		move.w	d1,(Camera_BG_Y_pos_diff).w
		bsr.w	loc_7C84
		or.w    d0,d1
		bne.s	loc_7B46
		move.b	#0,(Screen_Shaking_Flag_HTZ).w
		rts
loc_7B6C:
		tst.b	(HTZ_Terrain_Direction).w
		bne.s	loc_7B8A
		cmpi.w	#$140,(Camera_BG_Y_offset).w
		beq.s	loc_7BA2
		move.w	(Timer_frames).w,d0
		andi.w	#3,d0
		bne.s	loc_7BC0
		addq.w	#1,(Camera_BG_Y_offset).w
		bra.s	loc_7BC0
loc_7B8A:
		cmpi.w	#$E0,(Camera_BG_Y_offset).w
		beq.s	loc_7BA2
		move.w	(Timer_frames).w,d0
		andi.w	#3,d0
		bne.s	loc_7BC0
		subq.w	#1,(Camera_BG_Y_offset).w
		bra.s	loc_7BC0
loc_7BA2:
		move.b	#0,(Screen_Shaking_Flag).w
		subq.w	#1,(HTZ_Terrain_Delay).w
		bpl.s	loc_7BC0
		move.w	#$78,(HTZ_Terrain_Delay).w
		eori.b  #1,(HTZ_Terrain_Direction).w
		move.b	#1,(Screen_Shaking_Flag).w
loc_7BC0:
		cmpi.w	#$1800,(Camera_X_pos).w
		bcs.s	loc_7BE8
		cmpi.w	#$1F00,(Camera_X_pos).w
		bcc.s	loc_7C04
		move.w	(Camera_X_pos_diff).w,(Camera_BG_X_pos_diff).w
		move.w	(Camera_Y_pos_diff).w,(Camera_BG_Y_pos_diff).w
		move.w	(Camera_X_pos).w,d0
		move.w	(Camera_Y_pos).w,d1
		bra.w	loc_7C84
loc_7BE8:
		move.l	#$4000000,(Camera_BG_X_pos).w
		moveq	#0,d0
		move.l	d0,(Camera_BG_Y_pos).w
		move.l	d0,(Camera_BG_X_offset).w
		move.b	d0,(HTZ_Terrain_Direction).w
		subq.b	#2,(Dynamic_Resize_Routine).w
		rts
loc_7C04:
		move.l	#$4000000,(Camera_BG_X_pos).w
		moveq	#0,d0
		move.l	d0,(Camera_BG_Y_pos).w
		move.l	d0,(Camera_BG_X_offset).w
		move.b	d0,(HTZ_Terrain_Direction).w
		addq.b	#2,(Dynamic_Resize_Routine).w
		rts
loc_7C20:
		cmpi.w	#$1F00,(Camera_X_pos).w
		bcc.s	loc_7C60
		move.b	#1,(Screen_Shaking_Flag_HTZ).w
		move.l	(Camera_X_pos).w,(Camera_BG_X_pos).w
		move.l	(Camera_Y_pos).w,(Camera_BG_Y_pos).w
		moveq	#0,d0
		move.w	d0,(Camera_BG_X_pos_diff).w
		move.w	d0,(Camera_BG_Y_pos_diff).w
		move.w	d0,(Camera_BG_X_offset).w
		move.w	#$140,(Camera_BG_Y_offset).w
		subi.w	#$100,(Camera_BG_Y_pos).w
		move.w	#0,(HTZ_Terrain_Delay).w
		subq.b	#2,(Dynamic_Resize_Routine).w
loc_7C5E:
		rts
loc_7C60:
		tst.b	(Screen_Shaking_Flag_HTZ).w
		beq.s	loc_7C5E
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(Camera_BG_X_pos_diff).w
		move.w	d1,(Camera_BG_Y_pos_diff).w
		bsr.w	loc_7C84
		or.w    d0,d1
		bne.s	loc_7C5E
		move.b	#0,(Screen_Shaking_Flag_HTZ).w
		rts
loc_7C84:
		sub.w   (Camera_BG_X_pos).w,d0
		sub.w   (Camera_BG_X_offset).w,d0
		bpl.s	loc_7C9A
		cmpi.w	#-$10,d0
		bgt.s   loc_7C98
		move.w	#-$10,d0
loc_7C98:
		bra.s	loc_7CA4
loc_7C9A:
		cmpi.w	#$10,d0
		bcs.s	loc_7CA4
		move.w	#$10,d0
loc_7CA4:
		move.b	d0,(Camera_BG_X_pos_diff).w
		sub.w   (Camera_BG_Y_pos).w,d1
		sub.w   (Camera_BG_Y_offset).w,d1
		bpl.s	loc_7CBE
		cmpi.w	#-$10,d1
		bgt.s   loc_7CBC
		move.w	#-$10,d1
loc_7CBC:
		bra.s	loc_7CC8
loc_7CBE:
		cmpi.w	#$10,d1
		bcs.s	loc_7CC8
		move.w	#$10,d1
loc_7CC8:
		move.b	d1,(Camera_BG_Y_pos_diff).w
		rts
		btst	#0,(Ctrl_2_Held).w
		beq.s	loc_7CE0
		tst.w	(Camera_BG_Y_offset).w
		beq.s	loc_7CE0
		subq.w	#1,(Camera_BG_Y_offset).w
loc_7CE0:
		btst	#1,(Ctrl_2_Held).w
		beq.s	loc_7CF4
		cmpi.w	#$700,(Camera_BG_Y_offset).w
		beq.s	loc_7CF4
		addq.w	#1,(Camera_BG_Y_offset).w
loc_7CF4:
		rts
loc_7CF6:
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0
		move.w	loc_7d04(pc,d0),d0
		jmp     loc_7d04(pc,d0)
loc_7d04:
		dc.w    loc_7d0E-loc_7d04
		dc.w    loc_7D90-loc_7d04
		dc.w    loc_7E44-loc_7d04
		dc.w    loc_7EA8-loc_7d04
		dc.w    loc_7F5C-loc_7d04
loc_7d0E:
		cmpi.w	#$14C0,(Camera_X_pos).w
		bcs.s	loc_7d6C
		move.b	#1,(Screen_Shaking_Flag_HTZ).w
		move.l	(Camera_X_pos).w,(Camera_BG_X_pos).w
		move.l	(Camera_Y_pos).w,(Camera_BG_Y_pos).w
		moveq	#0,d0
		move.w	d0,(Camera_BG_X_pos_diff).w
		move.w	d0,(Camera_BG_Y_pos_diff).w
		move.w	d0,(Camera_BG_X_offset).w
		move.w	#$2C0,(Camera_BG_Y_offset).w
		subi.w	#$100,(Camera_BG_Y_pos).w
		move.w	#0,(HTZ_Terrain_Delay).w
		addq.b	#2,(Dynamic_Resize_Routine).w
		cmpi.w	#$380,(Camera_Y_pos).w
		bcs.s	loc_7d6A
		move.w	#$F980,(Camera_BG_X_offset).w
		addi.w	#$480,(Camera_BG_X_pos).w
		move.w	#$300,(Camera_BG_Y_offset).w
		addq.b	#6,(Dynamic_Resize_Routine).w
loc_7d6A:
		rts
loc_7d6C:
		tst.b	(Screen_Shaking_Flag_HTZ).w
		beq.s	loc_7d6A
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(Camera_BG_X_pos_diff).w
		move.w	d1,(Camera_BG_Y_pos_diff).w
		bsr.w	loc_7C84
		or.w    d0,d1
		bne.s	loc_7d6A
		move.b	#0,(Screen_Shaking_Flag_HTZ).w
		rts
loc_7D90:
		tst.b	(HTZ_Terrain_Direction).w
		bne.s	loc_7DAE
		cmpi.w	#$2C0,(Camera_BG_Y_offset).w
		beq.s	loc_7DC6
		move.w	(Timer_frames).w,d0
		andi.w	#3,d0
		bne.s	loc_7DE4
		addq.w	#1,(Camera_BG_Y_offset).w
		bra.s	loc_7DE4
loc_7DAE:
		cmpi.w	#0,(Camera_BG_Y_offset).w
		beq.s	loc_7DC6
		move.w	(Timer_frames).w,d0
		andi.w	#3,d0
		bne.s	loc_7DE4
		subq.w	#1,(Camera_BG_Y_offset).w
		bra.s	loc_7DE4
loc_7DC6:
		move.b	#0,(Screen_Shaking_Flag).w
		subq.w	#1,(HTZ_Terrain_Delay).w
		bpl.s	loc_7DE4
		move.w	#$78,(HTZ_Terrain_Delay).w
		eori.b  #1,(HTZ_Terrain_Direction).w
		move.b	#1,(Screen_Shaking_Flag).w
loc_7DE4:
		cmpi.w	#$14C0,(Camera_X_pos).w
		bcs.s	loc_7E0C
		cmpi.w	#$1B00,(Camera_X_pos).w
		bcc.s	loc_7E28
		move.w	(Camera_X_pos_diff).w,(Camera_BG_X_pos_diff).w
		move.w	(Camera_Y_pos_diff).w,(Camera_BG_Y_pos_diff).w
		move.w	(Camera_X_pos).w,d0
		move.w	(Camera_Y_pos).w,d1
		bra.w	loc_7C84
loc_7E0C:
		move.l	#$4000000,(Camera_BG_X_pos).w
		moveq	#0,d0
		move.l	d0,(Camera_BG_Y_pos).w
		move.l	d0,(Camera_BG_X_offset).w
		move.b	d0,(HTZ_Terrain_Direction).w
		subq.b	#2,(Dynamic_Resize_Routine).w
		rts
loc_7E28:
		move.l	#$4000000,(Camera_BG_X_pos).w
		moveq	#0,d0
		move.l	d0,(Camera_BG_Y_pos).w
		move.l	d0,(Camera_BG_X_offset).w
		move.b	d0,(HTZ_Terrain_Direction).w
		addq.b	#2,(Dynamic_Resize_Routine).w
		rts
loc_7E44:
		cmpi.w	#$1B00,(Camera_X_pos).w
		bcc.s	loc_7E84
		move.b	#1,(Screen_Shaking_Flag_HTZ).w
		move.l	(Camera_X_pos).w,(Camera_BG_X_pos).w
		move.l	(Camera_Y_pos).w,(Camera_BG_Y_pos).w
		moveq	#0,d0
		move.w	d0,(Camera_BG_X_pos_diff).w
		move.w	d0,(Camera_BG_Y_pos_diff).w
		move.w	d0,(Camera_BG_X_offset).w
		move.w	#$2C0,(Camera_BG_Y_offset).w
		subi.w	#$100,(Camera_BG_Y_pos).w
		move.w	#0,(HTZ_Terrain_Delay).w
		subq.b	#2,(Dynamic_Resize_Routine).w
loc_7E82:		
		rts
loc_7E84:
		tst.b	(Screen_Shaking_Flag_HTZ).w
		beq.s	loc_7E82
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(Camera_BG_X_pos_diff).w
		move.w	d1,(Camera_BG_Y_pos_diff).w
		bsr.w	loc_7C84
		or.w    d0,d1
		bne.s	loc_7E82
		move.b	#0,(Screen_Shaking_Flag_HTZ).w
		rts
loc_7EA8:
		tst.b	(HTZ_Terrain_Direction).w
		bne.s	loc_7EC6
		cmpi.w	#$300,(Camera_BG_Y_offset).w
		beq.s	loc_7EDE
		move.w	(Timer_frames).w,d0
		andi.w	#3,d0
		bne.s	loc_7EFC
		addq.w	#1,(Camera_BG_Y_offset).w
		bra.s	loc_7EFC
loc_7EC6:
		cmpi.w	#0,(Camera_BG_Y_offset).w
		beq.s	loc_7EDE
		move.w	(Timer_frames).w,d0
		andi.w	#3,d0
		bne.s	loc_7EFC
		subq.w	#1,(Camera_BG_Y_offset).w
		bra.s	loc_7EFC
loc_7EDE:
		move.b	#0,(Screen_Shaking_Flag).w
		subq.w	#1,(HTZ_Terrain_Delay).w
		bpl.s	loc_7EFC
		move.w	#$78,(HTZ_Terrain_Delay).w
		eori.b  #1,(HTZ_Terrain_Direction).w
		move.b	#1,(Screen_Shaking_Flag).w
loc_7EFC:
		cmpi.w	#$14C0,(Camera_X_pos).w
		bcs.s	loc_7F24
		cmpi.w	#$1B00,(Camera_X_pos).w
		bcc.s	loc_7F40
		move.w	(Camera_X_pos_diff).w,(Camera_BG_X_pos_diff).w
		move.w	(Camera_Y_pos_diff).w,(Camera_BG_Y_pos_diff).w
		move.w	(Camera_X_pos).w,d0
		move.w	(Camera_Y_pos).w,d1
		bra.w	loc_7C84
loc_7F24:
		move.l	#$4000000,(Camera_BG_X_pos).w
		moveq	#0,d0
		move.l	d0,(Camera_BG_Y_pos).w
		move.l	d0,(Camera_BG_X_offset).w
		move.b	d0,(HTZ_Terrain_Direction).w
		subq.b	#6,(Dynamic_Resize_Routine).w
		rts
loc_7F40:
		move.l	#$4000000,(Camera_BG_X_pos).w
		moveq	#0,d0
		move.l	d0,(Camera_BG_Y_pos).w
		move.l	d0,(Camera_BG_X_offset).w
		move.b	d0,(HTZ_Terrain_Direction).w
		addq.b	#2,(Dynamic_Resize_Routine).w
		rts
loc_7F5C:
		cmpi.w	#$1B00,(Camera_X_pos).w
		bcc.s	loc_7FA4
		move.b	#1,(Screen_Shaking_Flag_HTZ).w
		move.l	(Camera_X_pos).w,(Camera_BG_X_pos).w
		move.l	(Camera_Y_pos).w,(Camera_BG_Y_pos).w
		moveq	#0,d0
		move.w	d0,(Camera_BG_X_pos_diff).w
		move.w	d0,(Camera_BG_Y_pos_diff).w
		move.w	#$F980,(Camera_BG_X_offset).w
		addi.w	#$480,(Camera_BG_X_pos).w
		move.w	#$300,(Camera_BG_Y_offset).w
		subi.w	#$100,(Camera_BG_Y_pos).w
		move.w	#0,(HTZ_Terrain_Delay).w
		subq.b	#2,(Dynamic_Resize_Routine).w
loc_7FA2:		
		rts
loc_7FA4:
		tst.b	(Screen_Shaking_Flag_HTZ).w
		beq.s	loc_7FA2
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(Camera_BG_X_pos_diff).w
		move.w	d1,(Camera_BG_Y_pos_diff).w
		bsr.w	loc_7C84
		or.w    d0,d1
		bne.s	loc_7FA2
		move.b	#0,(Screen_Shaking_Flag_HTZ).w
		rts
loc_7FC8:
		rts
loc_7FCA:
		rts
loc_7FCC:
		rts
loc_7FCE:
		rts
DynResize_CNz: ; loc_7Fd0:
		rts
DynResize_CPz: ;loc_7Fd2:
		rts
DynResize_GCz: ;loc_7Fd4:
		rts
DynResize_NGHz: ;loc_7Fd6:
		rts
DynResize_DEz: ;loc_7FD8:
		rts
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 11 - Bridge in Green Hill Zone and Hidden Palace Zone
; ---------------------------------------------------------------------------
; Sprite_7FDC: Obj_0x11_Bridge:
Obj11:
		btst	#6,render_flags(a0)	; is this a child sprite object?
		bne.w	Obj11_DrawChild		; if yes,branch
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj11_Index(pc,d0.w),d1
		jmp	Obj11_Index(pc,d1.w)
; ===========================================================================
; loc_7FF4:
Obj11_DrawChild:
		move.w	#$180,d0
		bra.w	DisplaySprite3
; ===========================================================================
; off_7FFC:
Obj11_Index:	offsetTable
		offsetTableEntry.w Obj11_Init
		offsetTableEntry.w Obj11_GHZ
		offsetTableEntry.w Obj11_Display
		offsetTableEntry.w Obj11_HPZ
; ===========================================================================
; loc_8004:
Obj11_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj11_MapUnc_85E0,4(a0)
		move.w	#$43C6,2(a0)
		move.b	#3,$18(a0)
		cmpi.b	#hidden_palace_zone,(Current_Zone).w	; are we in HPZ?
		bne.s	+			; if not,branch
		addq.b	#4,routine(a0)
		move.l	#Obj11_MapUnc_8598,4(a0)
		move.w	#$6300,2(a0)
+
		bsr.w	Adjust2PArtPointer
		move.b	#4,render_flags(a0)
		move.b	#$80,$19(a0)
		move.w	$C(a0),d2
		move.w	d2,$3C(a0)
		move.w	8(a0),d3
		lea	$28(a0),a2		; copy bridge subtype to a2
		moveq	#0,d1
		move.b	(a2),d1			; d1 = subtype
		move.w	d1,d0
		lsr.w	#1,d0
		lsl.w	#4,d0			; (d0 div 2) * 16
		sub.w	d0,d3			; x position of left half
		swap	d1			; store subtype in high word for later
		move.w	#8,d1
		bsr.s	Obj11_MakeBdgSegment
		move.w	$28(a1),d0
		subq.w	#8,d0
		move.w	d0,8(a1)		; center of first subsprite object
		move.l	a1,$30(a0)		; pointer to first subsprite object
		swap	d1
		subq.w	#8,d1
		bls.s	+			; branch,if subtype <= 8 (bridge has no more than 8 logs)
		; else,create a second subsprite object for the rest of the bridge
		move.w	d1,d4
		bsr.s	Obj11_MakeBdgSegment
		move.l	a1,$34(a0)		; pointer to second subsprite object
		move.w	d4,d0
		add.w	d0,d0
		add.w	d4,d0
		move.w	$10(a1,d0.w),d0
		subq.w	#8,d0
		move.w	d0,8(a1)		; center of second subsprite object
+
		bra.s	Obj11_GHZ

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; sub_8098:
Obj11_MakeBdgSegment:
		bsr.w	SingleObjLoad2
		bne.s	+
		_move.b	id(a0),id(a1)		; load obj11
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	render_flags(a0),render_flags(a1)
		bset	#6,render_flags(a1)
		move.b	#$40,$E(a1)
		move.b	d1,$F(a1)
		subq.b	#1,d1
		lea	subspr_data(a1),a2	; starting address for subsprite data

-		move.w	d3,(a2)+		; sub?_x_pos
		move.w	d2,(a2)+		; sub?_y_pos
		move.w	#0,(a2)+		; sub?_mapframe
		addi.w	#$10,d3			; width of a log,x_pos for next log
		dbf	d1,-			; repeat for d1 logs
+
		rts
; End of function Obj11_MakeBdgSegment

; ===========================================================================
; loc_80EA:
Obj11_GHZ:
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_8100
		tst.b	$3E(a0)
		beq.s	loc_812C
		subq.b	#4,$3E(a0)
		bra.s	loc_8128

loc_8100:
		andi.b	#$10,d0
		beq.s	loc_811C
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_811C
		bcc.s	loc_8118
		addq.b	#1,$3F(a0)
		bra.s	loc_811C
; ---------------------------------------------------------------------------

loc_8118:
		subq.b	#1,$3F(a0)

loc_811C:
		cmpi.b	#$40,$3E(a0)
		beq.s	loc_8128
		addq.b	#4,$3E(a0)

loc_8128:
		bsr.w	Obj11_Depress

loc_812C:
		moveq	#0,d1
		move.b	$28(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3
		move.w	8(a0),d4
		bsr.w	Obj11_Solid
; loc_8144:
Obj11_Unload:
		; this is essentially MarkObjGone,except we need to delete our subsprite objects as well
		tst.w	(Two_player_mode).w
		beq.s	+
		rts
; ---------------------------------------------------------------------------
+
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	+
		rts
; ---------------------------------------------------------------------------
+		; delete first subsprite object
		move.l	$30(a0),a1	; a1=object
		bsr.w	DeleteObject2
		cmpi.b	#8,$28(a0)
		bls.s	+		; if bridge has more than 8 logs,delete second subsprite object
		move.l	$34(a0),a1	; a1=object
		bsr.w	DeleteObject2
+
		bra.w	DeleteObject
; ===========================================================================
; loc_817C:
Obj11_Display:
		bra.w	DisplaySprite
; ===========================================================================
; loc_8180:
Obj11_HPZ:
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_8196
		tst.b	$3E(a0)
		beq.s	loc_81C2
		subq.b	#4,$3E(a0)
		bra.s	loc_81BE
; ===========================================================================

loc_8196:
		andi.b	#$10,d0
		beq.s	loc_81B2
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_81B2
		bcc.s	loc_81AE
		addq.b	#1,$3F(a0)
		bra.s	loc_81B2

loc_81AE:
		subq.b	#1,$3F(a0)
; ===========================================================================

loc_81B2:
		cmpi.b	#$40,$3E(a0)
		beq.s	loc_81BE
		addq.b	#4,$3E(a0)

loc_81BE:
		bsr.w	Obj11_Depress

loc_81C2:		
		moveq	#0,d1
		move.b	$28(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3
		move.w	8(a0),d4		
		bsr.w	Obj11_Solid
		bsr.w	sub_8282
		bra.w	Obj11_Unload

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_81E2:
Obj11_Solid:
		lea	(Sidekick).w,a1		; a1=character
		moveq	#4,d6
		moveq	#$3B,d5
		movem.l	d1-d4,-(sp)		
		bsr.s	loc_81FC
		movem.l	(sp)+,d1-d4
		lea	(MainCharacter).w,a1	; a1=character
		subq.b	#1,d6
		moveq	#$3F,d5

loc_81FC:
		btst	d6,$22(a0)
		beq.s	loc_8260
		btst	#1,$22(a1)
		bne.s	loc_821C
		moveq	#0,d0
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_821C
		cmp.w	d2,d0
		bcs.s	loc_822A

loc_821C:
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts
; ===========================================================================

loc_822A:
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)
		move.l	$30(a0),a2
		cmpi.w	#8,d0
		bcs.s	loc_8242
		move.l	$34(a0),a2	; a2=character
		subi.w	#8,d0

loc_8242:
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	$12(a2,d0.w),d0
		subq.w	#8,d0
		moveq	#0,d1
		move.b	$16(a1),d1
		sub.w	d1,d0
		move.w	d0,$C(a1)
		moveq	#0,d4
		rts
; ===========================================================================

loc_8260:
		move.w	d1,-(sp)
		bsr.w	loc_FA7A
		move.w	(sp)+,d1
		btst	d6,$22(a0)
		beq.s	+
		moveq	#0,d0
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)
+
		rts
; End of function sub_81E2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8282:
		moveq	#0,d0
		tst.w	(MainCharacter+$10).w
		bne.s	loc_8294
		move.b	(Vint_runcount+3).w,d0
		andi.w	#$1C,d0
		lsr.w	#1,d0

loc_8294:
		moveq	#0,d2
		move.b	byte_82C0+1(pc,d0.w),d2
		swap	d2
		move.b	byte_82C0(pc,d0.w),d2
		moveq	#0,d0
		tst.w	(Sidekick+$10).w
		bne.s	loc_82B2
		move.b	(Vint_runcount+3).w,d0
		andi.w	#$1C,d0
		lsr.w	#1,d0

loc_82B2:
		moveq	#0,d6
		move.b	byte_82C0+1(pc,d0.w),d6
		swap	d6
		move.b	byte_82C0(pc,d0.w),d6
		bra.s	loc_82d0
; ===========================================================================
byte_82C0:
		dc.b   1, 2
		dc.b   1, 2	; 2
		dc.b   1, 2	; 4
		dc.b   1, 2	; 6
		dc.b   0, 1	; 8
		dc.b   0, 0	; 10
		dc.b   0, 0	; 12
		dc.b   0, 1	; 14
; ===========================================================================

loc_82d0:
		moveq	#-2,d3
		moveq	#-2,d4
		move.b	$22(a0),d0
		andi.b	#8,d0
		beq.s	loc_82E2
		move.b	$3F(a0),d3

loc_82E2:		
		move.b	$22(a0),d0
		andi.b	#$10,d0
		beq.s	loc_82F0
		move.b	$3B(a0),d4

loc_82F0:		
		move.l	$30(a0),a1
		lea	$45(a1),a2
		lea	$15(a1),a1
		moveq	#0,d1
		move.b	$28(a0),d1
		subq.b	#1,d1
		moveq	#0,d5

loc_8306:
		moveq	#0,d0
		subq.w	#1,d3
		cmp.b	d3,d5
		bne.s	loc_8310
		move.w	d2,d0

loc_8310:
		addq.w	#2,d3
		cmp.b	d3,d5
		bne.s	loc_8318
		move.w	d2,d0

loc_8318:
		subq.w	#1,d3
		subq.w	#1,d4
		cmp.b	d4,d5
		bne.s	loc_8322
		move.w	d6,d0

loc_8322:
		addq.w	#2,d4
		cmp.b	d4,d5
		bne.s	loc_832A
		move.w	d6,d0

loc_832A:
		subq.w	#1,d4
		cmp.b	d3,d5
		bne.s	loc_8336
		swap	d2
		move.w	d2,d0
		swap	d2

loc_8336:
		cmp.b	d4,d5
		bne.s	loc_8340
		swap	d6
		move.w	d6,d0
		swap	d6

loc_8340:
		move.b	d0,(a1)
		addq.w	#1,d5
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_8352
		move.l	$34(a0),a1
		lea	$15(a1),a1

loc_8352:
		dbf	d1,loc_8306
		rts
; End of function sub_8282

; ===========================================================================
; subroutine to make the bridge push down where Sonic or Tails walks over
; loc_8358:
Obj11_Depress:
		move.b	$3E(a0),d0
		bsr.w	CalcSine
		move.w	d0,d4
		lea	(byte_8498).l,a4
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		move.w	d3,d2
		add.w	d0,d3
		moveq	#0,d5
		; this "-$80" is here since $80 bytes of data for bridges with 1-7
		; logs were removed,as Sonic 2 only uses bridges with 8-16 logs
		lea	(Obj11_DepressionOffsets-$80).l,a5
		move.b	(a5,d3.w),d5
		andi.w	#$F,d3
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		movea.l	$30(a0),a1
		lea	$42(a1),a2
		lea	$12(a1),a1

-		moveq	#0,d0
		move.b	(a3)+,d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	$3C(a0),d0
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	+
		movea.l	$34(a0),a1	; a1=object
		lea	$12(a1),a1
+		dbf	d2,-

		moveq	#0,d0
		move.b	$28(a0),d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		addq.b	#1,d3
		sub.b	d0,d3
		neg.b	d3
		bmi.s	++
		move.w	d3,d2
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		adda.w	d2,a3
		subq.w	#1,d2
		bcs.s	++

-		moveq	#0,d0
		move.b	-(a3),d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	$3C(a0),d0
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	+
		movea.l	$34(a0),a1	; a1=object
		lea	$12(a1),a1
+		dbf	d2,-
+
		rts
; ===========================================================================
; seems to be bridge piece vertical position offset data
; byte_8408:
Obj11_DepressionOffsets:
		dc.b   2, 4, 6, 8, 8, 6, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0; 8 logs
		dc.b   2, 4, 6, 8,$A, 8, 6, 4, 2, 0, 0, 0, 0, 0, 0, 0; 9 logs
		dc.b   2, 4, 6, 8,$A,$A, 8, 6, 4, 2, 0, 0, 0, 0, 0, 0; 10 logs
		dc.b   2, 4, 6, 8,$A,$C,$A, 8, 6, 4, 2, 0, 0, 0, 0, 0; 11 logs
		dc.b   2, 4, 6, 8,$A,$C,$C,$A, 8, 6, 4, 2, 0, 0, 0, 0; 12 logs
		dc.b   2, 4, 6, 8,$A,$C,$E,$C,$A, 8, 6, 4, 2, 0, 0, 0; 13 logs
		dc.b   2, 4, 6, 8,$A,$C,$E,$E,$C,$A, 8, 6, 4, 2, 0, 0; 14 logs
		dc.b   2, 4, 6, 8,$A,$C,$E,$10,$E,$C,$A, 8, 6, 4, 2, 0; 15 logs
		dc.b   2, 4, 6, 8,$A,$C,$E,$10,$10,$E,$C,$A, 8, 6, 4, 2; 16 logs         
		even

; something else important for bridge depression to work (phase? bridge size adjustment?)
byte_8498:
		dc.b $FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 16
		dc.b $B5,$FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 32
		dc.b $7E,$DB,$FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 48
		dc.b $61,$B5,$EC,$FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 64
		dc.b $4A,$93,$CD,$F3,$FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 80
		dc.b $3E,$7E,$B0,$DB,$F6,$FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 96
		dc.b $38,$6D,$9D,$C5,$E4,$F8,$FF, 0, 0, 0, 0, 0, 0, 0, 0, 0; 112
		dc.b $31,$61,$8E,$B5,$d4,$EC,$FB,$FF, 0, 0, 0, 0, 0, 0, 0, 0; 128
		dc.b $2B,$56,$7E,$A2,$C1,$DB,$EE,$FB,$FF, 0, 0, 0, 0, 0, 0, 0; 144
		dc.b $25,$4A,$73,$93,$B0,$CD,$E1,$F3,$FC,$FF, 0, 0, 0, 0, 0, 0; 160
		dc.b $1F,$44,$67,$88,$A7,$BD,$d4,$E7,$F4,$FD,$FF, 0, 0, 0, 0, 0; 176
		dc.b $1F,$3E,$5C,$7E,$98,$B0,$C9,$DB,$EA,$F6,$FD,$FF, 0, 0, 0, 0; 192
		dc.b $19,$38,$56,$73,$8E,$A7,$BD,$d1,$E1,$EE,$F8,$FE,$FF, 0, 0, 0; 208
		dc.b $19,$38,$50,$6D,$83,$9D,$B0,$C5,$D8,$E4,$F1,$F8,$FE,$FF, 0, 0; 224
		dc.b $19,$31,$4A,$67,$7E,$93,$A7,$BD,$CD,$DB,$E7,$F3,$F9,$FE,$FF, 0; 240
		dc.b $19,$31,$4A,$61,$78,$8E,$A2,$B5,$C5,$d4,$E1,$EC,$F4,$FB,$FE,$FF; 256
		even

; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj11_MapUnc_8598:	binclude	"mappings/sprite/obj11_HPZ.bin"	; HPZ bridge
Obj11_MapUnc_85E0:	binclude	"mappings/sprite/obj11_GHZ.bin"	; GHZ bridge

;=============================================================================== 
; Object 0x15 - Swing Platforms - Dust Hill / Oil Ocean
; [ Begin ]
;===============================================================================   
Obj_0x15_Swing_Platform: ; loc_85F8:
		btst	#6,1(a0)
		bne.w	loc_8610
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_8618(pc,d0),d1
		jmp     loc_8618(pc,d1)
loc_8610:
		move.w	#$200,d0
		bra.w	DisplaySprite3     ; loc_d3FE
loc_8618:
		dc.w    loc_8626-loc_8618
		dc.w    loc_8764-loc_8618
		dc.w    loc_892A-loc_8618
		dc.w    loc_892E-loc_8618
		dc.w    loc_89E8-loc_8618
		dc.w    loc_89F0-loc_8618
		dc.w    loc_8A56-loc_8618
loc_8626:
		addq.b	#2,$24(a0)
		move.l	#Obj15_MapUnc_8AD8,4(a0) ; loc_8AD8
		move.w	#$43E3,2(a0)
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#$20,$19(a0)
		move.b	#$10,$16(a0)
		move.w	$C(a0),$38(a0)
		move.w	8(a0),$3A(a0)
		cmpi.b	#dust_hill_zone,(Current_Zone).w
		bne.s	loc_867E
		move.l	#Obj15_MapUnc_8B46,4(a0) ; loc_8B46 
		move.w	#0,2(a0)		       
		move.b	#$18,$19(a0)
		move.b	#8,$16(a0)
loc_867E:
		cmpi.b	#neo_green_hill_zone,(Current_Zone).w
		bne.s	loc_86A0
		move.l	#Obj15_MapUnc_8B0E,4(a0) ; loc_8B0E
		move.w	#0,2(a0)
		move.b	#$20,$19(a0)
		move.b	#8,$16(a0)
loc_86A0:
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		moveq	#0,d1
		move.b	$28(a0),d1
		bpl.s	loc_86B0
		addq.b	#4,routine(a0)
loc_86B0:
		andi.w	#$F,d1
		move.w	d1,d2
		lsl.w	#4,d2
		addi.b	#8,d2
		move.b	d2,$3C(a0)
		move.w	8(a0),d2
		move.w	$C(a0),d3
		bsr.w	SingleObjLoad2      ; loc_E788
		bne.s	loc_8738
		_move.b	id(a0),id(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		bset	#6,1(a1)
		move.b	#$48,$E(a1)
		move.b	d1,$F(a1)
		subq.b	#$1,d1
		lea	$10(a1),A2
loc_86FC:		
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		addi.w	#$10,d3
		dbf	d1,loc_86FC
		move.b	#2,$15(a1)
		move.w	d2,8(a1)
		move.w	d3,$C(a1)
		move.b	#1,$B(a1)
		move.l	A1,$30(a0)
		addi.w	#8,d3
		move.w	d3,$C(a0)
		move.b	#$50,$14(a1)
		bset	#4,1(a1)
loc_8738:
		move.w	#$8000,$26(a0)
		move.w	#0,$3E(a0)
		move.b	$28(a0),d1
		andi.w	#$70,d1
		move.b	d1,$28(a0)
		cmpi.b	#$40,d1
		bne.s	loc_8764
		move.l	#Obj15_MapUnc_8B7A,4(a0) ; loc_8B7A
		move.b	#$A7,$20(a0)
loc_8764:
		move.w	8(a0),-(sp)
		bsr.w	loc_8784
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	$16(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		bsr.w	loc_FA28
		bra.w	loc_88FC
loc_8784:
		move.b	(Oscillating_Data+$18).w,d0
		move.b	$28(a0),d1
		beq.s	loc_87C4
		cmpi.b	#$10,d1
		bne.s	loc_879E
		cmpi.b	#$40,d0
		bcc.s	loc_87C4
		moveq	#$40,d0
		bra.s	loc_87C4
loc_879E:
		cmpi.b	#$20,d1
		bne.s	loc_87AA
		moveq	#$40,d0
		bra.w	loc_885C
loc_87AA:
		cmpi.b	#$30,d1
		bne.s	loc_87BA
		cmpi.b	#$40,d0
		bcs.s	loc_87C4
		moveq	#$40,d0
		bra.s	loc_87C4
loc_87BA:
		cmpi.b	#$40,d1
		bne.s	loc_87C4
		bsr.w	loc_885E
loc_87C4:
		move.w	#$80,d1
		btst	#0,$22(a0)
		beq.s	loc_87d4
		neg.w	d0
		add.w   d1,d0
loc_87d4:
		bsr.w	CalcSine		; loc_320A
		move.w	$38(a0),d2
		move.w	$3A(a0),d3
		moveq	#0,d4
		move.b	$3C(a0),d4
		move.l	d4,d5
		muls.w  d0,d4
		asr.l   #8,d4
		muls.w  d1,d5
		asr.l   #8,d5
		add.w   d2,d4
		add.w   d3,d5
		move.w	d4,$000C(a0)
		move.w	d5,8(a0)
		moveq	#0,d6
		move.l	$30(a0),A1
		move.b	$F(a1),d6
		subq.w	#1,d6
		bcs.s	loc_885C
		asl.w   #4,d0
		ext.l   d0
		asl.l   #8,d0
		asl.w   #4,d1
		ext.l   d1
		asl.l   #8,d1
		moveq	#0,d4
		moveq	#0,d5
		lea	$10(a1),A2
loc_881E:		
		movem.l d4/d5,-(sp)
		swap	d4
		swap	d5
		add.w   d2,d4
		add.w   d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l (sp)+,d4/d5
		add.l   d0,d4
		add.l   d1,d5
		addq.w	#2,A2
		dbf	d6,loc_881E
		swap	d4
		swap	d5
		add.w   d2,d4
		add.w   d3,d5
		move.w	$28(a1),d0
		move.w	$2A(a1),d1
		move.w	d5,$28(a1)
		move.w	d4,$2A(a1)
		move.w	d0,8(a1)
		move.w	d1,$C(a1)
loc_885C:
		rts
loc_885E:
		tst.w	$36(a0)
		beq.s	loc_886C
		subq.w	#1,$36(a0)
		bra.w	loc_88F6
loc_886C:
		tst.b	$34(a0)
		bne.s	loc_8892
		move.w	(MainCharacter+8).w,d0
		sub.w   $3A(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bcc.s	loc_88F6
		tst.w	(Debug_placement_mode).w
		bne.w	loc_88F6
		move.b	#1,$34(a0)
loc_8892:
		tst.b	$3D(a0)
		beq.s	loc_88C8
		move.w	$3E(a0),d0
		addi.w	#8,d0
		move.w	d0,$3E(a0)
		add.w   d0,$26(a0)
		cmpi.w	#$200,d0
		bne.s	loc_88F6
		move.w	#0,$3E(a0)
		move.w	#$8000,$26(a0)
		move.b	#0,$3D(a0)
		move.w	#$3C,$36(a0)
		bra.s	loc_88F6
loc_88C8:
		move.w	$3E(a0),d0
		subi.w	#8,d0
		move.w	d0,$3E(a0)
		add.w   d0,$26(a0)
		cmpi.w	#-$200,d0
		bne.s	loc_88F6
		move.w	#0,$3E(a0)
		move.w	#$4000,$26(a0)
		move.b	#1,$3D(a0)
		move.w	#$3C,$36(a0)
loc_88F6:
		move.b	$26(a0),d0
		rts
loc_88FC:
		tst.w	(Two_player_mode).w
		beq.s	loc_8906
		bra.w	DisplaySprite           ; loc_d3C2
loc_8906:
		move.w	$3A(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	loc_891E
		bra.w	DisplaySprite           ; loc_d3C2
loc_891E:
		move.l	$30(a0),A1
		bsr.w	DeleteObject2
		bra.w	DeleteObject            ; loc_d3B4
loc_892A:
		bra.w	DisplaySprite           ; loc_d3C2
loc_892E:
		move.w	8(a0),-(sp)
		bsr.w	loc_8784
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	$16(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		bsr.w	loc_FA28
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.w	loc_89E4
		tst.b	(Oscillating_Data+$18).w
		bne.w	loc_89E4
		bsr.w	SingleObjLoad2      ; loc_E788
		bne.s	loc_89d4
		moveq	#0,d0
		move.w	#$F,d1
loc_896A:		
		move.l	(A0,d0),(A1,d0)
		addq.w	#4,d0
		dbf	d1,loc_896A
		move.b	#$A,$24(a1)
		cmpi.b	#neo_green_hill_zone,(Current_Zone).w
		bne.s	loc_8988
		addq.b	#2,$24(a1)
loc_8988:
		move.w	#$200,$10(a1)
		btst	#0,$22(a0)
		beq.s	loc_899A
		neg.w	$10(a1)
loc_899A:
		bset	#1,$22(a1)
		move.w	A0,d0
		subi.w	#MainCharacter,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0
		move.w	A1,d1
		subi.w	#MainCharacter,d1
		lsr.w	#6,d1
		andi.w	#$7F,d1
		lea	(MainCharacter).w,A1
		cmp.b	$3D(a1),d0
		bne.s	loc_89C6
		move.b	d1,$3D(a1)
loc_89C6:
		lea	(Sidekick).w,A1
		cmp.b	$3D(a1),d0
		bne.s	loc_89d4
		move.b	d1,$3D(a1)
loc_89d4:
		move.b	#3,$1A(a0)
		addq.b	#2,$24(a0)
		andi.b	#$E7,$22(a0)
loc_89E4:
		bra.w	loc_88FC
loc_89E8:
		bsr.w	loc_8784
		bra.w	loc_88FC
loc_89F0:
		move.w	8(a0),-(sp)
		btst	#1,$22(a0)
		beq.s	loc_8A2E
		bsr.w	ObjectMove              ; loc_d27A
		addi.w	#$18,$12(a0)
		cmpi.w	#$720,$C(a0)
		bcs.s	loc_8A3E
		move.w	#$720,$C(a0)
		bclr	#1,$22(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		move.w	$C(a0),$38(a0)
		bra.s	loc_8A3E
loc_8A2E:
		moveq	#0,d0
		move.b	(Oscillating_Data+$14).w,d0
		lsr.w	#1,d0
		add.w   $38(a0),d0
		move.w	d0,$C(a0)
loc_8A3E:
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	$16(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		bsr.w	loc_FA28
		bra.w	MarkObjGone             ; loc_d2A0
loc_8A56:
		move.w	8(a0),-(sp)
		bsr.w	ObjectMove              ; loc_d27A
		btst	#1,$22(a0)
		beq.s	loc_8A92
		addi.w	#$18,$12(a0)
		move.w	(Water_Level_2).w,d0
		cmp.w	$C(a0),d0
		bhi.s	loc_8AC0
		move.w	d0,$C(a0)
		move.w	d0,$38(a0)
		bclr	#1,$22(a0)
		move.w	#$100,$10(a0)
		move.w	#0,$12(a0)
		bra.s	loc_8AC0
loc_8A92:
		moveq	#0,d0
		move.b	(Oscillating_Data+$14).w,d0
		lsr.w	#1,d0
		add.w   $38(a0),d0
		move.w	d0,$C(a0)
		tst.w	$10(a0)
		beq.s	loc_8AC0
		moveq	#0,d3
		move.b	$19(a0),d3
		bsr.w	JmpTo_ObjHitWallRight
		tst.w	d1
		bpl.s	loc_8AC0
		add.w   d1,8(a0)
		move.w	#0,$10(a0)
loc_8AC0:
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	$16(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		bsr.w	loc_FA28
		bra.w	MarkObjGone             ; loc_d2A0
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj15_MapUnc_8AD8:	binclude	"mappings/sprite/obj15_OOZ.bin"
Obj15_MapUnc_8B0E:	binclude	"mappings/sprite/obj15_NGHZ.bin"
Obj15_MapUnc_8B46:
		dc.w    Dhz_Swing_Platforms_Map_01-Obj15_MapUnc_8B46
		dc.w    Dhz_Swing_Platforms_Map_02-Obj15_MapUnc_8B46
		dc.w    Dhz_Swing_Platforms_Map_03-Obj15_MapUnc_8B46
Dhz_Swing_Platforms_Map_01: ; loc_8B4C:
		dc.w	$0002
		dc.l	$F8096060,$6030FFE8,$F8096860,$68300000
Dhz_Swing_Platforms_Map_02: ; loc_8B5E:
		dc.w	$0001
		dc.l	$F8056066,$6033FFF8
Dhz_Swing_Platforms_Map_03: ; loc_8B68:
		dc.w	$0002
		dc.l	$E805406A,$4035FFF4,$F80B406E,$4037FFF4   
Obj15_MapUnc_8B7A: ; loc_8B7A:
		dc.w    Dhz_Swing_Platforms_Map_04-Obj15_MapUnc_8B7A
		dc.w    Dhz_Swing_Platforms_Map_02-Obj15_MapUnc_8B7A
		dc.w    Dhz_Swing_Platforms_Map_03-Obj15_MapUnc_8B7A
Dhz_Swing_Platforms_Map_04: ; loc_8B80:
		dc.w	$0002
		dc.l	$F80d6058,$602CFFE0,$F80d6858,$682C0000				          
;=============================================================================== 
; Object 0x15 - Swing Platforms - Dust Hill / Oil Ocean
; [ End ]
;===============================================================================   
		nop

; NOTE:
; These "JumpTo" blocks were presumably generated at the end of each source file by
; compiler ProASM on the Amiga computers Sonic 2 was developed on. As a result,it
; is theoretically possible to split the game in a similar way to how the actual
; source files were.

; loc_8B94:
JmpTo_ObjHitWallRight:
		jmp	(ObjHitWallRight).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 17 - GHZ rotating log helix spikes (leftover from S1)
; Code was updated before Nick Arcade,so any changes will be listed below
; ---------------------------------------------------------------------------
; Sprite_8B9C: Obj_0x17:
Obj17:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj17_Index(pc,d0.w),d1
		jmp	Obj17_Index(pc,d1.w)
; ===========================================================================
; off_8BAA:
Obj17_Index:	offsetTable
		offsetTableEntry.w Obj17_Init
		offsetTableEntry.w Obj17_Main
		; action (duplicate) and delete states were deleted
		offsetTableEntry.w Obj17_Display
; ===========================================================================
; loc_8BB0:
Obj17_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj17_MapUnc_8CDE,4(a0)
		move.w	#$4398,2(a0)
		bsr.w	Adjust2PArtPointer
		; Sonic 1 set the object status to 7 here,but never actually used it
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#8,$19(a0)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		_move.b	0(a0),d4
		lea	$28(a0),a2		; move helix length to a2
		moveq	#0,d1
		move.b	(a2),d1			; move helix length to d1
		move.b	#0,(a2)+		; clear subtype
		move.w	d1,d0
		lsr.w	#1,d0
		lsl.w	#4,d0
		sub.w	d0,d3			; d3 is x-axis position of leftmost spike
		subq.b	#2,d1
		bcs.s	Obj17_Main		; skip to action directly if it is only 1 spike
		moveq	#0,d6
; loc_8BFE:
Obj17_MakeHelix:
		bsr.w	SingleObjLoad2
		bne.s	Obj17_Main
		addq.b	#1,$28(a0)
		move.w	a1,d5
		subi.w	#Object_RAM,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5
		move.b	d5,(a2)+		; copy child address to parent RAM
		; since two of the routines are removed,this loads 4 instead of 8
		move.b	#4,routine(a1)
		_move.b	d4,0(a1)
		move.w	d2,$C(a1)
		move.w	d3,8(a1)
		move.l	4(a0),4(a1)
		move.w	#$4398,2(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#8,$19(a1)
		move.b	d6,$3E(a1)
		addq.b	#1,d6
		andi.b	#7,d6
		addi.w	#$10,d3
		cmp.w	8(a0),d3		; is this spike in the centre?
		bne.s	+			; if not,branch

		move.b	d6,$3E(a0)		; set parent spike frame
		addq.b	#1,d6
		andi.b	#7,d6
		addi.w	#$10,d3			; skip to next spike
		addq.b	#1,$28(a0)
+		dbf	d1,Obj17_MakeHelix	; repeat d1 times (helix length)
; loc_8C74:
Obj17_Main:
		bsr.w	Obj17_RotateSpike
		; the "check delete" routine was merged into here,
		; as well as it no longer displaying after being deleted
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	Obj17_DelAll
		bra.w	DisplaySprite
; ===========================================================================
; loc_8C90:
Obj17_DelAll:
		moveq	#0,d2
		lea	$28(a0),a2		; move helix length to a2
		move.b	(a2)+,d2		; move a2 to d2
		subq.b	#2,d2
		bcs.s	Obj17_Delete
; loc_8C9C:
Obj17_DelLoop:
		moveq	#0,d0
		move.b	(a2)+,d0
		lsl.w	#6,d0
		addi.l	#Object_RAM,d0
		movea.l	d0,a1			; get child address
		bsr.w	DeleteObject2		; delete object
		dbf	d2,Obj17_DelLoop	; repeat d2 times (helix length)
; loc_8CB2:
Obj17_Delete:
		bra.w	DeleteObject

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_8CB6:
Obj17_RotateSpike:
		move.b	(Logspike_anim_frame).w,d0
		move.b	#0,$20(a0)		; make object harmless
		add.b	$3E(a0),d0
		andi.b	#7,d0
		move.b	d0,$1A(a0)		; change current frame
		bne.s	return_8Cd4
		move.b	#$84,$20(a0)		; make object harmful

return_8Cd4:
		rts
; End of function Obj17_RotateSpike

; ===========================================================================
; loc_8Cd6:
Obj17_Display:
		bsr.w	Obj17_RotateSpike
		bra.w	DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj17_MapUnc_8CDE:	binclude	"mappings/sprite/obj17.bin"
; ===========================================================================
		nop

;===============================================================================
; Object 0x18 - Platforms
; [ Begin ]
;===============================================================================
Obj_0x18_Platforms: ; loc_8d38:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_8d46(pc,d0),d1
		jmp     loc_8d46(pc,d1)
loc_8d46:
		dc.w    loc_8d5A-loc_8d46
		dc.w    loc_8DF6-loc_8d46
		dc.w    loc_8E5C-loc_8d46
		dc.w    loc_8E34-loc_8d46
		dc.w    loc_8E60-loc_8d46
loc_8d50:
		dc.w	$2000,$2001,$2002,$4003,$3004
loc_8d5A:
		addq.b	#2,routine(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#$03,d0
		andi.w	#$E,d0
		lea	loc_8d50(pc,d0),A2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,$1A(a0)
		move.l	#Obj18_MapUnc_9078,4(a0) ; loc_9078
		move.w	#$4000,2(a0)
		cmpi.b	#neo_green_hill_zone,(Current_Zone).w
		bne.s	loc_8D9A
		move.l	#Obj18_MapUnc_90d0,4(a0) ; loc_90d0
		move.w	#$4000,2(a0)
loc_8D9A:
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),$2C(a0)
		move.w	$C(a0),$34(a0)
		move.w	8(a0),$32(a0)
		move.w	#$80,$26(a0)
		tst.b	$28(a0)
		bpl.s	loc_8DF0
		addq.b	#6,routine(a0)
		andi.b	#$F,$28(a0)
		move.b	#$30,$16(a0)
		cmpi.b	#neo_green_hill_zone,(Current_Zone).w
		bne.s	loc_8DE6
		move.b	#$28,$16(a0)
loc_8DE6:
		bset	#4,1(a0)
		bra.w	loc_8E60
loc_8DF0:
		andi.b	#$F,$28(a0)
loc_8DF6:
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_8E0C
		tst.b	$38(a0)
		beq.s	loc_8E18
		subq.b	#4,$38(a0)
		bra.s	loc_8E18
loc_8E0C:
		cmpi.b	#$40,$38(a0)
		beq.s	loc_8E18
		addq.b	#4,$38(a0)
loc_8E18:
		move.w	8(a0),-(sp)
		bsr.w	loc_8EC4
		bsr.w	loc_8EAA
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#8,d3
		move.w	(sp)+,d4
		bsr.w	PlatformObject
		bra.s	loc_8E3C
loc_8E34:
		bsr.w	loc_8EC4
		bsr.w	loc_8EAA
loc_8E3C:
		tst.w	(Two_player_mode).w
		beq.s	loc_8E46
		bra.w	DisplaySprite           ; loc_d3C2
loc_8E46:
		move.w	$32(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_8E5C
		bra.w	DisplaySprite           ; loc_d3C2
loc_8E5C:
		bra.w	DeleteObject            ; loc_d3B4
loc_8E60:
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_8E76
		tst.b	$38(a0)
		beq.s	loc_8E82
		subq.b	#4,$38(a0)
		bra.s	loc_8E82
loc_8E76:
		cmpi.b	#$40,$38(a0)
		beq.s	loc_8E82
		addq.b	#4,$38(a0)
loc_8E82:
		move.w	8(a0),-(sp)
		bsr.w	loc_8EC4
		bsr.w	loc_8EAA
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	SolidObject             ; loc_F4A0
		bra.s	loc_8E3C
loc_8EAA:
		move.b	$38(a0),d0
		bsr.w	CalcSine		; loc_320A
		move.w	#$400,d1
		muls.w  d1,d0
		swap	d0
		add.w   $2C(a0),d0
		move.w	d0,$C(a0)
		rts
loc_8EC4:
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		add.w   d0,d0
		move.w	loc_8ED8(pc,d0),d1
		jmp     loc_8ED8(pc,d1)
loc_8ED8:
		dc.w    loc_8EF4-loc_8ED8
		dc.w    loc_8F06-loc_8ED8
		dc.w    loc_8F4C-loc_8ED8
		dc.w    loc_8F64-loc_8ED8
		dc.w    loc_8F8C-loc_8ED8
		dc.w    loc_8EF6-loc_8ED8
		dc.w    loc_8F3C-loc_8ED8
		dc.w    loc_8FFA-loc_8ED8
		dc.w    loc_9026-loc_8ED8
		dc.w    loc_8EF4-loc_8ED8
		dc.w    loc_903E-loc_8ED8
		dc.w    loc_9058-loc_8ED8
		dc.w    loc_8F2E-loc_8ED8
		dc.w    loc_8F1E-loc_8ED8
loc_8EF4:
		rts
loc_8EF6:
		move.w	$32(a0),d0
		move.b	$26(a0),d1
		neg.b   d1
		addi.b	#$40,d1
		bra.s	loc_8F12
loc_8F06:
		move.w	$32(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1
loc_8F12:
		ext.w   d1
		add.w   d1,d0
		move.w	d0,8(a0)
		bra.w	loc_9070
loc_8F1E:
		move.w	$34(a0),d0
		move.b	(Oscillating_Data+$C).w,d1
		neg.b   d1
		addi.b	#$30,d1
		bra.s	loc_8F58
loc_8F2E:
		move.w	$34(a0),d0
		move.b	(Oscillating_Data+$C).w,d1
		subi.b	#$30,d1
		bra.s	loc_8F58
loc_8F3C:
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		neg.b   d1
		addi.b	#$40,d1
		bra.s	loc_8F58
loc_8F4C:
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1
loc_8F58:
		ext.w   d1
		add.w   d1,d0
		move.w	d0,$2C(a0)
		bra.w	loc_9070
loc_8F64:
		tst.w	$3A(a0)
		bne.s	loc_8F7A
		btst	#3,$22(a0)
		beq.s	loc_8F78
		move.w	#$1E,$3A(a0)
loc_8F78:
		rts
loc_8F7A:
		subq.w	#1,$3A(a0)
		bne.s	loc_8F78
		move.w	#$20,$3A(a0)
		addq.b	#1,$28(a0)
		rts
loc_8F8C:
		tst.w	$3A(a0)
		beq.s	loc_8FCC
		subq.w	#1,$3A(a0)
		bne.s	loc_8FCC
		btst	#3,$22(a0)
		beq.s	loc_8FC6
		lea	(MainCharacter).w,A1
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,routine(a1)
		bclr	#3,$22(a0)
		clr.b   $25(a0)
		move.w	$12(a0),$12(a1)
loc_8FC6:
		move.b	#6,routine(a0)
loc_8FCC:
		move.l	$2C(a0),d3
		move.w	$12(a0),d0
		ext.l   d0
		asl.l   #8,d0
		add.l   d0,d3
		move.l	d3,$2C(a0)
		addi.w	#$38,$12(a0)
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$2C(a0),d0
		bcc.s	loc_8FF8
		move.b	#4,routine(a0)
loc_8FF8:
		rts
loc_8FFA:
		tst.w	$3A(a0)
		bne.s	loc_901A
		lea	(ButtonVine_Trigger).w,A2
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#4,d0
		tst.b	(A2,d0)
		beq.s	loc_9018
		move.w	#$3C,$3A(a0)
loc_9018:
		rts
loc_901A:
		subq.w	#1,$3A(a0)
		bne.s	loc_9018
		addq.b	#1,$28(a0)
		rts
loc_9026:
		subq.w	#2,$2C(a0)
		move.w	$34(a0),d0
		subi.w	#$200,d0
		cmp.w	$2C(a0),d0
		bne.s	loc_903C
		clr.b   $28(a0)
loc_903C:
		rts
loc_903E:
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1
		ext.w   d1
		asr.w   #1,d1
		add.w   d1,d0
		move.w	d0,$2C(a0)
		bra.w	loc_9070
loc_9058:
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		neg.b   d1
		addi.b	#$40,d1
		ext.w   d1
		asr.w   #1,d1
		add.w   d1,d0
		move.w	d0,$2C(a0)
loc_9070:
		move.b	(Oscillating_Data+$18).w,$26(a0)
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj18_MapUnc_9078:	binclude	"mappings/sprite/obj18_GHZ.bin"
Obj18_MapUnc_90d0:	binclude	"mappings/sprite/obj18_NGHZ.bin"
; ===========================================================================

;===============================================================================
; Object 0x1A - Collapsing Platforms - Hidden Palace / Oil Ocean ...
; [ Begin ]
;===============================================================================
Obj_0x1A_Collapsing_Platforms: ; loc_9128:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_9136(pc,d0),d1
		jmp     loc_9136(pc,d1)
loc_9136:
		dc.w    loc_913C-loc_9136
		dc.w    loc_91E8-loc_9136
		dc.w    loc_9220-loc_9136
loc_913C:
		addq.b	#2,routine(a0)
		move.l	#Collapsing_Platforms_Mappings,4(a0) ; loc_94A8
		move.w	#$4000,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		ori.b   #4,1(a0)
		move.b	#4,$18(a0)
		move.b	#7,$38(a0)
		move.b	$28(a0),$1A(a0)
		move.l	#loc_9436,$34(a0)
		cmpi.b	#hidden_palace_zone,(Current_Zone).w
		bne.s	loc_91A4
		move.l	#Obj1A_MapUnc_9858,4(a0) ; loc_9858
		move.w	#$434A,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$30,$19(a0)
		move.l	#loc_9828,$3C(a0)
		move.l	#loc_944F,$34(a0)
		bra.s	loc_91E8
loc_91A4:
		cmpi.b	#oil_ocean_zone,(Current_Zone).w
		bne.s	loc_91CE
		move.l	#Obj1A_MapUnc_9902,4(a0) ; loc_9902
		move.w	#$639D,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$40,$19(a0)
		move.l	#loc_9818,$3C(a0)
		bra.s	loc_91E8
loc_91CE:
		move.l	#loc_9478,$3C(a0)
		move.b	#$34,$19(a0)
		move.b	#$38,$16(a0)
		bset	#4,1(a0)
loc_91E8:
		tst.b	$3A(a0)
		beq.s	loc_91FA
		tst.b	$38(a0)
		beq.w	loc_93AC
		subq.b	#1,$38(a0)
loc_91FA:
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_920A
		move.b	#1,$3A(a0)
loc_920A:
		moveq	#0,d1
		move.b	$19(a0),d1
		move.l	$3C(a0),A2
		move.w	8(a0),d4
		bsr.w	loc_F9d6
		bra.w	MarkObjGone             ; loc_d2A0
loc_9220:
		tst.b	$38(a0)
		beq.s	loc_9264
		tst.b	$3A(a0)
		bne.s	loc_9234
		subq.b	#1,$38(a0)
		bra.w	DisplaySprite           ; loc_d3C2
loc_9234:
		bsr.w	loc_920A
		subq.b	#1,$38(a0)
		bne.s	loc_9262
		lea	(MainCharacter).w,A1
		bsr.s	loc_9248
		lea	(Sidekick).w,A1
loc_9248:
		btst	#3,$22(a1)
		beq.s	loc_9262
		bclr	#3,$22(a1)
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)
loc_9262:
		rts
loc_9264:
		bsr.w	ObjectMoveAndFall              ; loc_d24E
		tst.b	1(a0)
		bpl.w	DeleteObject            ; loc_d3B4
		bra.w	DisplaySprite           ; loc_d3C2
;===============================================================================
; Object 0x1A - Collapsing Platforms - Hidden Palace / Oil Ocean ...
; [ End ]
;===============================================================================

;===============================================================================
; Object 0x1F - Collapsing Platforms - Dust Hill / Oil Ocean ...
; [ Begin ]
;===============================================================================
Obj_0x1F_Collapsing_Platforms: ; loc_9274:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_9282(pc,d0),d1
		jmp     loc_9282(pc,d1)
loc_9282:
		dc.w    loc_9288-loc_9282
		dc.w    loc_931A-loc_9282
		dc.w    loc_9352-loc_9282
loc_9288:
		addq.b	#2,$24(a0)
		move.l	#loc_9748,4(a0)
		move.w	#$42B8,2(a0)
		ori.b   #4,1(a0)
		move.b	#4,$18(a0)
		move.b	#7,$38(a0)
		move.b	#$44,$19(a0)
		lea	(loc_945B).l,A4
		btst	#0,$28(a0)
		beq.s	loc_92C6
		lea	(loc_9463).l,A4
loc_92C6:
		move.l	A4,$34(a0)
		cmpi.b	#oil_ocean_zone,(Current_Zone).w
		bne.s	loc_92F2
		move.l	#Obj1A_MapUnc_9902,4(a0) ; loc_9902
		move.w	#$639D,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$40,$19(a0)
		move.l	#loc_946B,$34(a0)
loc_92F2:
		cmpi.b	#dust_hill_zone,(Current_Zone).w
		bne.s	loc_931A
		move.l	#Obj1A_MapUnc_9942,4(a0) ; loc_9942
		move.w	#$63F4,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$20,$19(a0)
		move.l	#loc_9472,$34(a0)
loc_931A:
		tst.b	$3A(a0)
		beq.s	loc_932C
		tst.b	$38(a0)
		beq.w	loc_93A6
		subq.b	#1,$38(a0)
loc_932C:
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_933C
		move.b	#1,$3A(a0)
loc_933C:
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#$10,d3
		move.w	8(a0),d4
		bsr.w	PlatformObject
		bra.w	MarkObjGone             ; loc_d2A0
loc_9352:
		tst.b	$38(a0)
		beq.s	loc_9396
		tst.b	$3A(a0)
		bne.s	loc_9366
		subq.b	#1,$38(a0)
		bra.w	DisplaySprite           ; loc_d3C2
loc_9366:
		bsr.w	loc_933C
		subq.b	#1,$38(a0)
		bne.s	loc_9394
		lea	(MainCharacter).w,A1
		bsr.s	loc_937A
		lea	(Sidekick).w,A1
loc_937A:
		btst	#3,$22(a1)
		beq.s	loc_9394
		bclr	#3,$22(a1)
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)
loc_9394:
		rts
loc_9396:
		bsr.w	ObjectMoveAndFall              ; loc_d24E
		tst.b	1(a0)
		bpl.w	DeleteObject            ; loc_d3B4
		bra.w	DisplaySprite           ; loc_d3C2
loc_93A6:
		addq.b	#1,$1A(a0)
		bra.s	loc_93B0              
loc_93AC:
		addq.b	#2,$1A(a0)
loc_93B0:		
		move.l	$34(a0),A4		  
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w   d0,d0
		move.l	4(a0),A3
		adda.w	(A3,d0),A3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#5,1(a0)
		_move.b	0(a0),d4
		move.b	1(a0),d5
		move.l	A0,A1
		bra.s	loc_93E2
loc_93DA:
		bsr.w	SingleObjLoad        ; loc_E772
		bne.s	loc_9428
		addq.w	#8,A3
loc_93E2:
		move.b	#4,$24(a1)
		_move.b	d4,0(a1)
		move.l	A3,4(a1)
		move.b	d5,1(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	2(a0),2(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.b	$16(a0),$16(a1)
		move.b	(a4)+,$38(a1)
		cmpa.l  A0,A1
		bcc.s	loc_9424
		bsr.w	DisplaySprite2         ; loc_d3E0
loc_9424:
		dbf	d1,loc_93DA
loc_9428:		
		bsr.w	DisplaySprite           ; loc_d3C2
		move.w	#SndID_Smash,d0
		jmp	(PlaySound).l              ; loc_14C6
loc_9436:		
		dc.b	$1C,$18,$14,$10,$1A,$16,$12,$0E,$0A,$06,$18,$14,$10,$0C,$08,$04
		dc.b	$16,$12,$0E,$0A,$06,$02,$14,$10,$0C		    
loc_944F:
		dc.b	$18,$1C,$20,$1E,$1A,$16,$06,$0E,$14,$12,$0A,$02
loc_945B:              
		dc.b	$1E,$16,$0E,$06,$1A,$12,$0A,$02
loc_9463:
		dc.b	$16,$1E,$1A,$12,$06,$0E,$0A,$02
loc_946B:
		dc.b	$1A,$12,$0A,$02,$16,$0E,$06              
loc_9472:		
		dc.b	$1A,$16,$12,$0E,$0A,$02				         
loc_9478:
		dc.b	$20,$20,$20,$20,$20,$20,$20,$20,$21,$21,$22,$22,$23,$23,$24,$24
		dc.b	$25,$25,$26,$26,$27,$27,$28,$28,$29,$29,$2A,$2A,$2B,$2B,$2C,$2C
		dc.b	$2D,$2D,$2E,$2E,$2F,$2F,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30		  
Collapsing_Platforms_Mappings: ; loc_94A8:
		dc.w    Collapsing_Platforms_Map_01-Collapsing_Platforms_Mappings
		dc.w    Collapsing_Platforms_Map_02-Collapsing_Platforms_Mappings
		dc.w    Collapsing_Platforms_Map_03-Collapsing_Platforms_Mappings
		dc.w    Collapsing_Platforms_Map_04-Collapsing_Platforms_Mappings
Collapsing_Platforms_Map_01: ; loc_94B0:
		dc.w	$0010
		dc.l	$C80E0057,$002B0010,$d00d0063,$0031FFF0
		dc.l	$E00d006B,$00350010,$E00d0073,$0039FFF0
		dc.l	$D806007B,$003DFFE0,$D8060081,$0040FFd0
		dc.l	$F00d0087,$00430010,$F00d008F,$0047FFF0
		dc.l	$F0050097,$004BFFE0,$F005009B,$004DFFd0
		dc.l	$000d009F,$004F0010,$000500A7,$00530000
		dc.l	$000d00AB,$0055FFE0,$000500B3,$0059FFd0
		dc.l	$100d00AB,$00550010,$100500B7,$005B0000
Collapsing_Platforms_Map_02: ; loc_9532:
		dc.w	$0010
		dc.l	$C80E0057,$002B0010,$d00d0063,$0031FFF0
		dc.l	$E00d006B,$00350010,$E00d0073,$0039FFF0
		dc.l	$D806007B,$003DFFE0,$D80600BB,$005DFFd0
		dc.l	$F00d0087,$00430010,$F00d008F,$0047FFF0
		dc.l	$F0050097,$004BFFE0,$F00500C1,$0060FFd0
		dc.l	$000d009F,$004F0010,$000500A7,$00530000
		dc.l	$000d00AB,$0055FFE0,$000500B7,$005BFFd0
		dc.l	$100d00AB,$00550010,$100500B7,$005B0000
Collapsing_Platforms_Map_03: ; loc_95B4:
		dc.w	$0019
		dc.l	$C806005D,$002E0020,$C8060057,$002B0010
		dc.l	$d0050067,$00330000,$d0050063,$0031FFF0
		dc.l	$E005006F,$00370020,$E005006B,$00350010
		dc.l	$E0050077,$003B0000,$E0050073,$0039FFF0
		dc.l	$D806007B,$003DFFE0,$D8060081,$0040FFd0
		dc.l	$F005008B,$00450020,$F0050087,$00430010
		dc.l	$F0050093,$00490000,$F005008F,$0047FFF0
		dc.l	$F0050097,$004BFFE0,$F005009B,$004DFFd0
		dc.l	$0005008B,$00450020,$0005008B,$00450010
		dc.l	$000500A7,$00530000,$000500AB,$0055FFF0
		dc.l	$000500AB,$0055FFE0,$000500B3,$0059FFd0
		dc.l	$100500AB,$00550020,$100500AB,$00550010
		dc.l	$100500B7,$005B0000
Collapsing_Platforms_Map_04: ; loc_967E:
		dc.w	$0019
		dc.l	$C806005D,$002E0020,$C8060057,$002B0010
		dc.l	$d0050067,$00330000,$d0050063,$0031FFF0
		dc.l	$E005006F,$00370020,$E005006B,$00350010
		dc.l	$E0050077,$003B0000,$E0050073,$0039FFF0
		dc.l	$D806007B,$003DFFE0,$D80600BB,$005DFFd0
		dc.l	$F005008B,$00450020,$F0050087,$00430010
		dc.l	$F0050093,$00490000,$F005008F,$0047FFF0
		dc.l	$F0050097,$004BFFE0,$F00500C1,$0060FFd0
		dc.l	$0005008B,$00450020,$0005008B,$00450010
		dc.l	$000500A7,$00530000,$000500AB,$0055FFF0
		dc.l	$000500AB,$0055FFE0,$000500B7,$005BFFd0
		dc.l	$100500AB,$00550020,$100500AB,$00550010
		dc.l	$100500B7,$005B0000              
loc_9748:
		dc.w    loc_9750-loc_9748
		dc.w    loc_9772-loc_9748
		dc.w    loc_97B4-loc_9748
		dc.w    loc_97d6-loc_9748
loc_9750:
		dc.w	$0004
		dc.l	$F80d0000,$0000FFE0,$080d0000,$0000FFE0
		dc.l	$F80d0000,$00000000,$080d0000,$00000000
loc_9772:
		dc.w	$0008
		dc.l	$F8050000,$0000FFE0,$F8050000,$0000FFF0
		dc.l	$F8050000,$00000000,$F8050000,$00000010
		dc.l	$08050000,$0000FFE0,$08050000,$0000FFF0
		dc.l	$08050000,$00000000,$08050000,$00000010
loc_97B4:
		dc.w	$0004
		dc.l	$F80d0000,$0000FFE0,$080d0008,$0004FFE0
		dc.l	$F80d0000,$00000000,$080d0008,$00040000
loc_97d6:
		dc.w	$0008
		dc.l	$F8050000,$0000FFE0,$F8050004,$0002FFF0
		dc.l	$F8050000,$00000000,$F8050004,$00020010
		dc.l	$08050008,$0004FFE0,$0805000C,$0006FFF0
		dc.l	$08050008,$00040000,$0805000C,$00060010
loc_9818:
		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
loc_9828:
		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
Obj1A_MapUnc_9858:	binclude	"mappings/sprite/obj1A_HPZ.bin"
Obj1A_MapUnc_9902:	binclude	"mappings/sprite/obj1A_OOZ.bin"
Obj1A_MapUnc_9942:	binclude	"mappings/sprite/obj1F_DHZ.bin"

; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 1C - Scenery objects
; ---------------------------------------------------------------------------
; Sprite_999C: Obj_0x1C_Misc:
Obj1C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj1C_Index(pc,d0.w),d1
		jmp	Obj1C_Index(pc,d1.w)
; ===========================================================================
; off_99AA:
Obj1C_Index:	offsetTable
		offsetTableEntry.w Obj1C_Init
		offsetTableEntry.w Obj1C_Display
; ===========================================================================

objsubdecl macro frame,mapaddr,artaddr,width,priority
	dc.l frame<<24|mapaddr
	dc.w artaddr
	dc.b width,priority
    endm

; dword_99AE:
Obj1C_InitData:
		objsubdecl 0,Obj1C_MapUnc_9B9A,$43FD, 4,6
		objsubdecl 1,Obj1C_MapUnc_9B9A,$43FD, 4,6
		objsubdecl 1,Obj11_MapUnc_85E0,$43C6, 4,1
		objsubdecl 2,Obj1C_MapUnc_9B9A,$23FD,$10,6
		objsubdecl 3,Obj16_MapUnc_1611E,$43E6, 8,4
		objsubdecl 4,Obj16_MapUnc_1611E,$43E6, 8,4
		objsubdecl 1,Obj16_MapUnc_1611E,$43E6,$20,1
		objsubdecl 0,Obj1C_MapUnc_9B3A,$4000, 8,1
		objsubdecl 1,Obj1C_MapUnc_9B3A,$4000, 8,1
		objsubdecl 0,Obj1C_MapUnc_9B52,$4428, 4,4
		objsubdecl 0,Obj1C_MapUnc_9B6A,$4346, 8,4
		objsubdecl 1,Obj1C_MapUnc_9B6A,$4346, 8,4
		objsubdecl 2,Obj1C_MapUnc_9B6A,$4346, 8,4
		objsubdecl 3,Obj1C_MapUnc_9B6A,$4346, 8,4
; ===========================================================================
; loc_9A1E:
Obj1C_Init:
		addq.b	#2,routine(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#3,d0
		lea	Obj1C_InitData(pc),a1
		lea	(a1,d0.w),a1
		move.b	(a1),$1A(a0)
		move.l	(a1)+,4(a0)
		move.w	(a1)+,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$18(a0)
; loc_9A50:
Obj1C_Display:
		bra.w	MarkObjGone
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 71 - Bridge stake and pulsing orb from Hidden Palace Zone,
; and lava bubble from Metropolis Zone
; ---------------------------------------------------------------------------
; Sprite_9A54: Obj_0x71_Hpz_Misc:
Obj71:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj71_Index(pc,d0.w),d1
		jmp	Obj71_Index(pc,d1.w)
; ===========================================================================
; off_9A62:
Obj71_Index:	offsetTable
		offsetTableEntry.w Obj71_Init
		offsetTableEntry.w Obj71_Main
; ===========================================================================
; dword_9A66:
Obj71_InitData:
		objsubdecl 3,Obj11_MapUnc_8598,$6300, 4,1		; Hidden Palace bridge
		objsubdecl 0,Obj71_MapUnc_9AFA,$E35A,$10,1		; Hidden Palace pulsing orb
		objsubdecl 0,Obj71_MapUnc_9BBE,$4536,$10,1		; Metropolis lava bubble
; ===========================================================================
; loc_9A7E:
Obj71_Init:
		addq.b	#2,routine(a0)
		move.b	subtype(a0),d0
		andi.w	#$F,d0
		lsl.w	#3,d0
		lea	Obj71_InitData(pc),a1
		lea	(a1,d0.w),a1
		move.b	(a1),mapping_frame(a0)
		move.l	(a1)+,mappings(a0)
		move.w	(a1)+,art_tile(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,render_flags(a0)
		move.b	(a1)+,width_pixels(a0)
		move.b	(a1)+,priority(a0)
		move.b	subtype(a0),d0
		andi.w	#$F0,d0
		lsr.b	#4,d0
		move.b	d0,anim(a0)
; loc_9AC0:
Obj71_Main:
		lea	(Ani_obj71).l,a1
		bsr.w	AnimateSprite
		bra.w	MarkObjGone
; ===========================================================================,
; animation script
; off_9ACE:
Ani_obj71:	offsetTable
		offsetTableEntry.w byte_9Ad6
		offsetTableEntry.w byte_9ADE
		offsetTableEntry.w byte_9AED
		offsetTableEntry.w byte_9AF6
byte_9Ad6:	dc.b	  8, 3, 3, 4, 5, 5, 4,$FF
byte_9ADE:	dc.b	  5, 0, 0, 0, 1, 2, 3, 3, 2, 1, 2, 3, 3, 1,$FF
byte_9AED:	dc.b	 $B, 0, 1, 2, 3, 4, 5,$FD, 3
byte_9AF6:	dc.b	$7F, 6,$FD, 2
		even

; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj71_MapUnc_9AFA:	binclude	"mappings/sprite/obj71_a.bin"	; glowing orbs
Obj1C_MapUnc_9B3A:	binclude	"mappings/sprite/obj1C_a.bin"	; level art
Obj1C_MapUnc_9B52:	binclude	"mappings/sprite/obj1C_b.bin"	; NGHZ waterfall
Obj1C_MapUnc_9B6A:	binclude	"mappings/sprite/obj1C_OOZ.bin"	; OOZ oil
Obj1C_MapUnc_9B9A:	binclude	"mappings/sprite/obj1C_d.bin"	; MTZ thingy
Obj71_MapUnc_9BBE:	binclude	"mappings/sprite/obj71_b.bin"	; MTZ lava bubble
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 2A - Stomper from DHZ
; ---------------------------------------------------------------------------
; Sprite_9C0C: Obj_0x2A_Up_Down_Pillar:
Obj2A:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj2A_Index(pc,d0.w),d1
		jmp	Obj2A_Index(pc,d1.w)
; ===========================================================================
; off_9C1A:
Obj2A_Index:	offsetTable
		offsetTableEntry.w Obj2A_Init
		offsetTableEntry.w Obj2A_Main
; ===========================================================================
; loc_9C1E:
Obj2A_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj2A_MapUnc_9CAE,mappings(a0)
		move.w	#$4000,art_tile(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,render_flags(a0)
		move.b	#$10,width_pixels(a0)
		move.b	#4,priority(a0)
		move.w	$C(a0),$32(a0)
		move.b	#$50,y_radius(a0)
		bset	#4,render_flags(a0)
; loc_9C58:
Obj2A_Main:
		tst.b	$25(a0)
		bne.s	loc_9C72
		addq.w	#1,$30(a0)
		cmpi.w	#$60,$30(a0)
		bne.s	loc_9C84
		move.b	#2,$25(a0)
		bra.s	loc_9C84
; ===========================================================================

loc_9C72:
		subq.w	#8,$30(a0)
		bhi.s	loc_9C84
		move.w	#0,$30(a0)
		move.b	#0,$25(a0)

loc_9C84:
		move.w	$32(a0),d0
		sub.w	$30(a0),d0
		move.w	d0,y_pos(a0)
		moveq	#0,d1
		move.b	width_pixels(a0),d1
		addi.w	#$B,d1
		move.w	#$40,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	x_pos(a0),d4
		bsr.w	SolidObject
		bra.w	MarkObjGone
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj2A_MapUnc_9CAE:	binclude	"mappings/sprite/obj2A.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 2D - One way barrier from MTZ and CPZ (last one unused)
; ---------------------------------------------------------------------------
; Sprite_9CE2: Obj_0x2D_Automatic_Door:
Obj2D:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj2D_Index(pc,d0.w),d1
		jmp	Obj2D_Index(pc,d1.w)
; ===========================================================================
; off_9CF0:
Obj2D_Index:	offsetTable
		offsetTableEntry.w Obj2D_Init
		offsetTableEntry.w Obj2D_Main
; ===========================================================================
; loc_9CF4:
Obj2D_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj2D_MapUnc_9E1E,4(a0)
		move.w	#$2426,2(a0)
		move.b	#8,$19(a0)
		; no check for MTZ3 at this point
		cmpi.b	#metropolis_zone,(Current_Zone).w	; is this Metropolis Zone?
		bne.s	loc_9d20				; if not,branch
		move.w	#$6000,2(a0)
		move.b	#$C,$19(a0)

loc_9d20:
		cmpi.b	#chemical_plant_zone,(Current_Zone).w	; is this Chemical Plant Zone?
		bne.s	loc_9d34				; if not,branch
		move.w	#$2394,2(a0)
		move.b	#$C,$19(a0)

loc_9d34:
		; no check for DEZ and NGHZ's (unused) door at this point either
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),$32(a0)
		move.b	$28(a0),$1A(a0)
		move.w	8(a0),d2
		move.w	d2,d3
		subi.w	#$200,d2
		addi.w	#$18,d3
		btst	#0,$22(a0)
		beq.s	loc_9d6E
		subi.w	#-$1E8,d2
		addi.w	#$1E8,d3

loc_9d6E:
		move.w	d2,$38(a0)
		move.w	d3,$3A(a0)
; loc_9d76:
Obj2D_Main:
		btst	#0,$22(a0)
		bne.s	loc_9D92
		move.w	$38(a0),d2
		move.w	8(a0),d3
		tst.b	$25(a0)				; is the barrier moving up?
		beq.s	loc_9DA4			; if not,branch
		move.w	$3A(a0),d3
		bra.s	loc_9DA4
; ---------------------------------------------------------------------------

loc_9D92:
		move.w	8(a0),d2
		move.w	$3A(a0),d3
		tst.b	$25(a0)				; is the barrier moving up?
		beq.s	loc_9DA4			; if not,branch
		move.w	$38(a0),d2

loc_9DA4:
		move.b	#0,$25(a0)			; set barrier to move down if characters are in the area
		move.w	(MainCharacter+8).w,d0
		cmp.w	d2,d0
		bcs.w	loc_9DC0
		cmp.w	d3,d0
		bcc.w	loc_9DC0
		move.b	#2,$25(a0)			; set barrier to move up for player 1

loc_9DC0:
		move.w	(Sidekick+8).w,d0
		cmp.w	d2,d0
		bcs.w	loc_9Dd6
		cmp.w	d3,d0
		bcc.w	loc_9Dd6
		move.b	#2,$25(a0)			; set barrier to move up for player 1

loc_9Dd6:
		tst.b	$25(a0)				; is the barrier moving up?
		beq.s	loc_9DEA			; if not,branch
		cmpi.w	#$40,$30(a0)			; has the barrier reached a sufficient height?
		beq.s	Obj2D_Solid			; if not,branch
		addq.w	#8,$30(a0)			; move barrier up
		bra.s	loc_9DF4

loc_9DEA:
		tst.w	$30(a0)				; is the barrier not in its original position?
		beq.s	Obj2D_Solid			; if not,branch
		subq.w	#8,$30(a0)			; move barrier down

loc_9DF4:
		move.w	$32(a0),d0			; set barrier Y position
		sub.w	$30(a0),d0
		move.w	d0,$C(a0)
; loc_9E00:
Obj2D_Solid:
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$20,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		bra.w	MarkObjGone
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj2D_MapUnc_9E1E:	binclude	"mappings/sprite/obj2D.bin"
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object XX - Ball Hog from SBZ (leftover from S1)
; ---------------------------------------------------------------------------
; Sprite_9E6C: S1_Ballhog:
S1Obj1E:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	S1Obj1E_Index(pc,d0.w),d1
		jmp	S1Obj1E_Index(pc,d1.w)
; ===========================================================================
; loc_9E7A:
S1Obj1E_Index:	offsetTable
		offsetTableEntry.w S1Obj1E_Init
		offsetTableEntry.w S1Obj1E_Main
; ===========================================================================
; loc_9E7E:
S1Obj1E_Init:
		move.b	#$13,$16(a0)
		move.b	#8,$17(a0)
		move.l	#S1Obj1E_MapUnc_A18E,4(a0)
		move.w	#$2302,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#5,$20(a0)
		move.b	#$C,$19(a0)
		bsr.w	ObjectMoveAndFall
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	+
		add.w	d1,$C(a0)
		move.w	#0,$12(a0)
		addq.b	#2,routine(a0)
+
		rts
; ===========================================================================
; loc_9Ed2:
S1Obj1E_Main:
		lea	(Ani_S1obj1E).l,a1
		bsr.w	AnimateSprite
		cmpi.b	#1,$1A(a0)		; is Ball Hog in his final frame?
		bne.s	S1Obj1E_SetBall		; if not,branch
		tst.b	$32(a0)			; is it ready to launch its cannonball?
		beq.s	S1Obj1E_MakeBall	; if yes,branch
		bra.s	loc_9EF0
; loc_9EEC:
S1Obj1E_SetBall:
		clr.b	$32(a0)			; set to launch cannonball

loc_9EF0:
		bra.w	MarkObjGone
; ---------------------------------------------------------------------------
; loc_9EF4:
S1Obj1E_MakeBall:
		move.b	#1,$32(a0)
		bsr.w	SingleObjLoad
		bne.s	loc_9F38
		; missing code to actually load the ball,taken from Sonic 1 for reference
		;_move.b	#$20,0(a1)	; load Ball Hog ball ($20,need to be readded to object list too)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#-$100,$10(a1)
		move.w	#0,$12(a1)
		moveq	#-4,d0
		btst	#0,$22(a0)	; is Ball Hog facing right
		beq.s	loc_9F28	; if not,branch
		neg.w	d0
		neg.w	$10(a1)		; launch the cannonball right

loc_9F28:
		add.w	d0,8(a1)
		addi.w	#$C,$C(a1)
		move.b	$28(a0),$28(a1)	; copy object type from Ball Hog

loc_9F38:
		bra.s	loc_9EF0

; ===========================================================================
; ---------------------------------------------------------------------------
; Object XX - Cannonball that Ball Hog throws (leftover from S1)
; ---------------------------------------------------------------------------
; Sprite_9F3A: S1_BallHog_Ball:
S1Obj20:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	S1Obj20_Index(pc,d0.w),d1
		jmp	S1Obj20_Index(pc,d1.w)
; ===========================================================================
; off_9F48:
S1Obj20_Index:	offsetTable
		offsetTableEntry.w S1Obj20_Init
		offsetTableEntry.w S1Obj20_Main
; ===========================================================================
; loc_9F4C:
S1Obj20_Init:
		addq.b	#2,routine(a0)
		move.b	#7,$16(a0)
		move.l	#S1Obj1E_MapUnc_A18E,4(a0)
		move.w	#$2302,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#$87,$20(a0)
		move.b	#8,$19(a0)
		moveq	#0,d0
		move.b	$28(a0),d0	; move subtype to d0
		mulu.w	#$3C,d0		; multiply by 60 frames	(1 second)
		move.w	d0,$30(a0)	; set explosion time
		move.b	#4,$1A(a0)
; loc_9F94:
S1Obj20_Main:
		jsr	(ObjectMoveAndFall).l
		tst.w	$12(a0)
		bmi.s	S1Obj20_Explode
		jsr	(ObjHitFloor).l
		tst.w	d1		; has the ball hit the floor?
		bpl.s	S1Obj20_Explode	; if not,branch

		add.w	d1,$C(a0)
		move.w	#-$300,$12(a0)	; bounce

		tst.b	d3		; ??? d3 never holds any value
		beq.s	S1Obj20_Explode
		bmi.s	loc_9FC6
		tst.w	$10(a0)
		bpl.s	S1Obj20_Explode
		neg.w	$10(a0)
		bra.s	S1Obj20_Explode
; ===========================================================================

loc_9FC6:
		tst.w	$10(a0)
		bmi.s	S1Obj20_Explode
		neg.w	$10(a0)
; loc_9Fd0:
S1Obj20_Explode:
		subq.w	#1,$30(a0)
		bpl.s	S1Obj20_Animate
		_move.b	#$24,0(a0)
		_move.b	#$3F,0(a0)
		move.b	#0,routine(a0)
		bra.w	Obj3F
; ===========================================================================
; loc_9FEC:
S1Obj20_Animate:
		subq.b	#1,$1E(a0)
		bpl.s	S1Obj20_Display
		move.b	#5,$1E(a0)
		bchg	#0,$1A(a0)
; loc_9FFE:
S1Obj20_Display:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$C(a0),d0	; has the object fallen off the level?
		bcs.w	DeleteObject	; if yes,branch
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 24 - Buzz Bomber missile explosion (leftover from S1)
; This wasn't even used in Sonic 1; it should've been triggered if the
; missile's status was set to 7,however the code never actually sets it
; ---------------------------------------------------------------------------
; Sprite_A012: Obj_0x24:
Obj24:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj24_Index(pc,d0.w),d1
		jmp	Obj24_Index(pc,d1.w)
; ===========================================================================
; off_A020:
Obj24_Index:	offsetTable
		offsetTableEntry.w Obj24_Init
		offsetTableEntry.w Obj24_Delete
; ===========================================================================
; loc_A024:
Obj24_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj24_MapUnc_A1F6,4(a0)
		move.w	#$41C,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#0,$20(a0)
		move.b	#$C,$19(a0)
		move.b	#9,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#SndID_MissileDissolve,d0
		jsr	(PlaySound).l
; loc_A068:
Obj24_Delete:
		subq.b	#1,$1E(a0)
		bpl.s	loc_A082
		move.b	#9,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#4,$1A(a0)
		beq.w	DeleteObject

loc_A082:
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 27 - An explosion,giving off an animal and 100 points
; ---------------------------------------------------------------------------
; Sprite_A086: Obj_0x27_Object_Hit:
Obj27:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj27_Index(pc,d0.w),d1
		jmp	Obj27_Index(pc,d1.w)
; ===========================================================================
; off_A094: Object_Hit_Index:
Obj27_Index:	offsetTable
		offsetTableEntry.w Obj27_InitWithAnimal
		offsetTableEntry.w Obj27_Init
		offsetTableEntry.w Obj27_Main
; ===========================================================================
; loc_A09A:
Obj27_InitWithAnimal:
		addq.b	#2,routine(a0)
		bsr.w	SingleObjLoad
		bne.s	Obj27_Init
		_move.b	#$28,0(a1)		 ; load obj28 (animal and 100 points)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	$3E(a0),$3E(a1)		; set by Touch_KillEnemy
; loc_A0BC:
Obj27_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj27_MapUnc_A226,4(a0)
		move.w	#$5A0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#0,$20(a0)
		move.b	#$C,$19(a0)
		move.b	#7,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#SndID_Explosion,d0
		jsr	(PlaySound).l
; loc_A100:
Obj27_Main:
		subq.b	#1,$1E(a0)
		bpl.s	Obj27_Display
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#5,$1A(a0)
		beq.w	DeleteObject
; loc_A11A:
Obj27_Display:
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 3F - Boss explosion (unused)
; ---------------------------------------------------------------------------
; Sprite_A11E: Obj_0x3F:
Obj3F:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj3F_Index(pc,d0.w),d1
		jmp	Obj3F_Index(pc,d1.w)
; ===========================================================================
; off_A12C:
Obj3F_Index:	offsetTable
		offsetTableEntry.w Obj3F_Init
		offsetTableEntry.w Obj27_Main
; ===========================================================================
; loc_A130:
Obj3F_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj3F_MapUnc_A292,4(a0)
		move.w	#$5A0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#0,$20(a0)
		move.b	#$C,$19(a0)
		move.b	#7,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#SndID_BossExplosion,d0
		jmp	(PlaySound).l
; ===========================================================================	
; animation script
; off_A174: Ani_S1_Ballhog:
Ani_S1obj1E:	offsetTable
		offsetTableEntry.w byte_A176
byte_A176:	dc.b	 9, 0, 0, 2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 2
		dc.b	 2, 3, 2, 0, 0, 1,$FF
		even
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
S1Obj1E_MapUnc_A18E:	binclude	"mappings/sprite/obj1E_S1.bin"	; Ball Hog
Obj24_MapUnc_A1F6:	binclude	"mappings/sprite/obj24.bin"	; Buzz Bomber missile explosion

; can't split these two in any useful way...
Obj27_MapUnc_A226:	offsetTable					; explosion from enemy
		offsetTableEntry.w word_A230
		offsetTableEntry.w word_A23A
		offsetTableEntry.w word_A244
		offsetTableEntry.w word_A24E
		offsetTableEntry.w word_A270
word_A230:	dc.w	1
		dc.w	$F809,   0,   0,$FFF4
word_A23A:	dc.w	1
		dc.w	$F00F,   6,   3,$FFF0
word_A244:	dc.w	1
		dc.w	$F00F, $16,  $B,$FFF0
word_A24E:	dc.w	4
		dc.w	$EC0A, $26, $13,$FFEC
		dc.w	$EC05, $2F, $17,   4
		dc.w	 $405,$182F,$1817,$FFEC
		dc.w	$FC0A,$1826,$1813,$FFFC
word_A270:	dc.w	4
		dc.w	$EC0A, $33, $19,$FFEC
		dc.w	$EC05, $3C, $1E,   4
		dc.w	 $405,$183C,$181E,$FFEC
		dc.w	$FC0A,$1833,$1819,$FFFC

Obj3F_MapUnc_A292:	offsetTable					; explosion from boss (unused)
		offsetTableEntry.w word_A230
		offsetTableEntry.w word_A29C
		offsetTableEntry.w word_A2A6
		offsetTableEntry.w word_A24E
		offsetTableEntry.w word_A270
word_A29C:	dc.w	1
		dc.w	$F00F, $40, $20,$FFF0
word_A2A6:	dc.w	1
		dc.w	$F00F, $50, $28,$FFF0

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 28 - Animal and the 100 points from a badnik
; ---------------------------------------------------------------------------
; Sprite_A2B0: Obj_0x28_Flickies:
Obj28:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj28_Index(pc,d0.w),d1
		jmp	Obj28_Index(pc,d1.w)
; ===========================================================================
; off_A2BE: Flickies_Index:
Obj28_Index:	offsetTable
		offsetTableEntry.w Obj28_Init
		offsetTableEntry.w Obj28_Main
		offsetTableEntry.w Obj28_Walk
		offsetTableEntry.w Obj28_Fly
		offsetTableEntry.w Obj28_Walk
		offsetTableEntry.w Obj28_Walk
		offsetTableEntry.w Obj28_Walk
		offsetTableEntry.w Obj28_Fly
		offsetTableEntry.w Obj28_Walk
		offsetTableEntry.w Obj28_Prison
		offsetTableEntry.w Obj28_FlickyWait
		offsetTableEntry.w Obj28_FlickyWait
		offsetTableEntry.w Obj28_FlickyJump
		offsetTableEntry.w Obj28_RabbitWait
		offsetTableEntry.w Obj28_LandJump
		offsetTableEntry.w Obj28_SingleBounce
		offsetTableEntry.w Obj28_LandJump
		offsetTableEntry.w Obj28_SingleBounce
		offsetTableEntry.w Obj28_LandJump
		offsetTableEntry.w Obj28_FlyBounce
		offsetTableEntry.w Obj28_DoubleBounce
; ===========================================================================
; byte_A2E8:
Obj28_ZoneAnimals: zoneOrderedTable 1,2
	; This table declares what animals will appear in the zone.
	; When an enemy is destroyed,a random animal is chosen from the 2 selected animals.
	; Note: you must also load the corresponding art in the PLCs.
	zoneTableEntry.b $00,$05
	zoneTableEntry.b $02,$03
	zoneTableEntry.b $06,$03
	zoneTableEntry.b $04,$05
	zoneTableEntry.b $04,$01
	zoneTableEntry.b $00,$01
	zoneTableEntry.b $00,$05
	zoneTableEntry.b $02,$03
	zoneTableEntry.b $06,$03
	zoneTableEntry.b $04,$05
	zoneTableEntry.b $04,$01
	zoneTableEntry.b $00,$01
	zoneTableEntry.b $00,$05
	zoneTableEntry.b $02,$03
	zoneTableEntry.b $06,$03
	zoneTableEntry.b $04,$05
	zoneTableEntry.b $04,$01
    zoneTableEnd
	dc.b 0,1	; entry for non-existant zone $11

		; This table declares the speed and mappings of each animal.
; word_A30C:
Obj28_Properties:
		dc.w	$FE00,$FC00
		dc.l    Obj28_MapUnc_A816
		dc.w	$FE00,$Fd00
		dc.l    Obj28_MapUnc_A83A
		dc.w	$FE80,$Fd00
		dc.l    Obj28_MapUnc_A816
		dc.w	$FEC0,$FE80
		dc.l    Obj28_MapUnc_A83A
		dc.w	$FE40,$Fd00
		dc.l    Obj28_MapUnc_A85E
		dc.w	$Fd00,$FC00
		dc.l    Obj28_MapUnc_A83A
		dc.w	$FD80,$FC80
		dc.l    Obj28_MapUnc_A85E

	; The following tables tell the properties of animals based on their subtype.
; word_A344:
Obj28_Speeds:
		dc.w	-$440,-$400
		dc.w	-$440,-$400
		dc.w	-$440,-$400
		dc.w	-$300,-$400
		dc.w    -$300,-$400
		dc.w	-$180,-$300
		dc.w	-$180,-$300
		dc.w	-$140,-$180
		dc.w    -$1C0,-$300
		dc.w	-$200,-$300
		dc.w	-$280,-$380
; off_A370:
Obj28_Mappings:
		dc.l	Obj28_MapUnc_A83A
		dc.l	Obj28_MapUnc_A83A
		dc.l	Obj28_MapUnc_A83A
		dc.l	Obj28_MapUnc_A816
		dc.l	Obj28_MapUnc_A816
		dc.l	Obj28_MapUnc_A816
		dc.l	Obj28_MapUnc_A816
		dc.l	Obj28_MapUnc_A83A
		dc.l	Obj28_MapUnc_A85E
		dc.l	Obj28_MapUnc_A83A
		dc.l	Obj28_MapUnc_A85E
; word_A39C:
Obj28_ArtLocations:
		dc.w	$05A5
		dc.w	$05A5
		dc.w	$05A5
		dc.w	$0553
		dc.w	$0553
		dc.w	$0573
		dc.w	$0573
		dc.w	$0585
		dc.w	$0593
		dc.w	$0565
		dc.w	$05B3
; ===========================================================================
; loc_A3B2:
Obj28_Init:
		tst.b	$28(a0)
		beq.w	Obj28_InitRandom
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.b	d0,routine(a0)
		subi.w	#$14,d0
		move.w	Obj28_ArtLocations(pc,d0.w),2(a0)
		add.w	d0,d0
		move.l	Obj28_Mappings(pc,d0.w),4(a0)
		lea	Obj28_Speeds(pc),a1
		move.w	(a1,d0.w),$32(a0)
		move.w	(a1,d0.w),$10(a0)
		move.w	2(a1,d0.w),$34(a0)
		move.w	2(a1,d0.w),$12(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,$16(a0)
		move.b	#4,1(a0)
		bset	#0,1(a0)
		move.b	#6,$18(a0)
		move.b	#8,$19(a0)
		move.b	#7,$1E(a0)
		bra.w	DisplaySprite
; ---------------------------------------------------------------------------
; loc_A420:
Obj28_InitRandom:
		addq.b	#2,routine(a0)
		bsr.w	PseudoRandomNumber
		andi.w	#1,d0
		moveq	#0,d1
		move.b	(Current_Zone).w,d1
		add.w	d1,d1
		add.w	d0,d1
		lea	Obj28_ZoneAnimals(pc),a1
		move.b	(a1,d1.w),d0
		move.b	d0,$30(a0)
		lsl.w	#3,d0
		lea	Obj28_Properties(pc),a1
		adda.w	d0,a1
		move.w	(a1)+,$32(a0)
		move.w	(a1)+,$34(a0)
		move.l	(a1)+,4(a0)
		move.w	#$580,2(a0)
		btst	#0,$30(a0)
		beq.s	loc_A46A
		move.w	#$592,2(a0)

loc_A46A:
		bsr.w	Adjust2PArtPointer
		move.b	#$C,$16(a0)
		move.b	#4,1(a0)
		bset	#0,1(a0)
		move.b	#6,$18(a0)
		move.b	#8,$19(a0)
		move.b	#7,$1E(a0)
		move.b	#2,$1A(a0)
		move.w	#-$400,$12(a0)
		tst.b	(Boss_defeated_flag).w
		bne.s	loc_A4CA
		bsr.w	SingleObjLoad
		bne.s	Obj28_Display
		_move.b	#$29,0(a1)		; load obj29 (points)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	$3E(a0),d0
		lsr.w	#1,d0
		move.b	d0,$1A(a1)
; loc_A4C6:
Obj28_Display:
		bra.w	DisplaySprite
; ---------------------------------------------------------------------------

loc_A4CA:
		move.b	#$12,routine(a0)
		clr.w	$10(a0)
		bra.w	DisplaySprite
; ===========================================================================
; loc_A4D8:
Obj28_Main:
		tst.b	1(a0)
		bpl.w	DeleteObject
		bsr.w	ObjectMoveAndFall
		tst.w	$12(a0)
		bmi.s	Obj28_Display2
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	Obj28_Display2
		add.w	d1,$C(a0)
		move.w	$32(a0),$10(a0)
		move.w	$34(a0),$12(a0)
		move.b	#1,$1A(a0)
		move.b	$30(a0),d0
		add.b	d0,d0
		addq.b	#4,d0
		move.b	d0,routine(a0)
		tst.b	(Boss_defeated_flag).w
		beq.s	Obj28_Display2
		btst	#4,(Vint_runcount+3).w
		beq.s	Obj28_Display2
		neg.w	$10(a0)
		bchg	#0,1(a0)
; loc_A52E:
Obj28_Display2:
		bra.w	DisplaySprite
; ===========================================================================
; loc_A532:
Obj28_Walk:
		bsr.w	ObjectMoveAndFall
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	loc_A55C
		move.b	#0,$1A(a0)
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	loc_A55C
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

loc_A55C:
		tst.b	$28(a0)
		bne.s	Obj28_ChkDel
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; loc_A56E:
Obj28_Fly:
		bsr.w	ObjectMove
		addi.w	#$18,$12(a0)
		tst.w	$12(a0)
		bmi.s	loc_A5AA
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	loc_A5AA
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)
		tst.b	$28(a0)
		beq.s	loc_A5AA
		cmpi.b	#$A,$28(a0)
		beq.s	loc_A5AA
		neg.w	$10(a0)
		bchg	#0,1(a0)

loc_A5AA:
		subq.b	#1,$1E(a0)
		bpl.s	loc_A5C0
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_A5C0:
		tst.b	$28(a0)
		bne.s	Obj28_ChkDel
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; loc_A5d2:
Obj28_ChkDel:
		move.w	8(a0),d0
		sub.w	(MainCharacter+8).w,d0
		bcs.s	Obj28_Display3
		subi.w	#$180,d0
		bpl.s	Obj28_Display3
		tst.b	1(a0)
		bpl.w	DeleteObject
; loc_A5EA:
Obj28_Display3:
		bra.w	DisplaySprite
; ===========================================================================
; loc_A5EE:
Obj28_Prison:
		tst.b	1(a0)
		bpl.w	DeleteObject
		subq.w	#1,$36(a0)
		bne.w	Obj28_Display4
		move.b	#2,routine(a0)
		move.b	#3,$18(a0)
; loc_A60A:
Obj28_Display4:
		bra.w	DisplaySprite
; ===========================================================================
; loc_A60E:
Obj28_FlickyWait:
		bsr.w	ChkAnimalInRange
		bcc.s	loc_A62A
		move.w	$32(a0),$10(a0)
		move.w	$34(a0),$12(a0)
		move.b	#$E,routine(a0)
		bra.w	Obj28_Fly
; ---------------------------------------------------------------------------

loc_A62A:
		bra.w	Obj28_ChkDel
; ===========================================================================
; loc_A62E:
Obj28_FlickyJump:
		bsr.w	ChkAnimalInRange
		bpl.s	loc_A664
		clr.w	$10(a0)
		clr.w	$32(a0)
		bsr.w	ObjectMove
		addi.w	#$18,$12(a0)
		bsr.w	AnimalJump
		bsr.w	AnimalFaceSonic
		subq.b	#1,$1E(a0)
		bpl.s	loc_A664
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_A664:
		bra.w	Obj28_ChkDel
; ===========================================================================
; loc_A668:
Obj28_RabbitWait:
		bsr.w	ChkAnimalInRange
		bpl.s	loc_A6BE
		move.w	$32(a0),$10(a0)
		move.w	$34(a0),$12(a0)
		move.b	#4,routine(a0)
		bra.w	Obj28_Walk
; ===========================================================================
; loc_A684:
Obj28_DoubleBounce:
		bsr.w	ObjectMoveAndFall
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	loc_A6BE
		move.b	#0,$1A(a0)
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	loc_A6BE
		not.b	$29(a0)
		bne.s	loc_A6B4
		neg.w	$10(a0)
		bchg	#0,1(a0)

loc_A6B4:
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

loc_A6BE:
		bra.w	Obj28_ChkDel
; ===========================================================================
; loc_A6C2:
Obj28_LandJump:
		bsr.w	ChkAnimalInRange
		bpl.s	loc_A6DC
		clr.w	$10(a0)
		clr.w	$32(a0)
		bsr.w	ObjectMoveAndFall
		bsr.w	AnimalJump
		bsr.w	AnimalFaceSonic

loc_A6DC:
		bra.w	Obj28_ChkDel
; ===========================================================================
; loc_A6E0:
Obj28_SingleBounce:
		bsr.w	ChkAnimalInRange
		bpl.s	loc_A71A
		bsr.w	ObjectMoveAndFall
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	loc_A71A
		move.b	#0,$1A(a0)
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	loc_A71A
		neg.w	$10(a0)
		bchg	#0,1(a0)
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

loc_A71A:
		bra.w	Obj28_ChkDel
; ===========================================================================
; loc_A71E:
Obj28_FlyBounce:
		bsr.w	ChkAnimalInRange
		bpl.s	loc_A76E
		bsr.w	ObjectMove
		addi.w	#$18,$12(a0)
		tst.w	$12(a0)
		bmi.s	loc_A758
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	loc_A758
		not.b	$29(a0)
		bne.s	loc_A74E
		neg.w	$10(a0)
		bchg	#0,1(a0)

loc_A74E:
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

loc_A758:
		subq.b	#1,$1E(a0)
		bpl.s	loc_A76E
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_A76E:
		bra.w	Obj28_ChkDel

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_A772:
AnimalJump:
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	return_A798
		move.b	#0,$1A(a0)
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	return_A798
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

return_A798:
		rts
; End of function AnimalJump


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_A79A:
AnimalFaceSonic:
		bset	#0,1(a0)
		move.w	8(a0),d0
		sub.w	(MainCharacter+8).w,d0
		bcc.s	return_A7B0
		bclr	#0,1(a0)

return_A7B0:
		rts
; End of function AnimalFaceSonic


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_A7B2:
ChkAnimalInRange:
		move.w	(MainCharacter+8).w,d0
		sub.w	8(a0),d0
		subi.w	#$B8,d0
		rts 
; End of function ChkAnimalInRange

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 29 - "100 points" text
; ---------------------------------------------------------------------------
; Sprite_A7C0: Obj_0x29_Enemy_Points:
Obj29:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj29_Index(pc,d0.w),d1
		jmp	Obj29_Index(pc,d1.w)
; ===========================================================================
; off_A7CE: Enemy_Points_Index:
Obj29_Index:	offsetTable
		offsetTableEntry.w Obj29_Init
		offsetTableEntry.w Obj29_Main
; ===========================================================================
; loc_A7d2:
Obj29_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj29_MapUnc_A882,4(a0)
		move.w	#$4AC,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#8,$19(a0)
		move.w	#-$300,$12(a0)		; set initial speed (upwards)
; loc_A800:
Obj29_Main:
		tst.w	$12(a0)
		bpl.w	DeleteObject
		bsr.w	ObjectMove
		addi.w	#$18,$12(a0)		; slow down (apply gravity)
		bra.w	DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj28_MapUnc_A816:	binclude	"mappings/sprite/obj28_a.bin"
Obj28_MapUnc_A83A:	binclude	"mappings/sprite/obj28_b.bin"
Obj28_MapUnc_A85E:	binclude	"mappings/sprite/obj28_c.bin"
Obj29_MapUnc_A882:	binclude	"mappings/sprite/obj29.bin"
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object XX - Crabmeat from GHZ (leftover from S1)
; ---------------------------------------------------------------------------
; Sprite_A8F0: S1_Crabmeat:
S1Obj1F:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	S1Obj1F_Index(pc,d0.w),d1
		jmp	S1Obj1F_Index(pc,d1.w)
; ===========================================================================
; off_A8FE:
S1Obj1F_Index:	offsetTable
		offsetTableEntry.w S1Obj1F_Init
		offsetTableEntry.w S1Obj1F_Main
		offsetTableEntry.w S1Obj1F_Delete
		offsetTableEntry.w S1Obj1F_BallInit
		offsetTableEntry.w S1Obj1F_BallMain
; ===========================================================================
; loc_A908:
S1Obj1F_Init:
		move.b	#$10,$16(a0)
		move.b	#8,$17(a0)
		move.l	#S1Obj1F_MapUnc_AB4C,4(a0)
		move.w	#$400,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#6,$20(a0)
		move.b	#$15,$19(a0)
		bsr.w	ObjectMoveAndFall
		jsr	(ObjHitFloor).l
		tst.w	d1
		bpl.s	return_A95E
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		move.w	#0,$12(a0)
		addq.b	#2,routine(a0)

return_A95E:
		rts
; ===========================================================================
; loc_A960:
S1Obj1F_Main:
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	S1Obj1F_States(pc,d0.w),d1
		jsr	S1Obj1F_States(pc,d1.w)
		lea	(Ani_S1obj1F).l,a1
		bsr.w	AnimateSprite
		bra.w	MarkObjGone
; ===========================================================================
; off_A97C:
S1Obj1F_States:	offsetTable
		offsetTableEntry.w S1Obj1F_WaitFire
		offsetTableEntry.w S1Obj1F_WalkOnFloor
; ===========================================================================
; loc_A980:
S1Obj1F_WaitFire:
		subq.w	#1,$30(a0)
		bpl.s	return_A9BA
		tst.b	1(a0)
		bpl.s	loc_A994
		bchg	#1,$32(a0)
		bne.s	S1Obj1F_MakeFire

loc_A994:
		addq.b	#2,$25(a0)
		move.w	#127,$30(a0)		; wait just over 2 seconds
		move.w	#$80,$10(a0)		; move Crabmeat to the right
		bsr.w	S1Obj1F_SetAni
		addq.b	#3,d0
		move.b	d0,$1C(a0)
		bchg	#0,$22(a0)
		bne.s	return_A9BA
		neg.w	$10(a0)

return_A9BA:
		rts
; ---------------------------------------------------------------------------
; loc_A9BC:
S1Obj1F_MakeFire:
		move.w	#60-1,$30(a0)		; wait 1 second
		move.b	#6,$1C(a0)		; use firing animation
		bsr.w	SingleObjLoad
		bne.s	S1Obj1F_MakeFire2
		_move.b	#$1F,0(a1)		; load obj1F (left Crabmeat bullet)
		move.b	#6,routine(a1)
		move.w	8(a0),8(a1)
		subi.w	#$10,8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#-$100,$10(a1)
; loc_A9F2:
S1Obj1F_MakeFire2:
		bsr.w	SingleObjLoad
		bne.s	return_AA1C
		_move.b	#$1F,0(a1)		; load obj1F (right Crabmeat bullet)
		move.b	#6,routine(a1)
		move.w	8(a0),8(a1)
		addi.w	#$10,8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#$100,$10(a1)

return_AA1C:
		rts
; ===========================================================================
; loc_AA1E:
S1Obj1F_WalkOnFloor:
		subq.w	#1,$30(a0)
		bmi.s	loc_AA72
		bsr.w	ObjectMove
		bchg	#0,$32(a0)
		bne.s	loc_AA58
		move.w	8(a0),d3
		addi.w	#$10,d3
		btst	#0,$22(a0)
		beq.s	loc_AA44
		subi.w	#$20,d3

loc_AA44:
		jsr	(ObjHitFloor2).l
		cmpi.w	#-8,d1
		blt.s	loc_AA72
		cmpi.w	#$C,d1
		bge.s	loc_AA72
		rts
; ---------------------------------------------------------------------------
loc_AA58:
		jsr	(ObjHitFloor).l
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	S1Obj1F_SetAni
		addq.b	#3,d0
		move.b	d0,$1C(a0)
		rts
; ---------------------------------------------------------------------------

loc_AA72:
		subq.b	#2,$25(a0)
		move.w	#$3B,$30(a0)
		move.w	#0,$10(a0)
		bsr.w	S1Obj1F_SetAni
		move.b	d0,$1C(a0)
		rts

; ---------------------------------------------------------------------------
; Subroutine to	set the	correct	animation for a	Crabmeat
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||

; loc_AA8C:
S1Obj1F_SetAni:
		moveq	#0,d0
		move.b	$26(a0),d3
		bmi.s	S1Obj1F_SlopeAni
		cmpi.b	#6,d3
		bcs.s	return_AAA6
		moveq	#1,d0
		btst	#0,$22(a0)
		bne.s	return_AAA6
		moveq	#2,d0

return_AAA6:
		rts
; ---------------------------------------------------------------------------
; loc_AAA8:
S1Obj1F_SlopeAni:
		cmpi.b	#-6,d3
		bhi.s	return_AABA
		moveq	#2,d0
		btst	#0,$22(a0)
		bne.s	return_AABA
		moveq	#1,d0

return_AABA:
		rts
; ===========================================================================
; loc_AABC:
S1Obj1F_Delete:
		bra.w	DeleteObject

; ===========================================================================
; ---------------------------------------------------------------------------
; Sub-object - missile that the	Crabmeat throws
; ---------------------------------------------------------------------------
; loc_AAC0:
S1Obj1F_BallInit:
		addq.b	#2,routine(a0)
		move.l	#S1Obj1F_MapUnc_AB4C,4(a0)
		move.w	#$400,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#$87,$20(a0)
		move.b	#8,$19(a0)
		move.w	#-$400,$12(a0)
		move.b	#7,$1C(a0)
; loc_AAFA:
S1Obj1F_BallMain:
		lea	(Ani_S1obj1F).l,a1
		bsr.w	AnimateSprite
		bsr.w	ObjectMoveAndFall
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$C(a0),d0
		bcs.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; Animation script
; off_AB1C:
Ani_S1obj1F:	offsetTable
		offsetTableEntry.w byte_AB2C
		offsetTableEntry.w byte_AB2F
		offsetTableEntry.w byte_AB32
		offsetTableEntry.w byte_AB35
		offsetTableEntry.w byte_AB3A
		offsetTableEntry.w byte_AB3F
		offsetTableEntry.w byte_AB44
		offsetTableEntry.w byte_AB47
byte_AB2C:	dc.b	 $F, 0,$FF
byte_AB2F:	dc.b	 $F, 2,$FF
byte_AB32:	dc.b	 $F,$22,$FF
byte_AB35:	dc.b	 $F, 1,$21, 0,$FF
byte_AB3A:	dc.b	 $F,$21, 3, 2,$FF
byte_AB3F:	dc.b	 $F, 1,$23,$22,$FF
byte_AB44:	dc.b	 $F, 4,$FF
byte_AB47:	dc.b	  1, 5, 6,$FF
		even
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
S1Obj1F_MapUnc_AB4C:	binclude	"mappings/sprite/obj1F_S1.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 25 - A ring (usually only placed through placement mode)
; ---------------------------------------------------------------------------
; Sprite_AC28: Obj_0x25_Rings:
Obj25:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj25_Index(pc,d0.w),d1
		jmp	Obj25_Index(pc,d1.w)
; ===========================================================================
; off_AC36: Rings_Index
Obj25_Index:	offsetTable
		offsetTableEntry.w Obj25_MakeRings
		offsetTableEntry.w Obj25_Animate
		offsetTableEntry.w Obj25_Collect
		offsetTableEntry.w Obj25_Sparkle
		offsetTableEntry.w Obj25_Delete
; ===========================================================================
; This was used in Sonic 1,which didn't have a separate ring manager
; byte_AC40: Obj25_PosData:
		;     x distance,y distance
		dc.b	$10,0		; horizontal tight
		dc.b	$18,0
		dc.b	$20,0
		dc.b	0,$10		; vertical
		dc.b	0,$18
		dc.b	0,$20
		dc.b	$10,$10	; diagonal
		dc.b	$18,$18
		dc.b	$20,$20
		dc.b	$F0,$10
		dc.b	$E8,$18
		dc.b	$E0,$20
		dc.b	$10,8
		dc.b	$18,$10
		dc.b	$F0,8
		dc.b	$E8,$10
; ===========================================================================
; Evidently,there are still leftovers in the code itself relating to spawning
; and positioning the ring objects,even though it's unneeded now
; loc_AC60:
Obj25_MakeRings:
		move.l	a0,a1
		moveq	#0,d1
		move.w	8(a0),d2
		move.w	$C(a0),d3
		bra.s	loc_AC76

loc_AC6E:
		swap	d1
		bsr.w	SingleObjLoad
		bne.s	Obj25_Animate

loc_AC76:
		_move.b	#$25,0(a1)	; load obj25
		addq.b	#2,routine(a1)
		move.w	d2,8(a1)
		move.w	8(a0),$32(a1)
		move.w	d3,$C(a1)
		move.l	#Obj25_MapUnc_B036,4(a1)
		move.w	#$26BC,2(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#2,$18(a1)
		move.b	#$47,$20(a1)
		move.b	#8,$19(a1)
		move.b	$23(a0),$23(a1)
		move.b	d1,$34(a1)
		addq.w	#1,d1
		add.w	d5,d2
		add.w	d6,d3
		swap	d1
		dbf	d1,loc_AC6E
; loc_ACCE:
Obj25_Animate:
		move.b	(Rings_anim_frame).w,$1A(a0)
		move.w	$32(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	Obj25_Delete
		bra.w	DisplaySprite
; ===========================================================================
; loc_ACEA:
Obj25_Collect:
		addq.b	#2,routine(a0)
		move.b	#0,$20(a0)
		move.b	#1,$18(a0)
		bsr.w	CollectRing
		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		move.b	$34(a0),d1
		bset	d1,2(a2,d0.w)
; loc_Ad10:
Obj25_Sparkle:
		lea	(Ani_obj25).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================
; loc_Ad1E:
Obj25_Delete:
		bra.w	DeleteObject

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_Ad22:
CollectRing:
		addq.w	#1,(Ring_count).w
		ori.b	#1,(Update_HUD_rings).w
		move.w	#SndID_Ring,d0
		cmpi.w	#100,(Ring_count).w
		bcs.s	loc_Ad5C
		bset	#1,(Extra_life_flags).w
		beq.s	loc_Ad50
		cmpi.w	#200,(Ring_count).w
		bcs.s	loc_Ad5C
		bset	#2,(Extra_life_flags).w
		bne.s	loc_Ad5C

loc_Ad50:
		addq.b	#1,(Life_count).w
		addq.b	#1,(Update_HUD_lives).w
		; leftover from Sonic 1,which had the extra life music in slot
		; $88 instead if $98 (which is now the Death Egg music slot)
		move.w	#S1MusID_ExtraLife,d0

loc_Ad5C:
		jmp	(PlaySound).l
; End of function CollectRing

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 37 - Scattering rings (generated when Sonic is hurt and has rings)
; ---------------------------------------------------------------------------
; Sprite_Ad62: Obj_0x37_Rings_Out:
Obj37:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj37_Index(pc,d0.w),d1
		jmp	Obj37_Index(pc,d1.w)
; ===========================================================================
; off_Ad70: Rings_Out_Index:
Obj37_Index:	offsetTable
		offsetTableEntry.w Obj37_Init
		offsetTableEntry.w Obj37_Main
		offsetTableEntry.w Obj37_Collect
		offsetTableEntry.w Obj37_Sparkle
		offsetTableEntry.w Obj37_Delete
; ===========================================================================
; loc_Ad7A:
Obj37_Init:
		move.l	a0,a1
		moveq	#0,d5
		move.w	(Ring_count).w,d5
		moveq	#32,d0		; 32 rings dropped max
		cmp.w	d0,d5
		bcs.s	loc_AD8A
		move.w	d0,d5

loc_AD8A:
		subq.w	#1,d5
		move.w	#$288,d4
		bra.s	Obj37_MakeRings
; ---------------------------------------------------------------------------
; loc_AD92:
Obj37_Loop:
		bsr.w	SingleObjLoad
		bne.w	Obj37_ResetCounter
; loc_AD9A:
Obj37_MakeRings:
		_move.b	#$37,0(a1)		; load obj37 (scattered rings)
		addq.b	#2,routine(a1)
		move.b	#8,$16(a1)
		move.b	#8,$17(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#Obj25_MapUnc_B036,4(a1)
		move.w	#$26BC,2(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#$47,$20(a1)
		move.b	#8,$19(a1)
		move.b	#-1,(Ring_spill_anim_counter).w
		tst.w	d4
		bmi.s	loc_AE12
		move.w	d4,d0
		bsr.w	CalcSine
		move.w	d4,d2
		lsr.w	#8,d2
		asl.w	d2,d0
		asl.w	d2,d1
		move.w	d0,d2
		move.w	d1,d3
		addi.b	#$10,d4
		bcc.s	loc_AE12
		subi.w	#$80,d4
		bcc.s	loc_AE12
		move.w	#$288,d4

loc_AE12:
		move.w	d2,$10(a1)
		move.w	d3,$12(a1)
		neg.w	d2
		neg.w	d4
		dbf	d5,Obj37_Loop
; loc_AE22:
Obj37_ResetCounter:
		move.w	#0,(Ring_count).w		; clear ring count
		move.b	#$80,(Update_HUD_rings).w	; update ring counter
		move.b	#0,(Extra_life_flags).w
		move.w	#SndID_RingSpill,d0
		jsr	(PlaySound).l
; ===========================================================================
; loc_AE3E:
Obj37_Main:
		move.b	(Ring_spill_anim_frame).w,$1A(a0)
		bsr.w	ObjectMove
		addi.w	#$18,$12(a0)
		bmi.s	Obj37_ChkDel
		move.b	(Vint_runcount+3).w,d0
		add.b	d7,d0
		andi.b	#3,d0
		bne.s	Obj37_ChkDel
		jsr	(loc_138F4).l
		tst.w	d1
		bpl.s	Obj37_ChkDel
		add.w	d1,$C(a0)
		move.w	$12(a0),d0
		asr.w	#2,d0
		sub.w	d0,$12(a0)
		neg.w	$12(a0)
; loc_AE78:
Obj37_ChkDel:
		tst.b	(Ring_spill_anim_counter).w
		beq.s	Obj37_Delete
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$C(a0),d0
		bcs.s	Obj37_Delete
		bra.w	DisplaySprite
; ===========================================================================
; loc_AE90:
Obj37_Collect:
		addq.b	#2,routine(a0)
		move.b	#0,$20(a0)
		move.b	#1,$18(a0)
		bsr.w	CollectRing
; loc_AEA4:
Obj37_Sparkle:
		lea	(Ani_obj25).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; loc_AEB2:
Obj37_Delete:
		bra.w	DeleteObject

;===============================================================================
; Object 0x4B - Big Ring (Special Stage Access) 
;               Unused - Sonic 1 LeftOver
; [ Begin ]
;===============================================================================
Obj_0x4B_Big_Ring: ; loc_AEB6:  
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Big_Ring_Index(pc,d0),d1  ; loc_AEC4
		jmp     Big_Ring_Index(pc,d1)      ; loc_AEC4
Big_Ring_Index: ; loc_AEC4:
		dc.w    loc_AECC-Big_Ring_Index
		dc.w    loc_AF1A-Big_Ring_Index
		dc.w    loc_AF38-Big_Ring_Index
		dc.w    loc_AF7C-Big_Ring_Index
loc_AECC:		
		move.l	#Big_Ring_Mappings,4(a0) ; loc_B09A
		move.w	#$2400,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		ori.b   #4,1(a0)
		move.b	#$40,$19(a0)
		tst.b	1(a0)
		bpl.s	loc_AF1A
		cmpi.b	#6,(Emerald_count).w
		beq.w	loc_AF7C
		cmpi.w	#50,(Ring_count).w
		bcc.s	loc_AF04
		rts
loc_AF04:
		addq.b	#2,$24(a0)
		move.b	#2,$18(a0)
		move.b	#$52,$20(a0)
		move.w	#$C40,(BigRingGraphics).w
loc_AF1A:
		move.b	(Rings_anim_frame).w,$1A(a0)
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject            ; loc_d3B4
		bra.w	DisplaySprite           ; loc_d3C2
loc_AF38:
		subq.b	#2,$24(a0)
		move.b	#0,$20(a0)
		bsr.w	SingleObjLoad        ; loc_E772
		bne.w	loc_AF70
		_move.b	#$7C,0(a1)     ; Call Object 0x7C - Big Ring Flash
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	A0,$3C(a1)
		move.w	(MainCharacter+8).w,d0
		cmp.w	8(a0),d0
		bcs.s	loc_AF70
		bset	#0,1(a1)
loc_AF70:
		move.w	#SndID_EnterGiantRing,d0
		jsr	(PlaySound).l             ; loc_14C6
		bra.s	loc_AF1A
loc_AF7C:
		bra.w	DeleteObject            ; loc_d3B4
;=============================================================================== 
; Object 0x4B - Big Ring (Special Stage Access)   
;               Unused - Sonic 1 LeftOver
; [ End ]
;===============================================================================  

;=============================================================================== 
; Object 0x7C - Big Ring Flash (Special Stage Access)   
;               Unused - Sonic 1 LeftOver
; [ Begin ]
;===============================================================================   
Obj_0x7C_Big_Ring_Flash: ; loc_AF80: 
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Big_Ring_Flash_Index(pc,d0),d1   ; loc_AF8E
		jmp     Big_Ring_Flash_Index(pc,d1)       ; loc_AF8E
Big_Ring_Flash_Index: ; loc_AF8E:
		dc.w    loc_AF94-Big_Ring_Flash_Index
		dc.w    loc_AFC2-Big_Ring_Flash_Index
		dc.w    loc_B02A-Big_Ring_Flash_Index
loc_AF94:		
		addq.b	#2,$24(a0)
		move.l	#Big_Ring_Flash_Mappings,4(a0) ; loc_B19A
		move.w	#$2462,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		ori.b   #4,1(a0)
		move.b	#0,$18(a0)
		move.b	#$20,$19(a0)
		move.b	#$FF,$1A(a0)
loc_AFC2:  
		bsr.s	loc_AFDC
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject            ; loc_d3B4
		bra.w	DisplaySprite           ; loc_d3C2 
loc_AFDC:
		subq.b	#1,$1E(a0)
		bpl.s	loc_B01A
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#8,$1A(a0)
		bcc.s	loc_B01C
		cmpi.b	#3,$1A(a0)
		bne.s	loc_B01A
		move.l	$3C(a0),A1
		move.b	#6,$24(a1)
		move.b	#$1C,(MainCharacter+$1C).w
		move.b	#1,(Enter_SpecialStage_flag).w
		clr.b   (Invincibility_flag).w
		clr.b   (Shield_flag).w
loc_B01A:
		rts
loc_B01C:
		addq.b	#2,$24(a0)
		move.w	#0,(MainCharacter).w
		addq.l	#4,sp
		rts
loc_B02A:
		bra.w	DeleteObject            ; loc_d3B4

; ===========================================================================
; Animation script
; off_B02E:
Ani_obj25:	offsetTable
		offsetTableEntry.w byte_B030
byte_B030:	dc.b   5, 4, 5, 6, 7,$FC
		even

; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj25_MapUnc_B036:	binclude	"mappings/sprite/obj25.bin"

Big_Ring_Mappings: ; loc_B09A:
		dc.w    Big_Ring_Map_01-Big_Ring_Mappings
		dc.w    Big_Ring_Map_02-Big_Ring_Mappings
		dc.w    Big_Ring_Map_03-Big_Ring_Mappings
		dc.w    Big_Ring_Map_04-Big_Ring_Mappings
Big_Ring_Map_01: ; loc_B0A2:
		dc.w	$000A
		dc.l	$E0080000,$0000FFE8,$E0080003,$00010000
		dc.l	$E80C0006,$0003FFE0,$E80C000A,$00050000
		dc.l	$F007000E,$0007FFE0,$F0070016,$000B0010
		dc.l	$100C001E,$000FFFE0,$100C0022,$00110000
		dc.l	$18080026,$0013FFE8,$18080029,$00140000
Big_Ring_Map_02: ; loc_B0F4:
		dc.w	$0008
		dc.l	$E00C002C,$0016FFF0,$E8080030,$0018FFE8
		dc.l	$E8090033,$00190000,$F0070039,$001CFFE8
		dc.l	$F8050041,$00200008,$08090045,$00220000
		dc.l	$1008004B,$0025FFE8,$180C004E,$0027FFF0
Big_Ring_Map_03: ; loc_B136:
		dc.w	$0004
		dc.l	$E0070052,$0029FFF4,$E0030852,$08290004
		dc.l	$0007005A,$002DFFF4,$0003085A,$082d0004
Big_Ring_Map_04: ; loc_B158:
		dc.w	$0008
		dc.l	$E00C082C,$0816FFF0,$E8080830,$08180000
		dc.l	$E8090833,$0819FFE8,$F0070839,$081C0008
		dc.l	$F8050841,$0820FFE8,$08090845,$0822FFE8
		dc.l	$1008084B,$08250000,$180C084E,$0827FFF0 
Big_Ring_Flash_Mappings: ; loc_B19A:
		dc.w    Big_Ring_Flash_Map_01-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_02-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_03-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_04-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_05-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_06-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_07-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_08-Big_Ring_Flash_Mappings
Big_Ring_Flash_Map_01: ; loc_B1AA:
		dc.w	$0002
		dc.l	$E00F0000,$00000000,$000F1000,$10000000
Big_Ring_Flash_Map_02: ; loc_B1BC:
		dc.w	$0004
		dc.l	$E00F0010,$0008FFF0,$E0070020,$00100010
		dc.l	$000F1010,$1008FFF0,$00071020,$10100010
Big_Ring_Flash_Map_03: ; loc_B1DE:
		dc.w	$0004
		dc.l	$E00F0028,$0014FFE8,$E00B0038,$001C0008
		dc.l	$000F1028,$1014FFE8,$000B1038,$101C0008
Big_Ring_Flash_Map_04: ; loc_B200:
		dc.w	$0004
		dc.l	$E00F0834,$081AFFE0,$E00F0034,$001A0000
		dc.l	$000F1834,$181AFFE0,$000F1034,$101A0000
Big_Ring_Flash_Map_05: ; loc_B222:
		dc.w	$0004
		dc.l	$E00B0838,$081CFFE0,$E00F0828,$0814FFF8
		dc.l	$000B1838,$181CFFE0,$000F1828,$1814FFF8
Big_Ring_Flash_Map_06: ; loc_B244:
		dc.w	$0004
		dc.l	$E0070820,$0810FFE0,$E00F0810,$0808FFF0
		dc.l	$00071820,$1810FFE0,$000F1810,$1808FFF0
Big_Ring_Flash_Map_07: ; loc_B266:
		dc.w	$0002
		dc.l	$E00F0800,$0800FFE0,$000F1800,$1800FFE0
Big_Ring_Flash_Map_08: ; loc_B278:
		dc.w	$0004
		dc.l	$E00F0044,$0022FFE0,$E00F0844,$08220000
		dc.l	$000F1044,$1022FFE0,$000F1844,$18220000
		nop		             ; Filler
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 26 - Monitor
;
; The power-ups themselves are handled by the next object. This just does the
; monitor collision and graphics.
; ---------------------------------------------------------------------------
; Sprite_B29C: Obj_0x26_Monitors:
Obj26:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj26_Index(pc,d0.w),d1
		jmp	Obj26_Index(pc,d1.w)
; ===========================================================================
; off_B2AA: Monitors_Index:
Obj26_Index:	offsetTable
		offsetTableEntry.w Obj26_Init
		offsetTableEntry.w Obj26_Main
		offsetTableEntry.w Obj26_SpawnIcon
		offsetTableEntry.w Obj26_Animate
		offsetTableEntry.w Obj26_Delete
; ===========================================================================
; loc_B2B4:
Obj26_Init:
		addq.b	#2,routine(a0)
		move.b	#$E,$16(a0)
		move.b	#$E,$17(a0)
		move.l	#Obj26_MapUnc_B6d2,4(a0)
		move.w	#$680,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#$F,$19(a0)

		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		bclr	#7,2(a2,d0.w)
		btst	#0,2(a2,d0.w)		; if this bit is set it means the monitor is already broken
		beq.s	Obj26_SetFrame
		move.b	#8,routine(a0)		; set monitor to "broken" state
		move.b	#$B,$1A(a0)
		rts
; ---------------------------------------------------------------------------
; loc_B30E:
Obj26_SetFrame:
		move.b	#$46,$20(a0)
		move.b	$28(a0),$1C(a0)		; subtype = icon to display
; loc_B31A:
Obj26_Main:
		move.b	$25(a0),d0		; is the monitor set to fall?
		beq.s	SolidObject_Monitor	; if not,branch
		subq.b	#2,d0
		bne.s	Obj26_Fall

; Obj26_Stand:
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		bsr.w	loc_FBC0
		btst	#3,$22(a1)		; is Sonic/Tails standing on top of the monitor?
		bne.w	Obj26_StandOnTop	; if yes,branch
		clr.b	$25(a0)
		bra.w	Obj26_Animate
; loc_B344:
Obj26_StandOnTop:
		move.w	#$10,d3
		move.w	8(a0),d2
		bsr.w	loc_F8E4
		bra.w	Obj26_Animate
; ===========================================================================
; loc_B354:
Obj26_Fall:
		bsr.w	ObjectMoveAndFall
		jsr	(ObjHitFloor).l
		tst.w	d1			; is the monitor IN the ground?
		bpl.w	Obj26_Animate		; if not,branch
		add.w	d1,$C(a0)		; move the monitor out of the ground
		clr.w	$12(a0)
		clr.b	$25(a0)			; stop the monitor from falling
		bra.w	Obj26_Animate
; loc_B374:
SolidObject_Monitor:
		move.w	#$1A,d1
		move.w	#$F,d2
		bsr.w	loc_B5F0
		beq.w	loc_B3E4
		tst.w	$12(a1)
		bmi.s	loc_B392
		cmpi.b	#2,$1C(a1)
		beq.s	loc_B3E4

loc_B392:
		tst.w	d1
		bpl.s	loc_B3A8
		sub.w	d3,$C(a1)
		bsr.w	loc_FAF2
		move.b	#2,$25(a0)
		bra.w	Obj26_Animate
; ===========================================================================

loc_B3A8:
		tst.w	d0
		beq.w	loc_B3CE
		bmi.s	loc_B3B8
		tst.w	$10(a1)
		bmi.s	loc_B3CE
		bra.s	loc_B3BE

loc_B3B8:
		tst.w	$10(a1)
		bpl.s	loc_B3CE

loc_B3BE:
		sub.w	d0,8(a1)
		move.w	#0,$14(a1)
		move.w	#0,$10(a1)

loc_B3CE:
		btst	#1,$22(a1)
		bne.s	loc_B3F2
		bset	#5,$22(a1)
		bset	#5,$22(a0)
		bra.s	Obj26_Animate

loc_B3E4:
		btst	#5,$22(a0)
		beq.s	Obj26_Animate
		move.w	#1,$1C(a1)

loc_B3F2:
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
; ===========================================================================
; loc_B3FE:
Obj26_Animate:
		lea	(loc_B66A).l,a1
		bsr.w	AnimateSprite
; loc_B408:
Obj26_Delete:
		bra.w	MarkObjGone
; loc_B40C:
Obj26_SpawnIcon:
		addq.b	#2,routine(a0)
		move.b	#0,$20(a0)
		bsr.w	SingleObjLoad2
		bne.s	Obj26_SpawnSmoke
		_move.b	#$2E,0(a1)		; load obj2E
		move.w	8(a0),8(a1)		; set icon's position
		move.w	$C(a0),$C(a1)
		move.b	$1C(a0),$1C(a1)		; parent gets the item
; loc_B434:
Obj26_SpawnSmoke:
		bsr.w	SingleObjLoad2
		bne.s	loc_B450
		_move.b	#$27,0(a1)		; load obj27
		addq.b	#2,routine(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)

loc_B450:
		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		bset	#0,2(a2,d0.w)		; mark monitor as destroyed
		move.b	#$A,$1C(a0)
		bra.w	DisplaySprite

;=============================================================================== 
; Object 0x2E - Monitors Contents
; [ Begin ]
;===============================================================================		   
Obj_0x2E_Monitors_Contents: ; loc_B46A:		
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_B478(pc,d0),d1
		jmp     loc_B478(pc,d1)
loc_B478:
		dc.w    loc_B47E-loc_B478
		dc.w    loc_B4C2-loc_B478
		dc.w    loc_B5E4-loc_B478
loc_B47E:
		addq.b	#2,$24(a0)
		move.w	#$680,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$24,1(a0)
		move.b	#3,$18(a0)
		move.b	#8,$19(a0)
		move.w	#-$300,$12(a0)
		moveq	#0,d0
		move.b	$1C(a0),d0
		addq.b	#1,d0
		move.b	d0,$1A(a0)
		move.l	#Obj26_MapUnc_B6d2,A1  ; loc_B6d2
		add.b   d0,d0
		adda.w	(A1,d0),A1
		addq.w	#2,A1
		move.l	A1,4(a0)
loc_B4C2:
		bsr.s	loc_B4C8
		bra.w	DisplaySprite           ; loc_d3C2
loc_B4C8:
		tst.w	$12(a0)
		bpl.w	loc_B4DC
		bsr.w	ObjectMove              ; loc_d27A
		addi.w	#$18,$12(a0)
		rts
loc_B4DC:
		addq.b	#2,$24(a0)
		move.w	#$1D,$1E(a0)
		moveq	#0,d0
		move.b	$1C(a0),d0
		add.w   d0,d0
		move.w	Monitor_Subroutines(pc,d0),d0 ; loc_B4F6
		jmp     Monitor_Subroutines(pc,d0)     ; loc_B4F6
Monitor_Subroutines: ; loc_B4F6:
		dc.w    Monitor_Null-Monitor_Subroutines          ; loc_B50A
		dc.w    Monitor_SonicLife-Monitor_Subroutines     ; loc_B50C
		dc.w    Monitor_TailsLife-Monitor_Subroutines     ; loc_B51E
		dc.w    Monitor_Null-Monitor_Subroutines          ; loc_B50A
		dc.w    Monitor_Rings-Monitor_Subroutines         ; loc_B530
		dc.w    Monitor_Shoes-Monitor_Subroutines         ; loc_B56A
		dc.w    Monitor_Shield-Monitor_Subroutines        ; loc_B592
		dc.w    Monitor_Invincibility-Monitor_Subroutines ; loc_B5A8
		dc.w    Monitor_SuperSonic-Monitor_Subroutines    ; loc_B5d4
		dc.w    Monitor_Null-Monitor_Subroutines          ; loc_B50A
Monitor_Null: ; loc_B50A:
		rts
Monitor_SonicLife: ; loc_B50C:
		addq.b	#1,(Life_count).w
		addq.b	#1,(Update_HUD_lives).w
		move.w	#MusID_ExtraLife,d0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_TailsLife: ; loc_B51E:
		addq.b	#1,(Life_count).w
		addq.b	#1,(Update_HUD_lives).w
		move.w	#MusID_ExtraLife,d0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_Rings: ; loc_B530:
		addi.w	#10,(Ring_count).w
		ori.b   #1,(Update_HUD_rings).w
		cmpi.w	#100,(Ring_count).w
		bcs.s	loc_B560
		bset	#1,(Extra_life_flags).w
		beq.w	Monitor_SonicLife       ; loc_B50C
		cmpi.w	#200,(Ring_count).w
		bcs.s	loc_B560
		bset	#2,(Extra_life_flags).w
		beq.w	Monitor_SonicLife       ; loc_B50C
loc_B560:
		move.w	#SndID_Ring,d0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_Shoes: ; loc_B56A:
		move.b	#1,(Speed_shoes).w
		move.w	#$4B0,(MainCharacter+$34).w
		move.w	#$C00,(Sonic_top_speed).w
		move.w	#$18,(Sonic_acceleration).w
		move.w	#$80,(Sonic_deceleration).w
		move.w	#MusID_SpeedUp,d0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_Shield: ; loc_B592:
		move.b	#1,(Shield_flag).w
		move.b	#$38,(Shield).w
		move.w	#SndID_Shield,d0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_Invincibility: ; loc_B5A8:
		move.b	#1,(Invincibility_flag).w
		move.w	#$4B0,(MainCharacter+$32).w
		move.b	#$35,(InvincibilityStars).w
		tst.b	(Current_Boss_ID).w
		bne.s	loc_B5d2
		cmpi.w	#$C,(Current_Air).w
		bls.s   loc_B5d2
		move.w	#MusID_Invinc,d0
		jmp     (PlayMusic).l            ; loc_14C0
loc_B5d2:
		rts
Monitor_SuperSonic: ; loc_B5d4:
		move.b	#1,(Super_Sonic_palette).w
		move.w	#SndID_Shield,d0
		jmp     (PlayMusic).l            ; loc_14C0
loc_B5E4:
		subq.w	#1,$1E(a0)
		bmi.w	DeleteObject            ; loc_d3B4
		bra.w	DisplaySprite           ; loc_d3C2
loc_B5F0:
		lea	(MainCharacter).w,A1
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_B648
		move.w	d1,d3
		add.w   d3,d3
		cmp.w	d3,d0
		bhi.s	loc_B648
		move.b	$16(a1),d3
		ext.w   d3
		add.w   d3,d2
		move.w	$C(a1),d3
		sub.w   $C(a0),d3
		add.w   d2,d3
		bmi.s	loc_B648
		add.w   d2,d2
		cmp.w	d2,d3
		bcc.s	loc_B648
		tst.b	$2A(a1)
		bmi.s	loc_B648
		cmpi.b	#6,(MainCharacter+routine).w
		bcc.s	loc_B648
		tst.w	(Debug_placement_mode).w
		bne.s	loc_B648
		cmp.w	d0,d1
		bcc.s	loc_B63E
		add.w   d1,d1
		sub.w   d1,d0
loc_B63E:
		cmpi.w	#$10,d3
		bcs.s	loc_B64C
loc_B644:		
		moveq	#1,d1
		rts
loc_B648:
		moveq	#0,d1
		rts
loc_B64C:
		moveq	#0,d1
		move.b	$19(a0),d1
		addq.w	#4,d1
		move.w	d1,d2
		add.w   d2,d2
		add.w   8(a1),d1
		sub.w   8(a0),d1
		bmi.s	loc_B644
		cmp.w	d2,d1
		bcc.s	loc_B644
		moveq	#-1,d1
		rts  
loc_B66A:
		dc.w    loc_B680-loc_B66A
		dc.w    loc_B684-loc_B66A
		dc.w    loc_B68C-loc_B66A
		dc.w    loc_B694-loc_B66A
		dc.w    loc_B69C-loc_B66A
		dc.w    loc_B6A4-loc_B66A
		dc.w    loc_B6AC-loc_B66A
		dc.w    loc_B6B4-loc_B66A
		dc.w    loc_B6BC-loc_B66A
		dc.w    loc_B6C4-loc_B66A
		dc.w    loc_B6CC-loc_B66A
loc_B680:
		dc.b	$01,$00,$01,$FF
loc_B684:
		dc.b	$01,$00,$02,$02,$01,$02,$02,$FF
loc_B68C:
		dc.b	$01,$00,$03,$03,$01,$03,$03,$FF
loc_B694:
		dc.b	$01,$00,$04,$04,$01,$04,$04,$FF
loc_B69C:
		dc.b	$01,$00,$05,$05,$01,$05,$05,$FF
loc_B6A4:
		dc.b	$01,$00,$06,$06,$01,$06,$06,$FF
loc_B6AC:
		dc.b	$01,$00,$07,$07,$01,$07,$07,$FF
loc_B6B4:
		dc.b	$01,$00,$08,$08,$01,$08,$08,$FF
loc_B6BC:
		dc.b	$01,$00,$09,$09,$01,$09,$09,$FF
loc_B6C4:
		dc.b	$01,$00,$0A,$0A,$01,$0A,$0A,$FF
loc_B6CC:
		dc.b	$02,$00,$01,$0B,$FE,$01
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj26_MapUnc_B6d2:	binclude	"mappings/sprite/obj26.bin"
; ===========================================================================
		nop
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0E - Sonic and Tails on the title screen
; ---------------------------------------------------------------------------
; Sprite_B7B4: Obj_0x0E_Sonic_Tails:
Obj0E:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj0E_Index(pc,d0.w),d1
		jmp	Obj0E_Index(pc,d1.w)
; ===========================================================================
; off_B7C2:
Obj0E_Index:	offsetTable
		offsetTableEntry.w Obj0E_Init
		offsetTableEntry.w Obj0E_Display
		offsetTableEntry.w Obj0E_Move
		offsetTableEntry.w Obj0E_Display2
; ===========================================================================
; loc_B7CA:
Obj0E_Init:
		addq.b	#2,routine(a0)
		move.w	#$148,8(a0)
		move.w	#$C4,$A(a0)
		move.l	#Obj0E_MapUnc_BAA2,4(a0)
		move.w	#$4200,2(a0)
		move.b	#1,$18(a0)
		move.b	#$1D,$1F(a0)
		tst.b	$1A(a0)
		beq.s	Obj0E_Display
		move.w	#$FC,8(a0)
		move.w	#$CC,$A(a0)
		move.w	#$2200,2(a0)
; loc_B80C:
Obj0E_Display:
		bra.w	DisplaySprite
; ---------------------------------------------------------------------------
; The rest of this object's code is unused due to the above branch to
; DisplaySprite; causes Sonic and Tails to rise like the Sonic 1 title
; loc_B810:
		subq.b	#1,$1F(a0)
		bpl.s	+
		addq.b	#2,routine(a0)
		bra.w	DisplaySprite
+
		rts
; ===========================================================================
; loc_B820:
Obj0E_Move:
		subi.w	#8,$A(a0)
		cmpi.w	#$96,$A(a0)
		bne.s	+
		addq.b	#2,routine(a0)
+
		bra.w	DisplaySprite
; ===========================================================================
; loc_B836:
Obj0E_Display2:
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0F - Mappings test?
; ---------------------------------------------------------------------------
; Pressing C causes its mappings to increment by one,while pressing B changes
; a value before crashing the game; this did NOT exist in Sonic 1's prototype
; Sprite_B83E: Obj_0x0F:
Obj0F:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj0F_Index(pc,d0.w),d1
		jsr	Obj0F_Index(pc,d1.w)
		bra.w	DisplaySprite
; ===========================================================================
; off_B84C:
Obj0F_Index:	offsetTable
		offsetTableEntry.w Obj0F_Init
		offsetTableEntry.w Obj0F_Main
		offsetTableEntry.w Obj0F_Main
; ===========================================================================
; loc_B852:
Obj0F_Init:
		addq.b	#2,routine(a0)
		move.w	#$90,8(a0)
		move.w	#$90,$A(a0)
		move.l	#Obj0F_MapUnc_B896,4(a0)
		move.w	#$680,2(a0)
		bsr.w	Adjust2PArtPointer
; loc_B874:
Obj0F_Main:
		move.b	(Ctrl_1_Press).w,d0
		btst	#5,d0		; is C pressed?
		beq.s	loc_B888	; if not,branch
		addq.b	#1,$1A(a0)	; increment mappings by one
		andi.b	#$F,$1A(a0)	; limit to $F mappings

loc_B888:
		btst	#4,d0		; is B pressed?
		beq.s	return_B894	; if not,branch
		bchg	#0,(Two_player_mode+1).w	; clear this value and... crash the game?

return_B894:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj0F_MapUnc_B896:	binclude	"mappings/sprite/obj0F.bin"

; ---------------------------------------------------------------------------
; (unknown) animation script
off_B956:	dc.w	byte_B958-off_B956
byte_B958:	dc.b	7,0,1,2,3,4,5,6,7,$FE,2,0,0,2,$1F,0
		dc.b	1,$FF

; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
S1Obj0F_MapUnc_B96A:	binclude	"mappings/sprite/obj0F_S1.bin"	; "PRESS START BUTTON" text and TM; leftover from Sonic 1
Obj0E_MapUnc_BAA2:	binclude	"mappings/sprite/obj0E.bin"	; Sonic and Tails on the title screen
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 34 - Sonic 1 title cards
; ---------------------------------------------------------------------------
; Sprite_BB54: Obj_0x34_Title_Cards:
Obj34:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj34_Index(pc,d0.w),d1
		jmp	Obj34_Index(pc,d1.w)
; ===========================================================================
; off_BB62: Title_Cards_Index:
Obj34_Index:	offsetTable
		offsetTableEntry.w Obj34_Init
		offsetTableEntry.w Obj34_ChkPos
		offsetTableEntry.w Obj34_Wait
		offsetTableEntry.w Obj34_Wait
; ===========================================================================
; loc_BB6A:
Obj34_Init:
		move.l	a0,a1
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		move.w	d0,d2
		lea	(Obj34_ConData).l,a3
		lsl.w	#4,d0
		adda.w	d0,a3
		lea	(Obj34_ItemData).l,a2
		moveq	#3,d1
; loc_BB86: Title_Card_Loop:
Obj34_Loop:
		_move.b	#$34,0(a1)
		move.w	(a3),8(a1)
		move.w	(a3)+,$32(a1)
		move.w	(a3)+,$30(a1)
		move.w	(a2)+,$A(a1)
		move.b	(a2)+,routine(a1)
		move.b	(a2)+,d0
		bne.s	Obj34_MakeSprite
		move.b	d2,d0
; loc_BBA6: Title_Cards_MakeSprite:
Obj34_MakeSprite:
		move.b	d0,$1A(a1)
		move.l	#Obj34_MapUnc_C2A0,4(a1)
		move.w	#$8580,2(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#$78,$19(a1)
		move.b	#0,1(a1)
		move.b	#0,$18(a1)
		move.w	#$3C,$1E(a1)
		lea	$40(a1),a1
		dbf	d1,Obj34_Loop

; loc_BBDC:
Obj34_ChkPos:
		moveq	#$10,d1
		move.w	$30(a0),d0
		cmp.w	8(a0),d0
		beq.s	loc_BBF0
		bge.s	Obj34_Move
		neg.w	d1
; loc_BBEC:
Obj34_Move:
		add.w	d1,8(a0)

loc_BBF0:		
		move.w	8(a0),d0
		bmi.s	return_BC02
		cmpi.w	#$200,d0
		bcc.s	return_BC02
		rts
; ---------------------------------------------------------------------------
		bra.w	DisplaySprite

return_BC02:
		rts
; ===========================================================================
; loc_BC04:
Obj34_Wait:
		tst.w	$1E(a0)
		beq.s	Obj34_ChkPos2
		subq.w	#1,$1E(a0)
		rts
; ---------------------------------------------------------------------------
		bra.w	DisplaySprite
; ===========================================================================
; loc_BC14:
Obj34_ChkPos2:
		tst.b	1(a0)
		bpl.s	Obj34_ChangeArt
		moveq	#$20,d1
		move.w	$32(a0),d0
		cmp.w	8(a0),d0
		beq.s	Obj34_ChangeArt
		bge.s	Obj34_Move2
		neg.w	d1
; loc_BC2A:
Obj34_Move2:
		add.w	d1,8(a0)
		move.w	8(a0),d0
		bmi.s	return_BC40
		cmpi.w	#$200,d0
		bcc.s	return_BC40
		rts
; ---------------------------------------------------------------------------
		bra.w	DisplaySprite

return_BC40:
		rts
; ===========================================================================
; loc_BC42:
Obj34_ChangeArt:
		cmpi.b	#4,routine(a0)
		bne.s	Obj34_Delete
		moveq	#PLCID_StdExp,d0
		jsr	(LoadPLC).l
; loc_BC52:
Obj34_Delete:
		bra.w	DeleteObject
; ===========================================================================

results_screen_object macro y,routine,frame
	dc.w	y
	dc.b	routine,frame
    endm
; byte_BC56: Title_Cards_Main_Position:
Obj34_ItemData:
		results_screen_object	$d0,  2, 0		; name of zone
		results_screen_object	$E4,  2, 6		; ZONE
		results_screen_object	$EA,  2, 7		; ACT
		results_screen_object	$E0,  2,$A		; oval
; ---------------------------------------------------------------------------
; Title	card configuration data
; Format:
; 4 bytes per item (YYYY XXXX)
; 4 items per level (GREEN HILL,ZONE,ACT X,oval)
; ---------------------------------------------------------------------------
; word_BC66: Title_Cards_Config:
Obj34_ConData:	dc.w	0,$120,$FEFC,$13C,$414,$154,$214,$154
		dc.w	0,$120,$FEF4,$134,$40C,$14C,$20C,$14C
		dc.w	0,$120,$FEE0,$120,$3F8,$138,$1F8,$138
		dc.w	0,$120,$FEFC,$13C,$414,$154,$214,$154
		dc.w	0,$120,$FF04,$144,$41C,$15C,$21C,$15C
		dc.w	0,$120,$FF04,$144,$41C,$15C,$21C,$15C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C
		dc.w	0,$120,$FEE4,$124,$3EC,$3EC,$1EC,$12C

;=============================================================================== 
; Object 0x34 - Title Cards / Splash Screen
; [ End ]
;===============================================================================  
;=============================================================================== 
; Object 0x39 - Time Over / Game Over
; [ Begin ]
;=============================================================================== 
Obj_0x39_Time_Game_Over: ; loc_Bd76:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Time_Game_Over_Index(pc,d0),d1 ; loc_BD84
		jmp     Time_Game_Over_Index(pc,d1)     ; loc_BD84
Time_Game_Over_Index: ; loc_BD84:
		dc.w    loc_BD8A-Time_Game_Over_Index
		dc.w    loc_BDCE-Time_Game_Over_Index
		dc.w    loc_BDF0-Time_Game_Over_Index
loc_BD8A:
		tst.l	(Plc_Buffer).w
		beq.s	loc_BD92
		rts
loc_BD92:
		addq.b	#2,$24(a0)
		move.w	#$50,8(a0)
		btst	#0,$1A(a0)
		beq.s	loc_BDAA
		move.w	#$1F0,8(a0)
loc_BDAA:
		move.w	#$F0,$A(a0)
		move.l	#Time_Game_Over_Mappings,4(a0) ; loc_C558
		move.w	#$855E,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#0,1(a0)
		move.b	#0,$18(a0)
loc_BDCE:
		moveq	#$10,d1
		cmpi.w	#$120,8(a0)
		beq.s	loc_BDE4
		bcs.s	loc_BDDC
		neg.w	d1
loc_BDDC:
		add.w   d1,8(a0)
		bra.w	DisplaySprite           ; loc_d3C2
loc_BDE4:
		move.w	#$2D0,$1E(a0)
		addq.b	#2,$24(a0)
		rts
loc_BDF0:
		move.b	(Ctrl_1_Press).w,d0
		andi.b	#$70,d0
		bne.s	loc_BE10
		btst	#0,$1A(a0)
		bne.s	loc_BE34
		tst.w	$1E(a0)
		beq.s	loc_BE10
		subq.w	#1,$1E(a0)
		bra.w	DisplaySprite           ; loc_d3C2
loc_BE10:
		tst.b	(Time_Over_flag).w
		bne.s	loc_BE2A
		move.b	#S1GameModeID_ContinueScreen,(Game_Mode).w
		tst.b	(Continue_count).w
		bne.s	loc_BE34
		move.b	#GameModeID_SegaScreen,(Game_Mode).w
		bra.s	loc_BE34
loc_BE2A:
		clr.l   (Saved_Timer).w
		move.w	#1,(Level_Inactive_flag).w
loc_BE34:
		bra.w	DisplaySprite           ; loc_d3C2
;=============================================================================== 
; Object 0x39 - Time Over / Game Over
; [ End ]
;=============================================================================== 
;=============================================================================== 
; Object 0x3A - Level Results
; [ Begin ]
;=============================================================================== 
Obj_0x3A_Level_Results: ; loc_BE38:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Level_Results_Index(pc,d0),d1  ; loc_BE46
		jmp     Level_Results_Index(pc,d1)      ; loc_BE46
Level_Results_Index: ; loc_BE46:
		dc.w    loc_BE4E-Level_Results_Index
		dc.w    loc_BEAA-Level_Results_Index
		dc.w    loc_BEF6-Level_Results_Index
		dc.w    loc_BF66-Level_Results_Index
loc_BE4E:
		tst.l	(Plc_Buffer).w
		beq.s	loc_BE56
		rts
loc_BE56:
		move.l	A0,A1
		lea	(loc_C030).l,A2
		moveq	#6,d1
loc_BE60:		
		_move.b	#$3A,0(a1)
		move.w	(a2),8(a1)
		move.w	(a2)+,$0032(a1)
		move.w	(a2)+,$0030(a1)
		move.w	(a2)+,$000A(a1)
		move.b	(a2)+,$0024(a1)
		move.b	(a2)+,d0
		cmpi.b	#6,d0
		bne.s	loc_BE86
		add.b   (Current_Act).w,d0
loc_BE86:
		move.b	d0,$1A(a1)
		move.l	#Level_Results_Mappings,4(a1) ; loc_C5A8
		move.w	#$8580,2(a1)
		bsr.w	Adjust2PArtPointer2   ; loc_DC4C
		move.b	#0,1(a1)
		lea	$40(a1),A1
		dbf	d1,loc_BE60
loc_BEAA:
		moveq	#$10,d1
		move.w	$30(a0),d0
		cmp.w	8(a0),d0
		beq.s	loc_BEDC
		bge.s   loc_BEBA
		neg.w	d1
loc_BEBA:
		add.w   d1,8(a0)
loc_BEBE:		
		move.w	8(a0),d0
		bmi.s	loc_BEd0
		cmpi.w	#$200,d0
		bcc.s	loc_BEd0
		rts
		bra.w	DisplaySprite           ; loc_d3C2
loc_BEd0:
		rts
loc_BEd2:		
		move.b	#$E,$24(a0)
		bra.w	loc_BFDE
loc_BEDC:
		cmpi.b	#$E,($FFFFB724).w
		beq.s	loc_BEd2
		cmpi.b	#4,$1A(a0)
		bne.s	loc_BEBE
		addq.b	#2,$24(a0)
		move.w	#$B4,$1E(a0)
loc_BEF6:
		subq.w	#1,$1E(a0)
		bne.s	loc_BF00
		addq.b	#2,$24(a0)
loc_BF00:
		rts
		bra.w	DisplaySprite           ; loc_d3C2
		bsr.w	DisplaySprite           ; loc_d3C2
		move.b	#1,(Update_Bonus_score).w
		moveq	#0,d0
		tst.w	(Bonus_Countdown_1).w
		beq.s	loc_BF22
		addi.w	#10,d0
		subi.w	#10,(Bonus_Countdown_1).w
loc_BF22:
		tst.w	(Bonus_Countdown_2).w
		beq.s	loc_BF32
		addi.w	#10,d0
		subi.w	#10,(Bonus_Countdown_2).w
loc_BF32:
		tst.w	d0
		bne.s	loc_BF4C
		move.w	#SndID_TallyEnd,d0
		jsr	(PlaySound).l             ; loc_14C6
		addq.b	#2,$24(a0)
		move.w	#$B4,$1E(a0)
loc_BF4A:		
		rts
loc_BF4C:
		jsr	(AddPoints).l               ; (loc_22Fd0)      
		move.b	(Vint_runcount+3).w,d0
		andi.b	#3,d0
		bne.s	loc_BF4A
		move.w	#SndID_Blip,d0
		jmp	(PlaySound).l             ; loc_14C6
loc_BF66:
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		add.w   d0,d0
		add.b   (Current_Act).w,d0
		add.w   d0,d0
		move.w	word_BF9A(pc,d0),d0
		move.w	d0,(Current_ZoneAndAct).w
		clr.b   (Last_star_pole_hit).w
		tst.b	(Enter_SpecialStage_flag).w
		beq.s	loc_BF8E
		move.b	#GameModeID_SpecialStage,(Game_Mode).w
		bra.s	loc_BF94
loc_BF8E:
		move.w	#1,(Level_Inactive_flag).w
loc_BF94:
		rts
		bra.w	DisplaySprite           ; loc_d3C2
; ===========================================================================
; -------------------------------------------------------------------------------
; Main game level order

; One value per act. That value is the level/act number of the level to load when
; that act finishes.
; -------------------------------------------------------------------------------
word_BF9A: zoneOrderedTable 2,2
	zoneTableEntry.w  green_hill_zone_act_2		; GHZ1
	zoneTableEntry.w  wood_zone_act_1		; GHZ2
	zoneTableEntry.w  green_hill_zone_act_1		; OWZ1
	zoneTableEntry.w  green_hill_zone_act_1		; OWZ2
	zoneTableEntry.w  wood_zone_act_2		; WZ1
	zoneTableEntry.w  metropolis_zone_act_1		; WZ2
	zoneTableEntry.w  green_hill_zone_act_1		; SSZ1
	zoneTableEntry.w  green_hill_zone_act_1		; SSZ2
	zoneTableEntry.w  metropolis_zone_act_2		; MTZ1
	zoneTableEntry.w  hill_top_zone_act_1		; MTZ2
	zoneTableEntry.w  green_hill_zone_act_1		; MTZ3
	zoneTableEntry.w  green_hill_zone_act_1		; MTZ4
	zoneTableEntry.w  green_hill_zone_act_1		; BLZ1
	zoneTableEntry.w  green_hill_zone_act_1		; BLZ2
	zoneTableEntry.w  hill_top_zone_act_2		; HTZ1
	zoneTableEntry.w  green_hill_zone_act_1		; HTZ2
	zoneTableEntry.w  hidden_palace_zone_act_2	; HPZ1
	zoneTableEntry.w  oil_ocean_zone_act_1		; HPZ2
	zoneTableEntry.w  green_hill_zone_act_1		; RWZ1
	zoneTableEntry.w  green_hill_zone_act_1		; RWZ2
	zoneTableEntry.w  oil_ocean_zone_act_2		; OOZ1
	zoneTableEntry.w  dust_hill_zone_act_1		; OOZ2
	zoneTableEntry.w  dust_hill_zone_act_2		; DHZ1
	zoneTableEntry.w  casino_night_zone_act_1	; DHZ2
	zoneTableEntry.w  casino_night_zone_act_2	; CNZ1
	zoneTableEntry.w  chemical_plant_zone_act_1	; CNZ2
	zoneTableEntry.w  chemical_plant_zone_act_2	; CPZ1
	zoneTableEntry.w  hill_top_zone_act_1		; CPZ2
	zoneTableEntry.w  genocide_city_zone_act_2	; GCZ1
	zoneTableEntry.w  neo_green_hill_zone_act_1	; GCZ2
	zoneTableEntry.w  neo_green_hill_zone_act_2	; NGHZ1
	zoneTableEntry.w  chemical_plant_zone_act_1	; NGHZ2
	zoneTableEntry.w  death_egg_zone_act_2		; DEZ1
	zoneTableEntry.w  green_hill_zone_act_1		; DEZ2
    zoneTableEnd
loc_BFDE:
		moveq	#$20,d1
		move.w	$32(a0),d0
		cmp.w	8(a0),d0
		beq.s	loc_C004
		bge.s   loc_BFEE
		neg.w	d1
loc_BFEE:
		add.w   d1,8(a0)
		move.w	8(a0),d0
		bmi.s	loc_C002
		cmpi.w	#$200,d0
		bcc.s	loc_C002
		bra.w	DisplaySprite           ; loc_d3C2
loc_C002:
		rts
loc_C004:
		cmpi.b	#4,$1A(a0)
		bne.w	DeleteObject            ; loc_d3B4
		addq.b	#2,$24(a0)
		clr.b   (Control_Locked).w
		move.w	#MusID_ActClear,d0
		jmp     (PlayMusic).l            ; loc_14C0
		addq.w	#2,(Camera_Max_X_pos).w
		cmpi.w	#$2100,(Camera_Max_X_pos).w
		beq.w	DeleteObject            ; loc_d3B4
		rts
loc_C030:
		dc.w	$0004,$0124,$00BC,$0200,$FEE0,$0120,$00d0,$0201
		dc.w	$040C,$014C,$00d6,$0206,$0520,$0120,$00EC,$0202
		dc.w	$0540,$0120,$00FC,$0203,$0560,$0120,$010C,$0204
		dc.w	$020C,$014C,$00CC,$0205		
;=============================================================================== 
; Object 0x3A - Level Results
; [ End ]
;=============================================================================== 

;=============================================================================== 
; Object 0x?? - Special Stage Results Screen
; [ Begin ]
;=============================================================================== 
Special_Stage_Results: ; loc_C068:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	SS_Results_Index(pc,d0),d1  ; loc_C076
		jmp     SS_Results_Index(pc,d1)      ; loc_C076
SS_Results_Index: ; loc_C076:
		dc.w    loc_C08C-SS_Results_Index
		dc.w    loc_C104-SS_Results_Index
		dc.w    loc_C13C-SS_Results_Index
		dc.w    loc_C14A-SS_Results_Index
		dc.w    loc_C13C-SS_Results_Index
		dc.w    loc_C1A4-SS_Results_Index
		dc.w    loc_C13C-SS_Results_Index
		dc.w    loc_C1AE-SS_Results_Index
		dc.w    loc_C13C-SS_Results_Index
		dc.w    loc_C1A4-SS_Results_Index
		dc.w    loc_C1d2-SS_Results_Index
loc_C08C:
		tst.l	(Plc_Buffer).w
		beq.s	loc_C094
		rts
loc_C094:
		move.l	A0,A1
		lea	(loc_C1E6).l,A2
		moveq	#3,d1
		cmpi.w	#50,(Ring_count).w
		bcs.s	loc_C0A8
		addq.w	#1,d1
loc_C0A8:
		_move.b	0(a0),0(a1)
		move.w	(a2)+,8(a1)
		move.w	(a2)+,$30(a1)
		move.w	(a2)+,$A(a1)
		move.b	(a2)+,$24(a1)
		move.b	(a2)+,$1A(a1)
		move.l	#Special_Stage_Results_Mappings,4(a1) ; loc_C6d4
		move.w	#$8580,2(a1)
		bsr.w	Adjust2PArtPointer2   ; loc_DC4C
		move.b	#0,1(a1)
		lea	$40(a1),A1
		dbf	d1,loc_C0A8
		moveq	#7,d0
		move.b	(Emerald_count).w,d1
		beq.s	loc_C100
		moveq	#0,d0
		cmpi.b	#6,d1
		bne.s	loc_C100
		moveq	#8,d0
		move.w	#$18,8(a0)
		move.w	#$118,$30(a0)
loc_C100:
		move.b	d0,$1A(a0)
loc_C104:
		moveq	#$10,d1
		move.w	$30(a0),d0
		cmp.w	8(a0),d0
		beq.s	loc_C12A
		bge.s   loc_C114
		neg.w	d1
loc_C114:
		add.w   d1,8(a0)
loc_C118:		
		move.w	8(a0),d0
		bmi.s	loc_C128
		cmpi.w	#$200,d0
		bcc.s	loc_C128
		bra.w	DisplaySprite           ; loc_d3C2
loc_C128:
		rts
loc_C12A:
		cmpi.b	#2,$1A(a0)
		bne.s	loc_C118
		addq.b	#2,$24(a0)
		move.w	#$B4,$1E(a0)
loc_C13C:
		subq.w	#1,$1E(a0)
		bne.s	loc_C146
		addq.b	#2,$24(a0)
loc_C146:
		bra.w	DisplaySprite           ; loc_d3C2
loc_C14A:
		bsr.w	DisplaySprite           ; loc_d3C2
		move.b	#1,(Update_Bonus_score).w
		tst.w	(Bonus_Countdown_2).w
		beq.s	loc_C17C
		subi.w	#10,(Bonus_Countdown_2).w
		moveq	#10,d0
		jsr	(AddPoints).l               ; (loc_22Fd0)
		move.b	(Vint_runcount+3).w,d0
		andi.b	#3,d0
		bne.s	loc_C1A2
		move.w	#SndID_Blip,d0
		jmp	(PlaySound).l             ; loc_14C6
loc_C17C:
		move.w	#SndID_TallyEnd,d0
		jsr	(PlaySound).l             ; loc_14C6
		addq.b	#2,$24(a0)
		move.w	#$B4,$1E(a0)
		cmpi.w	#50,(Ring_count).w
		bcs.s	loc_C1A2
		move.w	#$3C,$1E(a0)
		addq.b	#4,$24(a0)
loc_C1A2:
		rts
loc_C1A4:
		move.w	#1,(Level_Inactive_flag).w
		bra.w	DisplaySprite           ; loc_d3C2
loc_C1AE:
		move.b	#4,($FFFFB6DA).w
		move.b	#$14,($FFFFB6E4).w
		move.w	#SndID_ContinueJingle,d0
		jsr	(PlaySound).l             ; loc_14C6
		addq.b	#2,$24(a0)
		move.w	#$168,$1E(a0)
		bra.w	DisplaySprite           ; loc_d3C2
loc_C1d2:
		move.b	(Vint_runcount+3).w,d0
		andi.b	#$F,d0
		bne.s	loc_C1E2
		bchg    #0,$1A(a0)
loc_C1E2:
		bra.w	DisplaySprite           ; loc_d3C2
loc_C1E6:
		dc.w	$20,$120,$C4,$200,$320,$120,$118,$201
		dc.w	$360,$120,$128,$202,$1EC,$11C,$C4,$203
		dc.w	$3A0,$120,$138,$206
;===============================================================================
; Object 0x?? - Special Stage Results Screen
; [ End ]
;===============================================================================
;===============================================================================
; Object 0x?? - Emeralds From Special Stage Results Screen
; [ Begin ]
;===============================================================================
Emeralds: ; loc_C20E:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_C21C(pc,d0),d1
		jmp     loc_C21C(pc,d1)
loc_C21C:
		dc.w    loc_C22C-loc_C21C
		dc.w    loc_C286-loc_C21C
loc_C220:
		dc.w	$110,$128,$F8,$140,$E0,$158
loc_C22C:
		move.l	A0,A1
		lea	loc_C220(pc),A2
		moveq	#0,d2
		moveq	#0,d1
		move.b	(Emerald_count).w,d1
		subq.b	#1,d1
		bcs.w	DeleteObject            ; loc_d3B4
loc_C240:
		_move.b	0(a0),0(a1)
		move.w	(a2)+,8(a1)
		move.w	#$F0,$A(a1)
		lea	(Got_Emeralds_array).w,A3
		move.b	(A3,d2),d3
		move.b	d3,$1A(a1)
		move.b	d3,$1C(a1)
		addq.b	#1,d2
		addq.b	#2,$24(a1)
		move.l	#Emeralds_Mappings,4(a1) ; loc_C8F6
		move.w	#$8541,2(a1)
		bsr.w	Adjust2PArtPointer2   ; loc_DC4C
		move.b	#0,1(a1)
		lea	$40(a1),A1
		dbf	d1,loc_C240
loc_C286:
		move.b	$1A(a0),d0
		move.b	#6,$1A(a0)
		cmpi.b	#6,d0
		bne.s	loc_C29C
		move.b	$1C(a0),$1A(a0)
loc_C29C:
		bra.w	DisplaySprite           ; loc_d3C2
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; Can't split some of these due to reusing mappings between each other
; ---------------------------------------------------------------------------
Obj34_MapUnc_C2A0: ; loc_C2A0: ; Object $34 - Mappings
		dc.w    TC_GHz_Map-Obj34_MapUnc_C2A0  ; Green Hill
		dc.w    TC_Lz_Map-Obj34_MapUnc_C2A0   ; Labyrinth
		dc.w    TC_Mz_Map-Obj34_MapUnc_C2A0   ; Marble  
		dc.w    TC_SLz_Map-Obj34_MapUnc_C2A0  ; Star Light
		dc.w    TC_SYz_Map-Obj34_MapUnc_C2A0  ; Spring Yard
		dc.w    TC_SBz_Map-Obj34_MapUnc_C2A0  ; Scrap Brain
		dc.w    TC_Zone_Map-Obj34_MapUnc_C2A0 ; Zone
		dc.w    TC_Act1_Map-Obj34_MapUnc_C2A0 ; Act 1
		dc.w    TC_Act2_Map-Obj34_MapUnc_C2A0 ; Act 2
		dc.w    TC_Act3_Map-Obj34_MapUnc_C2A0 ; Act 3
		dc.w    TC_Oval_Map-Obj34_MapUnc_C2A0 ; Oval
		dc.w    TC_Fz_Map-Obj34_MapUnc_C2A0   ; Final  
TC_GHz_Map: ; loc_C2B8: ; Green Hill		 
		dc.w	$0009 
		dc.l	$F8050018,$000CFFB4,$F805003A,$001DFFC4
		dc.l	$F8050010,$0008FFd4,$F8050010,$0008FFE4
		dc.l	$F805002E,$0017FFF4,$F805001C,$000E0014
		dc.l	$F8010020,$00100024,$F8050026,$0013002C
		dc.l	$F8050026,$0013003C
TC_Lz_Map: ; loc_C302: ; Labyrinth
		dc.w	$0009
		dc.l	$F8050026,$0013FFBC,$F8050000,$0000FFCC
		dc.l	$F8050004,$0002FFDC,$F805004A,$0025FFEC
		dc.l	$F805003A,$001DFFFC,$F8010020,$0010000C
		dc.l	$F805002E,$00170014,$F8050042,$00210024
		dc.l	$F805001C,$000E0034
TC_Mz_Map: ; loc_C34C: ; Marble 
		dc.w	$0006
		dc.l	$F805002A,$0015FFCF,$F8050000,$0000FFE0
		dc.l	$F805003A,$001DFFF0,$F8050004,$00020000
		dc.l	$F8050026,$00130010,$F8050010,$00080020 
TC_SLz_Map: ; loc_C37E: ; Star Light
		dc.w	$0009
		dc.l	$F805003E,$001FFFB4,$F8050042,$0021FFC4
		dc.l	$F8050000,$0000FFd4,$F805003A,$001DFFE4
		dc.l	$F8050026,$00130004,$F8010020,$00100014
		dc.l	$F8050018,$000C001C,$F805001C,$000E002C
		dc.l	$F8050042,$0021003C
TC_SYz_Map: ; loc_C3C8: ; Spring Yard
		dc.w	$000A
		dc.w	$F805,$003E,$001F,$FFAC,$F805,$0036,$001B,$FFBC
		dc.w	$F805,$003A,$001D,$FFCC,$F801,$0020,$0010,$FFDC
		dc.w	$F805,$002E,$0017,$FFE4,$F805,$0018,$000C,$FFF4
		dc.w	$F805,$004A,$0025,$0014,$F805,$0000,$0000,$0024
		dc.w	$F805,$003A,$001D,$0034,$F805,$000C,$0006,$0044 
TC_SBz_Map: ; loc_C41A: ; Scrap Brain
		dc.w	$000A
		dc.l	$F805003E,$001FFFAC,$F8050008,$0004FFBC
		dc.l	$F805003A,$001DFFCC,$F8050000,$0000FFDC
		dc.l	$F8050036,$001BFFEC,$F8050004,$0002000C
		dc.l	$F805003A,$001d001C,$F8050000,$0000002C
		dc.l	$F8010020,$0010003C,$F805002E,$00170044
TC_Zone_Map: ; loc_C46C: ; Zone
		dc.w	$0004
		dc.l	$F805004E,$0027FFE0,$F8050032,$0019FFF0
		dc.l	$F805002E,$00170000,$F8050010,$00080010
TC_Act1_Map: ; loc_C48E: ; Act 1
		dc.w	$0002
		dc.l	$040C0053,$0029FFEC,$F4020057,$002B000C
TC_Act2_Map: ; loc_C4A0: ; Act 2
		dc.w	$0002
		dc.l	$040C0053,$0029FFEC,$F406005A,$002d0008
TC_Act3_Map: ; loc_C4B2: ; Act 3
		dc.w	$0002
		dc.l	$040C0053,$0029FFEC,$F4060060,$00300008
TC_Oval_Map: ; loc_C4C4: ; Oval
		dc.w	$000D
		dc.l	$E40C0070,$0038FFF4,$E4020074,$003A0014
		dc.l	$EC040077,$003BFFEC,$F4050079,$003CFFE4
		dc.l	$140C1870,$1838FFEC,$04021874,$183AFFE4
		dc.l	$0C041877,$183B0004,$FC051879,$183C000C
		dc.l	$EC08007D,$003EFFFC,$F40C007C,$003EFFF4
		dc.l	$FC08007C,$003EFFF4,$040C007C,$003EFFEC
		dc.l	$0C08007C,$003EFFEC
TC_Fz_Map: ; loc_C52E: ; Final
		dc.w	$0005
		dc.l	$F8050014,$000AFFDC,$F8010020,$0010FFEC
		dc.l	$F805002E,$0017FFF4,$F8050000,$00000004
		dc.l	$F8050026,$00130014
Time_Game_Over_Mappings: ; loc_C558:
		dc.w    loc_C560-Time_Game_Over_Mappings
		dc.w    loc_C572-Time_Game_Over_Mappings
		dc.w    loc_C584-Time_Game_Over_Mappings
		dc.w    loc_C596-Time_Game_Over_Mappings
loc_C560:
		dc.w	$0002
		dc.l	$F80d0000,$0000FFB8,$F80d0008,$0004FFD8
loc_C572:
		dc.w	$0002
		dc.l	$F80d0014,$000A0008,$F80d000C,$00060028
loc_C584:
		dc.w	$0002
		dc.l	$F809001C,$000EFFC4,$F80d0008,$0004FFDC
loc_C596:
		dc.w	$0002
		dc.l	$F80d0014,$000A000C,$F80d000C,$0006002C  
Level_Results_Mappings: ; loc_C5A8:
		dc.w    LR_Sonic_Has_Map-Level_Results_Mappings
		dc.w    LR_Passed_Map-Level_Results_Mappings
		dc.w    LR_Score_Map-Level_Results_Mappings
		dc.w    LR_Time_Bonus_Map-Level_Results_Mappings
		dc.w    LR_Ring_Bonus_Map-Level_Results_Mappings
		dc.w    TC_Oval_Map-Level_Results_Mappings
		dc.w    TC_Act1_Map-Level_Results_Mappings
		dc.w    TC_Act2_Map-Level_Results_Mappings
		dc.w    TC_Act3_Map-Level_Results_Mappings
LR_Sonic_Has_Map: ; loc_C5BA: ; Sonic Has
		dc.w	$0008
		dc.l	$F805003E,$001FFFB8,$F8050032,$0019FFC8
		dc.l	$F805002E,$0017FFD8,$F8010020,$0010FFE8
		dc.l	$F8050008,$0004FFF0,$F805001C,$000E0010
		dc.l	$F8050000,$00000020,$F805003E,$001F0030
LR_Passed_Map: ; loc_C5FC: ; Passed
		dc.w	$0006
		dc.l	$F8050036,$001BFFd0,$F8050000,$0000FFE0
		dc.l	$F805003E,$001FFFF0,$F805003E,$001F0000
		dc.l	$F8050010,$00080010,$F805000C,$00060020
LR_Score_Map: ; loc_C62E:
		dc.w	$0006
		dc.l	$F80d014A,$00A5FFB0,$F8010162,$00B1FFd0
		dc.l	$F8090164,$00B20018,$F80d016A,$00B50030
		dc.l	$F704006E,$0037FFCD,$FF04186E,$1837FFCD
LR_Time_Bonus_Map: ; loc_C660:
		dc.w	$0007
		dc.l	$F80d015A,$00ADFFB0,$F80d0066,$0033FFD9
		dc.l	$F801014A,$00A5FFF9,$F704006E,$0037FFF6
		dc.l	$FF04186E,$1837FFF6,$F80DFFF0,$FBF80028
		dc.l	$F8010170,$00B80048
LR_Ring_Bonus_Map: ; loc_C69A:
		dc.w	$0007
		dc.l	$F80d0152,$00A9FFB0,$F80d0066,$0033FFD9
		dc.l	$F801014A,$00A5FFF9,$F704006E,$0037FFF6
		dc.l	$FF04186E,$1837FFF6,$F80DFFF8,$FBFC0028
		dc.l	$F8010170,$00B80048    
Special_Stage_Results_Mappings: ; loc_C6d4:
		dc.w    loc_C6E6-Special_Stage_Results_Mappings
		dc.w    loc_C750-Special_Stage_Results_Mappings
		dc.w    loc_C782-Special_Stage_Results_Mappings
		dc.w    TC_Oval_Map-Special_Stage_Results_Mappings
		dc.w    loc_C7BC-Special_Stage_Results_Mappings
		dc.w    loc_C7DE-Special_Stage_Results_Mappings
		dc.w    loc_C800-Special_Stage_Results_Mappings
		dc.w    loc_C81A-Special_Stage_Results_Mappings
		dc.w    loc_C87C-Special_Stage_Results_Mappings
loc_C6E6:
		dc.w	$000D
		dc.l	$F8050008,$0004FF90,$F805001C,$000EFFA0
		dc.l	$F8050000,$0000FFB0,$F8050032,$0019FFC0
		dc.l	$F805003E,$001FFFd0,$F8050010,$0008FFF0
		dc.l	$F805002A,$00150000,$F8050010,$00080010
		dc.l	$F805003A,$001d0020,$F8050000,$00000030
		dc.l	$F8050026,$00130040,$F805000C,$00060050
		dc.l	$F805003E,$001F0060
loc_C750:
		dc.w	$0006
		dc.l	$F80d014A,$00A5FFB0,$F8010162,$00B1FFd0
		dc.l	$F8090164,$00B20018,$F80d016A,$00B50030
		dc.l	$F704006E,$0037FFCD,$FF04186E,$1837FFCD
loc_C782:
		dc.w	$0007
		dc.l	$F80d0152,$00A9FFB0,$F80d0066,$0033FFD9
		dc.l	$F801014A,$00A5FFF9,$F704006E,$0037FFF6
		dc.l	$FF04186E,$1837FFF6,$F80DFFF8,$FBFC0028
		dc.l	$F8010170,$00B80048
loc_C7BC:
		dc.w	$0004
		dc.l	$F80DFFd1,$7FC8FFB0,$F80DFFD9,$7Fd4FFd0
		dc.l	$F801FFE1,$7FE0FFF0,$F8061FE3,$2FE30040
loc_C7DE:
		dc.w	$0004
		dc.l	$F80DFFd1,$7FC8FFB0,$F80DFFD9,$7Fd4FFd0
		dc.l	$F801FFE1,$7FE0FFF0,$F8061FE9,$2FEC0040
loc_C800:
		dc.w	$0003
		dc.l	$F80DFFd1,$7FC8FFB0,$F80DFFD9,$7Fd4FFd0
		dc.l	$F801FFE1,$7FE0FFF0
loc_C81A:
		dc.w	$000C
		dc.l	$F805003E,$001FFF9C,$F8050036,$001BFFAC
		dc.l	$F8050010,$0008FFBC,$F8050008,$0004FFCC
		dc.l	$F8010020,$0010FFDC,$F8050000,$0000FFE4
		dc.l	$F8050026,$0013FFF4,$F805003E,$001F0014
		dc.l	$F8050042,$00210024,$F8050000,$00000034
		dc.l	$F8050018,$000C0044,$F8050010,$00080054
loc_C87C:
		dc.w	$000F
		dc.l	$F805003E,$001FFF88,$F8050032,$0019FF98
		dc.l	$F805002E,$0017FFA8,$F8010020,$0010FFB8
		dc.l	$F8050008,$0004FFC0,$F8050018,$000CFFD8
		dc.l	$F8050032,$0019FFE8,$F8050042,$0021FFF8
		dc.l	$F8050042,$00210010,$F805001C,$000E0020
		dc.l	$F8050010,$00080030,$F805002A,$00150040
		dc.l	$F8050000,$00000058,$F8050026,$00130068
		dc.l	$F8050026,$00130078		
Emeralds_Mappings: ; loc_C8F6:
		dc.w    loc_C904-Emeralds_Mappings
		dc.w    loc_C90E-Emeralds_Mappings
		dc.w    loc_C918-Emeralds_Mappings
		dc.w    loc_C922-Emeralds_Mappings
		dc.w    loc_C92C-Emeralds_Mappings
		dc.w    loc_C936-Emeralds_Mappings
		dc.w    loc_C940-Emeralds_Mappings
loc_C904:
		dc.w	$0001
		dc.l	$F8052004,$2002FFF8
loc_C90E:
		dc.w	$0001
		dc.l	$F8050000,$0000FFF8
loc_C918:
		dc.w	$0001
		dc.l	$F8054004,$4002FFF8
loc_C922:
		dc.w	$0001
		dc.l	$F8056004,$6002FFF8
loc_C92C:
		dc.w	$0001
		dc.l	$F8052008,$2004FFF8
loc_C936:
		dc.w	$0001
		dc.l	$F805200C,$2006FFF8
loc_C940:
		dc.w	$0000		   ; Filler		            
		nop		   
;=============================================================================== 
; Object 0x36 - Vertical Spikes 
; [ Begin ]		         
;===============================================================================		 
Obj_0x36_Spikes: ; loc_C944:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_C952(pc,d0),d1
		jmp     loc_C952(pc,d1)
loc_C952:
		dc.w    loc_C96A-loc_C952
		dc.w    loc_C9d6-loc_C952
		dc.w    loc_CA26-loc_C952
		dc.w    loc_CA82-loc_C952		
loc_C95A:
		dc.b	$10,$10,$20,$10,$30,$10,$40,$10,$10,$10,$10,$20,$10,$30,$10,$40		  
loc_C96A:
		addq.b	#2,$24(a0)
		move.l	#Obj36_MapUnc_CAB0,4(a0) ; loc_CBA0
		move.w	#$2434,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		ori.b   #4,1(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),d0
		andi.b	#$F,$28(a0)
		andi.w	#$F0,d0  
		lea	loc_C95A(pc),A1
		lsr.w	#3,d0
		adda.w	d0,A1
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$16(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		cmpi.b	#4,d0
		bcs.s	loc_C9BA
		addq.b	#2,$24(a0)
loc_C9BA:
		btst	#1,$22(a0)
		beq.s	loc_C9C8
		move.b	#6,$24(a0)
loc_C9C8:
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		rts
loc_C9d6:
		bsr.w	loc_CAFE
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	SolidObject             ; loc_F4A0
		move.b	$22(a0),d6
		andi.b	#$18,d6
		beq.s	loc_CA1E
		move.b	d6,d0
		andi.b	#8,d0
		beq.s	loc_CA10
		lea	(MainCharacter).w,A1
		bsr.w	Touch_ChkHurt2            ; loc_CAd0
loc_CA10:
		andi.b	#$10,d6
		beq.s	loc_CA1E
		lea	(Sidekick).w,A1
		bsr.w	Touch_ChkHurt2            ; loc_CAd0
loc_CA1E:
		move.w	$30(a0),d0
		bra.w	MarkObjGone2
loc_CA26:		
		move.w	8(a0),-(sp)
		bsr.w	loc_CAFE
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	SolidObject             ; loc_F4A0
		swap	d6
		andi.w	#3,d6
		beq.s	loc_CA7A
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_CA66
		lea	(MainCharacter).w,A1
		bsr.w	Touch_ChkHurt2            ; loc_CAd0
		bclr	#5,$22(a0)
loc_CA66:		
		andi.b	#2,d6
		beq.s	loc_CA7A
		lea	(Sidekick).w,A1  
		bsr.w	Touch_ChkHurt2            ; loc_CAd0
		bclr	#6,$22(a0)
loc_CA7A:
		move.w	$30(a0),d0
		bra.w	MarkObjGone2
loc_CA82:
		bsr.w	loc_CAFE
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	SolidObject             ; loc_F4A0
		swap	d6
		andi.w	#$C,d6
		beq.s	loc_CAC8
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_CABA
		lea	(MainCharacter).w,A1
		bsr.w	Touch_ChkHurt2            ; loc_CAd0
loc_CABA:
		andi.b	#8,d6
		beq.s	loc_CAC8
		lea	(Sidekick).w,A1
		bsr.w	Touch_ChkHurt2            ; loc_CAd0
loc_CAC8:
		move.w	$30(a0),d0
		bra.w	MarkObjGone2
;===============================================================================
; Sub Routine Touch_ChkHurt2
;[ Begin ]
;===============================================================================		
; loc_CAd0: Touch_Spikes:
Touch_ChkHurt2:
		tst.b	(Invincibility_flag).w           ; Invincibility Running ?
		bne.s	Touch_ChkHurt2_No_Hurt    ; loc_CAFC
		cmpi.b	#4,$24(a1)
		bcc.s	Touch_ChkHurt2_No_Hurt    ; loc_CAFC
		move.l	$C(a1),d3
		move.w	$12(a1),d0
		ext.l   d0
		asl.l   #8,d0
		sub.l   d0,d3
		move.l	d3,$C(a1)
		move.l	A0,A2
		move.l	A1,A0
		jsr	 HurtSonic               ; loc_21384
		move.l	A2,A0
; return_CAFC: Touch_Spikes_No_Hurt:
Touch_ChkHurt2_No_Hurt:
		rts
;===============================================================================
; Sub Routine Touch_ChkHurt2
;[ End ]
;===============================================================================		    
loc_CAFE:
		moveq	#0,d0
		move.b	$0028(a0),d0
		add.w   d0,d0
		move.w	loc_CB0E(pc,d0),d1
		jmp     loc_CB0E(pc,d1)
loc_CB0E:
		dc.w    loc_CB14-loc_CB0E
		dc.w    loc_CB16-loc_CB0E
		dc.w    loc_CB2A-loc_CB0E
loc_CB14:		  
		rts
loc_CB16:
		bsr.w	loc_CB3E
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w   $32(a0),d0
		move.w	d0,$C(a0)
		rts
loc_CB2A:
		bsr.w	loc_CB3E
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w   $30(a0),d0
		move.w	d0,8(a0)
		rts
loc_CB3E:
		tst.w	$38(a0)
		beq.s	loc_CB5C
		subq.w	#1,$38(a0)
		bne.s	loc_CB9E
		tst.b	1(a0)
		bpl.s	loc_CB9E
		move.w	#SndID_SpikesMove,d0
		jsr	(PlaySound).l             ; loc_14C6
		bra.s	loc_CB9E
loc_CB5C:
		tst.w	$36(a0)
		beq.s	loc_CB7E
		subi.w	#$800,$34(a0)
		bcc.s	loc_CB9E
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#$3C,$38(a0)
		bra.s	loc_CB9E
loc_CB7E:
		addi.w	#$800,$34(a0)
		cmpi.w	#$2000,$34(a0)
		bcs.s	loc_CB9E
		move.w	#$2000,$34(a0)
		move.w	#1,$36(a0)
		move.w	#$3C,$38(a0)
loc_CB9E:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj36_MapUnc_CAB0:	binclude	"mappings/sprite/obj36.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 3B - Purple rock (leftover from S1)
; ---------------------------------------------------------------------------
; Sprite_Cd00: Obj_0x3B:
Obj3B:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj3B_Index(pc,d0.w),d1
		jmp	Obj3B_Index(pc,d1.w)
; ===========================================================================
; off_Cd0E:
Obj3B_Index:	offsetTable
		offsetTableEntry.w Obj3B_Init
		offsetTableEntry.w Obj3B_Main
; ===========================================================================
; loc_Cd12:
Obj3B_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj3B_MapUnc_Cd66,4(a0)
		move.w	#$66C0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$13,$19(a0)
		move.b	#4,$18(a0)
; loc_Cd3A:
Obj3B_Main:
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Unused sprite mappings
; ---------------------------------------------------------------------------
Obj3B_MapUnc_Cd66:	binclude	"mappings/sprite/obj3B.bin"
; ===========================================================================
		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 3C - Breakable wall (leftover from S1) (mostly unused)
; ---------------------------------------------------------------------------
; Sprite_Cd7C: Obj_0x3C:
Obj3C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj3C_Index(pc,d0.w),d1
		jsr	Obj3C_Index(pc,d1.w)
		bra.w	MarkObjGone
; ===========================================================================
; off_CD8E:
Obj3C_Index:	offsetTable
		offsetTableEntry.w Obj3C_Init
		offsetTableEntry.w Obj3C_Main
		offsetTableEntry.w Obj3C_Fragment
; ===========================================================================
; loc_CD94:
Obj3C_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj3C_MapUnc_CF04,4(a0)
		move.w	#$4590,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)
; loc_CDC2:
Obj3C_Main:
		move.w	(MainCharacter+$10).w,$30(a0)
		move.w	#$1B,d1
		move.w	#$20,d2
		move.w	#$20,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		btst	#5,$22(a0)
		bne.s	loc_CDE6

return_CDE4:
		rts
; ===========================================================================

loc_CDE6:
		lea	(MainCharacter).w,a1	; a1=character
		cmpi.b	#2,$1C(a1)
		bne.s	return_CDE4
		move.w	$30(a0),d0
		bpl.s	loc_CDFA
		neg.w	d0

loc_CDFA:
		cmpi.w	#$480,d0
		bcs.s	return_CDE4
		move.w	$30(a0),$10(a1)
		addq.w	#4,8(a1)
		lea	(Obj3C_FragmentSpeeds_LeftToRight).l,a4
		move.w	8(a0),d0
		cmp.w	8(a1),d0
		bcs.s	loc_CE26
		subi.w	#8,8(a1)
		lea	(Obj3C_FragmentSpeeds_RightToLeft).l,a4

loc_CE26:
		move.w	$10(a1),$14(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bsr.s	BreakObjectToPieces
; loc_CE3A:
Obj3C_Fragment:
		bsr.w	ObjectMove
		addi.w	#$70,$12(a0)
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to break an object into its current sprite mappings
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_CE50:
BreakObjectToPieces:
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		move.l	4(a0),a3
		adda.w	(a3,d0.w),a3	; put address of appropriate frame to a3
		move.w	(a3)+,d1	; amount of pieces the frame consists of
		subq.w	#1,d1
		bset	#5,1(a0)
		_move.b	0(a0),d4
		move.b	1(a0),d5
		move.l	a0,a1
		bra.s	BreakObjectToPieces_InitObject
; ===========================================================================
; loc_CE76:
BreakObjectToPieces_Loop:
		bsr.w	SingleObjLoad2
		bne.s	loc_CEBA
		addq.w	#8,a3
; loc_CE7E:
BreakObjectToPieces_InitObject:
		move.b	#4,routine(a1)
		_move.b	d4,0(a1)	; load object with ID of parent object and routine 4
		move.l	a3,4(a1)
		move.b	d5,1(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	2(a0),2(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.w	(a4)+,$10(a1)
		move.w	(a4)+,$12(a1)
		dbf	d1,BreakObjectToPieces_Loop

loc_CEBA:
		move.w	#SndID_SlowSmash,d0
		jmp	(PlaySound).l
; End of function BreakObjectToPieces

; ===========================================================================
; word_CEC4:
Obj3C_FragmentSpeeds_LeftToRight:
		;    x velocity,y velocity
		dc.w  $400,-$500
		dc.w  $600,-$100
		dc.w  $600,$100
		dc.w  $400,$500
		dc.w  $600,-$600
		dc.w  $800,-$200
		dc.w  $800,$200
		dc.w  $600,$600
; word_CEE4:
Obj3C_FragmentSpeeds_RightToLeft:
		dc.w -$600,-$600
		dc.w -$800,-$200
		dc.w -$800,$200
		dc.w -$600,$600
		dc.w -$400,-$500
		dc.w -$600,-$100
		dc.w -$600,$100
		dc.w -$400,$500
; ---------------------------------------------------------------------------
; Unused sprite mappings
; ---------------------------------------------------------------------------
Obj3C_MapUnc_CF04:	binclude	"mappings/sprite/obj3C.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; This runs the code of all the objects that are in object RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_CDd0: Load_Objects:
RunObjects:
		lea	(Object_RAM).w,a0	; a0=object
		moveq	#$7F,d7			; run the first $80 objects out of levels
		moveq	#0,d0
		cmpi.b	#6,(MainCharacter+routine).w	; is Sonic dead?
		bcc.s	RunObjectsWhenPlayerIsDead	; if yes,branch
		; continue straight into RunObject

; ---------------------------------------------------------------------------
; This is THE place where each individual object's code gets called from
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_CFE0:
RunObject:
		move.b	(a0),d0		; get object ID
		beq.s	RunNextObject	; skip if invalid (e.g. Obj00)

		add.w	d0,d0
		add.w	d0,d0	; d0 = object ID *4
		move.l	Obj_Index-4(pc,d0.w),a1	; load the address of the object's code
		jsr	(a1)	; dynamic call! to one of the the entries in Obj_Index
		moveq	#0,d0
; loc_CFF0:
RunNextObject:
		lea	$40(a0),a0	; load Obj address
		dbf	d7,RunObject
		rts
; ---------------------------------------------------------------------------
; this skips certain objects to make enemies and things pause when Sonic dies
; loc_CFFA:
RunObjectsWhenPlayerIsDead:
		moveq	#$1F,d7
		bsr.s	RunObject	; run the first $10 objects normally
		moveq	#$5F,d7		; all objects in this range are paused

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_d000:
RunObjectDisplayOnly:
		moveq	#0,d0
		move.b	(a0),d0		; get object ID
		beq.s	loc_d010	; skip if invalid (e.g. Obj00)
		tst.b	1(a0)		; has the object been fully initalized?
		bpl.s	loc_d010	; if not,branch
		bsr.w	DisplaySprite

loc_d010:
		lea	$40(a0),a0	; load Obj address
		dbf	d7,RunObjectDisplayOnly
		rts
; End of function RunObjects

; ===========================================================================
; ---------------------------------------------------------------------------
; OBJECT POINTER ARRAY ; object pointers ; sprite pointers ; object list ; sprite list
;
; This array contains the pointers to all the objects used in the game.
; ---------------------------------------------------------------------------
; loc_d01A:
Obj_Index:
ObjPtr_Sonic:		dc.l	Obj01			; Sonic
ObjPtr_Tails:		dc.l	Obj02			; Tails
ObjPtr_PlaneSwitcher:	dc.l	Obj03			; Collision plane/layer switcher
ObjPtr_WaterSurface:	dc.l	Obj04			; Surface of the water
ObjPtr_TailsTails:	dc.l	Obj05			; Tails' tails
ObjPtr_Spiral:		dc.l	Obj06			; Twisting spiral pathway in GHZ
ObjPtr_Oil:		dc.l	Obj07			; Oil Ocean in OOZ
			dc.l    Obj_0x08_Water_Splash             ; loc_12B42 
			dc.l    Obj_0x09_Sonic_In_Special_Stage   ; loc_21d40
			dc.l    Obj_0x0A_Bubbles_And_Numbers      ; loc_1207C 
			dc.l	Obj0B			; Section of pipe that tips you off from CPZ
			dc.l	Obj0C			; Small floating platform (used in CPZ in the Nick Arcade prototype)
			dc.l	Obj0D			; End of level signpost
			dc.l	Obj0E			; Sonic and Tails on the title screen
			dc.l	Obj0F			; Mappings test?
			dc.l	Obj10			; Blank (Sonic animation test from S1 prototype)
			dc.l    Obj11			; Bridge in GHZ and HPZ
			dc.l	Obj12			; Emerald from Hidden Palace Zone
			dc.l	Obj13			; Waterfall in Hidden Palace Zone
			dc.l	Obj14			; See saw from Hill Top Zone
			dc.l    Obj_0x15_Swing_Platform           ; loc_85F8
			dc.l	Obj16			; Diagonally moving lift from HTZ
			dc.l	Obj17			; GHZ rotating log helix spikes (leftover from S1)
			dc.l    Obj_0x18_Platforms		; loc_8d38 
			dc.l    Obj_0x19_Elevator		 ; loc_1621C		 
			dc.l    Obj_0x1A_Collapsing_Platforms     ; loc_9128 
			dc.l	Obj1B			; Speed booster from CPZ
			dc.l	Obj1C			; Scenery objects
			dc.l    Obj_0x1D_Worms		    ; loc_165B0   
			dc.l    Obj_0x1E_Tube_Attributes          ; loc_16724 
			dc.l    Obj_0x1F_Collapsing_Platforms     ; loc_9274 
			dc.l    Obj_0x20_Fireball		 ; loc_17174
			dc.l	Obj21			; Score/Rings/Time display
			dc.l    Obj_0x22_Arrow_Shooter            ; loc_19660
			dc.l    Obj_0x23_Pillar		   ; loc_19850    
			dc.l	Obj24			; Buzz Bomber missile explosion (leftover from S1)
			dc.l	Obj25			; A ring
			dc.l    Obj26			; Monitor
			dc.l	Obj27			; An explosion,giving off an animal and 100 points
			dc.l	Obj28			; Animal and the 100 points from a badnik
			dc.l	Obj29			; "100 points" text
			dc.l	Obj2A			; Stomper from DHZ
			dc.l    Obj_0x2B_Breakable_Pillar         ; loc_19A1E
			dc.l	Obj2C			; Sprite that makes leaves fly off when you hit it from NGHZ
			dc.l	Obj2D			; One way barrier from MTZ and CPZ (last one unused)
			dc.l    Obj_0x2E_Monitors_Contents        ; loc_B46A
			dc.l    Obj_0x2F_Breakable_Floor          ; loc_1747C
			dc.l    Obj_0x30		          ; loc_17A4C
			dc.l    Obj_0x31_Lava_Attributes          ; loc_155A0 
			dc.l    Obj_0x32_Breakable_Obstacule      ; loc_1768A
			dc.l    Obj_0x33_Touch_Booster            ; loc_17CA0   
			dc.l	Obj34			; Sonic 1 title cards
			dc.l    Obj_0x35_Invincibility            ; loc_1264E
			dc.l    Obj_0x36_Spikes		   ; loc_C944 
			dc.l	Obj37			; Scattering rings (generated when Sonic is hurt and has rings)
			dc.l    Obj_0x38_Shield		   ; loc_125CE
			dc.l    Obj_0x39_Time_Game_Over           ; loc_Bd76
			dc.l    Obj_0x3A_Level_Results            ; loc_BE38 
			dc.l	Obj3B			; Purple rock (leftover from S1)
			dc.l	Obj3C			; Breakable wall (leftover from S1) (mostly unused)
			dc.l    Obj_0x3D_Break_Boost              ; loc_18E78   
			dc.l	Obj3E			; Egg prison (unaltered from S1 still)
			dc.l	Obj3F			; Boss explosion (unused)
			dc.l    Obj_0x40_Diagonal_Springs         ; loc_1A30C
			dc.l    Obj_0x41_Springs		  ; loc_E7B8 
			dc.l    Obj_0x42_Steam_Vent               ; loc_1A5CC
			dc.l    Obj_0x43_Giant_Spikeball          ; loc_17F0C  
			dc.l    Obj_0x44		          ; loc_F10C
			dc.l    Obj_0x45_Spring_Push_Boost        ; loc_181A0
			dc.l    Obj_0x46_Spring_Ball              ; loc_18ABE 
			dc.l    Obj_0x47_Switch		   ; loc_18D9C
			dc.l    Obj_0x48_Cannon		   ; loc_19250
			dc.l    Obj_0x49_Waterfall		; loc_15352 
			dc.l    Obj_0x4A_Octus		    ; loc_1EBB8
			dc.l    Obj_0x4B_Buzz_Bomber              ; loc_1E89C 
			dc.l    Obj_0x4C_Batbot		   ; loc_1EE68 
			dc.l    Obj_0x4D_Rhinobot		 ; loc_1D984 
			dc.l    Obj_0x4E_Crocobot		 ; loc_1F2F0
			dc.l    Obj_0x4F_Dinobot		  ; loc_1DEAC
			dc.l    Obj_0x50_Aquis		    ; loc_1E010
			dc.l    Obj_0x51_Aquis		    ; loc_1E62C
			dc.l    Obj_0x52_Piranha		  ; loc_1DC54
			dc.l	Obj53			; Masher (jumping piranha fish badnik) from GHZ
			dc.l    Obj_0x54_Motobug		  ; loc_1F6E8 
			dc.l    Obj_0x55_Ghz_Boss		 ; loc_2030C
			dc.l    Obj_0x56		          ; loc_205A6
			dc.l    Obj_0x57		          ; loc_1F99C
			dc.l    Obj_0x58		          ; loc_1FC0A
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l    Obj_0x64_Pistons		  ; loc_1A8B4
			dc.l    Obj_0x65_Platform		 ; loc_1AA74 
			dc.l    Obj_0x66_Spring_Wall              ; loc_1AEBC
			dc.l    Obj_0x67_Teleport_Attributes      ; loc_1B0C4
			dc.l    Obj_0x68_Block_Arrow              ; loc_1B520
			dc.l    Obj_0x69_Screw_Nut		; loc_1B810
			dc.l    Obj_0x6A_Rotating_Boxes           ; loc_1BA30
			dc.l    Obj_0x6B_Mz_Platform              ; loc_1BCEC
			dc.l    Obj_0x6C_Mz_Moving_Platforms      ; loc_1BF6C
			dc.l    Obj_0x6D_Harpoon		  ; loc_1B720   
			dc.l    Obj_0x6E_Machine		  ; loc_1C2E4
			dc.l    Obj_Ox6F_Parallelogram_Elevator   ; loc_1C4F8
			dc.l    Obj_0x70_Rotating_Gears           ; loc_1C850
			dc.l	Obj71			; Bridge stake and pulsing orb from HPZ,and lava bubble from MTZ
			dc.l    Obj_0x72_Conveyor_Belt_Attributes ; loc_1CBCC
			dc.l	Obj73			; Solid rotating ring platform in DHZ (debug object)
			dc.l    Obj_0x74_Invisible_Block          ; loc_1561A
			dc.l    Obj_0x75_Spikeball_Chain          ; loc_1CE48
			dc.l    Obj_0x76_Platform_Spikes          ; loc_1d078
			dc.l    Obj_0x77_Bridge		   ; loc_1d208
			dc.l    Obj_0x78_Rotating_Platforms       ; loc_1d3C0
			dc.l    Obj_0x79_Lamp_Post		; loc_13B54
			dc.l    Obj_0x7A_Platform_Horizontal      ; loc_1d594
			dc.l    Obj_0x7B_Spring_Tubes             ; loc_1d74C
			dc.l	Obj_Null
			dc.l	Obj7D			; Points that can be gotten at the end of an act (leftover from S1)
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj_Null
			dc.l	Obj8A			; "SONIC TEAM PRESENTS"/credits (leftover from S1)
			dc.l	Obj_Null
			dc.l	Obj_Null
; ===========================================================================
; ---------------------------------------------------------------------------
; Used for blank objects,dealocate its array to prevent memory leaks
; Funnily,Sonic 1 used a similar pointer but didn't have any actual code,
; causing it to run ObjectMoveAndFall and leading to a potentially disasterous
; memory leak had they not removed unused object IDs from levels
; ---------------------------------------------------------------------------
; loc_d24A:
Obj_Null:
		bra.w	DeleteObject

; ---------------------------------------------------------------------------
; Subroutine to make an object move and fall downward increasingly fast
; This moves the object horizontally and vertically
; and also applies gravity to its speed
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_d24E: ObjectMove:
ObjectMoveAndFall:
		move.l	8(a0),d2		; load x position
		move.l	$C(a0),d3		; load y position
		move.w	$10(a0),d0		; load x speed
		ext.l	d0
		asl.l	#8,d0			; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d2			; add x speed to x position	; note this affects the subpixel position x_sub(a0) = 2+x_pos(a0)
		move.w	$12(a0),d0		; load y speed
		addi.w	#$38,$12(a0)		; increase vertical speed (apply gravity)
		ext.l	d0
		asl.l	#8,d0			; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d3			; add old y speed to y position	; note this affects the subpixel position y_sub(a0) = 2+y_pos(a0)
		move.l	d2,8(a0)		; store new x position
		move.l	d3,$C(a0)		; store new y position
		rts
; End of function ObjectMoveAndFall

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; ---------------------------------------------------------------------------
; Subroutine translating object speed to update object position
; This moves the object horizontally and vertically
; but does not apply gravity to it
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_d27A: SpeedToPos:
ObjectMove:
		move.l	8(a0),d2		; load x position
		move.l	$C(a0),d3		; load y position
		move.w	$10(a0),d0		; load x speed
		ext.l	d0
		asl.l	#8,d0			; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d2			; add x speed to x position	; note this affects the subpixel position x_sub(a0) = 2+x_pos(a0)
		move.w	$12(a0),d0		; load y speed
		ext.l	d0
		asl.l	#8,d0			; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d3			; add old y speed to y position	; note this affects the subpixel position y_sub(a0) = 2+y_pos(a0)
		move.l	d2,8(a0)		; store new x position
		move.l	d3,$C(a0)		; store new y position
		rts
; End of function ObjectMove

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; ---------------------------------------------------------------------------
; Routines to mark an enemy/monitor/ring/platform as destroyed
; ---------------------------------------------------------------------------

; ===========================================================================
; Used for objects that store their x position in SST $08
; sub_d2A0:
MarkObjGone:
		tst.w	(Two_player_mode).w	; are we in two player mode?
		beq.s	loc_d2AA		; if not,branch
		bra.w	DisplaySprite

loc_d2AA:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0		; give the object $80 pixels to move off screen before being deleted
		bhi.w	Mark_ChkGone
		bra.w	DisplaySprite
; ---------------------------------------------------------------------------
; This routine saves the object into a respawn table so it knows when to
; respawn it if it ever comes back into view
; loc_d2C2:
Mark_ChkGone:
		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	Mark_Delete
		bclr	#7,2(a2,d0.w)
; loc_d2d4:
Mark_Delete:
		bra.w	DeleteObject
; ===========================================================================
; Used for objects that store their x position in a different SST
; sub_d2D8:
MarkObjGone2:
		tst.w	(Two_player_mode).w
		beq.s	loc_d2E2
		bra.w	DisplaySprite

loc_d2E2:
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	Mark_ChkGone2
		bra.w	DisplaySprite
; ---------------------------------------------------------------------------
; loc_d2F6:
Mark_ChkGone2:
		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	Mark_Delete2
		bclr	#7,2(a2,d0.w)
; loc_d308:
Mark_Delete2:
		bra.w	DeleteObject
; ===========================================================================
; Used for objects that do not display at all (usually debug or triggers)
; Otherwise identical to the original MarkObjGone
; sub_d30C:
MarkObjGone3:		 
		tst.w	(Two_player_mode).w
		beq.s	loc_d314
		rts

loc_d314:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	Mark_ChkGone3
		rts
; ---------------------------------------------------------------------------
; loc_d32A:
Mark_ChkGone3:
		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	Mark_Delete3
		bclr	#7,2(a2,d0.w)
; loc_d33C:
Mark_Delete3:
		bra.w	DeleteObject
; ===========================================================================
; Used for objects in 2-player that NEED a respawn table (usually badniks)
; loc_d340:
MarkObjGone_P1:
		tst.w	(Two_player_mode).w
		bne.s	MarkObjGone_P2
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	Mark_ChkGoneP1
		bra.w	DisplaySprite
; ---------------------------------------------------------------------------
; loc_d35E:
Mark_ChkGoneP1:
		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	Mark_DeleteP1
		bclr	#7,2(a2,d0.w)
; loc_d370:
Mark_DeleteP1:
		bra.w	DeleteObject
; ===========================================================================
; And player two's equivalent of the code,of course
; loc_d374:
MarkObjGone_P2:
		move.w	8(a0),d0
		andi.w	#$FF00,d0
		move.w	d0,d1
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$300,d0
		bhi.w	loc_d38E
		bra.w	DisplaySprite

loc_d38E:
		sub.w	(Camera_X_pos_coarse_P2).w,d1
		cmpi.w	#$300,d1
		bhi.w	Mark_ChkGoneP2
		bra.w	DisplaySprite
; ---------------------------------------------------------------------------
; loc_d39E:
Mark_ChkGoneP2:
		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	Mark_DeleteP2
		bclr	#7,2(A2,d0.w)
; Seems like they used a macro for the above block and this branch,given
; DeleteObject is literally right below,making it useless
; loc_d3B0:
Mark_DeleteP2:
		bra.w	DeleteObject

; ---------------------------------------------------------------------------
; Subroutine to delete an object
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_d3B4:
DeleteObject:
		move.l	a0,a1
; loc_d3B6:
DeleteObject2:
		moveq	#0,d1
		moveq	#$F,d0
		; delete the object by setting all of its bytes to 0
-		move.l	d1,(a1)+
		dbf	d0,-
		rts 
; End of function DeleteObject

; ---------------------------------------------------------------------------
; Subroutine to display a sprite/object,when a0 is the object RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_d3C2:
DisplaySprite:
		lea	(Sprite_Table_Input).w,a1
		move.w	$18(a0),d0
		lsr.w	#1,d0
		andi.w	#$380,d0
		adda.w	d0,a1
		cmpi.w	#$7E,(a1)
		bcc.s	return_d3DE
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)

return_d3DE:
		rts
; End of function DisplaySprite

; ---------------------------------------------------------------------------
; Subroutine to display a sprite/object,when a1 is the object RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_d3E0: DisplayA1Sprite:
DisplaySprite2:
		lea	(Sprite_Table_Input).w,a2
		move.w	$18(a1),d0
		lsr.w	#1,d0
		andi.w	#$380,d0
		adda.w	d0,a2
		cmpi.w	#$7E,(a2)
		bcc.s	return_d3FC
		addq.w	#2,(a2)
		adda.w	(a2),a2
		move.w	a1,(a2)

return_d3FC:
		rts
; End of function DisplaySprite2

; ---------------------------------------------------------------------------
; Subroutine to display a sprite/object,when a0 is the object RAM
; and d0 is already (priority/2)&$380
; ---------------------------------------------------------------------------

; sub_d3FE: DisplaySprite_Param:
DisplaySprite3:
		lea	(Sprite_Table_Input).w,a1
		adda.w	d0,a1
		cmpi.w	#$7E,(a1)
		bcc.s	return_d410
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)

return_d410:
		rts
; End of function DisplaySprite3

;=============================================================================== 
; Sub Routine AnimateSprite
; [ Begin ]		         
;===============================================================================		   
AnimateSprite: ; loc_d412:
		moveq	#0,d0
		move.b	$001C(a0),d0
		cmp.b	$001D(a0),d0
		beq.s	loc_d42E
		move.b	d0,$001D(a0)
		move.b	#$00,$001B(a0)
		move.b	#$00,$001E(a0)
loc_d42E:
		subq.b	#1,$001E(a0)
		bpl.s	loc_d468
		add.w   d0,d0
		adda.w	$00(A1,d0),A1
		move.b	(a1),$001E(a0)
		moveq	#0,d1
		move.b	$001B(a0),d1
		move.b	$01(A1,d1),d0
		bmi.s	loc_d46A
loc_d44A: 
		andi.b	#$7F,d0
		move.b	d0,$001A(a0)
		move.b	$0022(a0),d1
		andi.b	#$03,d1
		andi.b	#$FC,$0001(a0)
		or.b    d1,$0001(a0)
		addq.b	#1,$001B(a0)
loc_d468:
		rts
loc_d46A:
		addq.b	#1,d0
		bne.s	loc_d47A
		move.b	#$00,$001B(a0)
		move.b	$0001(a1),d0
		bra.s	loc_d44A
loc_d47A:
		addq.b	#1,d0 
		bne.s	loc_d48E
		move.b	$02(A1,d1),d0
		sub.b   d0,$001B(a0)
		sub.b   d0,d1
		move.b	$01(A1,d1),d0
		bra.s	loc_d44A
loc_d48E:
		addq.b	#1,d0
		bne.s	loc_d49A
		move.b	$02(A1,d1),$001C(a0)
		rts
loc_d49A:
		addq.b	#1,d0
		bne.s	loc_d4AE
		addq.b	#$02,$0024(a0)
		move.b	#$00,$001E(a0)
		addq.b	#1,$001B(a0)
		rts
loc_d4AE:
		addq.b	#1,d0
		bne.s	loc_d4BE
		move.b	#$00,$001B(a0)
		clr.b   $0025(a0)
		rts
loc_d4BE:
		addq.b	#1,d0
		bne.s	loc_d4C8
		addq.b	#$02,$0025(a0)
		rts
loc_d4C8:
		rts
;=============================================================================== 
; Sub Routine AnimateSprite
; [ End ]		         
;===============================================================================   

; ===========================================================================
; Bizarrely,Sonic 1 used a table instead of a direct reference to the
; foreground camera's X position
; dword_d4CA:
BldSpr_ScrPos:	dc.l	0			; NULL
		dc.l	Camera_X_pos_copy	; COPY of camera X position
		dc.l	Camera_BG_X_pos		; BG1 camera X position
		dc.l	Camera_BG3_X_pos	; BG3 camera X position

; ---------------------------------------------------------------------------
; Subroutine to convert mappings (etc) to proper Megadrive sprites
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_d4DA:
BuildSprites:
		tst.w	(Two_player_mode).w
		bne.w	Build_Sprites_2p

		lea	(Sprite_Table).w,a2
		moveq	#0,d5
		moveq	#0,d4
		tst.b	(Level_started_flag).w
		beq.s	loc_d4F4
		bsr.w	BuildRings

loc_d4F4:
		lea	(Sprite_Table_Input).w,a4
		moveq	#7,d7	; 8 priority levels
; loc_d4FA:
BuildSprites_LevelLoop:
		tst.w	(a4)	; does this level have any objects?
		beq.w	BuildSprites_NextLevel	; if not,check the next one
		moveq	#2,d6	; set next object to check for
; loc_d502:
BuildSprites_ObjLoop:
		movea.w	(a4,d6.w),a0	; a0=object

		; These are sanity checks,to detect invalid objects which should not
		; have been queued for display. S3K gets rids of them completely,
		; since they should not be needed and they just slow this code down.
		; After this build and until REV01,it appears that these checks were
		; used for debugging,as they deliberately crash the console if they
		; detect an invalid object,likely done to detect an issue that plagued
		; Sonic 1 where objects would display before initalizing (and even then
		; they STILL didn't fully fix the issue).
		tst.b	(a0)		; is this object slot occupied?
		beq.w	BranchTo_BuildSprites_NextObj	; if not,branch
		tst.l	4(a0)		; does this object have any mappings?
		beq.w	BranchTo_BuildSprites_NextObj	; if not,branch

		andi.b	#$7F,1(a0)	; clear on-screen flag
		move.b	1(a0),d0
		move.b	d0,d4
		btst	#6,d0		; is the multi-draw flag set?
		bne.w	BuildSprites_MultiDraw	; if yes,branch
		andi.w	#$C,d0		; is it to be positioned by the screen coordinates?
		beq.s	BuildSprites_ScreenSpaceObj	; if yes,branch
		movea.l	BldSpr_ScrPos(pc,d0.w),a1
		moveq	#0,d0
		move.b	$19(a0),d0
		move.w	8(a0),d3
		sub.w	(a1),d3
		move.w	d3,d1
		add.w	d0,d1		; is the object right edge to the left of the screen?
		bmi.w	BuildSprites_NextObj	; if yes,branch
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#320,d1		; is the object left edge to the right of the screen?
		bge.w	BuildSprites_NextObj	; if yes,branch
		addi.w	#128,d3
		btst	#4,d4		; is the accurate Y check flag set?
		beq.s	BuildSprites_ApproxYCheck	; if not,branch
		moveq	#0,d0
		move.b	$16(a0),d0
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		move.w	d2,d1
		add.w	d0,d1		; is the object above the screen?
		bmi.s	BuildSprites_NextObj	; if yes,branch
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#224,d1		; is the object below the screen?
		bge.s	BuildSprites_NextObj	; if yes,branch
		addi.w	#128,d2
		bra.s	BuildSprites_DrawSprite
; ===========================================================================
; loc_d580:
BuildSprites_ScreenSpaceObj:
		move.w	$A(a0),d2
		move.w	8(a0),d3
		bra.s	BuildSprites_DrawSprite
; ===========================================================================
; loc_d58A:
BuildSprites_ApproxYCheck:
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		addi.w	#128,d2
		cmpi.w	#-32+128,d2
		bcs.s	BuildSprites_NextObj
		cmpi.w	#32+128+224,d2
		bcc.s	BuildSprites_NextObj
; loc_d5A2:
BuildSprites_DrawSprite:
		movea.l	4(a0),a1
		moveq	#0,d1
		btst	#5,d4		; is the static mappings flag set?
		bne.s	loc_d5BE	; if yes,branch
		move.b	$1A(a0),d1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_d5C2

loc_d5BE:
		bsr.w	DrawSprite

loc_d5C2:
		ori.b	#$80,1(a0)	; set on-screen flag
; loc_d5C8:
BuildSprites_NextObj:
		addq.w	#2,d6		; load next object
		subq.w	#2,(a4)		; decrement object count
		bne.w	BuildSprites_ObjLoop	; if there are any objects left,branch
; loc_d5d0:
BuildSprites_NextLevel:
		lea	$80(a4),a4	; load next priority level
		dbf	d7,BuildSprites_LevelLoop	; loop
		move.b	d5,(Sprite_count).w
		; Terminate the sprite list.
		; If the sprite list is full,then set the link field of the last
		; entry to 0. Otherwise,push the next sprite offscreen and set its
		; link field to 0. You might be thinking why this doesn't just do the
		; first one no matter what. Well,think about what if the sprite list
		; was empty: then it would access data before the start of the list.
		cmpi.b	#80,d5	; was the sprite limit reached?
		beq.s	loc_d5EA	; if yes,branch
		move.l	#0,(a2)	; set link field to 0
		rts

loc_d5EA:
		move.b	#0,-5(a2)
		rts
; ===========================================================================
; loc_d5F2:
BranchTo_BuildSprites_NextObj:
		; Later builds and REV00 added a line here that would make the game
		; read at address $00000001,crashing it; read above for more info.
		bra.s	BuildSprites_NextObj
; ===========================================================================
; loc_d5F4:
BuildSprites_MultiDraw:
		move.l	a4,-(sp)
		lea	(Camera_X_pos).w,a4
		movea.w	2(a0),a3
		movea.l	4(a0),a5
		moveq	#0,d0

		; check if object is within X bounds
		move.b	$E(a0),d0	; load pixel width
		move.w	8(a0),d3
		sub.w	(a4),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	BuildSprites_MultiDraw_NextObj
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#320,d1
		bge.w	BuildSprites_MultiDraw_NextObj
		addi.w	#128,d3

		; check if object is within Y bounds
		btst	#4,d4
		beq.s	loc_d652
		moveq	#0,d0
		move.b	$14(a0),d0	; load pixel height
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.w	BuildSprites_MultiDraw_NextObj
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#224,d1
		bge.s	BuildSprites_MultiDraw_NextObj
		addi.w	#128,d2
		bra.s	loc_d66A

loc_d652:
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		addi.w	#128,d2
		cmpi.w	#-32+128,d2
		bcs.s	BuildSprites_MultiDraw_NextObj
		cmpi.w	#32+128+224,d2
		bcc.s	BuildSprites_MultiDraw_NextObj

loc_d66A:
		moveq	#0,d1
		move.b	$B(a0),d1	; get current frame
		beq.s	loc_d684
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_d684
		bsr.w	ChkDrawSprite	; draw the sprite

loc_d684:
		ori.b	#$80,1(a0)	; set on-screen flag
		lea	$10(a0),a6
		moveq	#0,d0
		move.b	$F(a0),d0	; get child sprite count
		subq.w	#1,d0
		bcs.s	BuildSprites_MultiDraw_NextObj	; if there are 0,go to next object

loc_d698:
		swap	d0
		move.w	(a6)+,d3	; get X pos
		sub.w	(a4),d3
		addi.w	#128,d3
		move.w	(a6)+,d2	; get Y pos
		sub.w	4(a4),d2
		addi.w	#128,d2
		addq.w	#1,a6
		moveq	#0,d1
		move.b	(a6)+,d1	; get mapping frame
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_d6C4
		bsr.w	ChkDrawSprite

loc_d6C4:
		swap	d0
		dbf	d0,loc_d698	; repeat for number of child sprites
; loc_d6CA:
BuildSprites_MultiDraw_NextObj:
		movea.l	(sp)+,a4
		bra.w	BuildSprites_NextObj
; End of function BuildSprites


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Fun fact: due to the RAM being differently arranged in this prototype,
; Ashura can only be 'activated' underwater in HPZ by placing waterfalls
; sub_d6d0:
ChkDrawSprite:
		cmpi.b	#80,d5		; has the sprite limit been reached?
		bcs.s	DrawSprite_Loop	; if not,branch
		rts
; End of function ChkDrawSprite


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_d6D8:
DrawSprite:
		movea.w	2(a0),a3
		cmpi.b	#80,d5
		bcc.s	return_d718
		btst	#0,d4
		bne.s	DrawSprite_FlipX
		btst	#1,d4
		bne.w	loc_d77A
; loc_d6F0:
DrawSprite_Loop:
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+	; set Y pos
		move.b	(a1)+,(a2)+	; set sprite size
		addq.b	#1,d5
		move.b	d5,(a2)+	; set link field
		move.w	(a1)+,d0
		add.w	a3,d0
		move.w	d0,(a2)+	; set art tile and flags
		addq.w	#2,a1		; reserve this part of the mappings for two-player
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_d712
		addq.w	#1,d0		; avoid activating sprite masking

loc_d712:
		move.w	d0,(a2)+
		dbf	d1,DrawSprite_Loop

return_d718:
		rts
; ===========================================================================
; loc_d71A:
DrawSprite_FlipX:
		btst	#1,d4
		bne.w	loc_d7C2

loc_d722:
		move.b	(a1)+,d0
		ext.w   d0
		add.w   d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	d4,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		add.w   A3,d0
		eori.w  #$0800,d0
		move.w	d0,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		neg.w	d0
		move.b	loc_d75A(pc,d4),d4
		sub.w   d4,d0
		add.w   d3,d0
		andi.w	#$01FF,d0
		bne.s	loc_d752
		addq.w	#1,d0
loc_d752:
		move.w	d0,(a2)+
		dbf	d1,loc_d722
		rts
loc_d75A:
		dc.b	$08,$08,$08,$08,$10,$10,$10,$10,$18,$18,$18,$18,$20,$20,$20,$20
loc_d76A:		
		dc.b	$08,$10,$18,$20,$08,$10,$18,$20,$08,$10,$18,$20,$08,$10,$18,$20
loc_d77A:
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w   d0
		neg.w	d0
		move.b	loc_d76A(pc,d4),d4
		sub.w   d4,d0
		add.w   d2,d0		
		move.w	d0,(a2)+
		move.b	(a1)+,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		add.w   A3,d0
		eori.w  #$1000,d0
		move.w	d0,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		add.w   d3,d0
		andi.w	#$01FF,d0
		bne.s	loc_d7AA
		addq.w	#1,d0
loc_d7AA:
		move.w	d0,(a2)+  
		dbf	d1,loc_d77A				    
		rts 
loc_d7B2:		
		dc.b	$08,$10,$18,$20,$08,$10,$18,$20,$08,$10,$18,$20,$08,$10,$18,$20
loc_d7C2:
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w   d0
		neg.w	d0
		move.b	loc_d7B2(pc,d4),d4
		sub.w   d4,d0
		add.w   d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	d4,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		add.w   A3,d0
		eori.w  #$1800,d0
		move.w	d0,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		neg.w	d0
		move.b	loc_D804(pc,d4),d4
		sub.w   d4,d0    
		add.w   d3,d0
		andi.w	#$01FF,d0
		bne.s	loc_d7FC
		addq.w	#1,d0
loc_d7FC:
		move.w	d0,(a2)+
		dbf	d1,loc_d7C2
		rts
loc_D804:
		dc.b	$08,$08,$08,$08,$10,$10,$10,$10,$18,$18,$18,$18,$20,$20,$20,$20
;=============================================================================== 
; Sub Routine Build_Sprites_2p
; [ Begin ]		         
;===============================================================================  
BldSpr_ScrPos_2p: ; loc_D814:		
		dc.l	0,Camera_X_pos,Camera_BG_X_pos,Camera_BG3_X_pos
Build_Sprites_2p: ; loc_D824:
		tst.w	(Hint_flag).w
		bne.s	Build_Sprites_2p        ; loc_D824
		lea	(Sprite_Table).w,A2
		moveq	#$02,d5
		moveq	#0,d4
		move.l	#$01D80F01,(a2)+
		move.l	#$00000001,(a2)+
		move.l	#$01D80F02,(a2)+
		move.l	#$00000000,(a2)+
		tst.b	(Level_started_flag).w
		beq.s	loc_D854
		bsr.w	loc_E098
loc_D854:
		lea	(Sprite_Table_Input).w,A4
		moveq	#$07,d7
loc_D85A:		
		move.w	(a4),d0
		beq.w	 loc_D932
		move.w	d0,-(sp)
		moveq	#$02,d6
loc_D864:		
		move.w	$00(A4,d6),A0
		tst.b	(a0)
		beq.w	 loc_D928
		andi.b	#$7F,$0001(a0)
		move.b	$0001(a0),d0
		move.b	d0,d4
		btst	#$06,d0
		bne.w	 loc_DA6C
		andi.w	#$000C,d0
		beq.s	loc_D8D8
		move.l	BldSpr_ScrPos_2p(pc,d0),A1  ; loc_D814
		moveq	#0,d0
		move.b	$0019(a0),d0
		move.w	8(a0),d3
		sub.w   (a1),d3
		move.w	d3,d1
		add.w   d0,d1
		bmi.w	 loc_D928
		move.w	d3,d1
		sub.w   d0,d1
		cmpi.w	#$0140,d1
		bge.s   loc_D928
		addi.w	#$0080,d3
		btst	#$04,d4  
		beq.s	loc_D8E6
		moveq	#0,d0
		move.b	$0016(a0),d0
		move.w	$000C(a0),d2
		sub.w   $0004(a1),d2
		move.w	d2,d1
		add.w   d0,d1
		bmi.s	loc_D928
		move.w	d2,d1
		sub.w   d0,d1
		cmpi.w	#$00E0,d1
		bge.s   loc_D928
		addi.w	#$0100,d2
		bra.s	loc_D902
loc_D8D8:		
		move.w	$000A(a0),d2
		move.w	8(a0),d3
		addi.w	#$0080,d2
		bra.s	loc_D902
loc_D8E6:		
		move.w	$000C(a0),d2
		sub.w   $0004(a1),d2
		addi.w	#$0080,d2
		cmpi.w	#$0060,d2
		bcs.s	loc_D928
		cmpi.w	#$0180,d2
		bcc.s	loc_D928
		addi.w	#$0080,d2
loc_D902:
		move.l	$0004(a0),A1
		moveq	#0,d1
		btst	#$05,d4
		bne.s	loc_D91E
		move.b	$001A(a0),d1
		add.w   d1,d1
		adda.w	$00(A1,d1),A1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_D922
loc_D91E:
		bsr.w	loc_DC70
loc_D922:
		ori.b   #$80,$0001(a0)
loc_D928:		
		addq.w	#$02,d6
		subq.w	#$02,(sp)
		bne.w	 loc_D864
		addq.w	#$02,sp
loc_D932:		
		lea	$0080(a4),A4
		dbf	d7,loc_D85A
		move.b	d5,(Sprite_count).w
		cmpi.b	#$50,d5
		bcc.s	loc_D94C
		move.l	#$00000000,(a2)
		bra.s	loc_D964
loc_D94C:
		move.b	#$00,-5(a2)
		bra.s	loc_D964
loc_D954:
		dc.b	$00,$00,$00,$00,$FF,$FF,$EE,$20,$FF,$FF,$EE,$28,$FF,$FF,$EE,$38		           
loc_D964:
		lea	(Sprite_Table_2).w,A2
		moveq	#0,d5
		moveq	#0,d4
		tst.b	(Level_started_flag).w
		beq.s	loc_D976
		bsr.w	loc_E0AE
loc_D976:
		lea	(Sprite_Table_Input).w,A4
		moveq	#$07,d7
loc_D97C:		
		tst.w	(a4)
		beq.w	 loc_DA4A
		moveq	#$02,d6
loc_D984:		
		move.w	$00(A4,d6),A0
		tst.b	(a0)
		beq.w	 loc_DA42
		move.b	$0001(a0),d0
		move.b	d0,d4
		btst	#$06,d0
		bne.w	loc_DB4E
		andi.w	#$C,d0
		beq.s	loc_D9F2
		move.l	loc_D954(pc,d0),A1
		moveq	#0,d0
		move.b	$19(a0),d0
		move.w	8(a0),d3
		sub.w   (a1),d3
		move.w	d3,d1
		add.w   d0,d1
		bmi.w	 loc_DA42
		move.w	d3,d1
		sub.w   d0,d1
		cmpi.w	#$0140,d1
		bge.s   loc_DA42
		addi.w	#$0080,d3
		btst	#$04,d4
		beq.s	loc_DA00
		moveq	#0,d0
		move.b	$0016(a0),d0
		move.w	$000C(a0),d2
		sub.w   $0004(a1),d2
		move.w	d2,d1 
		add.w   d0,d1
		bmi.s	loc_DA42
		move.w	d2,d1
		sub.w   d0,d1
		cmpi.w	#$00E0,d1
		bge.s   loc_DA42
		addi.w	#$01E0,d2
		bra.s	loc_DA1C
loc_D9F2:
		move.w	$000A(a0),d2
		move.w	8(a0),d3
		addi.w	#$0160,d2
		bra.s	loc_DA1C
loc_DA00:
		move.w	$000C(a0),d2
		sub.w   $0004(a1),d2
		addi.w	#$0080,d2
		cmpi.w	#$0060,d2
		bcs.s	loc_DA42
		cmpi.w	#$0180,d2
		bcc.s	loc_DA42
		addi.w	#$0160,d2
loc_DA1C:
		move.l	$0004(a0),A1
		moveq	#0,d1
		btst	#$05,d4
		bne.s	loc_DA38
		move.b	$001A(a0),d1
		add.w   d1,d1
		adda.w	$00(A1,d1),A1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_DA3C
loc_DA38:
		bsr.w	loc_DC70
loc_DA3C:
		ori.b   #$80,$0001(a0)
loc_DA42:		
		addq.w	#$02,d6
		subq.w	#$02,(a4)
		bne.w	 loc_D984
loc_DA4A:		
		lea	$0080(a4),A4
		dbf	d7,loc_D97C		 
		move.b	d5,(Sprite_count).w
		cmpi.b	#$50,d5
		beq.s	loc_DA64
		move.l	#$00000000,(a2)
		rts
loc_DA64:
		move.b	#$00,-5(a2)
		rts
loc_DA6C:
		move.l	A4,-(sp)
		lea	(Camera_X_pos).w,A4
		move.w	$0002(a0),A3
		move.l	$0004(a0),A5
		moveq	#0,d0
		move.b	$000E(a0),d0
		move.w	8(a0),d3
		sub.w   (a4),d3
		move.w	d3,d1
		add.w   d0,d1
		bmi.w	 loc_DB48
		move.w	d3,d1
		sub.w   d0,d1
		cmpi.w	#$0140,d1
		bge.w    loc_DB48
		addi.w	#$0080,d3
		btst	#$04,d4
		beq.s	loc_DACC
		moveq	#0,d0
		move.b	$0014(a0),d0
		move.w	$000C(a0),d2
		sub.w   $0004(a4),d2
		move.w	d2,d1
		add.w   d0,d1
		bmi.w	 loc_DB48
		move.w	d2,d1
		sub.w   d0,d1
		cmpi.w	#$00E0,d1
		bge.w    loc_DB48
		addi.w	#$0100,d2
		bra.s	loc_DAE8
loc_DACC:
		move.w	$000C(a0),d2
		sub.w   $0004(a4),d2
		addi.w	#$0080,d2
		cmpi.w	#$0060,d2
		bcs.s	loc_DB48
		cmpi.w	#$0180,d2
		bcc.s	loc_DB48
		addi.w	#$0080,d2
loc_DAE8:		
		moveq	#0,d1
		move.b	$000B(a0),d1
		beq.s	loc_DB02
		add.w   d1,d1
		move.l	A5,A1
		adda.w	$00(A1,d1),A1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_DB02
		bsr.w	loc_DC68
loc_DB02:
		ori.b   #$80,$0001(a0)
		lea	$0010(a0),A6
		moveq	#0,d0
		move.b	$000F(a0),d0
		subq.w	#1,d0
		bcs.s	loc_DB48
loc_DB16:		
		swap	d0
		move.w	(a6)+,d3
		sub.w   (a4),d3
		addi.w	#$0080,d3
		move.w	(a6)+,d2
		sub.w   $0004(a4),d2
		addi.w	#$0100,d2
		addq.w	#1,A6
		moveq	#0,d1
		move.b	(a6)+,d1
		add.w   d1,d1
		move.l	A5,A1
		adda.w	$00(A1,d1),A1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_DB42
		bsr.w	loc_DC68
loc_DB42:
		swap	d0
		dbf	d0,loc_DB16
loc_DB48:
		move.l	(sp)+,A4
loc_DB4A:		
		bra.w	loc_D928		     
loc_DB4E:
		move.l	A4,-(sp)
		lea	(Camera_X_pos_P2).w,A4
		move.w	$0002(a0),A3
		move.l	$0004(a0),A5
		moveq	#0,d0
		move.b	$000E(a0),d0
		move.w	8(a0),d3
		sub.w   (a4),d3
		move.w	d3,d1
		add.w   d0,d1
		bmi.w	 loc_DC2A
		move.w	d3,d1
		sub.w   d0,d1
		cmpi.w	#$0140,d1
		bge.w    loc_DC2A
		addi.w	#$0080,d3
		btst	#$04,d4
		beq.s	loc_DBAE
		moveq	#0,d0
		move.b	$0014(a0),d0
		move.w	$000C(a0),d2
		sub.w   $0004(a4),d2
		move.w	d2,d1
		add.w   d0,d1
		bmi.w	 loc_DC2A
		move.w	d2,d1
		sub.w   d0,d1
		cmpi.w	#$00E0,d1
		bge.w    loc_DC2A
		addi.w	#$01E0,d2
		bra.s	loc_DBCA
loc_DBAE:		
		move.w	$000C(a0),d2
		sub.w   $0004(a4),d2
		addi.w	#$0080,d2
		cmpi.w	#$0060,d2
		bcs.s	loc_DC2A
		cmpi.w	#$0180,d2
		bcc.s	loc_DC2A
		addi.w	#$0160,d2
loc_DBCA:
		moveq	#0,d1
		move.b	$000B(a0),d1
		beq.s	loc_DBE4
		add.w   d1,d1
		move.l	A5,A1
		adda.w	$00(A1,d1),A1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_DBE4
		bsr.w	loc_DC68
loc_DBE4: 
		ori.b   #$80,$0001(a0)
		lea	$0010(a0),A6
		moveq	#0,d0
		move.b	$000F(a0),d0
		subq.w	#1,d0
		bcs.s	loc_DC2A
loc_DBF8:		
		swap	d0
		move.w	(a6)+,d3
		sub.w   (a4),d3
		addi.w	#$0080,d3
		move.w	(a6)+,d2
		sub.w   $0004(a4),d2
		addi.w	#$01E0,d2
		addq.w	#1,A6
		moveq	#0,d1
		move.b	(a6)+,d1
		add.w   d1,d1
		move.l	A5,A1
		adda.w	$00(A1,d1),A1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_DC24
		bsr.w	loc_DC68
loc_DC24:
		swap	d0
		dbf	d0,loc_DBF8    
loc_DC2A:
		move.l	(sp)+,A4
		bra.w	loc_DA42
;=============================================================================== 
; Sub Routine Build_Sprites_2p
; [ End ]		         
;===============================================================================		  

;=============================================================================== 
; Sub Routine Adjust2PArtPointer         
; [ Begin ]		               2P Mode Objects Attributes #1
;===============================================================================        
; ModifySpriteAttr_2P:          
Adjust2PArtPointer: ; loc_DC30: 
		tst.w	(Two_player_mode).w
		beq.s	loc_DC4A
		move.w	$0002(a0),d0
		andi.w	#$07FF,d0
		lsr.w	#1,d0
		andi.w	#$F800,$0002(a0)
		add.w   d0,$0002(a0)
loc_DC4A:
		rts
;=============================================================================== 
; Sub Routine Adjust2PArtPointer         
; [ End ]				 2P Mode Objects Attributes #1
;===============================================================================		 

;=============================================================================== 
; Sub Routine Adjust2PArtPointer         
; [ Begin ]		               2P Mode Objects Attributes #2
;===============================================================================		  
; ModifyA1SpriteAttr_2P:
Adjust2PArtPointer2: ; loc_DC4C: 
		tst.w	(Two_player_mode).w
		beq.s	ModifySpriteAttr_Not2pmode ; loc_DC66
		move.w	$0002(a1),d0
		andi.w	#$07FF,d0
		lsr.w	#1,d0
		andi.w	#$F800,$0002(a1)
		add.w   d0,$0002(a1)
ModifySpriteAttr_Not2pmode ; loc_DC66:
		rts 
;=============================================================================== 
; Sub Routine Adjust2PArtPointer         
; [ End ]		               2P Mode Objects Attributes #2
;===============================================================================
						  
loc_DC68:
		cmpi.b	#$50,d5
		bcs.s	loc_DC88
		rts
loc_DC70:
		move.w	$0002(a0),A3
		cmpi.b	#$50,d5
		bcc.s	loc_DCB4
		btst	#$00,d4
		bne.s	loc_DCC6
		btst	#1,d4
		bne.w	 loc_Dd28
loc_DC88:		
		move.b	(a1)+,d0
		ext.w   d0
		add.w   d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4    
		move.b	loc_DCB6(pc,d4),(a2)+             
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		add.w   A3,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w   d3,d0
		andi.w	#$01FF,d0
		bne.s	loc_DCAE
		addq.w	#1,d0
loc_DCAE:
		move.w	d0,(a2)+
		dbf	d1,loc_DC88
loc_DCB4:		
		rts		
loc_DCB6:               
		dc.b	$00,$00,$01,$01,$04,$04,$05,$05,$08,$08,$09,$09,$0C,$0C,$0D,$0D
loc_DCC6:
		btst	#1,d4
		bne.w	 loc_DD84
loc_DCCE:		
		move.b	(a1)+,d0
		ext.w   d0
		add.w   d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	loc_DCB6(pc,d4),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		add.w   A3,d0
		eori.w  #$0800,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		neg.w	d0
		move.b	loc_Dd08(pc,d4),d4
		sub.w   d4,d0
		add.w   d3,d0
		andi.w	#$01FF,d0
		bne.s	loc_Dd00
		addq.w	#1,d0
loc_Dd00:
		move.w	d0,(a2)+
		dbf	d1,loc_DCCE
		rts    
loc_Dd08:
		dc.b	$08,$08,$08,$08,$10,$10,$10,$10,$18,$18,$18,$18,$20,$20,$20,$20  
loc_Dd18: 
		dc.b	$08,$10,$18,$20,$08,$10,$18,$20,$08,$10,$18,$20,$08,$10,$18,$20
loc_Dd28:
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w   d0
		neg.w	d0
		move.b	loc_Dd18(pc,d4),d4
		sub.w   d4,d0
		add.w   d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	loc_Dd64(pc,d4),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		add.w   A3,d0
		eori.w  #$1000,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w   d3,d0
		andi.w	#$01FF,d0
		bne.s	loc_Dd5C
		addq.w	#1,d0   
loc_Dd5C:
		move.w	d0,(a2)+
		dbf	d1,loc_Dd28
		rts         
loc_Dd64:
		dc.b	$00,$00,$01,$01,$04,$04,$05,$05,$08,$08,$09,$09,$0C,$0C,$0D,$0D 
loc_Dd74:  
		dc.b	$08,$10,$18,$20,$08,$10,$18,$20,$08,$10,$18,$20,$08,$10,$18,$20
loc_DD84:
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w   d0
		neg.w	d0
		move.b	loc_Dd74(pc,d4),d4
		sub.w   d4,d0
		add.w   d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	loc_Dd64(pc,d4),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		add.w   A3,d0
		eori.w  #$1800,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		neg.w	d0
		move.b	loc_DDC8(pc,d4),d4
		sub.w   d4,d0
		add.w   d3,d0
		andi.w	#$01FF,d0
		bne.s	loc_DDC0
		addq.w	#1,d0
loc_DDC0:
		move.w	d0,(a2)+
		dbf	d1,loc_DD84
		rts             
loc_DDC8:
		dc.b	$08,$08,$08,$08,$10,$10,$10,$10,$18,$18,$18,$18,$20,$20,$20,$20
loc_DDD8:
		move.w	8(a0),d0
		sub.w   (Camera_X_pos).w,d0
		bmi.s	loc_DDFC
		cmpi.w	#$0140,d0
		bge.s   loc_DDFC
		move.w	$000C(a0),d1
		sub.w   (Camera_Y_pos).w,d1
		bmi.s	loc_DDFC
		cmpi.w	#$00E0,d1
		bge.s   loc_DDFC
		moveq	#0,d0
		rts
loc_DDFC:
		moveq	#1,d0
		rts 
;loc_DE00:
		moveq	#0,d1
		move.b	$0019(a0),d1
		move.w	8(a0),d0
		sub.w   (Camera_X_pos).w,d0
		add.w   d1,d0
		bmi.s	loc_DE30
		add.w   d1,d1
		sub.w   d1,d0
		cmpi.w	#$0140,d0
		bge.s   loc_DE30
		move.w	$000C(a0),d1
		sub.w   (Camera_Y_pos).w,d1
		bmi.s	loc_DE30
		cmpi.w	#$00E0,d1
		bge.s   loc_DE30
		moveq	#0,d0
		rts
loc_DE30:
		moveq	#1,d0
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Pseudo-object that manages where rings are placed onscreen
; as you move through the level,and otherwise updates them.
; ---------------------------------------------------------------------------

; sub_DE34: Load_Ring_Pos:
RingsManager:
		moveq	#0,d0
		move.b	(Rings_manager_routine).w,d0
		move.w	RingsManager_States(pc,d0.w),d0
		jmp	RingsManager_States(pc,d0.w)
; ===========================================================================
; off_DE42:
RingsManager_States:	offsetTable
		offsetTableEntry.w RingsManager_Init
		offsetTableEntry.w RingsManager_Main
; ===========================================================================
; loc_DE46:
RingsManager_Init:
		addq.b	#2,(Rings_manager_routine).w
		bsr.w	loc_E140	; perform initial setup
		lea	(Ring_Positions).w,a1
		move.w	(Camera_X_pos).w,d4
		subq.w	#8,d4
		bhi.s	+
		moveq	#1,d4		; no negative values allowed
		bra.s	+

-		lea	6(a1),a1	; load next ring
+
		cmp.w	2(a1),d4	; is the X pos of the ring < camera X pos?
		bhi.s	-		; if it is,check next ring
		move.w	a1,(Ring_start_addr).w	; set start addresses
		move.w	a1,(Ring_start_addr_P2).w
		addi.w	#320+16,d4	; advance by a screen (and a bit more)
		bra.s	+
		
-		lea	6(a1),a1	; load next ring
+
		cmp.w	2(a1),d4	; is the X pos of the ring < camera X + 336?
		bhi.s	-		; if it is,check next ring
		move.w	a1,(Ring_end_addr).w	; set end addresses
		move.w	a1,(Ring_end_addr_P2).w
		move.b	#1,(Level_started_flag).w
		rts
; ===========================================================================
; loc_DE90:
RingsManager_Main:
		lea	(Ring_consumption_table).w,a2
		move.w	(a2)+,d1
		subq.w	#1,d1	; are any rings currently being consumed?
		bcs.s	++	; if not,branch
	
-		move.w	(a2)+,d0	; is there a ring in this slot?
		beq.s	-		; if not,branch
		move.w	d0,a1		; load ring address
		subq.b	#1,(a1)		; decrement timer
		bne.s	+		; if it's not 0 yet,branch
		move.b	#6,(a1)		; reset timer
		addq.b	#1,1(a1)	; increment frame
		cmpi.b	#8,1(a1)	; is it destruction time yet?
		bne.s	+		; if not,branch
		move.w	#-1,(a1)	; destroy ring
		move.w	#0,-2(a2)	; clear ring entry
		subq.w	#1,(Ring_consumption_table).w	; subtract count
+		dbf	d1,-		; repeat for ALL rings in the table
+
		; update ring start and end addresses
		move.w	(Ring_start_addr).w,a1
		move.w	(Camera_X_pos).w,d4
		subq.w	#8,d4
		bhi.s	+
		moveq	#1,d4
		bra.s	+
; ---------------------------------------------------------------------------
-		lea	6(a1),a1
+
		cmp.w	2(a1),d4
		bhi.s	-
		bra.s	+
; ---------------------------------------------------------------------------
-		subq.w	#6,a1
+
		cmp.w	-4(a1),d4
		bls.s	-
		move.w	a1,(Ring_start_addr).w	; update start address
		move.w	(Ring_end_addr).w,a2
		addi.w	#320+16,d4
		bra.s	+
; ---------------------------------------------------------------------------
-		lea	6(a2),a2
+
		cmp.w	2(a2),d4
		bhi.s	-
		bra.s	+
; ---------------------------------------------------------------------------
-		subq.w	#6,a2
+
		cmp.w	-4(a2),d4
		bls.s	-
		move.w	a2,(Ring_end_addr).w	; update end address
		tst.w	(Two_player_mode).w	; are we in 2P mode?
		bne.s	+			; if we are,update P2 addresses
		move.w	a1,(Ring_start_addr_P2).w	; otherwise,copy over 1P addresses
		move.w	a2,(Ring_end_addr_P2).w
		rts
; ---------------------------------------------------------------------------
+
		; update ring start and end addresses for P2
		move.w	(Ring_start_addr_P2).w,a1
		move.w	(Camera_X_pos_P2).w,d4
		subq.w	#8,d4
		bhi.s	+
		moveq	#1,d4
		bra.s	+
; ---------------------------------------------------------------------------
-		lea	6(a1),a1
+
		cmp.w	2(a1),d4
		bhi.s	-
		bra.s	+
; ---------------------------------------------------------------------------
-		subq.w	#6,a1
+
		cmp.w	-4(a1),d4
		bls.s	-
		move.w	a1,(Ring_start_addr_P2).w	; update start address
		move.w	(Ring_end_addr_P2).w,a2
		addi.w	#320+16,d4
		bra.s	+
; ---------------------------------------------------------------------------
-		lea	6(a2),a2
+
		cmp.w	2(a2),d4
		bhi.s	-
		bra.s	+
; ---------------------------------------------------------------------------
-		subq.w	#6,a2
+
		cmp.w	-4(a2),d4
		bls.s	-
		move.w	a2,(Ring_end_addr_P2).w		; update end address
		rts
; End of function RingsManager

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to handle ring collision
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_DF6C:
Touch_Rings:
		move.w	(Ring_start_addr).w,a1
		move.w	(Ring_end_addr).w,a2
		cmpa.w	#MainCharacter,a0
		beq.s	+
		move.w	(Ring_start_addr_P2).w,a1
		move.w	(Ring_end_addr_P2).w,a2
+
		cmpa.l	a1,a2		; are there no rings in this area?
		beq.w	Touch_Rings_Done	; if yes,branch
		cmpi.w	#$5A,$30(a0)
		bcc.w	Touch_Rings_Done

		move.w	8(a0),d2
		move.w	$C(a0),d3
		subi.w	#8,d2		; assume X radius to be 8
		moveq	#0,d5
		move.b	$16(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3		; subtract (Y radius - 3) from Y pos
		; this only checks for the last frame of Sonic's ducking animation,since Sonic 1 only had one frame
		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
		bne.s	+		; if not,branch
		addi.w	#$C,d3
		moveq	#$A,d5
+
		move.w	#6,d1		; set ring radius
		move.w	#$C,d6		; set ring diameter
		move.w	#$10,d4		; set Sonic's X diameter
		add.w	d5,d5		; set Y diameter
; loc_DFC4:
Touch_Rings_Loop:
		tst.w	(a1)		; has this ring already been collided with?
		bne.w	Touch_NextRing	; if yes,branch
		move.w	2(a1),d0	; get ring X pos
		sub.w	d1,d0		; get ring left edge X pos
		sub.w	d2,d0		; subtract Sonic's left edge X pos
		bcc.s	+		; if Sonic's to the left of the ring,branch
		add.w	d6,d0		; add ring diameter
		bcs.s	++		; if Sonic's colliding,branch
		bra.w	Touch_NextRing	; otherwise,test next ring
+
		cmp.w	d4,d0		; has Sonic crossed the ring?
		bhi.w	Touch_NextRing	; if yes,branch
+
		move.w	4(a1),d0	; get ring Y pos
		sub.w	d1,d0		; get ring top edge pos
		sub.w	d3,d0		; subtract Sonic's top edge pos
		bcc.s	+		; if Sonic's above the ring,branch
		add.w	d6,d0		; add ring diameter
		bcs.s	++		; if Sonic's colliding,branch
		bra.w	Touch_NextRing	; otherwise,test next ring
+
		cmp.w	d5,d0		; has Sonic crossed the ring?
		bhi.w	Touch_NextRing	; if yes,branch
+
		move.w	#$604,(a1)	; set frame and destruction timer
		bsr.w	CollectRing
		lea	(Ring_consumption_table+2).w,a3

-		tst.w	(a3)+		; is this slot free?
		bne.s	-		; if not,repeat until you find one
		move.w	a1,-(a3)	; set ring address
		addq.w	#1,(Ring_consumption_table).w	; increase count
; loc_E010:
Touch_NextRing:
		lea	6(a1),a1
		cmpa.l	a1,a2		; are we at the last ring for the area?
		bne.w	Touch_Rings_Loop	; if not,branch
; return_E01A:
Touch_Rings_Done:
		rts
; End of subroutine Touch_Rings

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to draw on-screen rings
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_E01C:
BuildRings:
		move.w	(Ring_start_addr).w,a0
		move.w	(Ring_end_addr).w,a4
		cmpa.l	a0,a4	; are there any rings on-screen?
		bne.s	+	; if yes,branch
		rts
+
		lea	(Camera_X_pos).w,a3
; loc_E02E:
BuildRings_Loop:
		tst.w	(a0)
		bmi.w	loc_E08C
		move.w	2(a0),d3
		sub.w	(a3),d3
		addi.w	#$80,d3
		move.w	4(a0),d2
		sub.w	4(a3),d2
		addi.w	#8,d2
		bmi.s	loc_E08C
		cmpi.w	#$F0,d2
		bge.s	loc_E08C
		addi.w	#$78,d2
		lea	(MapUnc_Rings).l,a1
		moveq	#0,d1
		move.b	1(a0),d1
		bne.s	loc_E068
		move.b	(Rings_anim_frame).w,d1

loc_E068:
		add.w   d1,d1
		adda.w	$00(A1,d1),A1
		move.b	(a1)+,d0
		ext.w   d0
		add.w   d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		addi.w	#$26BC,d0
		move.w	d0,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		add.w   d3,d0
		move.w	d0,(a2)+
loc_E08C:
		lea	$0006(a0),A0
		cmpa.l  A0,A4
		bne.w	 BuildRings_Loop  
		rts
loc_E098:
		lea	(Camera_X_pos).w,A3
		move.w	#$0078,d6
		move.w	(Ring_start_addr).w,A0
		move.w	(Ring_end_addr).w,A4
		cmpa.l  A0,A4
		bne.s	loc_E0C4
		rts
loc_E0AE:
		lea	(Camera_X_pos_P2).w,A3
		move.w	#$0158,d6
		move.w	(Ring_start_addr_P2).w,A0
		move.w	(Ring_end_addr_P2).w,A4
		cmpa.l  A0,A4		
		bne.s	loc_E0C4
		rts
loc_E0C4:
		tst.w	(a0)
		bmi.w	 loc_E124
		move.w	$0002(a0),d3
		sub.w   (a3),d3
		addi.w	#$0080,d3
		move.w	$0004(a0),d2
		sub.w   $0004(a3),d2
		addi.w	#$0088,d2
		bmi.s	loc_E124
		cmpi.w	#$0170,d2
		bge.s   loc_E124
		add.w   d6,d2
		lea	(MapUnc_Rings).l,A1
		moveq	#0,d1
		move.b	$0001(a0),d1
		bne.s	loc_E0FC
		move.b	(Rings_anim_frame).w,d1
loc_E0FC:
		add.w   d1,d1
		adda.w	$00(A1,d1),A1
		move.b	(a1)+,d0
		ext.w   d0
		add.w   d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	loc_E130(pc,d4),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#$02,A1
		move.w	(a1)+,d0
		addi.w	#$235E,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w   d3,d0
		move.w	d0,(a2)+
loc_E124:		
		lea	$0006(a0),A0
		cmpa.l  A0,A4
		bne.w	 loc_E0C4
		rts   
loc_E130:
		dc.b	$00,$00,$01,$01,$04,$04,$05,$05,$08,$08,$09,$09,$0C,$0C,$0D,$0D  
loc_E140: ; Load Rings routine
		clearRAM Ring_Positions,Ring_Positions_End
		lea	(Ring_consumption_table).w,A1
		; Coding error,that '-$40' shouldn't be there: only half of 'Ring_consumption_table' is cleared.
		move.w	#bytesToLcnt(Ring_consumption_table_End-Ring_consumption_table-$40),d1
loc_E158:
		move.l	d0,(a1)+
		dbf	d1,loc_E158
		moveq	#0,d5
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b   #1,d0
		lsr.w	#$06,d0
		lea	(Rings_Layout).l,A1      ; loc_48000
		move.w	$00(A1,d0),d0
		lea	$00(A1,d0),A1
		lea	(Ring_Positions+6).w,A2
loc_E17C:		
		move.w	(a1)+,d2
		bmi.s	loc_E1C4
		move.w	(a1)+,d3
		bmi.s	loc_E1A4
		move.w	d3,d0
		rol.w   #$04,d0
		andi.w	#$0007,d0
		andi.w	#$0FFF,d3
loc_E190:		
		move.w	#0,(a2)+
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addi.w	#$0018,d2
		addq.w	#1,d5
		dbf	d0,loc_E190
		bra.s	loc_E17C
loc_E1A4:
		move.w	d3,d0
		rol.w   #$04,d0
		andi.w	#$0007,d0
		andi.w	#$0FFF,d3
loc_E1B0:		
		move.w	#0,(a2)+
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addi.w	#$0018,d3
		addq.w	#1,d5
		dbf	d0,loc_E1B0
		bra.s	loc_E17C
loc_E1C4:
		move.w	d5,(Perfect_rings_left).w
		moveq	#-1,d0
		move.l	d0,(a2)+
		lea	(Ring_Positions+2).w,A1
		move.w	#$00FE,d3
loc_E1d4:
		move.w	d3,d4
		lea	$0006(a1),A2
		move.w	(a1),d0
loc_E1DC:
		tst.w	(a2)
		beq.s	loc_E1EE
		cmp.w	(a2),d0
		bls.s   loc_E1EE
		move.l	(a1),d1
		move.l	(a2),d0
		move.l	d0,(a1)
		move.l	d1,(a2)
		swap	d0
loc_E1EE:
		lea	$0006(a2),A2
		dbf	d4,loc_E1DC
		lea	$0006(a1),A1
		dbf	d3,loc_E1d4
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
; Custom mappings format,in which the 'sprite pieces per frame' value
; is hardcoded to 1 (likely to save on CPU). Compare to Obj25_MapUnc_B036.

; This was customised even further in Sonic 3 & Knuckles,which lacks
; any offset table (with each sprite assumed to be 8 bytes),as well
; as sign-extended Y-pos and sprite size values
; off_E200:
MapUnc_Rings:	offsetTable
		offsetTableEntry.w loc_E210
		offsetTableEntry.w loc_E218
		offsetTableEntry.w loc_E220
		offsetTableEntry.w loc_E228
		offsetTableEntry.w loc_E230
		offsetTableEntry.w loc_E238
		offsetTableEntry.w loc_E240
		offsetTableEntry.w loc_E248

loc_E210:
		dc.l	$F8050000,$0000FFF8
loc_E218:
		dc.l	$F8050004,$0002FFF8
loc_E220:
		dc.l	$F8010008,$0004FFFC
loc_E228:
		dc.l	$F8050804,$0802FFF8
loc_E230:
		dc.l	$F805000A,$0005FFF8
loc_E238:
		dc.l	$F805180A,$1805FFF8
loc_E240:
		dc.l	$F805080A,$0805FFF8
loc_E248: 
		dc.l	$F805100A,$1005FFF8


; ===========================================================================
; ---------------------------------------------------------------------------
; Objects Manager
; Subroutine that keeps track of any objects that need to remember
; their state,such as monitors or enemies.
;
; input variables:
;  -none-
;
; writes:
;  d0,d1
;  d2 = respawn index of object to load
;  d6 = camera position
;
;  a0 = address in object placement list
;  a2 = respawn table
; ---------------------------------------------------------------------------
; sub_E250: Load_Object_Pos:
ObjectsManager:
		moveq	#0,d0
		move.b	(Obj_placement_routine).w,d0
		move.w	ObjectsManager_States(pc,d0.w),d0
		jmp	ObjectsManager_States(pc,d0.w)
; ===========================================================================
; off_E25E: Load_Object_Pos_Index:
ObjectsManager_States:	offsetTable
		offsetTableEntry.w ObjectsManager_Init
		offsetTableEntry.w Load_Object_Pos_Sub_02
		offsetTableEntry.w Load_Object_Pos_Sub_03
; ===========================================================================
; loc_E264: Load_Object_Pos_Sub_01:
ObjectsManager_Init:
		addq.b	#2,(Obj_placement_routine).w
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		lea	(Objects_Layout).l,a0
		move.l	a0,a1
		adda.w	(a0,d0.w),a0
		; Initialize each object load address with the first object in the layout
		move.l	a0,(Obj_load_addr_right).w
		move.l	a0,(Obj_load_addr_left).w
		move.l	a0,(Obj_load_addr_right_P2).w
		move.l	a0,(Obj_load_addr_left_P2).w
		lea	(Object_Respawn_Table).w,a2
		move.w	#$0101,(a2)+	; the first two bytes are not used as respawn values
		; Instead,they are used to keep track of the current respawn indexes

		; This clears longwords,but the loop counter is measured in words!
		; This causes $17C bytes to be cleared instead of $BE.
		move.w	#bytesToWcnt(Obj_respawn_data_End-Obj_respawn_data),d0 ; set loop counter

-		clr.l	(a2)+
		dbf	d0,-

		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d2
		move.w	(Camera_X_pos).w,d6
		subi.w	#$80,d6
		bcc.s	+
		moveq	#0,d6
+
		andi.w	#$FF80,d6
		move.l	(Obj_load_addr_right).w,a0

loc_E2B8:
		cmp.w	(a0),d6
		bls.s   loc_E2CA
		tst.b	$0004(a0)
		bpl.s	loc_E2C6
		move.b	(a2),d2
		addq.b	#1,(a2)
loc_E2C6:
		addq.w	#$06,A0
		bra.s	loc_E2B8
loc_E2CA:
		move.l	A0,(Obj_load_addr_right).w   
		move.l	A0,(Obj_load_addr_right_P2).w
		move.l	(Obj_load_addr_left).w,A0
		subi.w	#$0080,d6
		bcs.s	loc_E2EE
loc_E2DC:
		cmp.w	(a0),d6
		bls.s   loc_E2EE
		tst.b	$0004(a0)
		bpl.s	loc_E2EA
		addq.b	#1,$0001(a2)
loc_E2EA:
		addq.w	#$06,A0
		bra.s	loc_E2DC
loc_E2EE:
		move.l	A0,(Obj_load_addr_left).w
		move.l	A0,(Obj_load_addr_left_P2).w
		move.w	#$FFFF,(Camera_X_pos_last).w
		move.w	#$FFFF,(Camera_X_pos_last_P2).w
		tst.w	(Two_player_mode).w
		beq.s	Load_Object_Pos_Sub_02  ; loc_E310
		addq.b	#$02,(Obj_placement_routine).w
		bra.w	loc_E3DC
Load_Object_Pos_Sub_02: ;loc_E310:
		move.w	(Camera_X_pos).w,d1
		subi.w	#$0080,d1
		andi.w	#$FF80,d1
		move.w	d1,(Camera_X_pos_coarse).w
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d2
		move.w	(Camera_X_pos).w,d6
		andi.w	#$FF80,d6
		cmp.w	(Camera_X_pos_last).w,d6
		beq.w	 loc_E3DA
		bge.s   loc_E396
		move.w	d6,(Camera_X_pos_last).w
		move.l	(Obj_load_addr_left).w,A0
		subi.w	#$0080,d6
		bcs.s	loc_E372
loc_E346:
		cmp.w	-6(a0),d6
		bge.s   loc_E372
		subq.w	#$06,A0
		tst.b	$0004(a0)
		bpl.s	loc_E35C
		subq.b	#1,$0001(a2)
		move.b	$0001(a2),d2
loc_E35C:
		bsr.w	loc_E6C2
		bne.s	loc_E366
		subq.w	#$06,A0
		bra.s	loc_E346
loc_E366:
		tst.b	$0004(a0)
		bpl.s	loc_E370
		addq.b	#1,$0001(a2)
loc_E370:
		addq.w	#$06,A0
loc_E372:		
		move.l	A0,(Obj_load_addr_left).w
		move.l	(Obj_load_addr_right).w,A0
		addi.w	#$0300,d6 
loc_E37E:
		cmp.w	-6(a0),d6
		bgt.s   loc_E390
		tst.b	-2(a0)
		bpl.s	loc_E38C
		subq.b	#1,(a2)
loc_E38C:
		subq.w	#$06,A0
		bra.s	loc_E37E
loc_E390:
		move.l	A0,(Obj_load_addr_right).w
		rts
loc_E396:
		move.w	d6,(Camera_X_pos_last).w
		move.l	(Obj_load_addr_right).w,A0
		addi.w	#$0280,d6
loc_E3A2:
		cmp.w	(a0),d6
		bls.s   loc_E3B6
		tst.b	$0004(a0)
		bpl.s	loc_E3B0
		move.b	(a2),d2
		addq.b	#1,(a2)
loc_E3B0:
		bsr.w	loc_E6C2
		beq.s	loc_E3A2
loc_E3B6:
		move.l	A0,(Obj_load_addr_right).w
		move.l	(Obj_load_addr_left).w,A0
		subi.w	#$0300,d6
		bcs.s	loc_E3d6
loc_E3C4:
		cmp.w	(a0),d6
		bls.s   loc_E3d6
		tst.b	$0004(a0)
		bpl.s	loc_E3d2
		addq.b	#1,$0001(a2)
loc_E3d2:
		addq.w	#$06,A0
		bra.s	loc_E3C4
loc_E3d6:
		move.l	A0,(Obj_load_addr_left).w
loc_E3DA:
		rts
loc_E3DC:
		moveq	#-1,d0
		move.l	d0,(Object_manager_2P_RAM).w
		move.l	d0,(Object_manager_2P_RAM+4).w
		move.l	d0,(Object_manager_2P_RAM+8).w
		move.l	d0,(Object_manager_2P_RAM+$C).w
		move.w	#0,(Camera_X_pos_last).w
		move.w	#0,(Camera_X_pos_last_P2).w
		lea	(Object_Respawn_Table).w,A2
		move.w	(a2),(Obj_respawn_index_P2).w
		moveq	#0,d2
		lea	(Object_Respawn_Table).w,A5
		lea	(Obj_load_addr_right).w,A4
		lea	(Player_1_loaded_object_blocks).w,A1
		lea	(Player_2_loaded_object_blocks).w,A6
		moveq	#-2,d6
		bsr.w	loc_E570
		lea	(Player_1_loaded_object_blocks).w,A1
		moveq	#-1,d6
		bsr.w	loc_E570
		lea	(Player_1_loaded_object_blocks).w,A1
		moveq	#0,d6
		bsr.w	loc_E570
		lea	(Obj_respawn_index_P2).w,A5
		lea	(Obj_load_addr_right_P2).w,A4
		lea	(Player_2_loaded_object_blocks).w,A1
		lea	(Player_1_loaded_object_blocks).w,A6
		moveq	#-2,d6
		bsr.w	loc_E570
		lea	(Player_2_loaded_object_blocks).w,A1
		moveq	#-1,d6
		bsr.w	loc_E570
		lea	(Player_2_loaded_object_blocks).w,A1
		moveq	#0,d6
		bsr.w	loc_E570
Load_Object_Pos_Sub_03: ; loc_E458:
		move.w	(Camera_X_pos).w,d1
		andi.w	#$FF00,d1
		move.w	d1,(Camera_X_pos_coarse).w
		move.w	(Camera_X_pos_P2).w,d1
		andi.w	#$FF00,d1
		move.w	d1,(Camera_X_pos_coarse_P2).w
		move.b	(Camera_X_pos).w,d6
		andi.w	#$00FF,d6
		move.w	(Camera_X_pos_last).w,d0
		cmp.w	(Camera_X_pos_last).w,d6
		beq.s	loc_E498
		move.w	d6,(Camera_X_pos_last).w
		lea	(Object_Respawn_Table).w,A5
		lea	(Obj_load_addr_right).w,A4
		lea	(Player_1_loaded_object_blocks).w,A1
		lea	(Player_2_loaded_object_blocks).w,A6
		bsr.s	loc_E4C2
loc_E498:
		move.b	(Camera_X_pos_P2).w,d6
		andi.w	#$00FF,d6
		move.w	(Camera_X_pos_last_P2).w,d0
		cmp.w	(Camera_X_pos_last_P2).w,d6
		beq.s	loc_E4C0
		move.w	d6,(Camera_X_pos_last_P2).w
		lea	(Obj_respawn_index_P2).w,A5
		lea	(Obj_load_addr_right_P2).w,A4
		lea	(Player_2_loaded_object_blocks).w,A1
		lea	(Player_1_loaded_object_blocks).w,A6
		bsr.s	loc_E4C2
loc_E4C0:
		rts
loc_E4C2:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d2
		cmp.w	d0,d6
		beq.w	 loc_E3DA
		bge.w    loc_E570
		move.b	$0002(a1),d2
		move.b	$0001(a1),$0002(a1)
		move.b	(a1),$0001(a1)
		move.b	d6,(a1)
		cmp.b	(a6),d2
		beq.s	loc_E4F8
		cmp.b	$0001(a6),d2
		beq.s	loc_E4F8
		cmp.b	$0002(a6),d2
		beq.s	loc_E4F8
		bsr.w	loc_E652
		bra.s	loc_E4FC
loc_E4F8:		
		bsr.w	loc_E616
loc_E4FC:
		bsr.w	loc_E5F2 
		bne.s	loc_E520
		move.l	$0004(a4),A0
loc_E506:
		cmp.b	-6(a0),d6
		bne.s	loc_E51A
		tst.b	-2(a0)
		bpl.s	loc_E516
		subq.b	#1,$0001(a5)
loc_E516:
		subq.w	#$06,A0
		bra.s	loc_E506
loc_E51A:
		move.l	A0,$0004(a4)
		bra.s	loc_E556
loc_E520:
		move.l	$0004(a4),A0
		move.b	d6,(a1)
loc_E526:
		cmp.b	-6(a0),d6
		bne.s	loc_E552
		subq.w	#$06,A0
		tst.b	$0004(a0)
		bpl.s	loc_E53C
		subq.b	#1,$0001(a5)
		move.b	$0001(a5),d2
loc_E53C:
		bsr.w	loc_E712
		bne.s	loc_E546
		subq.w	#$06,A0
		bra.s	loc_E526
loc_E546:
		tst.b	$0004(a0)
		bpl.s	loc_E550
		addq.b	#1,$0001(a5)
loc_E550:
		addq.w	#$06,A0
loc_E552:
		move.l	A0,$0004(a4)
loc_E556:
		move.l	(a4),A0
		addq.w	#$03,d6
loc_E55A:
		cmp.b	-6(a0),d6
		bne.s	loc_E56C
		tst.b	-2(a0)
		bpl.s	loc_E568
		subq.b	#1,(a5)
loc_E568:
		subq.w	#$06,A0
		bra.s	loc_E55A
loc_E56C:
		move.l	A0,(a4)
		rts            
loc_E570:
		addq.w	#$02,d6
		move.b	(a1),d2
		move.b	$0001(a1),(a1)
		move.b	$0002(a1),$0001(a1)
		move.b	d6,$0002(a1)
		cmp.b	(a6),d2
		beq.s	loc_E598
		cmp.b	$0001(a6),d2
		beq.s	loc_E598
		cmp.b	$0002(a6),d2
		beq.s	loc_E598
		bsr.w	loc_E652
		bra.s	loc_E59C
loc_E598:
		bsr.w	loc_E616
loc_E59C:
		bsr.w	loc_E5F2
		bne.s	loc_E5B8
		move.l	(a4),A0
loc_E5A4:
		cmp.b	(a0),d6
		bne.s	loc_E5B4
		tst.b	$0004(a0)
		bpl.s	loc_E5B0
		addq.b	#1,(a5)
loc_E5B0:
		addq.w	#$06,A0
		bra.s	loc_E5A4
loc_E5B4:
		move.l	A0,(a4)
		bra.s	loc_E5d2
loc_E5B8:
		move.l	(a4),A0
		move.b	d6,(a1)
loc_E5BC:
		cmp.b	(a0),d6
		bne.s	loc_E5d0
		tst.b	$0004(a0)
		bpl.s	loc_E5CA
		move.b	(a5),d2
		addq.b	#1,(a5)
loc_E5CA:
		bsr.w	loc_E712
		beq.s	loc_E5BC
loc_E5d0:
		move.l	A0,(a4)    
loc_E5d2:
		move.l	$0004(a4),A0
		subq.w	#$03,d6
		bcs.s	loc_E5EC
loc_E5DA:
		cmp.b	(a0),d6
		bne.s	loc_E5EC
		tst.b	$0004(a0)
		bpl.s	loc_E5E8
		addq.b	#1,$0001(a5)
loc_E5E8:
		addq.w	#$06,A0
		bra.s	loc_E5DA
loc_E5EC:
		move.l	A0,$0004(a4)   
		rts
loc_E5F2:
		move.l	A1,-(sp)
		lea	(Object_RAM_block_indices).w,A1
		cmp.b	(a1)+,d6
		beq.s	loc_E612
		cmp.b	(a1)+,d6
		beq.s	loc_E612
		cmp.b	(a1)+,d6
		beq.s	loc_E612
		cmp.b	(a1)+,d6
		beq.s	loc_E612
		cmp.b	(a1)+,d6
		beq.s	loc_E612
		cmp.b	(a1)+,d6
		beq.s	loc_E612
		moveq	#1,d0
loc_E612:
		move.l	(sp)+,A1
		rts
loc_E616:		
		lea	(Object_RAM_block_indices).w,A1
		lea	($FFFFBE00).w,A3
		tst.b	(a1)+
		bmi.s	loc_E64E
		lea	($FFFFC100).w,A3
		tst.b	(a1)+
		bmi.s	loc_E64E
		lea	($FFFFC400).w,A3
		tst.b	(a1)+
		bmi.s	loc_E64E
		lea	($FFFFC700).w,A3
		tst.b	(a1)+
		bmi.s	loc_E64E
		lea	($FFFFCA00).w,A3
		tst.b	(a1)+
		bmi.s	loc_E64E
		lea	($FFFFCd00).w,A3
		tst.b	(a1)+
		bmi.s	loc_E64E		 
		nop
		nop
loc_E64E:
		subq.w	#1,A1
		rts  
loc_E652:
		lea	(Object_RAM_block_indices).w,A1
		lea	($FFFFBE00).w,A3
		cmp.b	(a1)+,d2
		beq.s	loc_E68A
		lea	($FFFFC100).w,A3
		cmp.b	(a1)+,d2
		beq.s	loc_E68A
		lea	($FFFFC400).w,A3
		cmp.b	(a1)+,d2
		beq.s	loc_E68A
		lea	($FFFFC700).w,A3
		cmp.b	(a1)+,d2
		beq.s	loc_E68A
		lea	($FFFFCA00).w,A3
		cmp.b	(a1)+,d2
		beq.s	loc_E68A
		lea	($FFFFCd00).w,A3
		cmp.b	(a1)+,d2
		beq.s	loc_E68A
		nop
		nop
loc_E68A:
		move.b	#$FF,-(a1)
		movem.l A1/A3,-(sp)
		moveq	#0,d1
		moveq	#$0B,d2
loc_E696:
		tst.b	(a3)
		beq.s	loc_E6B2
		move.l	A3,A1
		moveq	#0,d0
		move.b	$0023(a1),d0
		beq.s	loc_E6AA
		bclr	#$07,$02(A2,d0)
loc_E6AA:
		moveq	#$0F,d0
loc_E6AC:
		move.l	d1,(a1)+
		dbf	d0,loc_E6AC
loc_E6B2:    
		lea	$0040(a3),A3
		dbf	d2,loc_E696 
		moveq	#0,d2
		movem.l (sp)+,A1/A3
		rts     
loc_E6C2:
		tst.b	$0004(a0)
		bpl.s	loc_E6d6
		bset	#$07,$02(A2,d2)
		beq.s	loc_E6d6
		addq.w	#$06,A0
		moveq	#0,d0
		rts
loc_E6d6:
		bsr.w	SingleObjLoad        ; loc_E772
		bne.s	loc_E710
		move.w	(a0)+,8(a1)
		move.w	(a0)+,d0
		move.w	d0,d1
		andi.w	#$0FFF,d0
		move.w	d0,$000C(a1)
		rol.w   #$02,d1
		andi.b	#$03,d1
		move.b	d1,$0001(a1)
		move.b	d1,$0022(a1)
		move.b	(a0)+,d0
		bpl.s	loc_E706
		andi.b	#$7F,d0
		move.b	d2,$0023(a1)
loc_E706:
		_move.b	d0,0(a1)
		move.b	(a0)+,$0028(a1)
		moveq	#0,d0
loc_E710:
		rts  
loc_E712:
		tst.b	$0004(a0)
		bpl.s	loc_E726
		bset	#$07,$02(A2,d2)
		beq.s	loc_E726
		addq.w	#$06,A0
		moveq	#0,d0
		rts
loc_E726:
		btst	#$05,$0002(a0)
		beq.s	loc_E736
		bsr.w	SingleObjLoad        ; loc_E772
		bne.s	loc_E770
		bra.s	loc_E73C
loc_E736:
		bsr.w	SingleObjLoad3
		bne.s	loc_E770
loc_E73C:
		move.w	(a0)+,8(a1) 
		move.w	(a0)+,d0
		move.w	d0,d1
		andi.w	#$0FFF,d0
		move.w	d0,$000C(a1)
		rol.w   #$02,d1
		andi.b	#$03,d1
		move.b	d1,$0001(a1)
		move.b	d1,$0022(a1)
		move.b	(a0)+,d0
		bpl.s	loc_E766
		andi.b	#$7F,d0
		move.b	d2,$0023(a1)
loc_E766:
		_move.b	d0,0(a1)
		move.b	(a0)+,$0028(a1)
		moveq	#0,d0
loc_E770:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_E772:
SingleObjLoad:
		lea	($FFFFB800).w,a1
		move.w	#$5F,d0

loc_E77A:
		tst.b	(a1)
		beq.s	return_E786
		lea	$40(a1),a1
		dbf	d0,loc_E77A

return_E786:
		rts
; End of function SingleObjLoad

; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array AFTER the current one in the table
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_E788:
SingleObjLoad2:
		move.l	a0,a1
		move.w	#$d000,d0
		sub.w	a0,d0		; subtract current object location
		lsr.w	#6,d0		; divide by $40
		subq.w	#1,d0		; keep from going over the object zone
		bcs.s	return_E7A2

loc_E796:
		tst.b	(a1)
		beq.s	return_E7A2
		lea	$40(a1),a1
		dbf	d0,loc_E796

return_E7A2:
		rts
; End of function SingleObjLoad2

; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object at or within < 12 slots after a3
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_E7A4:
SingleObjLoad3:
		move.l	a3,a1
		move.w	#$B,d0

loc_E7AA: 
		tst.b	(a1)
		beq.s	return_E7B6
		lea	$40(a1),a1
		dbf	d0,loc_E7AA

return_E7B6:
		rts
; End of function SingleObjLoad3

;=============================================================================== 
; Object 0x41 - Springs 
; [ Begin ]
;===============================================================================		     
Obj_0x41_Springs: ; loc_E7B8:     
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_E7E8(pc,d0),d1
		jsr	loc_E7E8(pc,d1)
		tst.w	(Two_player_mode).w
		beq.s	loc_E7d0
		bra.w	DisplaySprite           ; loc_d3C2
loc_E7d0:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	DeleteObject            ; loc_d3B4
		bra.w	DisplaySprite           ; loc_d3C2
loc_E7E8:
		dc.w    loc_E7F4-loc_E7E8
		dc.w    loc_E8CC-loc_E7E8
		dc.w    loc_E9BE-loc_E7E8
		dc.w    loc_EBd0-loc_E7E8
		dc.w    loc_ECBC-loc_E7E8
		dc.w    loc_EDF2-loc_E7E8
loc_E7F4:
		addq.b	#$02,$0024(a0)
		move.l	#Spring_Mappings,$0004(a0) ; loc_EF70
		move.w	#$045C,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$04,$0018(a0)
		move.b	$0028(a0),d0
		lsr.w	#$03,d0
		andi.w	#$000E,d0
		move.w	loc_E82A(pc,d0),d0
		jmp     loc_E82A(pc,d0)
loc_E82A:
		dc.w    loc_E8A0-loc_E82A
		dc.w    loc_E834-loc_E82A
		dc.w    loc_E854-loc_E82A
		dc.w    loc_E868-loc_E82A
		dc.w    loc_E882-loc_E82A		    
loc_E834:
		move.b	#$04,$0024(a0)
		move.b	#$02,$001C(a0)
		move.b	#$03,$001A(a0)
		move.w	#$0470,$0002(a0)
		move.b	#$08,$0019(a0)
		bra.s	loc_E8A0
loc_E854:		
		move.b	#$06,$0024(a0)
		move.b	#$06,$001A(a0)
		bset	#1,$0022(a0)
		bra.s	loc_E8A0
loc_E868:		
		move.b	#$08,$0024(a0)
		move.b	#$04,$001C(a0)
		move.b	#$07,$001A(a0)
		move.w	#$043C,$0002(a0)		  
		bra.s	loc_E8A0
loc_E882:		
		move.b	#$0A,$0024(a0)
		move.b	#$04,$001C(a0)
		move.b	#$0A,$001A(a0)
		move.w	#$043C,$0002(a0)
		bset	#1,$0022(a0)
loc_E8A0:
		move.b	$0028(a0),d0
		andi.w	#$0002,d0
		move.w	loc_E8C8(pc,d0),$0030(a0)
		btst	#1,d0
		beq.s	loc_E8C2
		bset	#$05,$0002(a0)
		move.l	#loc_EF86,$0004(a0)
loc_E8C2:
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		rts
loc_E8C8:
		dc.w	$F000,$F600		   
loc_E8CC:
		move.w	#$001B,d1
		move.w	#8,d2
		move.w	#$0010,d3
		move.w	8(a0),d4
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	SolidObject_Always_SingleCharacter
		btst	#$03,$0022(a0)
		beq.s	loc_E8F4
		bsr.s	loc_E918
loc_E8F4:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	SolidObject_Always_SingleCharacter
		btst	#$04,$0022(a0)
		beq.s	loc_E90C
		bsr.s	loc_E918
loc_E90C:
		lea	(loc_EF36).l,A1
		bra.w	AnimateSprite           ; loc_d412
		rts
loc_E918:
		move.w	#$0100,$001C(a0)
		addq.w	#$08, $000C(a1)
		move.w	$0030(a0),$0012(a1)
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$10,$001C(a1)
		move.b	#$02,$0024(a1)
		move.b	$0028(a0),d0
		bpl.s	loc_E94C
		move.w	#0,$0010(a1)
loc_E94C:
		btst	#$00,d0
		beq.s	loc_E98C
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#$00,$002C(a1)
		move.b	#$04,$002D(a1)
		btst	#1,d0
		bne.s	loc_E97C
		move.b	#1,$002C(a1)
loc_E97C:
		btst	#$00,$0022(a1)
		beq.s	loc_E98C
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_E98C:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_E9A2
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_E9A2:
		cmpi.b	#$08,d0
		bne.s	loc_E9B4
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_E9B4:
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6    
loc_E9BE:
		move.w	#$0013,d1
		move.w	#$000E,d2
		move.w	#$000F,d3
		move.w	8(a0),d4
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	SolidObject_Always_SingleCharacter
		btst	#$05,$0022(a0)
		beq.s	loc_E9FE
		move.b	$0022(a0),d1
		move.w	8(a0),d0
		sub.w   8(a1),d0
		bcs.s	loc_E9F6
		eori.b  #1,d1
loc_E9F6:
		andi.b	#1,d1
		bne.s	loc_E9FE
		bsr.s	loc_EA3E
loc_E9FE:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	SolidObject_Always_SingleCharacter
		btst	#$06,$0022(a0)
		beq.s	loc_EA2E
		move.b	$0022(a0),d1
		move.w	8(a0),d0
		sub.w   8(a1),d0
		bcs.s	loc_EA26
		eori.b  #1,d1
loc_EA26:
		andi.b	#1,d1
		bne.s	loc_EA2E
		bsr.s	loc_EA3E
loc_EA2E:
		bsr.w	loc_EB16
		lea	(loc_EF36).l,A1
		bra.w	AnimateSprite           ; loc_d412
		rts
loc_EA3E:
		move.w	#$0300,$001C(a0)
		move.w	$0030(a0),$0010(a1)
		addq.w	#$08, 8(a1)
		bset	#$00,$0022(a1)
		btst	#$00,$0022(a0)
		bne.s	loc_EA6C
		bclr	#$00,$0022(a1)
		subi.w	#$0010,8(a1)
		neg.w	$0010(a1)
loc_EA6C:
		move.w	#$000F,$002E(a1)
		move.w	$0010(a1),$0014(a1)
		btst	#$02,$0022(a1)
		bne.s	loc_EA86
		move.b	#$00,$001C(a1)
loc_EA86:
		move.b	$0028(a0),d0
		bpl.s	loc_EA92
		move.w	#0,$0012(a1)
loc_EA92:
		btst	#$00,d0
		beq.s	loc_EAd2
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#1,$002C(a1)
		move.b	#$08,$002D(a1)
		btst	#1,d0
		bne.s	loc_EAC2
		move.b	#$03,$002C(a1)
loc_EAC2:
		btst	#$00,$0022(a1)
		beq.s	loc_EAd2
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_EAd2:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_EAE8
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_EAE8:
		cmpi.b	#$08,d0
		bne.s	loc_EAFA
		move.b	#$0E,$003E(a1)   
		move.b	#$0F,$003F(a1)
loc_EAFA:
		bclr	#$05,$0022(a0)
		bclr	#$06,$0022(a0)
		bclr	#$05,$0022(a1)
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6  
loc_EB16:
		cmpi.b	#$03,$001C(a0)
		beq.w	 loc_EBCE
		move.w	8(a0),d0
		move.w	d0,d1
		addi.w	#$0028,d1
		btst	#$00,$0022(a0)
		beq.s	loc_EB38
		move.w	d0,d1
		subi.w	#$0028,d0
loc_EB38:
		move.w	$000C(a0),d2
		move.w	d2,d3
		subi.w	#$0018,d2
		addi.w	#$0018,d3
		lea	(MainCharacter).w,A1
		btst	#1,$0022(a1)
		bne.s	loc_EB8C
		move.w	$0014(a1),d4
		btst	#$00,$0022(a0)
		beq.s	loc_EB60
		neg.w	d4
loc_EB60:
		tst.w	d4
		bmi.s	loc_EB8C
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	 loc_EB8C
		cmp.w	d1,d4
		bcc.w	 loc_EB8C
		move.w	$000C(a1),d4
		cmp.w	d2,d4
		bcs.w	 loc_EB8C
		cmp.w	d3,d4
		bcc.w	 loc_EB8C
		move.w	d0,-(sp)
		bsr.w	loc_EA3E
		move.w	(sp)+,d0
loc_EB8C:
		lea	(Sidekick).w,A1
		btst	#1,$0022(a1)
		bne.s	loc_EBCE
		move.w	$0014(a1),d4
		btst	#$00,$0022(a0)
		beq.s	loc_EBA6
		neg.w	d4
loc_EBA6:
		tst.w	d4
		bmi.s	loc_EBCE
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	 loc_EBCE
		cmp.w	d1,d4
		bcc.w	 loc_EBCE
		move.w	$000C(a1),d4
		cmp.w	d2,d4
		bcs.w	 loc_EBCE
		cmp.w	d3,d4
		bcc.w	 loc_EBCE
		bsr.w	loc_EA3E
loc_EBCE:
		rts  
loc_EBd0:
		move.w	#$001B,d1
		move.w	#8,d2
		move.w	#$0010,d3
		move.w	8(a0),d4
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	SolidObject_Always_SingleCharacter
		cmpi.w	#$FFFE,d4
		bne.s	loc_EBF6
		bsr.s	loc_EC18
loc_EBF6:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	SolidObject_Always_SingleCharacter
		cmpi.w	#$FFFE,d4
		bne.s	loc_EC0C
		bsr.s	loc_EC18
loc_EC0C:
		lea	(loc_EF36).l,A1
		bra.w	AnimateSprite           ; loc_d412
		rts
loc_EC18:
		move.w	#$0100,$001C(a0)
		subq.w	#$08,$000C(a1)
		move.w	$0030(a0),$0012(a1)
		neg.w	$0012(a1)
		move.b	$0028(a0),d0
		bpl.s	loc_EC38
		move.w	#0,$0010(a1)
loc_EC38:
		btst	#$00,d0
		beq.s	loc_EC78
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#$00,$002C(a1)
		move.b	#$04,$002D(a1)
		btst	#1,d0
		bne.s	loc_EC68
		move.b	#1,$002C(a1)
loc_EC68:
		btst	#$00,$0022(a1)
		beq.s	loc_EC78
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_EC78:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_EC8E
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_EC8E:
		cmpi.b	#$08,d0
		bne.s	loc_ECA0
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_ECA0:
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$02,$0024(a1)
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6   
loc_ECBC:
		move.w	#$001B,d1
		move.w	#$0010,d2
		move.w	8(a0),d4
		lea	loc_EEFE(pc),A2
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	SlopedSolid_SingleCharacter
		btst	#$03,$0022(a0)
		beq.s	loc_ECE4
		bsr.s	loc_Ed08
loc_ECE4:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	SlopedSolid_SingleCharacter
		btst	#$04,$0022(a0)
		beq.s	loc_ECFC
		bsr.s	loc_Ed08
loc_ECFC:
		lea	(loc_EF36).l,A1
		bra.w	AnimateSprite           ; loc_d412
		rts
loc_Ed08:
		btst	#$00,$0022(a0)
		bne.s	loc_Ed1E		   
		move.w	8(a0),d0
		subq.w	#$04,d0
		cmp.w	8(a1),d0
		bcs.s	loc_Ed2C
		rts
loc_Ed1E:
		move.w	8(a0),d0
		addq.w	#$04,d0
		cmp.w	8(a1),d0
		bcc.s	loc_Ed2C
		rts
loc_Ed2C:
		move.w	#$0500,$001C(a0)
		move.w	$0030(a0),$0012(a1)
		move.w	$0030(a0),$0010(a1)
		addq.w	#$06,$000C(a1)
		addq.w	#$06,8(a1)
		bset	#$00,$0022(a1)
		btst	#$00,$0022(a0)
		bne.s	loc_Ed64
		bclr	#$00,$0022(a1)
		subi.w	#$000C,8(a1)
		neg.w	$0010(a1)
loc_Ed64:
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$10,$001C(a1)
		move.b	#$02,$0024(a1)
		move.b	$0028(a0),d0
		btst	#$00,d0
		beq.s	loc_EDC0
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#1,$002C(a1)
		move.b	#$08,$002D(a1)
		btst	#1,d0
		bne.s	loc_EDB0
		move.b	#$03,$002C(a1)
loc_EDB0:
		btst	#$00,$0022(a1)
		beq.s	loc_EDC0
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_EDC0:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_EDd6
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_EDd6:
		cmpi.b	#$08,d0
		bne.s	loc_EDE8
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_EDE8:
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6     
loc_EDF2:
		move.w	#$001B,d1
		move.w	#$0010,d2
		move.w	8(a0),d4
		lea	loc_EF1A(pc),A2
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	SlopedSolid_SingleCharacter
		cmpi.w	#$FFFE,d4
		bne.s	loc_EE18
		bsr.s	loc_EE3A
loc_EE18:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	SlopedSolid_SingleCharacter
		cmpi.w	#$FFFE,d4
		bne.s	loc_EE2E
		bsr.s	loc_EE3A
loc_EE2E:
		lea	(loc_EF36).l,A1
		bra.w	AnimateSprite           ; loc_d412
		rts
loc_EE3A:
		move.w	#$0500,$001C(a0)
		move.w	$0030(a0),$0012(a1)
		neg.w	$0012(a1)
		move.w	$0030(a0),$0010(a1)
		subq.w	#$06,$000C(a1)
		addq.w	#$06,8(a1)
		bset	#$00,$0022(a1)
		btst	#$00,$0022(a0)
		bne.s	loc_EE76
		bclr	#$00,$0022(a1)
		subi.w	#$000C,8(a1)
		neg.w	$0010(a1)
loc_EE76:
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$02,$0024(a1)
		move.b	$0028(a0),d0
		btst	#$00,d0
		beq.s	loc_EECC
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#1,$002C(a1)
		move.b	#$08,$002D(a1)
		btst	#1,d0 
		bne.s	loc_EEBC
		move.b	#$03,$002C(a1)
loc_EEBC:
		btst	#$00,$0022(a1)
		beq.s	loc_EECC
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_EECC:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_EEE2
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_EEE2:
		cmpi.b	#$08,d0
		bne.s	loc_EEF4
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_EEF4:
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6 
loc_EEFE:   
		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$0E,$0C,$0A,$08
		dc.b	$06,$04,$02,$00,$FE,$FC,$FC,$FC,$FC,$FC,$FC,$FC
loc_EF1A:		
		dc.b	$F4,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F2,$F4,$F6,$F8
		dc.b	$FA,$FC,$FE,$00,$02,$04,$04,$04,$04,$04,$04,$04
loc_EF36:
		dc.b	$00,$0C,$00,$0F,$00,$1B,$00,$1E,$00,$2A,$00,$2D,$0F,$00,$FF,$00
		dc.b	$01,$00,$00,$02,$02,$02,$02,$02,$02,$FD,$00,$0F,$03,$FF,$00,$04
		dc.b	$03,$03,$05,$05,$05,$05,$05,$05,$FD,$02,$0F,$07,$FF,$00,$08,$07
		dc.b	$07,$09,$09,$09,$09,$09,$09,$FD,$04,$00
Spring_Mappings:
loc_EF70:
		dc.w    loc_EF9C-loc_EF70
		dc.w    loc_EFAE-loc_EF70
		dc.w    loc_EFB8-loc_EF70
		dc.w    loc_EFCA-loc_EF70
		dc.w    loc_EFDC-loc_EF70
		dc.w    loc_EFE6-loc_EF70
		dc.w    loc_EFF8-loc_EF70
		dc.w    loc_F00A-loc_EF70
		dc.w    loc_F02C-loc_EF70
		dc.w    loc_F046-loc_EF70
		dc.w    loc_F068-loc_EF70
loc_EF86:
		dc.w    loc_EF9C-loc_EF86
		dc.w    loc_EFAE-loc_EF86
		dc.w    loc_EFB8-loc_EF86
		dc.w    loc_EFCA-loc_EF86
		dc.w    loc_EFDC-loc_EF86
		dc.w    loc_EFE6-loc_EF86
		dc.w    loc_EFF8-loc_EF86
		dc.w    loc_F08A-loc_EF86
		dc.w    loc_F0AC-loc_EF86
		dc.w    loc_F0C6-loc_EF86
		dc.w    loc_F0E8-loc_EF86		 
loc_EF9C:
		dc.w	$0002
		dc.l	$F00d0000,$0000FFF0,$00050008,$0004FFF8
loc_EFAE:
		dc.w	$0001
		dc.l	$F80d0000,$0000FFF0
loc_EFB8:
		dc.w	$0002
		dc.l	$E00d0000,$0000FFF0,$F007000C,$0006FFF8
loc_EFCA:
		dc.w	$0002
		dc.l	$F0030000,$00000000,$F8010004,$0002FFF8
loc_EFDC:
		dc.w	$0001
		dc.l	$F0030000,$0000FFF8
loc_EFE6:
		dc.w	$0002
		dc.l	$F0030000,$00000010,$F8090006,$0003FFF8
loc_EFF8:
		dc.w	$0002
		dc.l	$000d1000,$1000FFF0,$F0051008,$1004FFF8
loc_F00A:
		dc.w	$0004
		dc.l	$F00d0000,$0000FFF0,$00050008,$00040000
		dc.l	$FB05000C,$0006FFF6,$0005201C,$200EFFF0
loc_F02C:
		dc.w	$0003
		dc.l	$F60d0000,$0000FFEA,$06050008,$0004FFFA
		dc.l	$0005201C,$200EFFF0
loc_F046:
		dc.w	$0004
		dc.l	$E60d0000,$0000FFFB,$F6050008,$0004000B
		dc.l	$F30B0010,$0008FFF6,$0005201C,$200EFFF0
loc_F068:
		dc.w	$0004
		dc.l	$000d1000,$1000FFF0,$F0051008,$10040000
		dc.l	$F505100C,$1006FFF6,$F005301C,$300EFFF0  
loc_F08A:
		dc.w	$0004
		dc.l	$F00d0000,$0000FFF0,$00050008,$00040000
		dc.l	$FB05000C,$0006FFF6,$0005001C,$000EFFF0
loc_F0AC:
		dc.w	$0003
		dc.l	$F60d0000,$0000FFEA,$06050008,$0004FFFA
		dc.l	$0005001C,$000EFFF0
loc_F0C6:
		dc.w	$0004
		dc.l	$E60d0000,$0000FFFB,$F6050008,$0004000B
		dc.l	$F30B0010,$0008FFF6,$0005001C,$000EFFF0
loc_F0E8:
		dc.w	$0004
		dc.l	$000d1000,$1000FFF0,$F0051008,$10040000
		dc.l	$F505100C,$1006FFF6,$F005101C,$100EFFF0   
;=============================================================================== 
; Object 0x41 - Springs 
; [ End ]
;===============================================================================   
		nop		             ; Filler  
;=============================================================================== 
; Object 0x44
; [ Begin ]
;===============================================================================		  
Obj_0x44: ; loc_F10C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_F11A(pc,d0),d1
		jmp     loc_F11A(pc,d1)
loc_F11A:
		dc.w    loc_F120-loc_F11A
		dc.w    loc_F15C-loc_F11A
		dc.w    loc_F170-loc_F11A
loc_F120:
		addq.b	#$02,$0024(a0)
		move.l	#loc_F188,$0004(a0)
		move.w	#$434C,$0002(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04,$0001(a0)
		move.b	#$08,$0019(a0)
		move.b	#$06,$0018(a0)
		move.b	$0028(a0),$001A(a0)
		bclr	#$04,$001A(a0)
		beq.s	loc_F15C
		addq.b	#$02,$0024(a0)
		bra.s	loc_F170
loc_F15C:
		move.w	#$0013,d1
		move.w	#$0028,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	SolidObject             ; loc_F4A0
loc_F170:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 DeleteObject            ; loc_d3B4
		bra.w	DisplaySprite           ; loc_d3C2
loc_F188:
		dc.w    loc_F18E-loc_F188
		dc.w    loc_F1B0-loc_F188
		dc.w    loc_F1d2-loc_F188
loc_F18E:
		dc.w	$0004
		dc.l	$E0050004,$0002FFF8,$F0050008,$0004FFF8
		dc.l	$00050008,$0004FFF8,$10050008,$0004FFF8
loc_F1B0:
		dc.w	$0004
		dc.l	$E0050008,$0004FFF8,$F0050008,$0004FFF8
		dc.l	$00050008,$0004FFF8,$10050008,$0004FFF8
loc_F1d2:
		dc.w	$0004
		dc.l	$E0050000,$0000FFF8,$F0050000,$0000FFF8
		dc.l	$00050000,$0000FFF8,$10050000,$0000FFF8            

; ---------------------------------------------------------------------------
; Object 0D - End of level sign post
; ---------------------------------------------------------------------------
; Sprite_F1F4: Obj_0x0D_End_Panel:
Obj0D:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj0D_Index(pc,d0.w),d1
		jsr	Obj0D_Index(pc,d1.w)
		lea	(Ani_obj0D).l,a1
		bsr.w	AnimateSprite
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; off_F224:
Obj0D_Index:	offsetTable
		offsetTableEntry.w Obj0D_Init
		offsetTableEntry.w Obj0D_Main
		offsetTableEntry.w Obj0D_Spin
		offsetTableEntry.w Obj0D_SonicRun
		offsetTableEntry.w Obj0D_Null
; ===========================================================================
; loc_F22E: End_Panel_Sub_01:
Obj0D_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj0D_MapUnc_F40E,4(a0)
		move.w	#$434,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$18,$19(a0)
		move.b	#4,$18(a0)
; loc_F256: End_Panel_Sub_02:
Obj0D_Main:
		move.w	(MainCharacter+8).w,d0
		sub.w	8(a0),d0
		bcs.s	+
		cmpi.w	#$20,d0		; is Sonic within $20 pixels of the signpost?
		bcc.s	+		; if not,branch
		move.w	#SndID_Signpost,d0
		jsr	(PlayMusic).l
		clr.b	(Update_HUD_timer).w		; stop timer
		move.w	(Camera_Max_X_pos).w,(Camera_Min_X_pos).w	; lock screen position
		addq.b	#2,routine(a0)
+
		rts
; ===========================================================================
; loc_F280: End_Panel_Sub_03:
Obj0D_Spin:
		subq.w	#1,$30(a0)		; subtract from spin time
		bpl.s	Obj0D_ChkSparkle	; if time remains,branch
		move.w	#1*60,$30(a0)		; set spin time to 1 second
		addq.b	#1,$1C(a0)		; next spin cycle
		cmpi.b	#3,$1C(a0)		; has 3 cycles completed?
		bne.s	Obj0D_ChkSparkle	; if not,branch
		addq.b	#2,routine(a0)
; loc_F29C:
Obj0D_ChkSparkle:
		subq.w	#1,$32(a0)		; subtract 1 from time delay
		bpl.s	+			; if time remains,branch
		move.w	#$B,$32(a0)		; set time between sparkles to 11 frames
		moveq	#0,d0
		move.b	$34(a0),d0		; get sparkle id
		addq.b	#2,$34(a0)		; increment sparkle counter
		andi.b	#$E,$34(a0)
		lea	Obj0D_RingSparklePositions(pc,d0.w),a2	; load sparkle position data
		bsr.w	SingleObjLoad
		bne.s	+
		_move.b	#$25,0(a1)
		move.b	#6,routine(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	8(a0),d0
		move.w	d0,8(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	$C(a0),d0
		move.w	d0,$C(a1)
		move.l	#Obj25_MapUnc_B036,4(a1)
		move.w	#$27B2,2(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#2,$18(a1)
		move.b	#8,$19(a1)
+
		rts
; ===========================================================================
; byte_F30C:
Obj0D_RingSparklePositions:
		dc.b -24,-16
		dc.b   8, 8
		dc.b -16, 0
		dc.b  24,-8
		dc.b   0,-8
		dc.b  16, 0
		dc.b -24, 8
		dc.b  24,16
; ===========================================================================
; loc_F31C: End_Panel_Sub_04:
Obj0D_SonicRun:
		tst.w	(Debug_placement_mode).w  
		bne.w	return_F3B6
		btst	#1,(MainCharacter+$22).w
		bne.s	+
		move.b	#1,(Control_Locked).w
		move.w	#$800,(Ctrl_1_Logical).w
+
		tst.b	(MainCharacter).w
		beq.s	+
		move.w	(MainCharacter+8).w,d0
		move.w	(Camera_Max_X_pos).w,d1
		addi.w	#$128,d1
		cmp.w	d1,d0
		bcs.s	return_F3B6
+
		addq.b	#2,routine(a0)

; ---------------------------------------------------------------------------
; Subroutine to	set up bonuses at the end of an	act
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||

; loc_F352:
Load_EndOfAct:
		tst.b	($FFFFB5C0).w
		bne.s	return_F3B6
		move.w	(Camera_Max_X_pos).w,(Camera_Min_X_pos).w
		clr.b	(Invincibility_flag).w
		clr.b	(Update_HUD_timer).w
		move.b	#$3A,($FFFFB5C0).w
		moveq	#PLCID_Results,d0
		jsr	(LoadPLC2).l
		move.b	#1,(Update_Bonus_score).w
		moveq	#0,d0
		move.b	(Timer_minute).w,d0
		mulu.w	#$3C,d0
		moveq	#0,d1
		move.b	(Timer_second).w,d1
		add.w	d1,d0
		divu.w	#$F,d0
		moveq	#$14,d1
		cmp.w	d1,d0
		bcs.s	+
		move.w	d1,d0
+
		add.w	d0,d0
		move.w	TimeBonuses(pc,d0.w),(Bonus_Countdown_1).w
		move.w	(Ring_count).w,d0
		mulu.w	#$A,d0
		move.w	d0,(Bonus_Countdown_2).w
		move.w	#MusID_ActClear,d0
		jsr	(PlaySound).l

return_F3B6:
		rts
; End of function Load_EndOfAct

; ===========================================================================
; word_F3B8:
TimeBonuses:
	dc.w 5000,5000,1000,500,400,400,300,300
	dc.w  200, 200, 200,200,100,100,100,100
	dc.w   50,  50,  50, 50,  0
; ===========================================================================
; return_F3E2: End_Panel_Sub_05:
Obj0D_Null:
		rts
; ===========================================================================
; Animation script
; off_F3E4:
Ani_obj0D:	offsetTable
		offsetTableEntry.w loc_F3EC
		offsetTableEntry.w loc_F3EF
		offsetTableEntry.w loc_F3FD
		offsetTableEntry.w loc_F40B

loc_F3EC:	dc.b $0F,$02,$FF
loc_F3EF:	dc.b $01,$02,$03,$04,$05,$01,$03,$04,$05,$00,$03,$04,$05,$FF
loc_F3FD:	dc.b $01,$02,$03,$04,$05,$01,$03,$04,$05,$00,$03,$04,$05,$FF
loc_F40B:	dc.b $0F,$00,$FF
		even
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj0D_MapUnc_F40E:	binclude	"mappings/sprite/obj0D.bin"
; ===========================================================================
		nop

;=============================================================================== 
; Sub Routine SolidObject
; [ Begin ]		         
;===============================================================================		
SolidObject: ; loc_F4A0:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.s	loc_F4BE
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		tst.b	$0001(a1)
		bpl.w	 loc_F4F8
		addq.b	#1,d6
loc_F4BE:
		btst	d6,$0022(a0)
		beq.w	 loc_F752
		move.w	d1,d2
		add.w   d2,d2
		btst	#1,$0022(a1)
		bne.s	loc_F4E2
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_F4E2
		cmp.w	d2,d0
		bcs.s	loc_F4F0
loc_F4E2:
		bclr	#$03,$0022(a1)
		bclr	d6,$0022(a0)
		moveq	#0,d4
		rts
loc_F4F0:
		move.w	d4,d2
		bsr.w	loc_F8E4
		moveq	#0,d4
loc_F4F8:		
		rts		
; loc_F4FA:
SolidObject_Always:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.s	SolidObject_Always_SingleCharacter
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		addq.b	#1,d6
; loc_F510:
SolidObject_Always_SingleCharacter:
		btst	d6,$0022(a0)
		beq.w	 loc_F75A
		move.w	d1,d2
		add.w   d2,d2
		btst	#1,$0022(a1)
		bne.s	loc_F534
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_F534
		cmp.w	d2,d0		
		bcs.s	loc_F542
loc_F534:
		bclr	#$03,$0022(a1)
		bclr	d6,$0022(a0) 
		moveq	#0,d4
		rts
loc_F542:
		move.w	d4,d2
		bsr.w	loc_F8E4
		moveq	#0,d4
		rts
; loc_F54C:
SlopedSolid:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.s	SlopedSolid_SingleCharacter
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		addq.b	#1,d6
; loc_F562:
SlopedSolid_SingleCharacter:
		btst	d6,$0022(a0)
		beq.w	 loc_F698
		move.w	d1,d2
		add.w   d2,d2
		btst	#1,$0022(a1)
		bne.s	loc_F586
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_F586
		cmp.w	d2,d0
		bcs.s	loc_F594
loc_F586:
		bclr	#$03,$0022(a1)
		bclr	d6,$0022(a0)
		moveq	#0,d4
		rts
loc_F594:
		move.w	d4,d2
		bsr.w	loc_F91E
		moveq	#0,d4
		rts
; loc_F59E:
DoubleSlopedSolid:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.s	loc_F5B4
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		addq.b	#1,d6
loc_F5B4:
		btst	d6,$0022(a0)
		beq.w	 loc_F6F2
		move.w	d1,d2
		add.w   d2,d2
		btst	#1,$0022(a1)
		bne.s	loc_F5D8
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_F5D8
		cmp.w	d2,d0
		bcs.s	loc_F5E6
loc_F5D8:
		bclr	#$03,$0022(a1)
		bclr	d6,$0022(a0)
		moveq	#0,d4
		rts
loc_F5E6:
		move.w	d4,d2
		bsr.w	loc_F960
		moveq	#0,d4
		rts   
; loc_F5F0:
SolidObject45:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.s	loc_F606
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		addq.b	#1,d6
loc_F606:
		btst	d6,$0022(a0)
		beq.w	 loc_F656
		btst	#1,$0022(a1)
		bne.s	loc_F628
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_F628
		add.w   d1,d1
		cmp.w	d1,d0
		bcs.s	loc_F636
loc_F628:
		bclr	#$03,$0022(a1)
		bclr	d6,$0022(a0)
		moveq	#0,d4
		rts
loc_F636:
		move.w	$000C(a0),d0
		sub.w   d2,d0
		add.w   d3,d0
		moveq	#0,d1
		move.b	$0016(a1),d1
		sub.w   d1,d0
		move.w	d0,$000C(a1)
		sub.w   8(a0),d4
		sub.w   d4,8(a1)
		moveq	#0,d4
		rts
loc_F656:
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.w	 loc_F82A
		move.w	d1,d4
		add.w   d4,d4
		cmp.w	d4,d0
		bhi.w	 loc_F82A
		move.w	$000C(a0),d5
		add.w   d3,d5
		move.b	$0016(a1),d3
		ext.w   d3
		add.w   d3,d2
		move.w	$000C(a1),d3
		sub.w   d5,d3
		addq.w	#$04,d3
		add.w   d2,d3
		bmi.w	 loc_F82A
		move.w	d2,d4
		add.w   d4,d4
		cmp.w	d4,d3
		bcc.w	 loc_F82A
		bra.w	loc_F794		
loc_F698:
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.w	 loc_F82A
		move.w	d1,d3
		add.w   d3,d3
		cmp.w	d3,d0
		bhi.w	 loc_F82A
		move.w	d0,d5
		btst	#$00,$0001(a0)
		beq.s	loc_F6BE
		not.w   d5
		add.w   d3,d5
loc_F6BE:
		lsr.w	#1,d5
		move.b	$00(A2,d5),d3
		sub.b   (a2),d3
		ext.w   d3
		move.w	$000C(a0),d5
		sub.w   d3,d5
		move.b	$0016(a1),d3
		ext.w   d3
		add.w   d3,d2
		move.w	$000C(a1),d3
		sub.w   d5,d3
		addq.w	#$04,d3
		add.w   d2,d3
		bmi.w	 loc_F82A
		move.w	d2,d4
		add.w   d4,d4
		cmp.w	d4,d3
		bcc.w	 loc_F82A
		bra.w	loc_F794   
loc_F6F2:
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.w	 loc_F82A
		move.w	d1,d3
		add.w   d3,d3
		cmp.w	d3,d0
		bhi.w	 loc_F82A
		move.w	d0,d5
		btst	#$00,$0001(a0)
		beq.s	loc_F718
		not.w  d5
		add.w   d3,d5
loc_F718:
		andi.w	#$FFFE,d5
		move.b	$00(A2,d5),d3
		move.b	$01(A2,d5),d2
		ext.w   d2
		ext.w   d3
		move.w	$000C(a0),d5
		sub.w   d3,d5
		move.w	$000C(a1),d3
		sub.w   d5,d3
		move.b	$0016(a1),d5
		ext.w   d5
		add.w   d5,d3
		addq.w	#$04,d3
		bmi.w	 loc_F82A
		add.w   d5,d2
		move.w	d2,d4
		add.w   d5,d4
		cmp.w	d4,d3
		bcc.w	 loc_F82A
		bra.w	loc_F794		
loc_F752:
		tst.b	$0001(a0)
		bpl.w	 loc_F82A
loc_F75A:		
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.w	 loc_F82A
		move.w	d1,d3
		add.w   d3,d3
		cmp.w	d3,d0
		bhi.w	 loc_F82A
		move.b	$0016(a1),d3
		ext.w   d3
		add.w   d3,d2
		move.w	$000C(a1),d3
		sub.w   $000C(a0),d3
		addq.w	#$04,d3
		add.w   d2,d3
		bmi.w	 loc_F82A
		move.w	d2,d4
		add.w   d4,d4
		cmp.w	d4,d3
		bcc.w	 loc_F82A
loc_F794:		
		tst.b	$002A(a1)
		bmi.w	 loc_F82A
		cmpi.b	#$06,$0024(a1)
		bcc.w	 loc_F848
		tst.w	(Debug_placement_mode).w
		bne.w	 loc_F848
		move.w	d0,d5
		cmp.w	d0,d1
		bcc.s	loc_F7BC
		add.w   d1,d1
		sub.w   d1,d0
		move.w	d0,d5
		neg.w	d5
loc_F7BC:
		move.w	d3,d1
		cmp.w	d3,d2
		bcc.s	loc_F7CA
		subq.w	#$04,d3
		sub.w   d4,d3
		move.w	d3,d1
		neg.w	d1
loc_F7CA:
		cmp.w	d1,d5
		bhi.w	 loc_F84C
loc_F7d0:
		cmpi.w	#$0004,d1
		bls.s   loc_F81C
		tst.w	d0
		beq.s	loc_F7F6
		bmi.s	loc_F7E4
		tst.w	$0010(a1)
		bmi.s	loc_F7F6
		bra.s	loc_F7EA
loc_F7E4:
		tst.w	$0010(a1)
		bpl.s	loc_F7F6
loc_F7EA:
		move.w	#0,$0014(a1)
		move.w	#0,$0010(a1)
loc_F7F6:
		sub.w   d0,8(a1)
		btst	#1,$0022(a1)
		bne.s	loc_F81C
		move.l	d6,d4
		addq.b	#$02,d4
		bset	d4,$0022(a0)
		bset	#$05,$0022(a1)
		move.w	d6,d4
		addi.b	#$0D,d4
		bset	d4,d6
		moveq	#1,d4
		rts
loc_F81C:
		bsr.s	loc_F83A
		move.w	d6,d4
		addi.b	#$0D,d4
		bset	d4,d6
		moveq	#1,d4
		rts
loc_F82A:
		move.l	d6,d4
		addq.b	#$02,d4
		btst	d4,$0022(a0)
		beq.s	loc_F848
		move.w	#$0001,$001C(a1)
loc_F83A:
		move.l	d6,d4
		addq.b	#$02,d4
		bclr	d4,$0022(a0)
		bclr	#$05,$0022(a1)
loc_F848:
		moveq	#0,d4
		rts 
loc_F84C:
		tst.w	d3
		bmi.s	loc_F858
		cmpi.w	#$0010,d3
		bcs.s	loc_F8A8
		bra.s	loc_F82A
loc_F858:
		tst.w	$0012(a1)
		beq.s	loc_F87A
		bpl.s	loc_F86E
		tst.w	d3
		bpl.s	loc_F86E
		sub.w   d3,$000C(a1)
		move.w	#0,$0012(a1)
loc_F86E:
		move.w	d6,d4
		addi.b	#$0F,d4
		bset	d4,d6
		moveq	#-2,d4
		rts
loc_F87A:
		btst	#1,$0022(a1)
		bne.s	loc_F86E
		move.w	d0,d4
		bpl.s	loc_F888
		neg.w	d4
loc_F888:
		cmpi.w	#$0010,d4
		bcs.w	 loc_F7d0
		move.l	A0,-(sp)
		move.l	A1,A0
		jsr	 KillSonic               ; loc_21422
		move.l	(sp)+,A0
		move.w	d6,d4
		addi.b	#$0F,d4
		bset	d4,d6
		moveq	#-2,d4
		rts
loc_F8A8:
		subq.w	#$04,d3
		moveq	#0,d1
		move.b	$0019(a0),d1
		move.w	d1,d2
		add.w   d2,d2
		add.w   8(a1),d1
		sub.w   8(a0),d1
		bmi.s	loc_F8E0
		cmp.w	d2,d1
		bcc.s	loc_F8E0
		tst.w	$0012(a1)
		bmi.s	loc_F8E0
		sub.w   d3,$000C(a1)
		subq.w	#1,$000C(a1)
		bsr.w	loc_FAF2
		move.w	d6,d4
		addi.b	#$11,d4
		bset	d4,d6
		moveq	#-1,d4
		rts
loc_F8E0:
		moveq	#0,d4
		rts
loc_F8E4:
		move.w	$000C(a0),d0
		sub.w   d3,d0
		bra.s	loc_F8F4
		move.w	$000C(a0),d0
		subi.w	#$0009,d0
loc_F8F4:
		tst.b	$002A(a1)
		bmi.s	loc_F91C
		cmpi.b	#$06,$0024(a1)
		bcc.s	loc_F91C
		tst.w	(Debug_placement_mode).w
		bne.s	loc_F91C
		moveq	#0,d1
		move.b	$0016(a1),d1
		sub.w   d1,d0
		move.w	d0,$000C(a1)
		sub.w   8(a0),d2
		sub.w   d2,8(a1)
loc_F91C:
		rts		
loc_F91E:
		btst	#$03,$0022(a1)
		beq.s	loc_F95E
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		lsr.w	#1,d0
		btst	#$00,$0001(a0)
		beq.s	loc_F93E
		not.w  d0
		add.w   d1,d0
loc_F93E:
		move.b	$00(A2,d0),d1
		ext.w   d1
		move.w	$000C(a0),d0
		sub.w   d1,d0
		moveq	#0,d1
		move.b	$0016(a1),d1
		sub.w   d1,d0
		move.w	d0,$000C(a1)
		sub.w   8(a0),d2
		sub.w   d2,8(a1)
loc_F95E:
		rts
loc_F960:

		btst	#$03,$0022(a1)
		beq.s	loc_F95E
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		btst	#$00,$0001(a0)
		beq.s	loc_F97E
		not.w  d0
		add.w   d1,d0
loc_F97E:
		andi.w	#$FFFE,d0
		bra.s	loc_F93E
; loc_F984:
PlatformObject:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.s	PlatformObject_SingleCharacter
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		addq.b	#1,d6
; loc_F99A:
PlatformObject_SingleCharacter:
		btst	d6,$0022(a0)
		beq.w	 loc_FA98
		move.w	d1,d2
		add.w   d2,d2
		btst	#1,$0022(a1)
		bne.s	loc_F9BE
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_F9BE
		cmp.w	d2,d0
		bcs.s	loc_F9CC
loc_F9BE:
		bclr	#$03,$0022(a1)
		bclr	d6,$0022(a0)
		moveq	#0,d4
		rts
loc_F9CC:
		move.w	d4,d2
		bsr.w	loc_F8E4
		moveq	#0,d4
		rts
loc_F9d6:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.s	loc_F9EC
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		addq.b	#1,d6
loc_F9EC:		
		btst	d6,$0022(a0)
		beq.w	 loc_FB60
		move.w	d1,d2
		add.w   d2,d2  
		btst	#1,$0022(a1)
		bne.s	loc_FA10
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_FA10
		cmp.w	d2,d0
		bcs.s	loc_FA1E
loc_FA10:
		bclr	#$03,$0022(a1)
		bclr	d6,$0022(a0)
		moveq	#0,d4
		rts
loc_FA1E:
		move.w	d4,d2
		bsr.w	loc_F91E
		moveq	#0,d4
		rts

loc_FA28:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.s	loc_FA3E
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		addq.b	#1,d6
loc_FA3E:
		btst	d6,$0022(a0)
		beq.w	 loc_FB98
		move.w	d1,d2
		add.w   d2,d2
		btst	#1,$0022(a1)
		bne.s	loc_FA62
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_FA62
		cmp.w	d2,d0
		bcs.s	loc_FA70
loc_FA62:
		bclr	#$03,$0022(a1)
		bclr	d6,$0022(a0)
		moveq	#0,d4
		rts
loc_FA70:
		move.w	d4,d2
		bsr.w	loc_F8E4
		moveq	#0,d4
		rts      
loc_FA7A:
		tst.w	$0012(a1)
		bmi.w	 loc_FB5E
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.w	 loc_FB5E
		cmp.w	d2,d0
		bcc.w	 loc_FB5E
		bra.s	loc_FAB6
loc_FA98:		
		tst.w	$0012(a1)
		bmi.w	 loc_FB5E
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.w	 loc_FB5E
		add.w   d1,d1
		cmp.w	d1,d0
		bcc.w	 loc_FB5E
loc_FAB6:
		move.w	$000C(a0),d0
		sub.w   d3,d0
loc_FABC:
		move.w	$000C(a1),d2
		move.b	$0016(a1),d1
		ext.w   d1
		add.w   d2,d1
		addq.w	#$04,d1
		sub.w   d1,d0
		bhi.w	 loc_FB5E
		cmpi.w	#$FFF0,d0
		bcs.w	 loc_FB5E
		tst.b	$002A(a1)
		bmi.w	 loc_FB5E
		cmpi.b	#$06,$0024(a1)
		bcc.w	 loc_FB5E
		add.w   d0,d2
		addq.w	#$03,d2
		move.w	d2,$000C(a1)
loc_FAF2:		
		btst	#$03,$0022(a1)
		beq.s	loc_FB0E
		moveq	#0,d0
		move.b	$003D(a1),d0
		lsl.w	#$06,d0
		addi.l	#MainCharacter,d0
		move.l	d0,A3
		bclr	d6,$0022(a3)
loc_FB0E:
		move.w	A0,d0
		subi.w	#MainCharacter,d0
		lsr.w	#$06,d0
		andi.w	#$007F,d0
		move.b	d0,$003D(a1)
		move.b	#$00,$0026(a1)
		move.w	#0,$0012(a1)
		move.w	$0010(a1),$0014(a1)
		btst	#1,$0022(a1)
		beq.s	loc_FB54
		move.l	A0,-(sp)
		move.l	A1,A0
		move.w	A0,d1
		subi.w	#MainCharacter,d1
		bne.s	loc_FB4C
		jsr	 Sonic_ResetOnFloor      ; loc_1090C
		bra.s	loc_FB52
loc_FB4C:
		jsr	 Tails_ResetTailsOnFloor ; loc_11A66 
loc_FB52:
		move.l	(sp)+,A0
loc_FB54:
		bset	#$03,$0022(a1)
		bset	d6,$0022(a0)
loc_FB5E:
		rts		      
loc_FB60:
		tst.w	$0012(a1)
		bmi.w	 loc_FB5E
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_FB5E
		add.w   d1,d1
		cmp.w	d1,d0
		bcc.s	loc_FB5E
		btst	#$00,$0001(a0)
		beq.s	loc_FB86
		not.w   d0
		add.w   d1,d0
loc_FB86:
		lsr.w	#1,d0
		move.b	$00(A2,d0),d3
		ext.w   d3
		move.w	$000C(a0),d0
		sub.w   d3,d0
		bra.w	loc_FABC
loc_FB98:		
		tst.w	$0012(a1)
		bmi.w	 loc_FB5E
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.w	 loc_FB5E
		add.w   d1,d1
		cmp.w	d1,d0
		bcc.w	 loc_FB5E
		move.w	$000C(a0),d0
		sub.w   d3,d0
		bra.w	loc_FABC
loc_FBC0:		
		move.w	d1,d2
		add.w   d2,d2
		lea	(MainCharacter).w,A1
		btst	#1,$0022(a1)
		bne.s	loc_FBE0
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d1,d0
		bmi.s	loc_FBE0
		cmp.w	d2,d0
		bcs.s	loc_FBF2
loc_FBE0:
		bclr	#$03,$0022(a1)
		move.b	#$02,$0024(a0)
		bclr	#$03,$0022(a0)
loc_FBF2:
		rts		
loc_FBF4:
		lea	(MainCharacter).w,A1
		btst	#$03,$0022(a0)
		beq.s	loc_FC1C
		jsr	 ChkFloorEdge2         ; (loc_13846)
		tst.w	d1
		beq.s	loc_FC0C
		bpl.s	loc_FC1C
loc_FC0C:
		lea	(MainCharacter).w,A1
		bclr	#$03,$0022(a1)
		bclr	#$03,$0022(a0)
loc_FC1C:
		lea	(Sidekick).w,A1
		btst	#$04,$0022(a0)
		beq.s	loc_FC44
		jsr	 ChkFloorEdge2         ; (loc_13846)
		tst.w	d1
		beq.s	loc_FC34
		bpl.s	loc_FC44
loc_FC34:
		lea	(Sidekick).w,A1
		bclr	#$03,$0022(a1)
		bclr	#$04,$0022(a0)
loc_FC44:
		moveq	#0,d4
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 01 - Sonic
; ---------------------------------------------------------------------------            
; Sprite_FC48: Obj_0x01_Sonic:
Obj01:
		tst.w	(Debug_placement_mode).w; is Debug Mode being used?
		beq.s	Obj01_Normal		; if not,branch
		jmp	(DebugMode).l
; ---------------------------------------------------------------------------
; loc_FC54: Sonic_Normal:
Obj01_Normal:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj01_Index(pc,d0.w),d1
		jmp	Obj01_Index(pc,d1.w)
; ===========================================================================
; loc_FC62: Sonic_Index:
Obj01_Index:	offsetTable
		offsetTableEntry.w Obj01_Init
		offsetTableEntry.w Obj01_Control
		offsetTableEntry.w Obj01_Hurt
		offsetTableEntry.w Obj01_Dead
		offsetTableEntry.w Obj01_Gone
; ===========================================================================
; loc_FC6C: Sonic_Main:
Obj01_Init:
		addq.b	#2,routine(a0)	; => Obj01_Control
		move.b	#$13,$16(a0)	; this sets Sonic's collision height (2*pixels)
		move.b	#9,$17(a0)
		move.l	#MapUnc_Sonic,4(a0)
		move.w	#$780,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#4,1(a0)
		move.w	#$600,(Sonic_top_speed).w	; set Sonic's top speed
		move.w	#$C,(Sonic_acceleration).w	; set Sonic's acceleration
		move.w	#$80,(Sonic_deceleration).w	; set Sonic's deceleration
		move.b	#$C,$3E(a0)
		move.b	#$D,$3F(a0)
		move.b	#0,$2C(a0)
		move.b	#4,$2D(a0)
		move.w	#0,(Sonic_Pos_Record_Index).w
		move.w	#$3F,d2

loc_FCd4:
		bsr.w	Sonic_RecordPos
		move.w	#0,(a1,d0.w)
		dbf	d2,loc_FCd4

; ---------------------------------------------------------------------------
; Normal state for Sonic
; ---------------------------------------------------------------------------
; loc_FCE2: Sonic_Control:
Obj01_Control:
		tst.w	(Debug_mode_flag).w		; is Debug Mode enabled?
		beq.s	loc_FCFC			; if not,branch
		btst	#4,(Ctrl_1_Press).w		; is button B pressed?
		beq.s	loc_FCFC			; if not,branch
		move.w	#1,(Debug_placement_mode).w	; change Sonic into a ring/item
		clr.b	(Control_Locked).w		; unlock control
		rts
; -----------------------------------------------------------------------

loc_FCFC:
		tst.b	(Control_Locked).w	; are controls locked?
		bne.s	loc_Fd08		; if yes,branch
		move.w	(Ctrl_1).w,(Ctrl_1_Logical).w	; copy new held buttons to enable joypad control

loc_Fd08:
		btst	#0,$2A(a0)		; is Sonic interacting with another object that holds him in place or controls his movement somehow?
		bne.s	Obj01_ControlsLock	; if yes,branch
		moveq	#0,d0
		move.b	$22(a0),d0
		andi.w	#6,d0
		move.w	Obj01_Modes(pc,d0.w),d1
		jsr	Obj01_Modes(pc,d1.w)	; run Sonic's movement code
; loc_Fd22: Sonic_ControlsLock:
Obj01_ControlsLock:
		bsr.s	Sonic_Display
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Water
		move.b	(Primary_Angle).w,$36(a0)
		move.b	(Secondary_Angle).w,$37(a0)
		tst.b	(WindTunnel_flag).w
		beq.s	loc_Fd4A
		tst.b	$1C(a0)
		bne.s	loc_Fd4A
		move.b	$1D(a0),$1C(a0)

loc_Fd4A:
		bsr.w	Sonic_Animate
		tst.b	$2A(a0)
		bmi.s	loc_Fd5A
		jsr	(TouchResponse).l

loc_Fd5A:
		bra.w	LoadSonicDynPLC
; ===========================================================================
; loc_Fd5E:
Obj01_Modes:	offsetTable
		offsetTableEntry.w Obj01_MdNormal	; 0 - not airborne or rolling
		offsetTableEntry.w Obj01_MdAir		; 2 - airborne
		offsetTableEntry.w Obj01_MdRoll		; 4 - rolling
		offsetTableEntry.w Obj01_MdJump		; 6 - jumping
; ===========================================================================
; byte_Fd66:
Sonic_MusicList:	zoneOrderedTable 1,1
	zoneTableEntry.b	MusID_GHZ	; GHZ
	zoneTableEntry.b	MusID_GHZ	; OWZ
	zoneTableEntry.b	MusID_MTZ	; WZ
	zoneTableEntry.b	MusID_SSZ	; SSZ
	zoneTableEntry.b	MusID_MTZ	; MTZ
	zoneTableEntry.b	MusID_MTZ	; MTZ2
	zoneTableEntry.b	MusID_BOZ	; BLZ
	zoneTableEntry.b	MusID_HTZ	; HTZ
	zoneTableEntry.b	MusID_HPZ	; HPZ
	zoneTableEntry.b	MusID_RWZ	; RWZ
	zoneTableEntry.b	MusID_OOZ	; OOZ
	zoneTableEntry.b	MusID_DHZ	; DHZ
	zoneTableEntry.b	MusID_CNZ	; CNZ
	zoneTableEntry.b	MusID_CPZ	; CPZ
	zoneTableEntry.b	MusID_CPZ	; GCZ
	zoneTableEntry.b	MusID_NGHZ	; NGHZ
	; no *proper* entry for DEZ,so it instead uses the alignment to play sound $08
	;zoneTableEntry.b	MusID_DEZ	; DEZ
    zoneTableEnd
	even

; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_Fd76:
Sonic_Display:
		move.w	$30(a0),d0
		beq.s	Obj01_Display
		subq.w	#1,$30(a0)
		lsr.w	#3,d0
		bcc.s	Obj01_ChkInvin
; loc_FD84:
Obj01_Display:
		jsr	(DisplaySprite).l
; loc_FD8A:
Obj01_ChkInvin:	; Checks if Sonic has run out of invincibility frames
		tst.b	(Invincibility_flag).w
		beq.s	Obj01_ChkShoes
		tst.w	$32(a0)
		beq.s	Obj01_ChkShoes
		subq.w	#1,$32(a0)
		bne.s	Obj01_ChkShoes
		tst.b	(Current_Boss_ID).w
		bne.s	Obj01_RmvInvin
		cmpi.w	#$C,(Current_Air).w
		bcs.s	Obj01_RmvInvin
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lea	Sonic_MusicList(pc),a1
		move.b	(a1,d0.w),d0
		jsr	(PlayMusic).l
; loc_FDBE:
Obj01_RmvInvin:
		move.b	#0,(Invincibility_flag).w
; loc_FDC4:
Obj01_ChkShoes:	; Checks if Sonic should still have the speed shoes
		tst.b	(Speed_shoes).w
		beq.s	Obj01_ExitChk
		tst.w	$34(a0)
		beq.s	Obj01_ExitChk
		subq.w	#1,$34(a0)
		bne.s	Obj01_ExitChk
		move.w	#$600,(Sonic_top_speed).w
		move.w	#$C,(Sonic_acceleration).w
		move.w	#$80,(Sonic_deceleration).w
		move.b	#0,(Speed_shoes).w
		move.w	#MusID_SlowDown,d0	; restore music tempo
		jmp	(PlayMusic).l
; return_FDF8:
Obj01_ExitChk:
		rts
; End of subroutine Sonic_Display
		  
; ---------------------------------------------------------------------------
; Subroutine to record Sonic's previous positions for invincibility stars
; and input/status flags for Tails' AI to follow
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FDFA: CopySonicMovesForTails:
Sonic_RecordPos:
		move.w	(Sonic_Pos_Record_Index).w,d0
		lea	(Sonic_Pos_Record_Buf).w,a1
		lea	(a1,d0.w),a1
		move.w	8(a0),(a1)+
		move.w	$C(a0),(a1)+
		addq.b	#4,(Sonic_Pos_Record_Index+1).w
		lea	(Sonic_Stat_Record_Buf).w,a1
		move.w	(Ctrl_1).w,(a1,d0.w)
		rts
; End of function Sonic_RecordPos

; ---------------------------------------------------------------------------
; Seemingly an earlier subroutine to copy Sonic's status flags for Tails' AI,
; also presnet in the Nick Arcade prototype
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FE1E: Unused_RecordPos:
		move.w	(unk_EEE0).w,d0
		subq.b	#4,d0
		lea	(unk_E600).w,a1
		lea	(a1,d0.w),a2
		move.w	8(a0),d1
		swap	d1
		move.w	$C(a0),d1
		cmp.l	(a2),d1
		beq.s	return_FE4C
		addq.b	#4,d0
		lea	(a1,d0.w),a2
		move.w	8(a0),(a2)+
		move.w	$C(a0),(a2)
		addq.b	#4,(unk_EEE0+1).w

return_FE4C:
		rts
; End of function Unused_RecordPos

; ---------------------------------------------------------------------------
; Subroutine for Sonic when he's underwater
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FE4E:
Sonic_Water:
		tst.b	(Water_flag).w		; is this a water level?
		bne.s	Obj01_InWater		; if not,branch

return_FE54:
		rts
; ---------------------------------------------------------------------------
; loc_FE56: Sonic_InLevelWithWater:
Obj01_InWater:
		move.w	(Water_Level_1).w,d0
		cmp.w	$C(a0),d0		; is Sonic underwater?
		bge.s	Obj01_OutWater		; if not,branch

		bset	#6,$22(a0)		; set underwater flag
		bne.s	return_FE54		; if already underwater,branch

		bsr.w	ResumeMusic
		move.b	#$A,(BreathingBubbles).w	; load Obj0A (Sonic's breathing bubbles) at $FFFFB340
		move.b	#$81,(BreathingBubbles+$28).w
		move.w	#$300,(Sonic_top_speed).w
		move.w	#6,(Sonic_acceleration).w
		move.w	#$40,(Sonic_deceleration).w
		asr.w	$10(a0)
		asr.w	$12(a0)			; memory operands can only be shifted one bit at a time
		asr.w	$12(a0)
		beq.s	return_FE54
		move.b	#8,(WaterSplash).w	; load Obj08 (splash animation) at $FFFFB300
		move.w	#SndID_Splash,d0			; splash sound
		jmp	(PlaySound).l
; ---------------------------------------------------------------------------
; loc_FEA8: Sonic_NotInWater:
Obj01_OutWater:
		bclr	#6,$22(a0)	; clear underwater flag
		beq.s	return_FE54	; if already cleared,branch
		bsr.w	ResumeMusic
		move.w	#$600,(Sonic_top_speed).w
		move.w	#$C,(Sonic_acceleration).w
		move.w	#$80,(Sonic_deceleration).w
		asl.w	$12(a0)
		beq.w	return_FE54
		move.b	#8,(WaterSplash).w	; load Obj08 (splash animation) at $FFFFB300
		cmpi.w	#-$1000,$12(a0)
		bgt.s	loc_FEE2
		move.w	#-$1000,$12(a0)		; limit upwards y-velocity when exiting out of water

loc_FEE2:
		move.w	#SndID_Splash,d0			; splash sound
		jmp	(PlaySound).l
; End of subroutine Sonic_Water

; ===========================================================================
; ---------------------------------------------------------------------------
; Start of subroutine Obj01_MdNormal
; Called if Sonic is neither airborne nor rolling this frame
; ---------------------------------------------------------------------------
; loc_FEEC: Sonic_MdNormal:
Obj01_MdNormal:
		bsr.w	Sonic_CheckSpindash
		bsr.w	Sonic_Jump
		bsr.w	Sonic_SlopeResist
		bsr.w	Sonic_Move
		bsr.w	Sonic_Roll
		bsr.w	Sonic_LevelBound
		jsr	(ObjectMove).l
		bsr.w	AnglePos
		bsr.w	Sonic_SlopeRepel
		rts
; End of subroutine Obj01_MdNormal

; ===========================================================================
; Start of subroutine Obj01_MdAir
; Called if Sonic is airborne,but not in a ball (thus,probably not jumping)
; loc_FF14: Sonic_MdJump
Obj01_MdAir:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		bsr.w	Sonic_LevelBound
		jsr	(ObjectMoveAndFall).l
		btst	#6,$22(a0)	; is Sonic underwater?
		beq.s	loc_FF34	; if not,branch
		subi.w	#$28,$12(a0)	; reduce gravity by $28 ($38-$28=$10)

loc_FF34:
		bsr.w	Sonic_JumpAngle
		bsr.w	Sonic_DoLevelCollision
		rts
; End of subroutine Obj01_MdAir

; ===========================================================================
; Start of subroutine Obj01_MdRoll
; Called if Sonic is in a ball,but not airborne (thus,probably rolling)
; loc_FF3E: Sonic_MdRoll:
Obj01_MdRoll:
		bsr.w	Sonic_Jump
		bsr.w	Sonic_RollRepel
		bsr.w	Sonic_RollSpeed
		bsr.w	Sonic_LevelBound
		jsr	(ObjectMove).l
		bsr.w	AnglePos
		bsr.w	Sonic_SlopeRepel
		rts
; End of subroutine Obj01_MdRoll

; ===========================================================================
; Start of subroutine Obj01_MdJump (an Obj01_MdAir clone)
; Called if Sonic is in a ball and airborne (he could be jumping but not necessarily)
; loc_FF5E: Sonic_MdJump2:
Obj01_MdJump:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		bsr.w	Sonic_LevelBound
		jsr	(ObjectMoveAndFall).l
		btst	#6,$22(a0)	; is Sonic underwater?
		beq.s	loc_FF7E	; if not,branch
		subi.w	#$28,$12(a0)	; reduce gravity by $28 ($38-$28=$10)

loc_FF7E:
		bsr.w	Sonic_JumpAngle
		bsr.w	Sonic_DoLevelCollision
		rts
; End of subroutine Obj01_MdJump

; ---------------------------------------------------------------------------
; Subroutine to make Sonic walk/run
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FF88:
Sonic_Move:
		move.w	(Sonic_top_speed).w,d6
		move.w	(Sonic_acceleration).w,d5
		move.w	(Sonic_deceleration).w,d4

		tst.b	(Sliding_flag).w		; is Sonic sliding?
		bne.w	Obj01_Traction			; if yes,branch
		tst.w	$2E(a0)				; is Sonic's controls locked?
		bne.w	Obj01_UpdateSpeedOnGround	; if yes,branch
		btst	#2,(Ctrl_1_Held_Logical).w	; is left being pressed?
		beq.s	Obj01_NotLeft			; if not,branch
		bsr.w	Sonic_MoveLeft
; loc_FFB0:
Obj01_NotLeft:
		btst	#3,(Ctrl_1_Held_Logical).w	; is right being pressed?
		beq.s	Obj01_NotRight		; if not,branch
		bsr.w	Sonic_MoveRight
; loc_FFBC:
Obj01_NotRight:
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0				; is Sonic on a slope?
		bne.w	Obj01_UpdateSpeedOnGround	; if yes,branch
		tst.w	$14(a0)				; is Sonic moving?
		bne.w	Obj01_UpdateSpeedOnGround	; if yes,branch
		bclr	#5,$22(a0)
		move.b	#5,$1C(a0)	; use "standing" animation
		; check how close/far Sonic is from the edge
		btst	#3,$22(a0)	; is Sonic on the edge?
		beq.s	Sonic_Balance	; if yes,branch
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		lea	(MainCharacter).w,a1
		lea	(a1,d0.w),a1
		tst.b	$22(a1)
		bmi.s	Sonic_LookUp
		moveq	#0,d1
		move.b	$19(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#4,d2
		add.w	8(a0),d1
		sub.w	8(a1),d1
		cmpi.w	#4,d1
		blt.s	Sonic_BalanceOnObjLeft
		cmp.w	d2,d1
		bge.s	Sonic_BalanceOnObjRight
		bra.s	Sonic_LookUp
; ===========================================================================
; loc_1001E:
Sonic_Balance:
		jsr	(ChkFloorEdge).l
		cmpi.w	#$C,d1
		blt.s	Sonic_LookUp
		cmpi.b	#3,$36(a0)
		bne.s	loc_1003A
; loc_10032:
Sonic_BalanceOnObjRight:
		bclr	#0,$22(a0)
		bra.s	loc_10048

loc_1003A:
		cmpi.b	#3,$37(a0)
		bne.s	Sonic_LookUp
; loc_10042:
Sonic_BalanceOnObjLeft:		
		bset	#0,$22(a0)

loc_10048:		
		move.b	#6,$1C(a0)
		bra.s	Obj01_UpdateSpeedOnGround
; ===========================================================================
; loc_10050:
Sonic_LookUp:
		btst	#0,(Ctrl_1_Held_Logical).w	; is up being pressed?
		beq.s	Sonic_Duck		; if not,branch
		move.b	#7,$1C(a0)		; use "looking up" animation
		bra.s	Obj01_UpdateSpeedOnGround
; ===========================================================================
; loc_10060:
Sonic_Duck:
		btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
		beq.s	Obj01_UpdateSpeedOnGround	; if not,branch
		move.b	#8,$1C(a0)		; use "ducking" animation
; ===========================================================================
; ---------------------------------------------------------------------------
; updates Sonic's speed on the ground
; ---------------------------------------------------------------------------
; sub_1006E:
Obj01_UpdateSpeedOnGround:
		move.b	(Ctrl_1_Held_Logical).w,d0
		andi.b	#$C,d0
		bne.s	Obj01_Traction
		move.w	$14(a0),d0
		beq.s	Obj01_Traction
		bmi.s	Obj01_SettleLeft

; slow down when facing right and not pressing a direction
; Obj01_SettleRight:
		sub.w	d5,d0
		bcc.s	loc_10088
		move.w	#0,d0

loc_10088:
		move.w	d0,$14(a0)
		bra.s	Obj01_Traction
; ---------------------------------------------------------------------------
; slow down when facing left and not pressing a direction
; loc_1008E:
Obj01_SettleLeft:
		add.w	d5,d0
		bcc.s	loc_10096
		move.w	#0,d0

loc_10096:
		move.w	d0,$14(a0)

; increase or decrease speed on the ground
; loc_1009A:
Obj01_Traction:
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d1
		asr.l	#8,d1
		move.w	d1,$10(a0)
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)

; stops Sonic from running through walls that meet the ground
; loc_100B8:
Obj01_CheckWallsOnGround:
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bmi.s	loc_10128
		move.b	#$40,d1		; rotate 90 degress clockwise
		tst.w	$14(a0)		; is Sonic moving?
		beq.s	loc_10128	; if not,branch
		bmi.s	loc_100d0	; if negative,branch
		neg.w	d1		; rotate COUNTER-clockwise

loc_100d0:
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		bsr.w	Sonic_WalkSpeed
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	loc_10128
		asl.w	#8,d1
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_10124
		cmpi.b	#$40,d0
		beq.s	loc_10112
		cmpi.b	#$80,d0
		beq.s	loc_1010C
		add.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_1010C:
		sub.w	d1,$12(a0)
		rts
; ---------------------------------------------------------------------------

loc_10112:
		sub.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_10124:
		add.w	d1,$12(a0)
; ---------------------------------------------------------------------------

loc_10128:
		rts
; End of subroutine Sonic_Move    


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1012A:
Sonic_MoveLeft:
		move.w	$14(a0),d0
		beq.s	loc_10132	; is Sonic starting to move to the right?
		bpl.s	Sonic_TurnLeft	; if not,branch

loc_10132:
		bset	#0,$22(a0)
		bne.s	loc_10146
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)	; force walking animation to restart if it's already in-progress

loc_10146:
		sub.w	d5,d0		; add acceleration to the left
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0		; compare new speed with top speed
		bgt.s	loc_10158	; if new speed is less than the maximum,branch
		add.w	d5,d0		; remove this frame's acceleration change
		cmp.w	d1,d0		; compare speed with top speed
		ble.s	loc_10158	; if speed was already greater than the maximum,branch
		move.w	d1,d0		; limit speed on ground going left

loc_10158:
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)	; use walking animation
		rts
; ---------------------------------------------------------------------------
; loc_10164:
Sonic_TurnLeft:
		sub.w	d4,d0
		bcc.s	loc_1016C
		move.w	#-$80,d0

loc_1016C:
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	return_1019A
		cmpi.w	#$400,d0             
		blt.s	return_1019A
		move.b	#$D,$1C(a0)	; use "stopping" animation
		bclr	#0,$22(a0)
		move.w	#SndID_Skidding,d0
		jsr	(PlaySound).l

return_1019A:
		rts
; End of subroutine Sonic_MoveLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1019C:
Sonic_MoveRight:
		move.w	$14(a0),d0
		bmi.s	Sonic_TurnRight	; if Sonic is already moving to the left,branch
		bclr	#0,$22(a0)
		beq.s	loc_101B6
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)	; force walking animation to restart if it's already in-progress

loc_101B6:
		add.w	d5,d0		; add acceleration to the right
		cmp.w	d6,d0		; compare new speed with top speed
		blt.s	loc_101C4	; if new speed is less than the maximum,branch
		sub.w	d5,d0		; remove this frame's acceleration change
		cmp.w	d6,d0		; compare speed with top speed
		bge.s	loc_101C4	; if speed was already greater than the maximum,branch
		move.w	d6,d0		; limit speed on ground going right

loc_101C4:
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)	; use walking animation
		rts
; ---------------------------------------------------------------------------
; loc_101d0:
Sonic_TurnRight:
		add.w	d4,d0
		bcc.s	loc_101D8
		move.w	#$80,d0

loc_101D8:
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	return_10206
		cmpi.w	#-$400,d0
		bgt.s	return_10206
		move.b	#$D,$1C(a0)	; use "stopping" animation
		bset	#0,$22(a0)
		move.w	#SndID_Skidding,d0
		jsr	(PlaySound).l

return_10206:
		rts
; End of subroutine Sonic_MoveRight

; ---------------------------------------------------------------------------
; Subroutine to change Sonic's speed as he rolls
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10208:
Sonic_RollSpeed:
		move.w	(Sonic_top_speed).w,d6
		asl.w	#1,d6
		move.w	(Sonic_acceleration).w,d5
		asr.w	#1,d5	; natural roll deceleration = 1/2 normal acceleration
		; These two lines are unchanged from Sonic 1,the final would replace
		; them with "move.w #$20,d4",which made Sonic decelerate much faster
		; underwater,but they forgot to apply the change to Tails
		move.w	(Sonic_deceleration).w,d4
		asr.w	#2,d4
		tst.b	(Sliding_flag).w
		bne.w	Sonic_SetRollSpeeds
		tst.w	$2E(a0)
		bne.s	Sonic_ApplyRollSpeed
		btst	#2,(Ctrl_1_Held_Logical).w	; is left being pressed?
		beq.s	loc_10234		; if not,branch
		bsr.w	Sonic_RollLeft

loc_10234:
		btst	#3,(Ctrl_1_Held_Logical).w	; is right being pressed?
		beq.s	Sonic_ApplyRollSpeed	; if not,branch
		bsr.w	Sonic_RollRight
; loc_10240:
Sonic_ApplyRollSpeed:
		move.w	$14(a0),d0
		beq.s	Sonic_CheckRollStop
		bmi.s	Sonic_ApplyRollSpeedLeft

; Sonic_ApplyRollSpeedRight:
		sub.w	d5,d0
		bcc.s	loc_10250
		move.w	#0,d0

loc_10250:
		move.w	d0,$14(a0)
		bra.s	Sonic_CheckRollStop
; ---------------------------------------------------------------------------
; loc_10256:
Sonic_ApplyRollSpeedLeft:
		add.w	d5,d0
		bcc.s	loc_1025E
		move.w	#0,d0

loc_1025E:
		move.w	d0,$14(a0)
; loc_10262:
Sonic_CheckRollStop:
		tst.w	$14(a0)
		bne.s	Sonic_SetRollSpeeds
		bclr	#2,$22(a0)
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		move.b	#5,$1C(a0)
		subq.w	#5,$C(a0)
; ---------------------------------------------------------------------------
; loc_10284:
Sonic_SetRollSpeeds:
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)	; set y velocity based on $14 and angle
		muls.w	$14(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_102A8
		move.w	#$1000,d1	; limit Sonic's speed rolling right

loc_102A8:
		cmpi.w	#-$1000,d1
		bge.s	loc_102B2
		move.w	#-$1000,d1	; limit Sonic's speed rolling left

loc_102B2:
		move.w	d1,$10(a0)	; set x velocity based on $14 and angle
		bra.w	Obj01_CheckWallsOnGround
; End of function Sonic_RollSpeed


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_102BA:
Sonic_RollLeft:
		move.w	$14(a0),d0
		beq.s	+
		bpl.s	Sonic_BrakeRollingRight
+
		bset	#0,$22(a0)
		move.b	#2,$1C(a0)	; use "rolling" animation
		rts
; ---------------------------------------------------------------------------
; loc_102d0:
Sonic_BrakeRollingRight:
		sub.w	d4,d0		; reduce rightward rolling speed
		bcc.s	loc_102D8
		move.w	#$FF80,d0

loc_102D8:
		move.w	d0,$14(a0)
		rts
; End of function Sonic_RollLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_102DE:
Sonic_RollRight:
		move.w	$14(a0),d0
		bmi.s	Sonic_BrakeRollingLeft
		bclr	#0,$22(a0)
		move.b	#2,$1C(a0)	; use "rolling" animation
		rts
; ---------------------------------------------------------------------------
; loc_102F2:
Sonic_BrakeRollingLeft:
		add.w	d4,d0		; reduce leftward rolling speed
		bcc.s	+
		move.w	#$80,d0
+
		move.w	d0,$14(a0)
		rts
; End of subroutine Sonic_RollRight

; ---------------------------------------------------------------------------
; Subroutine for moving Sonic left or right when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10300:
Sonic_ChgJumpDir:
		move.w	(Sonic_top_speed).w,d6
		move.w	(Sonic_acceleration).w,d5
		asl.w	#1,d5
		btst	#4,$22(a0)		; did Sonic jump from rolling?
		bne.s	Obj01_Jump_ResetScr	; if yes,branch to skip midair control
		move.w	$10(a0),d0
		btst	#2,(Ctrl_1_Held_Logical).w
		beq.s	+	; if not holding left,branch

		bset	#0,$22(a0)
		sub.w	d5,d0	; add acceleration to the left
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0	; compare new speed with top speed
		bgt.s	+	; if new speed is less than the maximum,branch
		move.w	d1,d0	; limit speed in air going left,even if Sonic was already going faster (speed limit/cap)
+
		btst	#3,(Ctrl_1_Held_Logical).w
		beq.s	+	; if not holding right,branch

		bclr	#0,$22(a0)
		add.w	d5,d0	; accelerate right in the air
		cmp.w	d6,d0	; compare new speed to top speed
		blt.s	+	; if new speed is less than maximum,branch
		move.w	d6,d0	; limit speed in air going right,even if Sonic was already going faster (speed limit/cap)
; Obj01_JumpMove:
+		move.w	d0,$10(a0)

; loc_1034A: Obj01_ResetScr2:
Obj01_Jump_ResetScr:
		cmpi.w	#$60,(Camera_Y_pos_bias).w	; is screen in its default position?
		beq.s	Sonic_JumpPeakDecelerate	; if yes,branch
		bcc.s	+			; depending on the sign of the difference,
		addq.w	#4,(Camera_Y_pos_bias).w	; either add 2
+		subq.w	#2,(Camera_Y_pos_bias).w	; or subtract 2

; loc_1035C:
Sonic_JumpPeakDecelerate:
		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
		bcs.s	return_1038A	; if yes,branch
		move.w	$10(a0),d0
		move.w	d0,d1
		asr.w	#5,d1		; d1 = x_velocity / 32
		beq.s	return_1038A	; return of d1 is 0
		bmi.s	Sonic_JumpPeakDecelerateLeft	; branch if moving left

; Sonic_JumpPeakDecelerateRight:
		sub.w	d1,d0	; reduce x velocity by d1
		bcc.s	+
		move.w	#0,d0
+
		move.w	d0,$10(a0)
		rts
;-------------------------------------------------------------
; loc_1037E:
Sonic_JumpPeakDecelerateLeft:
		sub.w	d1,d0	; reduce x velocity by d1
		bcs.s	+
		move.w	#0,d0
+
		move.w	d0,$10(a0)

return_1038A:
		rts
; End of subroutine Sonic_ChgJumpDir

; ---------------------------------------------------------------------------
; Subroutine to prevent Sonic from leaving the boundaries of a level
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1038C: Sonic_LevelBoundaries:
Sonic_LevelBound:
		move.l	8(a0),d1
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d1
		swap	d1
		move.w	(Camera_Min_X_pos).w,d0
		addi.w	#$10,d0
		cmp.w	d1,d0		; has Sonic touched the left boundary?
		bhi.s	Sonic_Boundary_Sides	; if yes,branch
		move.w	(Camera_Max_X_pos).w,d0
		addi.w	#320-24,d0	; screen width - Sonic's width_pixels
		tst.b	(Current_Boss_ID).w
		bne.s	loc_103BA
		addi.w	#$40,d0

loc_103BA:
		cmp.w	d1,d0		; has Sonic touched the right boundary?
		bls.s	Sonic_Boundary_Sides	; if yes,branch
; loc_103BE:
Sonic_Boundary_CheckBottom:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$C(a0),d0
		blt.s	Sonic_Boundary_Bottom
		rts
; ===========================================================================
; loc_103CE:
Sonic_Boundary_Bottom:
		bra.w	JmpTo_KillSonic
; ---------------------------------------------------------------------------
; Leftover from Sonic 1,which would transport the player to SBZ3/LZ4 upon
; reaching a certain position; its ID is different,for whatever reason
		cmpi.w	#death_egg_zone_act_2,(Current_ZoneAndAct).w	; is it DEZ2?
		bne.w	JmpTo_KillSonic			; if not,branch
		cmpi.w	#$2000,(MainCharacter+8).w		; is Sonic beyond x position $2000?
		bcs.w	JmpTo_KillSonic			; if not,branch
		clr.b	(Last_star_pole_hit).w
		move.w	#1,(Level_Inactive_flag).w
		move.w	#labyrinth_zone_act_4,(Current_ZoneAndAct).w	; restart in OWZ4
		rts
; ===========================================================================
; loc_103F8:
Sonic_Boundary_Sides:
		move.w	d0,8(a0)
		move.w	#0,$A(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		bra.s	Sonic_Boundary_CheckBottom
; End of function Sonic_LevelBound

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to start rolling when he's moving
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10410:
Sonic_Roll:
		tst.b	(Sliding_flag).w
		bne.s	Obj01_NoRoll
		move.w	$14(a0),d0
		bpl.s	loc_1041E
		neg.w	d0

loc_1041E:
		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
		bcs.s	Obj01_NoRoll	; if not,branch
		move.b	(Ctrl_1_Held_Logical).w,d0
		andi.b	#$C,d0		; is left/right being pressed?
		bne.s	Obj01_NoRoll	; if yes,branch
		btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
		bne.s	Obj01_ChkRoll	; if yes,branch
; return_10436: Sonic_NoRoll:
Obj01_NoRoll:
		rts
; ---------------------------------------------------------------------------
; loc_10438:
Obj01_ChkRoll:
		btst	#2,$22(a0)
		beq.s	Obj01_DoRoll
		rts
; ---------------------------------------------------------------------------
; loc_10442: Sonic_DoRoll:
Obj01_DoRoll:
		bset	#2,$22(a0)
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)	; use "rolling" animation
		addq.w	#5,$C(a0)
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l	; play rolling sound
		tst.w	$14(a0)
		bne.s	return_10474
		move.w	#$200,$14(a0)

return_10474:
		rts
; End of function Sonic_Roll

; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to jump
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10476:
Sonic_Jump:
		move.b	(Ctrl_1_Press_Logical).w,d0
		andi.b	#$70,d0		; is A,B or C pressed?
		beq.w	return_1051A	; if not,branch
		moveq	#0,d0
		move.b	$26(a0),d0
		addi.b	#$80,d0
		bsr.w	loc_136F2
		cmpi.w	#6,d1		; does Sonic have enough room to jump?
		blt.w	return_1051A	; if not,branch
		move.w	#$680,d2
		btst	#6,$22(a0)	; is Sonic underwater?
		beq.s	+		; if not,branch
		move.w	#$380,d2	; reduce jump speed
+
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0
		jsr	(CalcSine).l
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,$10(a0)	; make Sonic jump (in X... this adds nothing on level ground)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,$12(a0)	; make Sonic jump (in Y)
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		addq.l	#4,sp
		move.b	#1,$3C(a0)
		clr.b	$38(a0)
		move.w	#SndID_Jump,d0
		jsr	(PlaySound).l	; play jumping sound
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		btst	#2,$22(a0)
		bne.s	Sonic_RollJump
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)	; use "jumping" animation
		bset	#2,$22(a0)
		addq.w	#5,$C(a0)

return_1051A:
		rts
; ---------------------------------------------------------------------------
; loc_1051C:
Sonic_RollJump:
		bset	#4,$22(a0)	; set the rolling+jumping flag
		rts
; End of function Sonic_Jump

; ---------------------------------------------------------------------------
; Subroutine letting Sonic control the height of the jump
; when the jump button is released
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10524:
Sonic_JumpHeight:
		tst.b	$3C(a0)		; is Sonic jumping?
		beq.s	Sonic_UpVelCap	; if not,branch

		move.w	#-$400,d1
		btst	#6,$22(a0)	; is Sonic underwater?
		beq.s	loc_1053A	; if not,branch
		move.w	#-$200,d1

loc_1053A:
		cmp.w	$12(a0),d1	; is Sonic going up faster than d1?
		ble.s	return_1054E	; if not,branch
		move.b	(Ctrl_1_Held_Logical).w,d0
		andi.b	#$70,d0		; is A/B/C pressed?
		bne.s	return_1054E	; if yes,branch
		move.w	d1,$12(a0)	; immediately reduce Sonic's upward speed to d1

return_1054E:
		rts
; ---------------------------------------------------------------------------
; loc_10550:
Sonic_UpVelCap:
		cmpi.w	#-$FC0,$12(a0)	; is Sonic moving up really fast?
		bge.s	return_1055E	; if not,branch
		move.w	#-$FC0,$12(a0)	; cap upward speed

return_1055E:
		rts
; End of subroutine Sonic_JumpHeight
		  
; ---------------------------------------------------------------------------
; Subroutine to check for starting to charge a spindash
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10560: Sonic_Spindash:
Sonic_CheckSpindash:
		tst.b	$39(a0)
		bne.s	Sonic_UpdateSpindash
		cmpi.b	#8,$1C(a0)
		bne.s	return_10592
		move.b	(Ctrl_1_Press_Logical).w,d0
		andi.b	#$70,d0
		beq.w	return_10592
		move.b	#9,$1C(a0)
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l
		addq.l	#4,sp
		move.b	#1,$39(a0)

return_10592:
		rts
; ===========================================================================
; loc_10594:
Sonic_UpdateSpindash:
		move.b	(Ctrl_1_Held_Logical).w,d0
		btst	#1,d0
		bne.s	Sonic_ChargingSpindash

		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#5,$C(a0)
		move.b	#0,$39(a0)
		move.w	#$2000,(Horiz_scroll_delay_val).w
		move.w	#$800,$14(a0)
		btst	#0,$22(a0)
		beq.s	loc_105d2
		neg.w	$14(a0)

loc_105d2:
		bset	#2,$22(a0)
		rts
; ===========================================================================
; loc_105DA:
Sonic_ChargingSpindash:
		move.b	(Ctrl_1_Press_Logical).w,d0
		andi.b	#$70,d0
		beq.w	loc_105E8
		nop

loc_105E8:
		addq.l	#4,sp
		rts
; End of function Sonic_CheckSpindash

; ---------------------------------------------------------------------------
; Subroutine to slow Sonic walking up a slope
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_105EC:
Sonic_SlopeResist:
		move.b	$26(a0),d0
		addi.b	#$60,d0
		cmpi.b	#$C0,d0
		bcc.s	return_10620
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$20,d0
		asr.l	#8,d0
		tst.w	$14(a0)
		beq.s	return_10620
		bmi.s	loc_1061C
		tst.w	d0
		beq.s	return_1061A
		add.w	d0,$14(a0)

return_1061A:
		rts
; ---------------------------------------------------------------------------

loc_1061C:
		add.w	d0,$14(a0)

return_10620:
		rts
; End of subroutine Sonic_SlopeResist

; ---------------------------------------------------------------------------
; Subroutine to push Sonic down a slope while he's rolling
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10622:
Sonic_RollRepel:
		move.b	$26(a0),d0
		addi.b	#$60,d0
		cmpi.b	#$C0,d0
		bcc.s	return_1065C
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$50,d0
		asr.l	#8,d0
		tst.w	$14(a0)
		bmi.s	loc_10652
		tst.w	d0
		bpl.s	loc_1064C
		asr.l	#2,d0

loc_1064C:
		add.w	d0,$14(a0)
		rts
; ===========================================================================

loc_10652:
		tst.w	d0
		bmi.s	loc_10658
		asr.l	#2,d0

loc_10658:
		add.w	d0,$14(a0)

return_1065C:
		rts
; End of function Sonic_RollRepel

; ---------------------------------------------------------------------------
; Subroutine to push Sonic down a slope
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1065E:
Sonic_SlopeRepel:
		nop
		tst.b	$38(a0)
		bne.s	return_10698
		tst.w	$2E(a0)
		bne.s	loc_1069A
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	return_10698
		move.w	$14(a0),d0
		bpl.s	+
		neg.w	d0
+
		cmpi.w	#$280,d0
		bcc.s	return_10698
		clr.w	$14(a0)
		bset	#1,$22(a0)
		move.w	#$1E,$2E(a0)

return_10698:
		rts
; ===========================================================================

loc_1069A:
		subq.w	#1,$2E(a0)
		rts
; End of function Sonic_SlopeRepel

; ---------------------------------------------------------------------------
; Subroutine to return Sonic's angle to 0 as he jumps
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_106A0:
Sonic_JumpAngle:
		move.b	$26(a0),d0	; get Sonic's angle
		beq.s	Sonic_JumpFlip	; if already 0,branch
		bpl.s	loc_106B0	; if higher than 0,branch

		addq.b	#2,d0		; increase angle
		bcc.s	BranchTo_Sonic_JumpAngleSet
		moveq	#0,d0
; loc_106AE:
BranchTo_Sonic_JumpAngleSet:
		bra.s	Sonic_JumpAngleSet
; ===========================================================================

loc_106B0:
		subq.b	#2,d0		; decrease angle
		bcc.s	Sonic_JumpAngleSet
		moveq	#0,d0
; loc_106B6:
Sonic_JumpAngleSet:
		move.b	d0,$26(a0)
; End of function Sonic_JumpAngle
	; continue straight to Sonic_JumpFlip

; ---------------------------------------------------------------------------
; Updates Sonic's secondary angle if he's tumbling
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_106BA:
Sonic_JumpFlip:
		move.b	$27(a0),d0
		beq.s	return_106FE
		tst.w	$14(a0)
		bmi.s	Sonic_JumpLeftFlip
; loc_106C6:
Sonic_JumpRightFlip:
		move.b	$2D(a0),d1
		add.b	d1,d0
		bcc.s	BranchTo_Sonic_JumpFlipSet
		subq.b	#1,$2C(a0)
		bcc.s	BranchTo_Sonic_JumpFlipSet
		move.b	#0,$2C(a0)
		moveq	#0,d0
; loc_106DC:
BranchTo_Sonic_JumpFlipSet:
		bra.s	Sonic_JumpFlipSet
; ===========================================================================
; loc_106DE:
Sonic_JumpLeftFlip:
		tst.b	$29(a0)
		bne.s	Sonic_JumpRightFlip
		move.b	$2D(a0),d1
		sub.b	d1,d0
		bcc.s	Sonic_JumpFlipSet
		subq.b	#1,$2C(a0)
		bcc.s	Sonic_JumpFlipSet
		move.b	#0,$2C(a0)
		moveq	#0,d0
; loc_106FA:
Sonic_JumpFlipSet:
		move.b	d0,$27(a0)

return_106FE:		
		rts
; End of function Sonic_JumpAngle

; ---------------------------------------------------------------------------
; Subroutine for Sonic to interact with the floor and walls when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10700: Sonic_Floor:
Sonic_DoLevelCollision:
		move.l	#Primary_Collision,(Collision_addr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_10718
		move.l	#Secondary_Collision,(Collision_addr).w

loc_10718:
		move.b	$3F(a0),d5
		move.w	$10(a0),d1
		move.w	$12(a0),d2
		jsr	(CalcAngle).l
		move.b	d0,$2B(a0)
		subi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	Sonic_HitLeftWall
		cmpi.b	#$80,d0
		beq.w	Sonic_HitCeilingAndWalls
		cmpi.b	#$C0,d0
		beq.w	Sonic_HitRightWall
		bsr.w	Sonic_HitWall
		tst.w	d1
		bpl.s	loc_10760
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_10760:
		bsr.w	loc_1397A
		tst.w	d1
		bpl.s	loc_10772
		add.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_10772:
		bsr.w	loc_13736
		tst.w	d1
		bpl.s	return_107EA
		move.b	$12(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_1078A
		cmp.b	d2,d0
		blt.s	return_107EA

loc_1078A:
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.b	#0,$1C(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_107C8
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0
		beq.s	loc_107BA
		asr.w	$12(a0)
		bra.s	loc_107DC
; ===========================================================================

loc_107BA:
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)
		rts
; ===========================================================================

loc_107C8:
		move.w	#0,$10(a0)	; stop Sonic since he hit a wall
		cmpi.w	#$FC0,$12(a0)
		ble.s	loc_107DC
		move.w	#$FC0,$12(a0)

loc_107DC:
		move.w	$12(a0),$14(a0)
		tst.b	d3
		bpl.s	return_107EA
		neg.w	$14(a0)

return_107EA:
		rts
; ===========================================================================
; loc_107EC:
Sonic_HitLeftWall:
		bsr.w	Sonic_HitWall
		tst.w	d1
		bpl.s	Sonic_HitCeiling
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)	; stop Sonic since he hit a wall
		move.w	$12(a0),$14(a0)
		rts
; ===========================================================================
; loc_10806:
Sonic_HitCeiling:
		bsr.w	Sonic_DontRunOnWalls
		tst.w	d1
		bpl.s	Sonic_HitFloor
		sub.w	d1,$C(a0)
		tst.w	$12(a0)
		bpl.s	return_1081E
		move.w	#0,$12(a0)	; stop Sonic since he hit a ceiling

return_1081E:
		rts
; ===========================================================================
; loc_10820:
Sonic_HitFloor:
		tst.w	$12(a0)
		bmi.s	return_1084C
		bsr.w	loc_13736
		tst.w	d1
		bpl.s	return_1084C
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.b	#0,$1C(a0)
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)

return_1084C:
		rts
; ===========================================================================
; loc_1084E:
Sonic_HitCeilingAndWalls:
		bsr.w	Sonic_HitWall
		tst.w	d1
		bpl.s	+
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)	; stop Sonic since he hit a wall
+
		bsr.w	loc_1397A
		tst.w	d1
		bpl.s	+
		add.w	d1,8(a0)
		move.w	#0,$10(a0)	; stop Sonic since he hit a wall
+
		bsr.w	Sonic_DontRunOnWalls
		tst.w	d1
		bpl.s	return_108A8
		sub.w	d1,$C(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_10892
		move.w	#0,$12(a0)	; stop Sonic since he hit a ceiling
		rts
; ===========================================================================

loc_10892:
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.w	$12(a0),$14(a0)
		tst.b	d3
		bpl.s	return_108A8
		neg.w	$14(a0)

return_108A8:
		rts
; ===========================================================================
; loc_108AA:
Sonic_HitRightWall:
		bsr.w	loc_1397A
		tst.w	d1
		bpl.s	Sonic_HitCeiling2
		add.w	d1,8(a0)
		move.w	#0,$10(a0)	; stop Sonic since he hit a wall
		move.w	$12(a0),$14(a0)
		rts
; ===========================================================================
; identical to Sonic_HitCeiling...
; loc_108C4:
Sonic_HitCeiling2:
		bsr.w	Sonic_DontRunOnWalls
		tst.w	d1
		bpl.s	Sonic_HitFloor2
		sub.w	d1,$C(a0)
		tst.w	$12(a0)
		bpl.s	return_108DC
		move.w	#0,$12(a0)	; stop Sonic since he hit a ceiling

return_108DC:
		rts
; ===========================================================================
; identical to Sonic_HitFloor...
loc_108DE:
Sonic_HitFloor2:
		tst.w	$12(a0)
		bmi.s	return_1090A
		bsr.w	loc_13736
		tst.w	d1
		bpl.s	return_1090A
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.b	#0,$1C(a0)
		move.w	#0,$12(a0)	; stop Sonic since he hit a ceiling
		move.w	$10(a0),$14(a0)

return_1090A:
		rts
; End of function Sonic_DoLevelCollision

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to reset Sonic's mode when he lands on the floor
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1090C:
Sonic_ResetOnFloor:
		btst	#4,$22(a0)
		beq.s	loc_1091A
		nop
		nop
		nop

loc_1091A:
		bclr	#5,$22(a0)
		bclr	#1,$22(a0)
		bclr	#4,$22(a0)
		btst	#2,$22(a0)
		beq.s	loc_10950
		bclr	#2,$22(a0)
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		move.b	#0,$1C(a0)
		subq.w	#5,$C(a0)

loc_10950:
		move.b	#0,$3C(a0)
		move.w	#0,(Chain_Bonus_counter).w
		move.b	#0,$27(a0)
		move.b	#0,$29(a0)
		rts
; End of function Sonic_ResetOnFloor

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he gets hurt
; ---------------------------------------------------------------------------
; loc_1096A: Sonic_Hurt:
Obj01_Hurt:
		tst.b	$25(a0)
		bmi.w	Sonic_HurtInstantRecover
		jsr	(ObjectMove).l
		addi.w	#$30,$12(a0)
		btst	#6,$22(a0)
		beq.s	loc_1098C
		subi.w	#$20,$12(a0)

loc_1098C:		    
		bsr.w	Sonic_HurtStop
		bsr.w	Sonic_LevelBound
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Animate
		bsr.w	LoadSonicDynPLC
		jmp	(DisplaySprite).l
; ===========================================================================
; loc_109A6:
Sonic_HurtStop:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$C(a0),d0
		bcs.w	JmpTo_KillSonic
		bsr.w	Sonic_DoLevelCollision
		btst	#1,$22(a0)
		bne.s	+	; rts
		moveq	#0,d0
		move.w	d0,$12(a0)
		move.w	d0,$10(a0)
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)
		subq.b	#2,routine(a0)
		move.w	#$78,$30(a0)
+
		rts
; End of function Obj01_Hurt

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to make Sonic recover control after getting hit but before landing
; ---------------------------------------------------------------------------
; loc_109E2:
Sonic_HurtInstantRecover:
		subq.b	#2,routine(a0)
		move.b	#0,$25(a0)
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Animate
		bsr.w	LoadSonicDynPLC
		jmp	(DisplaySprite).l
; End of function Sonic_HurtInstantRecover

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he dies
; ---------------------------------------------------------------------------
; loc_109FE: Sonic_Death:
Obj01_Dead:
		bsr.w	CheckGameOver
		jsr	(ObjectMoveAndFall).l
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Animate
		bsr.w	LoadSonicDynPLC
		jmp	(DisplaySprite).l

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10A1A: Sonic_GameOver:
CheckGameOver:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$100,d0
		cmp.w	$C(a0),d0
		bcc.w	return_10A9C
		move.w	#-$38,$12(a0)
		addq.b	#2,routine(a0)
		clr.b	(Update_HUD_timer).w
		addq.b	#1,(Update_HUD_lives).w
		subq.b	#1,(Life_count).w
		bne.s	Obj01_ResetLevel
		move.w	#0,$3A(a0)
		move.b	#$39,(GameOver_GameText).w
		move.b	#$39,(GameOver_OverText).w		 
		move.b	#1,(GameOver_OverText+$1A).w
		clr.b	(Time_Over_flag).w
; loc_10A5E:
Obj01_Finished:
		move.w	#MusID_GameOver,d0
		jsr	(PlayMusic).l
		moveq	#PLCID_GameOver,d0
		jmp	(LoadPLC).l
; End of function CheckGameOver

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when the level is restarted
; ---------------------------------------------------------------------------
; loc_10A70:
Obj01_ResetLevel:
		move.w	#$3C,$3A(a0)
		tst.b	(Time_Over_flag).w
		beq.s	return_10A9C
		move.w	#0,$3A(a0)
		move.b	#$39,(TimeOver_TimeText).w
		move.b	#$39,(TimeOver_OverText).w
		move.b	#2,(TimeOver_TimeText+$1A).w
		move.b	#3,(TimeOver_OverText+$1A).w
		bra.s	Obj01_Finished

return_10A9C:
		rts
; End of function Obj01_ResetLevel

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he's offscreen and waiting for the level to restart
; ---------------------------------------------------------------------------
; loc_10A9E: Sonic_ResetLevel:
Obj01_Gone:
		tst.w	$3A(a0)
		beq.s	+
		subq.w	#1,$3A(a0)
		bne.s	+
		move.w	#1,(Level_Inactive_flag).w
+
		rts
; End of function Obj01_Gone

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to animate Sonic's sprites
; See also: AnimateSprite
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10AB2:
Sonic_Animate:
		lea	(SonicAniData).l,a1
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0	; has the animation changed?
		beq.s	SAnim_Do	; if not,branch
		move.b	d0,$1D(a0)	; set previous animation
		move.b	#0,$1B(a0)	; reset animation frame
		move.b	#0,$1E(a0)	; reset animation duration
		bclr	#5,$22(a0)	; clear 'pushing' flag
; loc_10ADA:
SAnim_Do:
		add.w	d0,d0
		adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
		move.b	(a1),d0
		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump,branch
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#$FC,1(a0)
		or.b	d1,1(a0)
		subq.b	#1,$1E(a0)	; subtract 1 from frame duration
		bpl.s	SAnim_Delay	; if time remains,branch
		move.b	d0,$1E(a0)	; load frame duration
; loc_10B00:
SAnim_Do2:
		moveq	#0,d1
		move.b	$1B(a0),d1	; load current frame number
		move.b	1(a1,d1.w),d0	; read sprite number from script
		cmpi.b	#$F0,d0
		bcc.s	SAnim_End_FF	; if animation is complete,branch
; loc_10B10:
SAnim_Next:
		move.b	d0,$1A(a0)	; load sprite number
		addq.b	#1,$1B(a0)	; go to next frame
; return_10B18:
SAnim_Delay:	
		rts
; ===========================================================================
; loc_10B1A:
SAnim_End_FF:
		addq.b	#1,d0		; is the end flag = $FF?
		bne.s	SAnim_End_FE	; if not,branch
		move.b	#0,$1B(a0)	; restart the animation
		move.b	1(a1),d0	; read sprite number
		bra.s	SAnim_Next
; ===========================================================================
; loc_10B2A:
SAnim_End_FE:
		addq.b	#1,d0		; is the end flag = $FE?
		bne.s	SAnim_End_FD	; if not,branch
		move.b	2(a1,d1.w),d0	; read the next byte in the script
		sub.b	d0,$1B(a0)	; jump back d0 bytes in the script
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0	; read sprite number
		bra.s	SAnim_Next
; ===========================================================================
; loc_10B3E:
SAnim_End_FD:
		addq.b	#1,d0		; is the end flag = $FD?
		bne.s	SAnim_End	; if not,branch
		move.b	2(a1,d1.w),$1C(a0)	; read next byte,run that animation
; return_10B48:
SAnim_End:
		rts
; ===========================================================================
; loc_10B4A:
SAnim_WalkRun:
		subq.b	#1,$1E(a0)	; is the start flag = $FF?
		bpl.s	SAnim_Delay	; if not,branch
		addq.b	#1,d0		; is animation walking/running?
		bne.w	SAnim_Roll	; if not,branch
		moveq	#0,d0
		move.b	$27(a0),d0
		bne.w	SAnim_Tumble
		moveq	#0,d1
		move.b	$26(a0),d0	; get Sonic's angle
		move.b	$22(a0),d2
		andi.b	#1,d2		; is Sonic mirrored horizontally?
		bne.s	+		; if yes,branch
		not.b	d0		; reverse angle
+
		addi.b	#$10,d0		; add $10 to angle
		bpl.s	+		; if angle is 0-$7F,branch
		moveq	#3,d1
+
		andi.b	#$FC,1(a0)
		eor.b	d1,d2
		or.b	d2,1(a0)
		btst	#5,$22(a0)
		bne.w	SAnim_Push
		lsr.b	#4,d0		; divide angle by 16
		andi.b	#6,d0		; angle must be 0,2,4 or 6
		move.w	$14(a0),d2	; get Sonic's "speed" for animation purposes
		bpl.s	+
		neg.w	d2
+
		lea	(SonAni_Run).l,a1	; use running animation
		cmpi.w	#$600,d2		; is Sonic at running speed?
		bcc.s	+			; if yes,branch
		lea	(SonAni_Walk).l,a1	; use walking animation
+
		move.b	d0,d1
		lsr.b	#1,d1
		add.b	d1,d0
		add.b	d0,d0
		add.b	d0,d0
		move.b	d0,d3
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	+
		moveq	#0,d2
+
		lsr.w	#8,d2
		lsr.w	#1,d2
		move.b	d2,$1E(a0)	; modify frame duration
		bsr.w	SAnim_Do2
		add.b	d3,$1A(a0)	; modify frame number
		rts
; ===========================================================================
; loc_10BD8:
SAnim_Tumble:
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	SAnim_Tumble_Left

		andi.b	#$FC,1(a0)
		addi.b	#$B,d0
		divu.w	#$16,d0
		addi.b	#$9B,d0
		move.b	d0,$1A(a0)
		move.b	#0,$1E(a0)
		rts
; ===========================================================================
; loc_10C06:
SAnim_Tumble_Left:
		andi.b	#$FC,1(a0)
		tst.b	$29(a0)
		beq.s	loc_10C1E
		ori.b	#1,1(a0)
		addi.b	#$B,d0
		bra.s	loc_10C2A
; ===========================================================================

loc_10C1E:
		ori.b	#3,1(a0)
		neg.b	d0
		addi.b	#$8F,d0

loc_10C2A:
		divu.w	#$16,d0
		addi.b	#$9B,d0
		move.b	d0,$1A(a0)
		move.b	#0,$1E(a0)
		rts
; ===========================================================================
; loc_10C3E:
SAnim_Roll:
		addq.b	#1,d0		; is the start flag = $FE?
		bne.s	SAnim_Push	; if not,branch
		move.w	$14(a0),d2
		bpl.s	+
		neg.w	d2
+
		lea	(SonAni_Roll2).l,a1
		cmpi.w	#$600,d2
		bcc.s	+
		lea	(SonAni_Roll).l,a1
+
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	+
		moveq	#0,d2
+
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#$FC,1(a0)
		or.b	d1,1(a0)
		bra.w	SAnim_Do2
; ===========================================================================
; loc_10C82:
SAnim_Push:
		move.w	$14(a0),d2
		bmi.s	+
		neg.w	d2
+
		addi.w	#$800,d2
		bpl.s	+
		moveq	#0,d2
+
		lsr.w	#6,d2
		move.b	d2,$1E(a0)
		lea	(SonAni_Push).l,a1
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#$FC,1(a0)
		or.b	d1,1(a0)
		bra.w	SAnim_Do2
; ===========================================================================
; ---------------------------------------------------------------------------
; Animation script - Sonic
; ---------------------------------------------------------------------------
; off_10CB4: Sonic_AnimateData:
SonicAniData:	offsetTable
		offsetTableEntry.w SonAni_Walk
		offsetTableEntry.w SonAni_Run
		offsetTableEntry.w SonAni_Roll
		offsetTableEntry.w SonAni_Roll2
		offsetTableEntry.w SonAni_Push
		offsetTableEntry.w SonAni_Wait
		offsetTableEntry.w SonAni_Balance
		offsetTableEntry.w SonAni_LookUp
		offsetTableEntry.w SonAni_Duck
		offsetTableEntry.w SonAni_Spindash
		offsetTableEntry.w SonAni_WallRecoil1
		offsetTableEntry.w SonAni_WallRecoil2
		offsetTableEntry.w SonAni_0x0C
		offsetTableEntry.w SonAni_Stop
		offsetTableEntry.w SonAni_Float1
		offsetTableEntry.w SonAni_Float2
		offsetTableEntry.w SonAni_0x10
		offsetTableEntry.w SonAni_S1LzHang
		offsetTableEntry.w SonAni_Unused_0x12
		offsetTableEntry.w SonAni_Unused_0x13
		offsetTableEntry.w SonAni_Unused_0x14
		offsetTableEntry.w SonAni_Bubble
		offsetTableEntry.w SonAni_Death1
		offsetTableEntry.w SonAni_Drown
		offsetTableEntry.w SonAni_Death2
		offsetTableEntry.w SonAni_Unused_0x19
		offsetTableEntry.w SonAni_Hurt
		offsetTableEntry.w SonAni_S1LzSlide
		offsetTableEntry.w SonAni_0x1C
		offsetTableEntry.w SonAni_Float3
		offsetTableEntry.w SonAni_0x1E
SonAni_Walk:		dc.b $FF,$10,$11,$12,$13,$14,$15,$16,$17,$0C,$0D,$0E,$0F,$FF
SonAni_Run:		dc.b $FF,$3C,$3D,$3E,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
SonAni_Roll:		dc.b $FE,$6C,$70,$6D,$70,$6E,$70,$6F,$70,$FF
SonAni_Roll2:		dc.b $FE,$6C,$70,$6D,$70,$6E,$70,$6F,$70,$FF
SonAni_Push:		dc.b $FD,$77,$78,$79,$7A,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
SonAni_Wait:		dc.b $07,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
			dc.b $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$02
			dc.b $03,$03,$03,$04,$04,$05,$05,$FE,$04
SonAni_Balance:		dc.b $07,$89,$8A,$FF
SonAni_LookUp:		dc.b $05,$06,$07,$FE,$01
SonAni_Duck:		dc.b $05,$7F,$80,$FE,$01
SonAni_Spindash:	dc.b $00,$71,$72,$71,$73,$71,$74,$71,$75,$71,$76,$71,$FF 
SonAni_WallRecoil1:	dc.b $3F,$82,$FF
SonAni_WallRecoil2:	dc.b $07,$08,$08,$09,$FD,$05
SonAni_0x0C:		dc.b $07,$09,$FD,$05
SonAni_Stop:		dc.b $03,$81,$82,$83,$84,$85,$86,$87,$88,$FE,$02
SonAni_Float1:		dc.b $07,$94,$96,$FF
SonAni_Float2:		dc.b $07,$91,$92,$93,$94,$95,$FF
SonAni_0x10:		dc.b $2F,$7E,$FD,$00
SonAni_S1LzHang:	dc.b $05,$8F,$90,$FF
SonAni_Unused_0x12:	dc.b $0F,$43,$43,$43,$FE,$01
SonAni_Unused_0x13:	dc.b $0F,$43,$44,$FE,$01
SonAni_Unused_0x14:	dc.b $3F,$49,$FF
SonAni_Bubble:		dc.b $0B,$97,$97,$12,$13,$FD,$00
SonAni_Death1:		dc.b $20,$9A,$FF
SonAni_Drown:		dc.b $20,$99,$FF
SonAni_Death2:		dc.b $20,$98,$FF
SonAni_Unused_0x19:	dc.b $03,$4E,$4F,$50,$51,$52,$00,$FE,$01
SonAni_Hurt:		dc.b $40,$8D,$FF
SonAni_S1LzSlide:	dc.b $09,$8D,$8E,$FF
SonAni_0x1C:		dc.b $77,$00,$FD,$00
SonAni_Float3:		dc.b $03,$91,$92,$93,$94,$95,$FF
SonAni_0x1E:		dc.b $03,$3C,$FD,$00
		even

; ---------------------------------------------------------------------------
; Sonic pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10DDC: Load_Sonic_Dynamic_PLC:
LoadSonicDynPLC:
		moveq	#0,d0
		move.b	$1A(a0),d0	; load frame number
		cmp.b	(Sonic_LastLoadedDPLC).w,d0
		beq.s	return_10E2E
		move.b	d0,(Sonic_LastLoadedDPLC).w
		lea	(MapRUnc_Sonic).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	return_10E2E
		move.w	#$F000,d4
; loc_10E02:
SPLC_ReadEntry:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#ArtUnc_Sonic,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,SPLC_ReadEntry	; repeat for number of entries

return_10E2E:
		rts
; End of function LoadSonicDynPLC

; ===========================================================================
; loc_10E30:
JmpTo_KillSonic:	; JmpTo
		jmp	(KillSonic).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 02 - Tails
; ---------------------------------------------------------------------------            
; Sprite_10E38: Obj_0x02_Tails:
Obj02:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj02_Index(pc,d0.w),d1
		jmp	Obj02_Index(pc,d1.w)
; ===========================================================================
; off_10E46: Tails_Index:
Obj02_Index:	offsetTable
		offsetTableEntry.w Obj02_Init
		offsetTableEntry.w Obj02_Control
		offsetTableEntry.w Tails_Hurt
		offsetTableEntry.w Tails_Death
		offsetTableEntry.w Tails_ResetLevel
; ===========================================================================
; loc_10E50: Tails_Main:
Obj02_Init:
		addq.b	#2,routine(a0)
		move.b	#$F,$16(a0)
		move.b	#9,$17(a0)
		move.l	#Tails_Mappings,4(a0)
		move.w	#$7A0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#$84,1(a0)
		move.w	#$600,(Sonic_top_speed).w
		move.w	#$C,(Sonic_acceleration).w
		move.w	#$80,(Sonic_deceleration).w
		move.b	#$C,$3E(a0)
		move.b	#$D,$3F(a0)
		move.b	#0,$2C(a0)
		move.b	#4,$2D(a0)
		move.b	#5,(Tails_Tails).w
; loc_10EB4: Tails_Control:
Obj02_Control:
		bsr.w	TailsCPU_Control
		btst	#0,$2A(a0)
		bne.s	Obj02_ControlsLock
		moveq	#0,d0
		move.b	$22(a0),d0
		andi.w	#6,d0
		move.w	Obj02_Modes(pc,d0.w),d1
		jsr	Obj02_Modes(pc,d1.w)
; loc_10Ed2: Tails_ControlsLock:
Obj02_ControlsLock:
		bsr.s	Tails_Display
		bsr.w	Tails_RecordPos
		move.b	(Primary_Angle).w,$36(a0)
		move.b	(Secondary_Angle).w,$37(a0)
		bsr.w	Tails_Animate
		tst.b	$2A(a0)
		bmi.s	loc_10EF4
		jsr	(TouchResponse).l

loc_10EF4:
		bsr.w	LoadTailsDynPLC
		rts
; ===========================================================================
; off_10EFA: Tails_Modes:
Obj02_Modes:	offsetTable
		offsetTableEntry.w Obj02_MdNormal	; 0 - not airborne or rolling
		offsetTableEntry.w Obj02_MdAir		; 2 - airborne
		offsetTableEntry.w Obj02_MdRoll		; 4 - rolling
		offsetTableEntry.w Obj02_MdJump		; 6 - jumping
; ===========================================================================
; byte_10F02:
Tails_MusicList:	zoneOrderedTable 1,1
	zoneTableEntry.b	MusID_GHZ	; GHZ
	zoneTableEntry.b	MusID_GHZ	; OWZ
	zoneTableEntry.b	MusID_MTZ	; WZ
	zoneTableEntry.b	MusID_SSZ	; SSZ
	zoneTableEntry.b	MusID_MTZ	; MTZ
	zoneTableEntry.b	MusID_MTZ	; MTZ2
	zoneTableEntry.b	MusID_BOZ	; BLZ
	zoneTableEntry.b	MusID_HTZ	; HTZ
	zoneTableEntry.b	MusID_HPZ	; HPZ
	zoneTableEntry.b	MusID_RWZ	; RWZ
	zoneTableEntry.b	MusID_OOZ	; OOZ
	zoneTableEntry.b	MusID_DHZ	; DHZ
	zoneTableEntry.b	MusID_CNZ	; CNZ
	zoneTableEntry.b	MusID_CPZ	; CPZ
	zoneTableEntry.b	MusID_CPZ	; GCZ
	zoneTableEntry.b	MusID_NGHZ	; NGHZ
	; no *proper* entry for DEZ,so it instead uses the alignment to play sound $08
	;zoneTableEntry.b	MusID_DEZ	; DEZ
    zoneTableEnd
	even

; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10F12:
Tails_Display:
		move.w	$30(a0),d0
		beq.s	Obj02_Display
		subq.w	#1,$30(a0)
		lsr.w	#3,d0
		bcc.s	Obj02_ChkInvin
; loc_10F20:
Obj02_Display:
		jsr	(DisplaySprite).l
; loc_10F26:
Obj02_ChkInvin:	; Checks if Tails has run out of invincibility frames
		tst.b	(Invincibility_flag).w
		beq.s	Obj02_ChkShoes
		tst.w	$32(a0)
		beq.s	Obj02_ChkShoes
		subq.w	#1,$32(a0)
		bne.s	Obj02_ChkShoes
		tst.b	(Current_Boss_ID).w
		bne.s	Obj02_RmvInvin
		cmpi.w	#$C,(Current_Air).w
		bcs.s	Obj02_RmvInvin
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lea	Tails_MusicList(pc),a1
		move.b	(a1,d0.w),d0
		jsr	(PlayMusic).l
; loc_10F5A:
Obj02_RmvInvin:
		move.b	#0,(Invincibility_flag).w
; loc_10F60:
Obj02_ChkShoes:	; Checks if Tails should still have the speed shoes
		tst.b	(Speed_shoes).w
		beq.s	Obj02_ExitChk
		tst.w	$34(a0)
		beq.s	Obj02_ExitChk
		subq.w	#1,$34(a0)
		bne.s	Obj02_ExitChk
		move.w	#$600,(Sonic_top_speed).w
		move.w	#$C,(Sonic_acceleration).w
		move.w	#$80,(Sonic_deceleration).w
		move.b	#0,(Speed_shoes).w
		move.w	#MusID_SlowDown,d0	; restore music tempo
		jmp	(PlayMusic).l
; return_10F94:
Obj02_ExitChk:
		rts
; End of subroutine Tails_Display

; ---------------------------------------------------------------------------
; Tails' AI code; rather idiotic in this version,as it only really is
; programmed to copy Sonic's inputs and make no effort to correct itself
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10F96: Tails_Control2:
TailsCPU_Control:
		move.b	(Ctrl_2_Held).w,d0
		andi.b	#$7F,d0					; did the real player 2 hit something?
		beq.s	TailsCPU_Normal_HumanControl		; if not,branch
		move.w	#0,(unk_F700).w				; clear this flag that is never set...
		move.w	#60*5,(Tails_control_counter).w		; give player 2 control for 5 seconds
		rts
; ===========================================================================
; loc_10FAE: Tails_ControlNoKeysPressed:
TailsCPU_Normal_HumanControl:
		tst.w	(Tails_control_counter).w
		beq.s	+
		subq.w	#1,(Tails_control_counter).w
		rts
+
		move.w	(Tails_CPU_routine).w,d0
		move.w	TailsCPU_States(pc,d0.w),d0
		jmp     TailsCPU_States(pc,d0.w)
; ===========================================================================
; off_10FC6: Tails_ControlIndex:
TailsCPU_States: offsetTable
		offsetTableEntry.w TailsCPU_Init
		offsetTableEntry.w Tails_Control_01
		offsetTableEntry.w Tails_Control_02
		offsetTableEntry.w TailsCPU_Normal

; ===========================================================================
; initial AI State
; ---------------------------------------------------------------------------
; loc_10FCE: Tails_Control_00
TailsCPU_Init:
		move.w	#6,(Tails_CPU_routine).w
		rts
; ===========================================================================
; unused AI states,drops Tails out of the sky and... nothing else...
; for some reason they REALLY didn't want players seeing this given
; they both get stopped by branch to the used code and a return command...
; ---------------------------------------------------------------------------
; loc_10Fd6:
Tails_Control_01:
		move.w	#6,(Tails_CPU_routine).w
		rts
		move.w	#$40,(unk_F706).w
		move.w	#4,(Tails_CPU_routine).w

; loc_10FEA:
Tails_Control_02:
		move.w	#6,(Tails_CPU_routine).w
		rts
		move.w	(unk_F706).w,d1
		subq.w	#1,d1
		cmpi.w	#$10,d1
		bne.s	loc_11004
		move.w	#6,(Tails_CPU_routine).w

loc_11004:
		move.w	d1,(unk_F706).w
		lea	(unk_E600).w,a1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	(unk_EEE0).w,d0
		sub.b	d1,d0
		move.w	(a1,d0.w),8(a0)
		move.w	2(a1,d0.w),$C(a0)
		rts
; ===========================================================================
; AI State where Tails follows the player normally
; ---------------------------------------------------------------------------
; loc_11024: Tails_ControlCopySonicMoves:
TailsCPU_Normal:
		move.w	(MainCharacter+8).w,d0
		sub.w	8(a0),d0
		bpl.s	+
		neg.w	d0
+
		cmpi.w	#224-32,d0			; is Sonic 192 pixels away from Tails?
		bcs.s	TailsCPU_Normal_SonicOK		; if not,branch
		nop					; ...and then do nothing and continue anyways...
; loc_11038:
TailsCPU_Normal_SonicOK:
		; amazingly,this block of code is still in the final!
		lea	(Sonic_Pos_Record_Buf).w,a1
		move.w	#$10,d1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	(Sonic_Pos_Record_Index).w,d0
		sub.b	d1,d0
		lea	(Sonic_Stat_Record_Buf).w,a1
		move.w	(a1,d0.w),(Ctrl_2).w
		rts

; ---------------------------------------------------------------------------
; Subroutine to record Tails' previous positions for invincibility stars
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_11056: Tails_RecordMoves:
Tails_RecordPos:
		move.w	(Tails_Pos_Record_Index).w,d0
		lea	(Tails_Pos_Record_Buf).w,a1
		lea	(a1,d0),a1
		move.w	8(a0),(a1)+
		move.w	$C(a0),(a1)+
		addq.b	#4,(Tails_Pos_Record_Index+1).w
		rts
; End of subroutine Tails_RecordPos

; ===========================================================================
; ---------------------------------------------------------------------------
; Start of subroutine Obj02_MdNormal
; Called if Tails is neither airborne nor rolling this frame
; ---------------------------------------------------------------------------
; loc_11070: Tails_MdNormal:
Obj02_MdNormal:
		bsr.w	Tails_Spindash
		bsr.w	Tails_Jump
		bsr.w	Tails_SlopeResist
		bsr.w	Tails_Move
		bsr.w	Tails_Roll
		bsr.w	Tails_LevelBoundaries
		jsr	(ObjectMove).l
		bsr.w	AnglePos
		bsr.w	Tails_SlopeRepel
		rts
; End of subroutine Obj02_MdNormal

; ===========================================================================
; Start of subroutine Obj02_MdAir
; Called if Tails is airborne,but not in a ball (thus,probably not jumping)
; loc_11098: Tails_MdJump:
Obj02_MdAir:
		bsr.w	Tails_JumpHeight
		bsr.w	Tails_ChgJumpDir
		bsr.w	Tails_LevelBoundaries
		jsr	(ObjectMoveAndFall).l
		btst	#6,$22(a0)	; is Tails underwater?
		beq.s	+		; if not,branch
		subi.w	#$28,$12(a0)	; reduce gravity by $28 ($38-$28=$10)
+
		bsr.w	Tails_JumpAngle
		bsr.w	Tails_Floor
		rts
; End of subroutine Obj02_MdAir

; ===========================================================================
; Start of subroutine Obj02_MdRoll
; Called if Tails is in a ball,but not airborne (thus,probably rolling)
; loc_110C2: Tails_MdRoll:
Obj02_MdRoll:
		bsr.w	Tails_Jump
		bsr.w	Tails_RollRepel
		bsr.w	Tails_RollSpeed
		bsr.w	Tails_LevelBoundaries
		jsr	(ObjectMove).l
		bsr.w	AnglePos
		bsr.w	Tails_SlopeRepel
		rts
; End of subroutine Obj02_MdAir

; ===========================================================================
; Start of subroutine Obj02_MdJump
; Called if Tails is in a ball and airborne (he could be jumping but not necessarily)
; Notes: This is identical to Obj02_MdAir,at least at this outer level.
;        Why they gave it a separate copy of the code,I don't know.
; loc_110E2: Tails_MdJump2:
Obj02_MdJump:
		bsr.w	Tails_JumpHeight
		bsr.w	Tails_ChgJumpDir
		bsr.w	Tails_LevelBoundaries
		jsr	(ObjectMoveAndFall).l
		btst	#6,$22(a0)	; is Tails underwater?
		beq.s	+		; if not,branch
		subi.w	#$28,$12(a0)	; reduce gravity by $28 ($38-$28=$10)
+
		bsr.w	Tails_JumpAngle
		bsr.w	Tails_Floor
		rts
; End of subroutine Obj02_MdJump

; ---------------------------------------------------------------------------
; Subroutine to make Tails walk/run
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1110C:
Tails_Move:
		move.w	(Sonic_top_speed).w,d6
		move.w	(Sonic_acceleration).w,d5
		move.w	(Sonic_deceleration).w,d4
		tst.b	(Sliding_flag).w
		bne.w	Obj02_Traction
		tst.w	$2E(a0)
		bne.w	Obj02_UpdateSpeedOnGround
		btst	#2,(Ctrl_2_Held).w	; is left being pressed?
		beq.s	Obj02_NotLeft		; if not,branch
		bsr.w	Tails_MoveLeft
; loc_11134:
Obj02_NotLeft:
		btst	#3,(Ctrl_2_Held).w	; is right being pressed?
		beq.s	Obj02_NotRight		; if not,branch
		bsr.w	Tails_MoveRight
; loc_11140:
Obj02_NotRight:
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0				; is Tails on a slope?
		bne.w	Obj02_UpdateSpeedOnGround	; if yes,branch
		tst.w	$14(a0)				; is Tails moving?
		bne.w	Obj02_UpdateSpeedOnGround	; if yes,branch
		bclr	#5,$22(a0)
		move.b	#5,$1C(a0)		; use "standing" animation
		btst	#3,$22(a0)
		beq.s	Tails_Balance
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		lea	(Object_RAM).w,a1	; a1=character
		lea	(a1,d0.w),a1		; a1=object

		tst.b	$22(a1)
		bmi.s	Tails_LookUp
		moveq	#0,d1
		move.b	$19(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#4,d2
		add.w	8(a0),d1
		sub.w	8(a1),d1
		cmpi.w	#4,d1
		blt.s	Tails_BalanceOnObjLeft
		cmp.w	d2,d1
		bge.s	Tails_BalanceOnObjRight
		bra.s	Tails_LookUp
; ---------------------------------------------------------------------------
; balancing checks for Tails
; loc_111A2:
Tails_Balance:
		jsr	(ObjHitFloor).l
		cmpi.w	#$C,d1
		blt.s	Tails_LookUp
		cmpi.b	#3,$36(a0)
		bne.s	Tails_BalanceLeft
; loc_111B6:
Tails_BalanceOnObjRight:
		bclr	#0,$22(a0)
		bra.s	Tails_BalanceDone
; ---------------------------------------------------------------------------
; loc_111BE:
Tails_BalanceLeft:
		cmpi.b	#3,$37(a0)
		bne.s	Tails_LookUp
; loc_111C6:
Tails_BalanceOnObjLeft:
		bset	#0,$22(a0)
; loc_111CC:
Tails_BalanceDone:
		move.b	#6,$1C(a0)
		bra.s	Obj02_UpdateSpeedOnGround
; ---------------------------------------------------------------------------
; loc_111d4:
Tails_LookUp:
		btst	#0,(Ctrl_2_Held).w	; is up being pressed?
		beq.s	Tails_Duck		; if not,branch
		move.b	#7,$1C(a0)		; use "looking up" animation
		bra.s	Obj02_UpdateSpeedOnGround
; ---------------------------------------------------------------------------
; loc_111E4:
Tails_Duck:
		btst	#1,(Ctrl_2_Held).w		; is down being pressed?
		beq.s	Obj02_UpdateSpeedOnGround	; if not,branch
		move.b	#8,$1C(a0)		; use "ducking" animation

; ---------------------------------------------------------------------------
; updates Tails' speed on the ground
; ---------------------------------------------------------------------------
; loc_111F2:
Obj02_UpdateSpeedOnGround:
		move.b	(Ctrl_2_Held).w,d0
		andi.b	#$C,d0		; is left/right being pressed?
		bne.s	Obj02_Traction	; if yes,branch
		move.w	$14(a0),d0
		beq.s	Obj02_Traction
		bmi.s	Obj02_SettleLeft

; slow down when facing right and not pressing a direction
; Obj02_SettleRight:
		sub.w	d5,d0
		bcc.s	+
		move.w	#0,d0
+
		move.w	d0,$14(a0)
		bra.s	Obj02_Traction
; ---------------------------------------------------------------------------
; slow down when facing left and not pressing a direction
; loc_11212:
Obj02_SettleLeft:
		add.w	d5,d0
		bcc.s	+
		move.w	#0,d0
+
		move.w	d0,$14(a0)

; increase or decrease speed on the ground
; loc_1121E:
Obj02_Traction:
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d1
		asr.l	#8,d1
		move.w	d1,$10(a0)
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)

; stops Tails from running through walls that meet the ground
; loc_1123C:
Obj02_CheckWallsOnGround:
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bmi.s	return_112AC
		move.b	#$40,d1
		tst.w	$14(a0)
		beq.s	return_112AC
		bmi.s	+
		neg.w	d1
+
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		bsr.w	Sonic_WalkSpeed
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	return_112AC
		asl.w	#8,d1
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_112A8
		cmpi.b	#$40,d0
		beq.s	loc_11296
		cmpi.b	#$80,d0
		beq.s	loc_11290
		add.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_11290:
		sub.w	d1,$12(a0)
		rts
; ---------------------------------------------------------------------------

loc_11296:
		sub.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_112A8:
		add.w	d1,$12(a0)

return_112AC:
		rts
; End of subroutine Tails_Move


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_112AE:
Tails_MoveLeft:
		move.w	$14(a0),d0
		beq.s	loc_112B6
		bpl.s	Tails_TurnLeft	; if Tails is already moving to the right,branch

loc_112B6:
		bset	#0,$22(a0)
		bne.s	loc_112CA
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_112CA:
		sub.w	d5,d0		; add acceleration to left
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0		; compare new speed with top speed
		bgt.s	loc_112DC	; if new speed is less than the maximum,branch
		add.w	d5,d0		; remove this frame's acceleration change
		cmp.w	d1,d0		; compare speed with top speed
		ble.s	loc_112DC	; if speed was already greater than the maximum,branc
		move.w	d1,d0		; limit speed on ground going left

loc_112DC:
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)	; use "walking" animation
		rts
; ---------------------------------------------------------------------------
; loc_112E8:
Tails_TurnLeft:
		sub.w	d4,d0
		bcc.s	loc_112F0
		move.w	#-$80,d0

loc_112F0:
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	return_1131E
		cmpi.w	#$400,d0
		blt.s	return_1131E
		move.b	#$D,$1C(a0)	; use "stopping" animation
		bclr	#0,$22(a0)
		move.w	#SndID_Skidding,d0		; use "stopping" sound
		jsr	(PlaySound).l

return_1131E:
		rts
; End of subroutine Tails_MoveLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_11320:
Tails_MoveRight:
		move.w	$14(a0),d0
		bmi.s	Tails_TurnRight
		bclr	#0,$22(a0)
		beq.s	loc_1133A
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)	; force walking animation to restart if it's already in-progress

loc_1133A:
		add.w	d5,d0		; add acceleration to the right
		cmp.w	d6,d0		; compare new speed with top speed
		blt.s	loc_11348	; if new speed is less than the maximum,branch
		sub.w	d5,d0		; remove this frame's acceleration change
		cmp.w	d6,d0		; compare speed with top speed
		bge.s	loc_11348	; if speed was already greater than the maximum,branch
		move.w	d6,d0		; limit speed on ground going right

loc_11348:
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)	; use walking animation
		rts
; ---------------------------------------------------------------------------
; loc_11354:
Tails_TurnRight:
		add.w	d4,d0
		bcc.s	loc_1135C
		move.w	#$80,d0

loc_1135C:
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	return_1138A
		cmpi.w	#-$400,d0
		bgt.s	return_1138A
		move.b	#$D,$1C(a0)	; use "stopping" animation
		bset	#0,$22(a0)
		move.w	#SndID_Skidding,d0		; use "stopping" sound
		jsr	(PlaySound).l

return_1138A:
		rts
; End of subroutine Tails_MoveRight

; ---------------------------------------------------------------------------
; Subroutine to change Tails' speed as he rolls
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1138C:
Tails_RollSpeed:
		move.w	(Sonic_top_speed).w,d6
		asl.w	#1,d6
		move.w	(Sonic_acceleration).w,d5
		asr.w	#1,d5			; natural roll deceleration = 1/2 normal acceleration
		; read Sonic's equivalent of the code for a hilarious screw-up
		move.w	(Sonic_deceleration).w,d4
		asr.w	#2,d4			; controlled roll deceleration
		tst.b	(Sliding_flag).w
		bne.w	Tails_SetRollSpeed
		tst.w	$2E(a0)
		bne.s	Tails_ApplyRollSpeed
		btst	#2,(Ctrl_2_Held).w	; is left being pressed?
		beq.s	loc_113B8		; if not,branch
		bsr.w	Tails_RollLeft

loc_113B8:
		btst	#3,(Ctrl_2_Held).w	; is right being pressed?
		beq.s	Tails_ApplyRollSpeed	; if not,branch
		bsr.w	Tails_RollRight
; loc_113C4:
Tails_ApplyRollSpeed:
		move.w	$14(a0),d0
		beq.s	Tails_CheckRollStop
		bmi.s	Tails_ApplyRollSpeedLeft

; Tails_ApplyRollSpeedRight:
		sub.w	d5,d0
		bcc.s	loc_113d4
		move.w	#0,d0

loc_113d4:
		move.w	d0,$14(a0)
		bra.s	Tails_CheckRollStop
; ---------------------------------------------------------------------------
; loc_113DA:
Tails_ApplyRollSpeedLeft:
		add.w	d5,d0
		bcc.s	loc_113E2
		move.w	#0,d0

loc_113E2:
		move.w	d0,$14(a0)
; loc_113E6:
Tails_CheckRollStop:
		tst.w	$14(a0)
		bne.s	Tails_SetRollSpeed
		bclr	#2,$22(a0)
		move.b	#$F,$16(a0)	; sets standing height to only slightly higher than rolling height,unlike Sonic
		move.b	#9,$17(a0)
		move.b	#5,$1C(a0)
		subq.w	#5,$C(a0)
; loc_11408:
Tails_SetRollSpeed:
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)	; set y velocity based on $14 and angle
		muls.w	$14(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_1142C
		move.w	#$1000,d1	; limit Tails' speed rolling right

loc_1142C:
		cmpi.w	#-$1000,d1
		bge.s	loc_11436
		move.w	#-$1000,d1	; limit Tails' speed rolling left

loc_11436:
		move.w	d1,$10(a0)	; set x velocity based on $14 and angle
		bra.w	Obj02_CheckWallsOnGround
; End of function Tails_RollSpeed


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1143E:
Tails_RollLeft:
		move.w	$0014(a0),d0
		beq.s	loc_11446
		bpl.s	loc_11454
loc_11446:
		bset	#$00,$0022(a0)
		move.b	#$02,$001C(a0)
		rts
loc_11454:
		sub.w   d4,d0
		bcc.s	loc_1145C
		move.w	#$FF80,d0
loc_1145C:
		move.w	d0,$0014(a0)
		rts
;=============================================================================== 
; Sub Routine Tails_RollLeft
; [ End ]		         
;===============================================================================
   
;=============================================================================== 
; Sub Routine Tails_RollRight
; [ Begin ]		         
;===============================================================================		   
Tails_RollRight: ; loc_11462:
		move.w	$0014(a0),d0
		bmi.s	loc_11476
		bclr	#$00,$0022(a0)
		move.b	#$02,$001C(a0)
		rts
loc_11476:
		add.w   d4,d0
		bcc.s	loc_1147E
		move.w	#$0080,d0
loc_1147E:
		move.w	d0,$0014(a0)
		rts
;=============================================================================== 
; Sub Routine Tails_RollRight
; [ End ]		         
;===============================================================================  
		  
;=============================================================================== 
; Sub Routine Tails_ChgJumpDir
; [ Begin ]		         
;===============================================================================		  
Tails_ChgJumpDir: ; loc_11484:
		move.w	(Sonic_top_speed).w,d6
		move.w	(Sonic_acceleration).w,d5
		asl.w   #1,d5
		btst	#$04,$0022(a0)
		bne.s	loc_114CE
		move.w	$0010(a0),d0
		btst	#$02,(Ctrl_2_Held).w
		beq.s	loc_114B4
		bset	#$00,$0022(a0)
		sub.w   d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s   loc_114B4
		move.w	d1,d0
loc_114B4:
		btst	#$03,(Ctrl_2_Held).w
		beq.s	loc_114CA
		bclr	#$00,$0022(a0)
		add.w   d5,d0
		cmp.w	d6,d0
		blt.s   loc_114CA
		move.w	d6,d0
loc_114CA:
		move.w	d0,$0010(a0)
loc_114CE:
		cmpi.w	#$FC00,$0012(a0)
		bcs.s	loc_114FC
		move.w	$0010(a0),d0
		move.w	d0,d1
		asr.w   #$05,d1
		beq.s	loc_114FC
		bmi.s	loc_114F0
		sub.w   d1,d0
		bcc.s	loc_114EA
		move.w	#0,d0
loc_114EA:
		move.w	d0,$0010(a0)
		rts
loc_114F0:
		sub.w   d1,d0
		bcs.s	loc_114F8
		move.w	#0,d0
loc_114F8:
		move.w	d0,$0010(a0)
loc_114FC:
		rts 
;=============================================================================== 
; Sub Routine Tails_ChgJumpDir
; [ End ]		         
;===============================================================================
		    
;=============================================================================== 
; Sub Routine Tails_LevelBoundaries
; [ Begin ]		         
;=============================================================================== 
Tails_LevelBoundaries: ; loc_114FE:
		move.l	8(a0),d1
		move.w	$0010(a0),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d1
		swap	d1
		move.w	(Camera_Min_X_pos).w,d0
		addi.w	#$0010,d0
		cmp.w	d1,d0
		bhi.s	loc_1156A
		move.w	(Camera_Max_X_pos).w,d0
		addi.w	#$0128,d0
		tst.b	(Current_Boss_ID).w
		bne.s	loc_1152C
		addi.w	#$0040,d0
loc_1152C:
		cmp.w	d1,d0
		bls.s   loc_1156A
loc_11530:		
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$00E0,d0
		cmp.w	$000C(a0),d0
		blt.s   loc_11540
		rts
loc_11540:
		bra.w	KillTails               ; loc_12074
		cmpi.w	#scrap_brain_zone_act_2,(Current_ZoneAndAct).w
		bne.w	 KillTails               ; loc_12074
		cmpi.w	#$2000,8(a0)
		bcs.w	 KillTails               ; loc_12074
		clr.b   (Last_star_pole_hit).w
		move.w	#$0001,(Level_Inactive_flag).w
		move.w	#labyrinth_zone_act_4,(Current_ZoneAndAct).w
		rts
loc_1156A:
		move.w	d0,8(a0)
		move.w	#0,$000A(a0)
		move.w	#0,$0010(a0)
		move.w	#0,$0014(a0)
		bra.s	loc_11530
;=============================================================================== 
; Sub Routine Tails_LevelBoundaries
; [ End ]		         
;===============================================================================  
               
;=============================================================================== 
; Sub Routine Tails_Roll
; [ Begin ]		         
;===============================================================================		   
Tails_Roll: ; loc_11582:
		tst.b	(Sliding_flag).w
		bne.s	loc_115A8
		move.w	$0014(a0),d0
		bpl.s	loc_11590
		neg.w	d0
loc_11590:
		cmpi.w	#$0080,d0
		bcs.s	loc_115A8
		move.b	(Ctrl_2_Held).w,d0
		andi.b	#$0C,d0
		bne.s	loc_115A8
		btst	#1,(Ctrl_2_Held).w
		bne.s	loc_115AA
loc_115A8:
		rts
loc_115AA:
		btst	#$02,$0022(a0)
		beq.s	loc_115B4
		rts
loc_115B4:
		bset	#$02,$0022(a0)
		move.b	#$0E,$0016(a0)
		move.b	#$07,$0017(a0)
		move.b	#$02,$001C(a0)
		addq.w	#$05,$000C(a0)
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l             ; loc_14C6
		tst.w	$0014(a0)
		bne.s	loc_115E6
		move.w	#$0200,$0014(a0)
loc_115E6:
		rts
;=============================================================================== 
; Sub Routine Tails_Roll
; [ End ]		         
;=============================================================================== 
		 
;=============================================================================== 
; Sub Routine Tails_Jump
; [ Begin ]		         
;===============================================================================		  
Tails_Jump: ; loc_115E8:
		move.b	(Ctrl_2_Press).w,d0
		andi.b	#$70,d0
		beq.w	 loc_1168C
		moveq	#0,d0
		move.b	$0026(a0),d0
		addi.b	#$80,d0
		bsr.w	loc_136F2
		cmpi.w	#$0006,d1
		blt.w    loc_1168C
		move.w	#$0680,d2
		btst	#$06,$0022(a0)
		beq.s	loc_1161A
		move.w	#$0380,d2
loc_1161A:
		moveq	#0,d0
		move.b	$0026(a0),d0
		subi.b	#$40,d0
		jsr	(CalcSine).l		; loc_320A
		muls.w  d2,d1
		asr.l   #$08,d1
		add.w   d1,$0010(a0)
		muls.w  d2,d0
		asr.l   #$08,d0
		add.w   d0,$0012(a0)
		bset	#1,$0022(a0)
		bclr	#$05,$0022(a0)
		addq.l	#$04,sp
		move.b	#1,$003C(a0)
		clr.b   $0038(a0)
		move.w	#SndID_Jump,d0
		jsr	(PlaySound).l             ; loc_14C6
		move.b	#$0F,$0016(a0)
		move.b	#$09,$0017(a0)
		btst	#$02,$0022(a0)
		bne.s	loc_1168E
		move.b	#$0E,$0016(a0)
		move.b	#$07,$0017(a0)
		move.b	#$02,$001C(a0)
		bset	#$02,$0022(a0)
		addq.w	#$05,$000C(a0)
loc_1168C:
		rts
loc_1168E:
		bset	#$04,$0022(a0)
		rts
;=============================================================================== 
; Sub Routine Tails_Jump
; [ End ]		         
;===============================================================================     
              
;=============================================================================== 
; Sub Routine Tails_JumpHeight
; [ Begin ]		         
;===============================================================================		   
Tails_JumpHeight: ; loc_11696:
		tst.b	$003C(a0)
		beq.s	loc_116C2
		move.w	#$FC00,d1
		btst	#$06,$0022(a0)
		beq.s	loc_116AC
		move.w	#$FE00,d1
loc_116AC:
		cmp.w	$0012(a0),d1
		ble.s   loc_116C0
		move.b	(Ctrl_2_Held).w,d0
		andi.b	#$70,d0
		bne.s	loc_116C0
		move.w	d1,$0012(a0)
loc_116C0:
		rts
loc_116C2:
		cmpi.w	#$F040,$0012(a0)
		bge.s   loc_116d0
		move.w	#$F040,$0012(a0)
loc_116d0:
		rts
;=============================================================================== 
; Sub Routine Tails_JumpHeight
; [ End ]		         
;=============================================================================== 
		 
;=============================================================================== 
; Sub Routine Tails_Spindash
; [ Begin ]		         
;===============================================================================		  
Tails_Spindash: ; loc_116d2:
		tst.b	$0039(a0)
		bne.s	loc_11706
		cmpi.b	#$08,$001C(a0)
		bne.s	loc_11704
		move.b	(Ctrl_2_Press).w,d0
		andi.b	#$70,d0
		beq.w	 loc_11704
		move.b	#$09,$001C(a0)
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l             ; loc_14C6
		addq.l	#$04,sp
		move.b	#1,$0039(a0)
loc_11704:
		rts
loc_11706:
		move.b	(Ctrl_2_Held).w,d0
		btst	#1,d0
		bne.s	loc_1174C
		move.b	#$0E,$0016(a0)
		move.b	#$07,$0017(a0)
		move.b	#$02,$001C(a0)
		addq.w	#$05,$000C(a0)
		move.b	#$00,$0039(a0)
		move.w	#$2000,(Horiz_scroll_delay_val_P2).w
		move.w	#$0800,$0014(a0)
		btst	#$00,$0022(a0)
		beq.s	loc_11744
		neg.w	$0014(a0)
loc_11744:
		bset	#$02,$0022(a0)
		rts
loc_1174C:
		move.b	(Ctrl_2_Press).w,d0
		andi.b	#$70,d0
		beq.w	 loc_1175A
		nop
loc_1175A:
		addq.l	#$04,sp
		rts 
;=============================================================================== 
; Sub Routine Tails_Spindash
; [ End ]		         
;===============================================================================   
 
;=============================================================================== 
; Sub Routine Tails_SlopeResist
; [ Begin ]		         
;===============================================================================		   
Tails_SlopeResist: ; loc_1175E:
		move.b	$0026(a0),d0
		addi.b	#$60,d0
		cmpi.b	#$C0,d0
		bcc.s	loc_11792
		move.b	$0026(a0),d0
		jsr	(CalcSine).l		; loc_320A
		muls.w  #$0020,d0
		asr.l   #$08,d0
		tst.w	$0014(a0)
		beq.s	loc_11792
		bmi.s	loc_1178E
		tst.w	d0
		beq.s	loc_1178C
		add.w   d0,$0014(a0)
loc_1178C:
		rts
loc_1178E:
		add.w   d0,$0014(a0)
loc_11792:
		rts
;=============================================================================== 
; Sub Routine Tails_SlopeResist
; [ End ]		         
;===============================================================================     
             
;=============================================================================== 
; Sub Routine Tails_RollRepel
; [ Begin ]		         
;===============================================================================		   
Tails_RollRepel: ; loc_11794:
		move.b	$0026(a0),d0
		addi.b	#$60,d0
		cmpi.b	#$C0,d0
		bcc.s	loc_117CE
		move.b	$0026(a0),d0
		jsr	(CalcSine).l		; loc_320A
		muls.w  #$0050,d0
		asr.l   #$08,d0
		tst.w	$0014(a0)
		bmi.s	loc_117C4
		tst.w	d0
		bpl.s	loc_117BE
		asr.l   #$02,d0
loc_117BE:
		add.w   d0,$0014(a0)
		rts
loc_117C4:
		tst.w	d0
		bmi.s	loc_117CA
		asr.l   #$02,d0
loc_117CA:
		add.w   d0,$0014(a0)
loc_117CE:
		rts
;=============================================================================== 
; Sub Routine Tails_RollRepel
; [ End ]		         
;===============================================================================   
		
;=============================================================================== 
; Sub Routine Tails_SlopeRepel
; [ Begin ]		         
;===============================================================================		  
Tails_SlopeRepel: ; loc_117d0:
		nop
		tst.b	$0038(a0)
		bne.s	loc_1180A
		tst.w	$002E(a0)
		bne.s	loc_1180C
		move.b	$0026(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_1180A
		move.w	$0014(a0),d0
		bpl.s	loc_117F4
		neg.w	d0
loc_117F4:
		cmpi.w	#$0280,d0
		bcc.s	loc_1180A
		clr.w	$0014(a0)
		bset	#1,$0022(a0)
		move.w	#$001E,$002E(a0)
loc_1180A:
		rts
loc_1180C:
		subq.w	#1,$002E(a0)
		rts
;=============================================================================== 
; Sub Routine Tails_SlopeRepel
; [ End ]		         
;===============================================================================  
		 
;=============================================================================== 
; Sub Routine Tails_JumpAngle
; [ Begin ]		         
;===============================================================================		  
Tails_JumpAngle: ; loc_11812:
		move.b	$0026(a0),d0
		beq.s	loc_1182C
		bpl.s	loc_11822
		addq.b	#$02,d0
		bcc.s	loc_11820
		moveq	#0,d0
loc_11820:
		bra.s	loc_11828
loc_11822:
		subq.b	#$02,d0
		bcc.s	loc_11828
		moveq	#0,d0
loc_11828:
		move.b	d0,$0026(a0)
loc_1182C:
		move.b	$0027(a0),d0
		beq.s	loc_11870
		tst.w	$0014(a0)
		bmi.s	loc_11850
loc_11838:		
		move.b	$002D(a0),d1
		add.b   d1,d0
		bcc.s	loc_1184E
		subq.b	#1,$002C(a0)
		bcc.s	loc_1184E
		move.b	#$00,$002C(a0)
		moveq	#0,d0
loc_1184E:
		bra.s	loc_1186C
loc_11850:
		tst.b	$0029(a0)
		bne.s	loc_11838
		move.b	$002D(a0),d1
		sub.b   d1,d0
		bcc.s	loc_1186C
		subq.b	#1,$002C(a0)
		bcc.s	loc_1186C
		move.b	#$00,$002C(a0)
		moveq	#0,d0
loc_1186C:
		move.b	d0,$0027(a0)
loc_11870:
		rts
;=============================================================================== 
; Sub Routine Tails_JumpAngle
; [ End ]		         
;===============================================================================     
             
;=============================================================================== 
; Sub Routine Tails_Floor
; [ Begin ]		         
;===============================================================================		   
Tails_Floor: ; loc_11872:
		move.b	$003F(a0),d5
		move.w	$0010(a0),d1
		move.w	$0012(a0),d2
		jsr	(CalcAngle).l              ; loc_34A2
		move.b	d0,$002B(a0)
		subi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	 loc_11946
		cmpi.b	#$80,d0
		beq.w	 loc_119A8
		cmpi.b	#$C0,d0
		beq.w	 loc_11A04
		bsr.w	Sonic_HitWall           ; loc_13AFC
		tst.w	d1
		bpl.s	loc_118BA
		sub.w   d1,8(a0)
		move.w	#0,$0010(a0)
loc_118BA:
		bsr.w	loc_1397A
		tst.w	d1
		bpl.s	loc_118CC
		add.w   d1,8(a0)
		move.w	#0,$0010(a0)
loc_118CC:
		bsr.w	loc_13736
		tst.w	d1
		bpl.s	loc_11944
		move.b	$0012(a0),d2
		addq.b	#$08, d2
		neg.b   d2
		cmp.b	d2,d1
		bge.s   loc_118E4
		cmp.b	d2,d0
		blt.s   loc_11944
loc_118E4:
		add.w   d1,$000C(a0)
		move.b	d3,$0026(a0)
		bsr.w	Tails_ResetTailsOnFloor ; loc_11A66
		move.b	#$00,$001C(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_11922
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0
		beq.s	loc_11914
		asr.w   $0012(a0)
		bra.s	loc_11936
loc_11914:
		move.w	#0,$0012(a0)
		move.w	$0010(a0),$0014(a0)
		rts
loc_11922:
		move.w	#0,$0010(a0)
		cmpi.w	#$0FC0,$0012(a0)
		ble.s   loc_11936
		move.w	#$0FC0,$0012(a0)
loc_11936:
		move.w	$0012(a0),$0014(a0)
		tst.b	d3
		bpl.s	loc_11944
		neg.w	$0014(a0)
loc_11944:
		rts
loc_11946:
		bsr.w	Sonic_HitWall           ; loc_13AFC
		tst.w	d1
		bpl.s	loc_11960
		sub.w   d1,8(a0)
		move.w	#0,$0010(a0)
		move.w	$0012(a0),$0014(a0)
		rts
loc_11960:
		bsr.w	Sonic_DontRunOnWalls    ; loc_139CC
		tst.w	d1
		bpl.s	loc_1197A
		sub.w   d1,$000C(a0)
		tst.w	$0012(a0)
		bpl.s	loc_11978
		move.w	#0,$0012(a0)
loc_11978:
		rts
loc_1197A:
		tst.w	$0012(a0)
		bmi.s	loc_119A6
		bsr.w	loc_13736
		tst.w	d1
		bpl.s	loc_119A6
		add.w   d1,$000C(a0)
		move.b	d3,$0026(a0)
		bsr.w	Tails_ResetTailsOnFloor ; loc_11A66
		move.b	#$00,$001C(a0)
		move.w	#0,$0012(a0)
		move.w	$0010(a0),$0014(a0)
loc_119A6:
		rts
loc_119A8:
		bsr.w	Sonic_HitWall           ; loc_13AFC
		tst.w	d1
		bpl.s	loc_119BA
		sub.w   d1,8(a0)
		move.w	#0,$0010(a0)
loc_119BA:
		bsr.w	loc_1397A
		tst.w	d1
		bpl.s	loc_119CC
		add.w   d1,8(a0)
		move.w	#0,$0010(a0)
loc_119CC:
		bsr.w	Sonic_DontRunOnWalls    ; loc_139CC
		tst.w	d1
		bpl.s	loc_11A02
		sub.w   d1,$000C(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_119EC
		move.w	#0,$0012(a0)
		rts
loc_119EC:
		move.b	d3,$0026(a0)
		bsr.w	Tails_ResetTailsOnFloor ; loc_11A66
		move.w	$0012(a0),$0014(a0)
		tst.b	d3
		bpl.s	loc_11A02
		neg.w	$0014(a0)
loc_11A02:
		rts
loc_11A04:
		bsr.w	loc_1397A
		tst.w	d1
		bpl.s	loc_11A1E
		add.w   d1,8(a0)
		move.w	#0,$0010(a0)
		move.w	$0012(a0),$0014(a0)
		rts
loc_11A1E:
		bsr.w	Sonic_DontRunOnWalls    ; loc_139CC
		tst.w	d1
		bpl.s	loc_11A38
		sub.w   d1,$000C(a0)
		tst.w	$0012(a0)
		bpl.s	loc_11A36
		move.w	#0,$0012(a0)
loc_11A36:
		rts
loc_11A38:
		tst.w	$0012(a0)
		bmi.s	loc_11A64
		bsr.w	loc_13736
		tst.w	d1
		bpl.s	loc_11A64
		add.w   d1,$000C(a0)
		move.b	d3,$0026(a0)
		bsr.w	Tails_ResetTailsOnFloor ; loc_11A66
		move.b	#$00,$001C(a0)
		move.w	#0,$0012(a0)
		move.w	$0010(a0),$0014(a0)
loc_11A64:
		rts
;=============================================================================== 
; Sub Routine Tails_Floor
; [ End ]		         
;===============================================================================		  
		      
;=============================================================================== 
; Object 0x02 - Tails
; [ End ]
;=============================================================================== 

;=============================================================================== 
; Sub Routine Tails_ResetTailsOnFloor
; [ Begin ]		         
;===============================================================================               
Tails_ResetTailsOnFloor: ; loc_11A66:
		btst	#$04,$0022(a0)
		beq.s	loc_11A74
		nop
		nop
		nop
loc_11A74:
		bclr	#$05,$0022(a0)
		bclr	#1,$0022(a0)
		bclr	#$04,$0022(a0)
		btst	#$02,$0022(a0)
		beq.s	loc_11AAA
		bclr	#$02,$0022(a0)
		move.b	#$0F,$0016(a0)
		move.b	#$09,$0017(a0)
		move.b	#$00,$001C(a0)
		subq.w	#1,$000C(a0)
loc_11AAA:
		move.b	#$00,$003C(a0)
		move.w	#0,(Chain_Bonus_counter).w
		move.b	#$00,$0027(a0)
		move.b	#$00,$0029(a0)
		rts
;=============================================================================== 
; Sub Routine Tails_ResetTailsOnFloor
; [ End ]		         
;=============================================================================== 
               
Tails_Hurt: ; loc_11AC4:
		jsr	 ObjectMove              ; loc_d27A
		addi.w	#$0030,$0012(a0)
		btst	#$06,$0022(a0)
		beq.s	loc_11ADE
		subi.w	#$0020,$0012(a0)
loc_11ADE:
		bsr.w	Tails_HurtStop          ; loc_11AF4
		bsr.w	Tails_LevelBoundaries   ; loc_114FE
		bsr.w	Tails_Animate           ; loc_11BA2
		bsr.w	LoadTailsDynPLC  ; loc_11F42
		jmp     DisplaySprite           ; loc_d3C2
		
;=============================================================================== 
; Sub Routine Tails_HurtStop
; [ Begin ]		         
;===============================================================================		 
Tails_HurtStop: ; loc_11AF4:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$00E0,d0
		cmp.w	$000C(a0),d0
		bcs.w	 KillTails               ; loc_12074
		bsr.w	Tails_Floor             ; loc_11872
		btst	#1,$0022(a0)
		bne.s	loc_11B30
		moveq	#0,d0
		move.w	d0,$0012(a0)
		move.w	d0,$0010(a0)
		move.w	d0,$0014(a0)
		move.b	#$00,$001C(a0)
		move.b	#$02,$0024(a0)
		move.w	#$0078,$0030(a0)
loc_11B30:
		rts
;=============================================================================== 
; Sub Routine Tails_HurtStop
; [ End ]		         
;===============================================================================		  
		
Tails_Death: ; loc_11B32:
		bsr.w	Tails_GameOver          ; loc_11B4A
		jsr	 ObjectMoveAndFall              ; loc_d24E
		bsr.w	Tails_Animate           ; loc_11BA2
		bsr.w	LoadTailsDynPLC  ; loc_11F42
		jmp     DisplaySprite           ; loc_d3C2
		
;=============================================================================== 
; Sub Routine Tails_GameOver
; [ Begin ]		         
;===============================================================================		 
Tails_GameOver: ; loc_11B4A:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$0100,d0
		cmp.w	$000C(a0),d0
		bcc.w	 loc_11B8C
		move.w	(MainCharacter+8).w,d0
		subi.w	#$0040,d0
		move.w	d0,8(a0)
		move.w	(MainCharacter+$C).w,d0
		subi.w	#$0080,d0
		move.w	d0,$000C(a0)
		move.b	#$02,$0024(a0)
		andi.w	#$7FFF,$0002(a0)
		move.b	#$0C,$003E(a0)
		move.b	#$0D,$003F(a0)
		nop
loc_11B8C:
		rts
;=============================================================================== 
; Sub Routine Tails_GameOver
; [ End ]		         
;===============================================================================
		 
Tails_ResetLevel: ; loc_11B8E:
		tst.w	$003A(a0)
		beq.s	loc_11BA0
		subq.w	#1,$003A(a0)
		bne.s	loc_11BA0
		move.w	#$0001,(Level_Inactive_flag).w
loc_11BA0:
		rts
		
;=============================================================================== 
; Sub Routine Tails_Animate
; [ Begin ]		         
;===============================================================================    
Tails_Animate: ; loc_11BA2: ; Tails Subroutine  
		lea	(Tails_AnimateData).l,A1 ; loc_11DF4
Tails_Animate2: ; loc_11BA8:		
		moveq	#0,d0
		move.b	$001C(a0),d0
		cmp.b	$001D(a0),d0
		beq.s	loc_11BCA
		move.b	d0,$001D(a0)
		move.b	#$00,$001B(a0)
		move.b	#$00,$001E(a0)
		bclr	#$05,$0022(a0)
loc_11BCA:
		add.w   d0,d0
		adda.w	$00(A1,d0),A1
		move.b	(a1),d0
		bmi.s	loc_11C3A
		move.b	$0022(a0),d1
		andi.b	#1,d1
		andi.b	#$FC,$0001(a0)
		or.b    d1,$0001(a0)
		subq.b	#1,$001E(a0)
		bpl.s	loc_11C08
		move.b	d0,$001E(a0)
loc_11BF0:		
		moveq	#0,d1
		move.b	$001B(a0),d1
		move.b	$01(A1,d1),d0
		cmpi.b	#$F0,d0		  
		bcc.s	loc_11C0A
loc_11C00:		
		move.b	d0,$001A(a0)
		addq.b	#1,$001B(a0)
loc_11C08:
		rts
loc_11C0A:
		addq.b	#1,d0
		bne.s	loc_11C1A
		move.b	#$00,$001B(a0)
		move.b	$0001(a1),d0
		bra.s	loc_11C00
loc_11C1A:
		addq.b	#1,d0
		bne.s	loc_11C2E
		move.b	$02(A1,d1),d0
		sub.b   d0,$001B(a0)
		sub.b   d0,d1
		move.b	$01(A1,d1),d0
		bra.s	loc_11C00
loc_11C2E:
		addq.b	#1,d0
		bne.s	loc_11C38
		move.b	$02(A1,d1),$001C(a0)
loc_11C38:
		rts
loc_11C3A:
		subq.b	#1,$001E(a0)
		bpl.s	loc_11C08
		addq.b	#1,d0
		bne.w	 loc_11d26
		moveq	#0,d0
		move.b	$0027(a0),d0
		bne.w	 loc_11CC0
		moveq	#0,d1
		move.b	$0026(a0),d0
		move.b	$0022(a0),d2
		andi.b	#1,d2
		bne.s	loc_11C62
		not.b  d0
loc_11C62:
		addi.b	#$10,d0
		bpl.s	loc_11C6A
		moveq	#$03,d1
loc_11C6A:
		andi.b	#$FC,$0001(a0)
		eor.b   d1,d2
		or.b    d2,$0001(a0)
		lsr.b	#$04,d0
		andi.b	#$06,d0
		move.w	$0014(a0),d2
		bpl.s	loc_11C84
		neg.w	d2
loc_11C84:
		move.b	d0,d3
		add.b   d3,d3
		add.b   d3,d3
		lea	(Tails_Animate_Walk).l,A1 ; loc_11E32
		cmpi.w	#$0600,d2
		bcs.s	loc_11CA6
		lea	(Tails_Animate_Run).l,A1 ; loc_11E3C
		move.b	d0,d1
		lsr.b	#1,d1
		add.b   d1,d0
		add.b   d0,d0
		move.b	d0,d3
loc_11CA6:
		neg.w	d2
		addi.w	#$0800,d2
		bpl.s	loc_11CB0
		moveq	#0,d2
loc_11CB0:
		lsr.w	#$08,d2
		move.b	d2,$001E(a0)
		bsr.w	loc_11BF0
		add.b   d3,$001A(a0)
		rts
loc_11CC0:
		move.b	$0027(a0),d0
		moveq	#0,d1
		move.b	$0022(a0),d2
		andi.b	#1,d2
		bne.s	loc_11CEE
		andi.b	#$FC,$0001(a0)
		addi.b	#$0B,d0
		divu.w  #$0016,d0
		addi.b	#$75,d0
		move.b	d0,$001A(a0)
		move.b	#$00,$001E(a0)
		rts
loc_11CEE:
		andi.b	#$FC,$0001(a0)
		tst.b	$0029(a0)
		beq.s	loc_11d06
		ori.b   #1,$0001(a0)
		addi.b	#$0B,d0
		bra.s	loc_11d12
loc_11d06:
		ori.b   #$03,$0001(a0)
		neg.b   d0
		addi.b	#$8F,d0
loc_11d12:
		divu.w  #$0016,d0
		addi.b	#$75,d0
		move.b	d0,$001A(a0)
		move.b	#$00,$001E(a0)
		rts
loc_11d26:
		addq.b	#1,d0
		bne.s	loc_11d6A
		move.w	$0014(a0),d2
		bpl.s	loc_11d32
		neg.w	d2
loc_11d32:
		lea	(Tails_Animate_Roll2).l,A1 ; loc_11E4B
		cmpi.w	#$0600,d2
		bcc.s	loc_11d44
		lea	(Tails_Animate_Roll).l,A1 ; loc_11E46
loc_11d44:
		neg.w	d2
		addi.w	#$0400,d2
		bpl.s	loc_11d4E
		moveq	#0,d2
loc_11d4E:
		lsr.w	#$08,d2
		move.b	d2,$001E(a0)
		move.b	$0022(a0),d1
		andi.b	#1,d1
		andi.b	#$FC,$0001(a0)
		or.b    d1,$0001(a0)
		bra.w	loc_11BF0
loc_11d6A:
		addq.b	#1,d0
		bne.s	loc_11DA0
		move.w	$0014(a0),d2
		bmi.s	loc_11d76
		neg.w	d2
loc_11d76:
		addi.w	#$0800,d2
		bpl.s	loc_11d7E
		moveq	#0,d2
loc_11d7E:
		lsr.w	#$06,d2
		move.b	d2,$001E(a0)
		lea	(Tails_Animate_Push_NoArt).l,A1 ; loc_11E50
		move.b	$0022(a0),d1
		andi.b	#1,d1
		andi.b	#$FC,$0001(a0)
		or.b    d1,$0001(a0)
		bra.w	loc_11BF0
loc_11DA0:
		move.w	(Sidekick+$10).w,d1
		move.w	(Sidekick+$12).w,d2
		jsr	(CalcAngle).l              ; loc_34A2
		moveq	#0,d1
		move.b	$0022(a0),d2
		andi.b	#1,d2
		bne.s	loc_11DBE
		not.b  d0
		bra.s	loc_11DC2
loc_11DBE:
		addi.b	#$80,d0
loc_11DC2:
		addi.b	#$10,d0
		bpl.s	loc_11DCA
		moveq	#$03,d1
loc_11DCA:
		andi.b	#$FC,$0001(a0)
		eor.b   d1,d2
		or.b    d2,$0001(a0)
		lsr.b	#$03,d0
		andi.b	#$0C,d0
		move.b	d0,d3
		lea	(loc_12054).l,A1
		move.b	#$03,$001E(a0)
		bsr.w	loc_11BF0
		add.b   d3,$001A(a0)
		rts 
Tails_AnimateData: ; loc_11DF4: ; Tails Data               
		dc.w    Tails_Animate_Walk-Tails_AnimateData           ; loc_11E32
		dc.w    Tails_Animate_Run-Tails_AnimateData            ; loc_11E3C
		dc.w    Tails_Animate_Roll-Tails_AnimateData           ; loc_11E46
		dc.w    Tails_Animate_Roll2-Tails_AnimateData          ; loc_11E4B
		dc.w    Tails_Animate_Push_NoArt-Tails_AnimateData     ; loc_11E50
		dc.w    Tails_Animate_Wait-Tails_AnimateData           ; loc_11E58
		dc.w    Tails_Animate_Balance_NoArt-Tails_AnimateData  ; loc_11E96
		dc.w    Tails_Animate_LookUp-Tails_AnimateData         ; loc_11EA0
		dc.w    Tails_Animate_Duck-Tails_AnimateData           ; loc_11EA3
		dc.w    Tails_Animate_Spindash-Tails_AnimateData       ; loc_11EA6
		dc.w    Tails_Animate_0x0A-Tails_AnimateData           ; loc_11EAB
		dc.w    Tails_Animate_0x0B-Tails_AnimateData           ; loc_11EAE
		dc.w    Tails_Animate_0x0C-Tails_AnimateData           ; loc_11EB4
		dc.w    Tails_Animate_Stop-Tails_AnimateData           ; loc_11EB8
		dc.w    Tails_Animate_Fly-Tails_AnimateData            ; loc_11EBC
		dc.w    Tails_Animate_0x0F-Tails_AnimateData           ; loc_11EC0
		dc.w    Tails_Animate_Jump-Tails_AnimateData           ; loc_11EC7
		dc.w    Tails_Animate_0x11-Tails_AnimateData           ; loc_11Ed6
		dc.w    Tails_Animate_0x12-Tails_AnimateData           ; loc_11EDA
		dc.w    Tails_Animate_0x13-Tails_AnimateData           ; loc_11EE0
		dc.w    Tails_Animate_0x14-Tails_AnimateData           ; loc_11EE5
		dc.w    Tails_Animate_0x15-Tails_AnimateData           ; loc_11EE8
		dc.w    Tails_Animate_Death1-Tails_AnimateData         ; loc_11EEF
		dc.w    Tails_Animate_Unused_Drown-Tails_AnimateData   ; loc_11EF2
		dc.w    Tails_Animate_Death2-Tails_AnimateData         ; loc_11EF5
		dc.w    Tails_Animate_0x19-Tails_AnimateData           ; loc_11EF8
		dc.w    Tails_Animate_0x1A-Tails_AnimateData           ; loc_11EFB
		dc.w    Tails_Animate_0x1B-Tails_AnimateData           ; loc_11EFE
		dc.w    Tails_Animate_0x1C-Tails_AnimateData           ; loc_11F02
		dc.w    Tails_Animate_0x1D-Tails_AnimateData           ; loc_11F06
		dc.w    Tails_Animate_0x1E-Tails_AnimateData           ; loc_11F10
Tails_Animate_Walk: ; loc_11E32:
		dc.b	$FF,$10,$11,$12,$13,$14,$15,$0E,$0F,$FF  
Tails_Animate_Run: ; loc_11E3C:
		dc.b	$FF,$2E,$2F,$30,$31,$FF,$FF,$FF,$FF,$FF
Tails_Animate_Roll: ; loc_11E46:
		dc.b	$01,$48,$47,$46,$FF
Tails_Animate_Roll2: ; loc_11E4B:
		dc.b	$01,$48,$47,$46,$FF
Tails_Animate_Push_NoArt: ; loc_11E50:
		dc.b	$FD,$09,$0A,$0B,$0C,$0D,$0E,$FF
Tails_Animate_Wait: ; loc_11E58:
		dc.b	$07,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$02,$01,$01,$01
		dc.b	$01,$01,$01,$01,$01,$03,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01
		dc.b	$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
		dc.b	$06,$07,$08,$07,$08,$07,$08,$07,$08,$07,$08,$06,$FE,$1C  
Tails_Animate_Balance_NoArt: ; loc_11E96:
		dc.b	$1F,$01,$02,$03,$04,$05,$06,$07,$08,$FF
Tails_Animate_LookUp: ; loc_11EA0:
		dc.b	$3F,$04,$FF
Tails_Animate_Duck: ; loc_11EA3:
		dc.b	$3F,$5B,$FF
Tails_Animate_Spindash: ; loc_11EA6:
		dc.b	$00,$60,$61,$62,$FF
Tails_Animate_0x0A: ; loc_11EAB:
		dc.b	$3F,$82,$FF
Tails_Animate_0x0B: ; loc_11EAE:
		dc.b	$07,$08,$08,$09,$FD,$05
Tails_Animate_0x0C: ; loc_11EB4:
		dc.b	$07,$09,$FD,$05
Tails_Animate_Stop: ; loc_11EB8:
		dc.b	$07,$01,$02,$FF
Tails_Animate_Fly: ; loc_11EBC:
		dc.b	$07,$5E,$5F,$FF
Tails_Animate_0x0F: ; loc_11EC0:
		dc.b	$07,$01,$02,$03,$04,$05,$FF
Tails_Animate_Jump: ; loc_11EC7:
		dc.b	$03,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$FD,$00
Tails_Animate_0x11: ; loc_11Ed6:
		dc.b	$04,$01,$02,$FF
Tails_Animate_0x12: ; loc_11EDA:
		dc.b	$0F,$01,$02,$03,$FE,$01
Tails_Animate_0x13: ; loc_11EE0:
		dc.b	$0F,$01,$02,$FE,$01
Tails_Animate_0x14: ; loc_11EE5:
		dc.b	$3F,$01,$FF
Tails_Animate_0x15: ; loc_11EE8:
		dc.b	$0B,$01,$02,$03,$04,$FD,$00
Tails_Animate_Death1: ; loc_11EEF:
		dc.b	$20,$5D,$FF
Tails_Animate_Unused_Drown: ; loc_11EF2:
		dc.b	$2F,$5D,$FF
Tails_Animate_Death2: ; loc_11EF5:
		dc.b	$03,$5D,$FF
Tails_Animate_0x19: ; loc_11EF8:
		dc.b	$03,$5D,$FF
Tails_Animate_0x1A: ; loc_11EFB:
		dc.b	$03,$5C,$FF
Tails_Animate_0x1B: ; loc_11EFE:
		dc.b	$07,$01,$01,$FF
Tails_Animate_0x1C: ; loc_11F02:
		dc.b	$77,$00,$FD,$00
Tails_Animate_0x1D: ; loc_11F06:
		dc.b	$03,$01,$02,$03,$04,$05,$06,$07,$08,$FF
Tails_Animate_0x1E: ; loc_11F10:
		dc.b	$03,$01,$02,$03,$04,$05,$06,$07,$08,$FF

; ===========================================================================
; ---------------------------------------------------------------------------
; Tails' Tails pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


; loc_11F1A: Load_Tails_Tail_Dynamic_PLC:
LoadTailsTailsDynPLC:
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(TailsTails_LastLoadedDPLC).w,d0
		beq.s	return_11F94
		move.b	d0,(TailsTails_LastLoadedDPLC).w
		lea	(Tails_Dyn_Script).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	return_11F94
		move.w	#$F600,d4
		bra.s	TPLC_ReadEntry

; ---------------------------------------------------------------------------
; Tails pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_11F42: Load_Tails_Dynamic_PLC:
LoadTailsDynPLC:
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(Tails_LastLoadedDPLC).w,d0
		beq.s	return_11F94
		move.b	d0,(Tails_LastLoadedDPLC).w
		lea	(Tails_Dyn_Script).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	return_11F94
		move.w	#$F400,d4
; loc_11F68:
TPLC_ReadEntry:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Tails_Sprites,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,TPLC_ReadEntry

return_11F94:
		rts
; End of function LoadTailsDynPLC

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 05 - Tails' tails
; ---------------------------------------------------------------------------
; loc_11F96: Obj_0x05_Tails_Tail:
Obj05:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj05_Index(pc,d0.w),d1
		jmp	Obj05_Index(pc,d1.w)
; ===========================================================================
; loc_11FA4:
Obj05_Index:	offsetTable
		offsetTableEntry.w Obj05_Init
		offsetTableEntry.w Obj05_Main
; ===========================================================================
; loc_11FA8:
Obj05_Init:
		addq.b	#2,routine(a0)
		move.l	#Tails_Mappings,4(a0)
		move.w	#$7B0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#4,1(a0)
; loc_11Fd0:
Obj05_Main:
		move.b	(Sidekick+$26).w,$26(a0)
		move.b	(Sidekick+$22).w,$22(a0)
		move.w	(Sidekick+8).w,8(a0)
		move.w	(Sidekick+$C).w,$C(a0)
		moveq	#0,d0
		move.b	(Sidekick+$1C).w,d0
		cmp.b	$30(a0),d0
		beq.s	loc_11FFE
		move.b	d0,$30(a0)
		move.b	Obj05AniSelection(pc,d0.w),$1C(a0)

loc_11FFE:
		lea	(Obj05AniData).l,a1
		bsr.w	Tails_Animate2
		bsr.w	LoadTailsTailsDynPLC
		jsr	(DisplaySprite).l
		rts
; ===========================================================================
; Animation master script table for the tails,chooses which tails animation
; to run depending on Tails' current animation (sounds confusing,right?).
; byte_12014:
Obj05AniSelection:
		dc.b	0,0
		dc.b	3,3
		dc.b	0
		dc.b	1
		dc.b	0
		dc.b	2
		dc.b	1
		dc.b	7
		dc.b	0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0
		even
; ---------------------------------------------------------------------------
; Animation script - Tails' tails
; ---------------------------------------------------------------------------
; off_12032:
Obj05AniData:	dc.w	loc_12042-Obj05AniData
		dc.w	loc_12045-Obj05AniData
		dc.w	loc_1204C-Obj05AniData
		dc.w	loc_12054-Obj05AniData
		dc.w	loc_1205A-Obj05AniData
		dc.w	loc_12060-Obj05AniData
		dc.w	loc_12066-Obj05AniData
		dc.w	loc_1206C-Obj05AniData
loc_12042:	dc.b	$20, 0,$FF
loc_12045:	dc.b	  7, 9,$A,$B,$C,$D,$FF
loc_1204C:	dc.b	  3, 9,$A,$B,$C,$D,$FD, 1
loc_12054:	dc.b	$FC,$49,$4A,$4B,$4C,$FF
loc_1205A:	dc.b	  3,$4D,$4E,$4F,$50,$FF
loc_12060:	dc.b	  3,$51,$52,$53,$54,$FF
loc_12066:	dc.b	  3,$55,$56,$57,$58,$FF
loc_1206C: 	dc.b	  2,$81,$82,$83,$84,$FF
;=============================================================================== 
; Object 0x05 - Tails "Tail"
; [ End ]
;===============================================================================		    
		nop
KillTails: ; loc_12074:
		jmp     (KillSonic).l               ; loc_21422
		align 4
;===============================================================================
; Object 0x0A -
; [ Begin ]
;===============================================================================
Obj_0x0A_Bubbles_And_Numbers: ; loc_1207C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1208A(pc,d0),d1
		jmp     loc_1208A(pc,d1)
loc_1208A:
		dc.w    loc_1209C-loc_1208A
		dc.w    loc_120F8-loc_1208A
		dc.w    loc_12104-loc_1208A
		dc.w    loc_1216E-loc_1208A
		dc.w    JmpTo2_DeleteObject-loc_1208A ; loc_12182-...
		dc.w    loc_1230C-loc_1208A
		dc.w    loc_12188-loc_1208A
		dc.w    loc_1216E-loc_1208A
		dc.w    JmpTo2_DeleteObject-loc_1208A ; loc_12182-...
loc_1209C:
		addq.b	#2,$24(a0)
		move.l	#Obj_0x0A_Bubbles_Mappings,4(a0) ; loc_14374
		move.w	#$8500,2(a0)
		move.b	#$84,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		bpl.s	loc_120E4
		addq.b	#8,$24(a0)
		move.l	#Obj_0x0A_Numbers_Mappings,4(a0) ; loc_125C2
		move.w	#$440,2(a0)
		andi.w	#$7F,d0
		move.b	d0,$33(a0)
		bra.w	loc_1230C
loc_120E4:
		move.b	d0,$1C(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.w	8(a0),$30(a0)
		move.w	#$FF78,$12(a0)
loc_120F8:
		lea	(loc_12530).l,A1
		jsr	(AnimateSprite).l           ; (loc_d412)
loc_12104:
		move.w	(Water_Level_1).w,d0
		cmp.w	$C(a0),d0
		bcs.s	loc_1212A
		move.b	#6,$24(a0)
		addq.b	#7,$1C(a0)
		cmpi.b	#$D,$1C(a0)
		beq.s	loc_1216E
		bcs.s	loc_1216E
		move.b	#$D,$1C(a0)
		bra.s	loc_1216E
loc_1212A:
		tst.b	(WindTunnel_flag).w
		beq.s	loc_12134
		addq.w	#4,$30(a0)
loc_12134:
		move.b	$26(a0),d0
		addq.b	#1,$26(a0)
		andi.w	#$7F,d0
		lea	(loc_1220C).l,A1
		move.b	(A1,d0),d0
		ext.w   d0
		add.w   $30(a0),d0
		move.w	d0,8(a0)
		bsr.s	loc_121C0
		jsr	(ObjectMove).l              ; (loc_d27A)
		tst.b	1(a0)
		bpl.s	JmpTo_DeleteObject
		jmp     DisplaySprite           ; (loc_d3C2)
; loc_12168:
JmpTo_DeleteObject:
		jmp	(DeleteObject).l

loc_1216E:
		bsr.s	loc_121C0
		lea	(loc_12530).l,A1
		jsr	(AnimateSprite).l           ; (loc_d412)
		jmp     DisplaySprite           ; (loc_d3C2)
; loc_12182:
JmpTo2_DeleteObject:
		jmp	(DeleteObject).l
loc_12188:
		cmpi.w	#$C,(Current_Air).w
		bhi.s	JmpTo3_DeleteObject
		subq.w	#1,$38(a0)
		bne.s	loc_121A2
		move.b	#$E,$24(a0)
		addq.b	#7,$1C(a0)
		bra.s	loc_1216E
loc_121A2:
		lea	(loc_12530).l,A1
		jsr	(AnimateSprite).l           ; (loc_d412)
		tst.b	1(a0)
		bpl.s	JmpTo3_DeleteObject
		jmp     DisplaySprite           ; (loc_d3C2)
; loc_121BA:
JmpTo3_DeleteObject:
		jmp	(DeleteObject).l
loc_121C0:
		tst.w	$38(a0)
		beq.s	loc_1220A
		subq.w	#1,$38(a0)
		bne.s	loc_1220A
		cmpi.b	#7,$1C(a0)
		bcc.s	loc_1220A
		move.w	#$F,$38(a0)
		clr.w	$12(a0)
		move.b	#$80,1(a0)
		move.w	8(a0),d0
		sub.w   (Camera_X_pos).w,d0
		addi.w	#$80,d0
		move.w	d0,8(a0)
		move.w	$C(a0),d0
		sub.w   (Camera_Y_pos).w,d0
		addi.w	#$80,d0
		move.w	d0,$A(a0)
		move.b	#$C,$24(a0)
loc_1220A:
		rts

loc_1220C:
		dc.b	$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02
		dc.b	$02,$02,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
		dc.b	$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$02
		dc.b	$02,$02,$02,$02,$02,$02,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00
		dc.b	$00,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD
		dc.b	$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
		dc.b	$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD
		dc.b	$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
		dc.b	$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02
		dc.b	$02,$02,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
		dc.b	$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$02
		dc.b	$02,$02,$02,$02,$02,$02,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00
		dc.b	$00,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD
		dc.b	$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
		dc.b	$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD
		dc.b	$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
loc_1230C:
		tst.w	$2C(a0)
		bne.w	loc_123F6
		cmpi.b	#6,(MainCharacter+routine).w
		bcc.w	loc_124FC
		btst	#6,(MainCharacter+$22).w
		beq.w	loc_124FC
		subq.w	#1,$38(a0)
		bpl.w	loc_1241C
		move.w	#$3B,$38(a0)
		move.w	#1,$36(a0)
		jsr	(PseudoRandomNumber).l      ; loc_31E4
		andi.w	#1,d0
		move.b	d0,$34(a0)
		move.w	(Current_Air).w,d0
		cmpi.w	#$19,d0
		beq.s	loc_12386
		cmpi.w	#$14,d0
		beq.s	loc_12386
		cmpi.w	#$F,d0
		beq.s	loc_12386
		cmpi.w	#$C,d0
		bhi.s	loc_12390
		bne.s	loc_12372
		move.w	#MusID_LevelSel,d0
		jsr	(PlayMusic).l            ; loc_14C0
loc_12372:
		subq.b	#1,$32(a0)
		bpl.s	loc_12390
		move.b	$33(a0),$32(a0)
		bset	#7,$36(a0)
		bra.s	loc_12390
loc_12386:
		move.w	#SndID_WaterWarning,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_12390:
		subq.w	#1,(Current_Air).w
		bcc.w	loc_1241A
		bsr.w	ResumeMusic             ; loc_124FE
		move.b	#$81,(MainCharacter+$2A).w
		move.w	#SndID_Drown,d0
		jsr	(PlaySound).l             ; loc_14C6
		move.b	#$A,$34(a0)
		move.w	#1,$36(a0)
		move.w	#$78,$2C(a0)
		move.l	A0,-(sp)
		lea	(MainCharacter).w,A0
		bsr.w	Sonic_ResetOnFloor      ; loc_1090C
		move.b	#$17,$1C(a0)
		bset	#1,$22(a0)
		bset	#7,2(a0)
		move.w	#0,$12(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		move.b	#1,(Deform_lock).w
		move.l	(sp)+,A0
		rts
loc_123F6:
		subq.w	#1,$2C(a0)
		bne.s	loc_12404
		move.b	#6,(MainCharacter+routine).w
		rts
loc_12404:
		move.l	A0,-(sp)
		lea	(MainCharacter).w,A0
		jsr	ObjectMove              ; (loc_d27A)
		addi.w	#$10,$12(a0)
		move.l	(sp)+,A0
		bra.s	loc_1241C
loc_1241A:
		bra.s	loc_1242C
loc_1241C:
		tst.w	$36(a0)
		beq.w	loc_124FC
		subq.w	#1,$3A(a0)
		bpl.w	loc_124FC
loc_1242C:
		jsr	(PseudoRandomNumber).l      ; loc_31E4
		andi.w	#$F,d0
		move.w	d0,$3A(a0)
		jsr	(SingleObjLoad).l        ; (loc_E772)
		bne.w	loc_124FC
		_move.b	#$A,0(a1)
		move.w	(MainCharacter+8).w,8(a1)
		moveq	#6,d0
		btst	#0,(MainCharacter+$22).w
		beq.s	loc_12462
		neg.w	d0
		move.b	#$40,$26(a1)
loc_12462:
		add.w   d0,8(a1)
		move.w	(MainCharacter+$C).w,$C(a1)
		move.b	#6,$28(a1)
		tst.w	$2C(a0)
		beq.w	loc_124AE
		andi.w	#7,$3A(a0)
		addi.w	#0,$3A(a0)
		move.w	(MainCharacter+$C).w,d0
		subi.w	#$C,d0
		move.w	d0,$C(a1)
		jsr	(PseudoRandomNumber).l      ; loc_31E4
		move.b	d0,$26(a1)
		move.w	(Timer_frames).w,d0
		andi.b	#3,d0
		bne.s	loc_124F2
		move.b	#$E,$28(a1)
		bra.s	loc_124F2
loc_124AE:
		btst	#$07,$0036(a0)
		beq.s	loc_124F2
		move.w	(Current_Air).w,d2
		lsr.w	#1,d2
		jsr	(PseudoRandomNumber).l      ; loc_31E4
		andi.w	#3,d0
		bne.s	loc_124DA
		bset	#6,$36(a0)
		bne.s	loc_124F2
		move.b	d2,$28(a1)
		move.w	#$1C,$38(a1)
loc_124DA:
		tst.b	$34(a0)
		bne.s	loc_124F2
		bset	#6,$36(a0)
		bne.s	loc_124F2
		move.b	d2,$28(a1)
		move.w	#$1C,$38(a1)
loc_124F2:
		subq.b	#1,$34(a0)
		bpl.s	loc_124FC
		clr.w	$36(a0)
loc_124FC:
		rts
ResumeMusic: ; loc_124FE:
		cmpi.w	#$C,(Current_Air).w
		bhi.s	loc_12524
		move.w	#S1MusID_LZ,d0
		tst.b	(Invincibility_flag).w
		beq.s	loc_12514
		move.w	#S1MusID_Invinc,d0
loc_12514:
		tst.b	(Current_Boss_ID).w
		beq.s	loc_1251E
		move.w	#S1MusID_Boss,d0
loc_1251E:
		jsr	(PlayMusic).l            ; loc_14C0
loc_12524:
		move.w	#30,(Current_Air).w
		clr.b   (BreathingBubbles+$32).w
		rts
loc_12530:
		dc.w    loc_1254E-loc_12530
		dc.w    loc_12557-loc_12530
		dc.w    loc_12560-loc_12530
		dc.w    loc_12569-loc_12530
		dc.w    loc_12572-loc_12530
		dc.w    loc_1257B-loc_12530
		dc.w    loc_12584-loc_12530
		dc.w    loc_12589-loc_12530
		dc.w    loc_12591-loc_12530
		dc.w    loc_12599-loc_12530
		dc.w    loc_125A1-loc_12530
		dc.w    loc_125A9-loc_12530
		dc.w    loc_125B1-loc_12530
		dc.w    loc_125B9-loc_12530
		dc.w    loc_125BB-loc_12530
loc_1254E:
		dc.b	$05,$00,$01,$02,$03,$04,$09,$0D,$FC
loc_12557:
		dc.b	$05,$00,$01,$02,$03,$04,$0C,$12,$FC
loc_12560:
		dc.b	$05,$00,$01,$02,$03,$04,$0C,$11,$FC
loc_12569:
		dc.b	$05,$00,$01,$02,$03,$04,$0B,$10,$FC
loc_12572:
		dc.b	$05,$00,$01,$02,$03,$04,$09,$0F,$FC
loc_1257B:
		dc.b	$05,$00,$01,$02,$03,$04,$0A,$0E,$FC
loc_12584:
		dc.b	$0E,$00,$01,$02,$FC
loc_12589:
		dc.b	$07,$16,$0D,$16,$0D,$16,$0D,$FC
loc_12591:
		dc.b	$07,$16,$12,$16,$12,$16,$12,$FC
loc_12599:
		dc.b	$07,$16,$11,$16,$11,$16,$11,$FC
loc_125A1:
		dc.b	$07,$16,$10,$16,$10,$16,$10,$FC
loc_125A9:
		dc.b	$07,$16,$0F,$16,$0F,$16,$0F,$FC
loc_125B1:
		dc.b	$07,$16,$0E,$16,$0E,$16,$0E,$FC
loc_125B9:
		dc.b	$0E,$FC
loc_125BB:
		dc.b	$0E,$01,$02,$03,$04,$FC,$00
Obj_0x0A_Numbers_Mappings: ; loc_125C2:
		dc.w    loc_125C4-Obj_0x0A_Numbers_Mappings
loc_125C4:
		dc.w	$0001
		dc.l	$E80E0000,$0000FFF2
;===============================================================================
; Object 0x0A -
; [ End ]
;===============================================================================
;===============================================================================
; Object 0x38 -
; [ Begin ]
;===============================================================================
Obj_0x38_Shield: ; loc_125CE:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_125DC(pc,d0),d1
		jmp     loc_125DC(pc,d1)
loc_125DC:		 
		dc.w    loc_125E0-loc_125DC
		dc.w    loc_12616-loc_125DC
loc_125E0:
		addq.b	#$02,$0024(a0)
		move.l	#loc_12BB0,$0004(a0)
		move.b	#$04,$0001(a0)
		move.b	#1,$0018(a0)
		move.b	#$18,$0019(a0)
		move.w	#$04BE,$0002(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		btst	#$07,(MainCharacter+2).w
		beq.s	loc_12616
		bset	#$07,$0002(a0)
loc_12616:
		tst.b	(Invincibility_flag).w
		bne.s	loc_12646
		tst.b	(Shield_flag).w
		beq.s	JmpTo4_DeleteObject
		move.w	(MainCharacter+8).w,8(a0)
		move.w	(MainCharacter+$C).w,$000C(a0)
		move.b	(MainCharacter+$22).w,$0022(a0)
		lea	(loc_12BA2).l,A1
		jsr	 AnimateSprite           ; (loc_d412)
		jmp     DisplaySprite           ; (loc_d3C2)
loc_12646:
		rts  
; loc_12648:
JmpTo4_DeleteObject:
		jmp	(DeleteObject).l
;=============================================================================== 
; Object 0x38 - 
; [ End ]
;===============================================================================  
;=============================================================================== 
; Object 0x35 - 
; [ Begin ]
;===============================================================================		   
Obj_0x35_Invincibility: ; loc_1264E:
		moveq	#0,d0
		move.b	$000A(a0),d0
		move.w	loc_1265C(pc,d0),d1
		jmp     loc_1265C(pc,d1)
loc_1265C:
		dc.w    loc_12660-loc_1265C
		dc.w    loc_1268E-loc_1265C
loc_12660:
		addq.b	#$02,$000A(a0)
		move.l	#loc_12C88,$0004(a0)
		move.w	#$04DE,$0002(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$04,$0001(a0)
		bset	#$06,$0001(a0)
		move.b	#$10,$000E(a0)
		move.b	#$08,$000F(a0)
loc_1268E:
		tst.b	(Invincibility_flag).w
		beq.w	 DeleteObject            ; loc_d3B4
		lea	(MainCharacter).w,A1
		move.w	8(a1),8(a0)
		move.w	$000C(a1),$000C(a0)
		move.b	$0022(a1),d6
		lea	(loc_127B0).l,A2
		move.b	$0026(a1),d1
		btst	#1,d6
		beq.s	loc_126C0
		move.b	$002B(a1),d1
		moveq	#0,d6
loc_126C0:
		andi.b	#1,d6
		beq.s	loc_126C8
		neg.w	d1
loc_126C8:
		addi.b	#$10,d1
		lsr.b	#$03,d1
		andi.w	#$001C,d1
		lea	$00(A2,d1),A2
		subq.w	#$08,d1
		andi.w	#$0010,d1
		bne.s	loc_126E2
		eori.b  #1,d6
loc_126E2:
		move.b	(Timer_frames+1).w,d0
		andi.b	#1,d0
		lea	(loc_127d0).l,A3
		beq.s	loc_126FA
		lea	(loc_12938).l,A3
		addq.w	#$02,A2
loc_126FA:
		move.w	8(a1),d4
		move.b	(a2)+,d1
		ext.w   d1
		andi.b	#1,d6
		beq.s	loc_1270A
		neg.w	d1
loc_1270A:
		add.w   d1,d4
		move.w	$000C(a1),d5
		move.b	(a2)+,d1
		ext.w   d1
		add.w   d1,d5
		moveq	#0,d0
		move.b	$001A(a0),d0
		addq.b	#$06,d0
		cmpi.b	#$78,d0
		bcs.s	loc_12726
		moveq	#0,d0
loc_12726:
		move.b	d0,$001A(a0)
		move.w	d0,d1
		add.w   d0,d0
		add.w   d1,d0
		lea	$00(A3,d0),A3
		lea	$0010(a0),A2
		moveq	#0,d0
		moveq	#$05,d1
loc_1273C:		
		move.b	(a3)+,d0
		move.b	(a3)+,d2
		ext.w   d2
		andi.b	#1,d6
		beq.s	loc_1274A
		neg.w	d2
loc_1274A:
		add.w   d4,d2
		move.b	(a3)+,d3
		ext.w   d3
		add.w   d5,d3
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addq.w	#1,A2
		move.b	d0,(a2)+
		dbf	d1,loc_1273C
		move.w	8(a1),d4
		move.w	$000C(a1),d5
		moveq	#0,d0
		move.b	$0004(a0),d0
		addq.b	#$06,d0
		cmpi.b	#$A2,d0
		bcs.s	loc_12776
		moveq	#0,d0
loc_12776:
		move.b	d0,$0004(a0)
		lea	(loc_12AA0).l,A3
		lea	$00(A3,d0),A3
		moveq	#1,d1
loc_12786:		
		move.b	(a3)+,d0
		move.b	(a3)+,d2
		ext.w   d2
		andi.b	#1,d6
		beq.s	loc_12794
		neg.w	d2
loc_12794:
		add.w   d4,d2
		move.b	(a3)+,d3
		ext.w   d3
		add.w   d5,d3
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addq.w	#1,A2
		move.b	d0,(a2)+
		dbf	d1,loc_12786
		move.w	#$0080,d0
		bra.w	DisplaySprite3     ; loc_d3FE  
loc_127B0:
		dc.w	$0000,$0000,$00F8,$00F0,$04F0,$04E0,$00F8,$00F0
		dc.w	$0000,$0000,$0008,$0010,$0410,$0420,$0008,$0010  
loc_127d0:
		dc.b	$02,$F8,$F9,$05,$E5,$F9,$04,$E6,$08,$02,$E8,$FD,$00,$00,$00,$00
		dc.b	$00,$00,$03,$F7,$F9,$02,$F8,$07,$06,$E4,$F9,$05,$E5,$08,$03,$E7
		dc.b	$FD,$00,$00,$00,$04,$F6,$F9,$03,$F7,$07,$05,$E3,$FA,$06,$E4,$09
		dc.b	$04,$E6,$FC,$00,$00,$00,$05,$F5,$F9,$04,$F6,$08,$04,$E2,$FB,$05
		dc.b	$E3,$09,$05,$E5,$FC,$00,$00,$00,$06,$F4,$F9,$05,$F5,$08,$02,$F8
		dc.b	$FD,$03,$E1,$FC,$04,$E2,$0A,$06,$E4,$FB,$05,$F3,$FA,$06,$F4,$09
		dc.b	$03,$F7,$FD,$02,$E0,$FD,$03,$E1,$0A,$05,$E3,$FB,$04,$F2,$FB,$05
		dc.b	$F3,$09,$04,$F6,$FC,$01,$DF,$00,$02,$E0,$0B,$04,$E2,$FA,$03,$F1
		dc.b	$FC,$04,$F2,$0A,$05,$F5,$FC,$02,$F8,$02,$01,$DF,$0B,$03,$E1,$FA
		dc.b	$02,$F0,$FD,$03,$F1,$0A,$06,$F4,$FB,$03,$F7,$02,$02,$E0,$FA,$00
		dc.b	$00,$00,$01,$EF,$00,$02,$F0,$0B,$05,$F3,$FB,$04,$F6,$03,$01,$DF
		dc.b	$FA,$00,$00,$00,$01,$EE,$00,$01,$EF,$0B,$04,$F2,$FA,$05,$F5,$03
		dc.b	$02,$F8,$0E,$00,$00,$00,$01,$ED,$01,$01,$EE,$0C,$03,$F1,$FA,$06
		dc.b	$F4,$03,$03,$F7,$0E,$00,$00,$00,$01,$ED,$03,$01,$ED,$0D,$02,$F0
		dc.b	$FA,$05,$F3,$02,$04,$F6,$0D,$00,$00,$00,$01,$EC,$05,$01,$EC,$0D
		dc.b	$01,$EF,$FA,$04,$F2,$02,$05,$F5,$0D,$02,$F8,$F5,$01,$EB,$07,$01
		dc.b	$EB,$0D,$01,$EE,$F9,$03,$F1,$02,$06,$F4,$0C,$03,$F7,$F5,$01,$EA
		dc.b	$08,$01,$EA,$0D,$01,$ED,$F8,$02,$F0,$01,$05,$F3,$0C,$04,$F6,$F5
		dc.b	$01,$E9,$09,$01,$E9,$0D,$01,$EC,$F8,$01,$EF,$01,$04,$F2,$0B,$05
		dc.b	$F5,$F5,$01,$EB,$F7,$01,$EE,$00,$03,$F1,$0A,$05,$F4,$F6,$02,$E8
		dc.b	$F9,$00,$00,$00,$01,$EA,$F7,$01,$ED,$00,$02,$F0,$0A,$04,$F3,$F6
		dc.b	$03,$E7,$F9,$02,$E8,$07,$01,$E9,$F6,$01,$EC,$00,$01,$EF,$09,$03
		dc.b	$F2,$F6,$04,$E6,$F9,$03,$E7,$07    
loc_12938:
		dc.b	$01,$E6,$00,$01,$E7,$0B,$04,$EA,$FA,$05,$ED,$03,$02,$F0,$0E,$00
		dc.b	$00,$00,$01,$E5,$01,$01,$E6,$0C,$03,$E9,$FA,$06,$EC,$03,$03,$F1
		dc.b	$0E,$00,$00,$00,$01,$E5,$03,$01,$E5,$03,$02,$E8,$FA,$05,$EB,$02
		dc.b	$04,$EE,$0D,$00,$00,$00,$01,$E4,$05,$01,$E4,$0D,$01,$E7,$FA,$04
		dc.b	$EA,$02,$05,$ED,$0D,$02,$F0,$F5,$01,$E3,$07,$01,$E3,$0D,$01,$E6
		dc.b	$F9,$03,$E9,$02,$06,$EC,$0C,$03,$EF,$F5,$01,$E2,$08,$01,$E2,$0D
		dc.b	$01,$E5,$F8,$02,$E8,$01,$05,$EB,$0C,$04,$EE,$F5,$01,$E1,$09,$01
		dc.b	$E1,$0D,$01,$E4,$F8,$01,$E7,$01,$04,$EA,$0B,$05,$ED,$F5,$01,$E3
		dc.b	$F7,$01,$E6,$00,$03,$E9,$0A,$05,$EC,$F6,$02,$E8,$02,$00,$00,$00
		dc.b	$01,$E2,$F7,$01,$E5,$00,$02,$E8,$0A,$04,$EB,$F6,$03,$E7,$02,$02
		dc.b	$E8,$0E,$01,$E1,$F6,$01,$E4,$00,$01,$E7,$09,$03,$EA,$F6,$04,$E6
		dc.b	$03,$03,$E7,$0E,$02,$F0,$F9,$05,$E5,$03,$04,$E6,$0D,$02,$E8,$F5
		dc.b	$00,$00,$00,$00,$00,$00,$03,$EF,$F9,$02,$F0,$07,$06,$E4,$03,$05
		dc.b	$E5,$0D,$03,$E7,$F5,$00,$00,$00,$04,$EE,$F9,$03,$EF,$07,$05,$E3
		dc.b	$02,$06,$E4,$0C,$04,$E6,$F5,$00,$00,$00,$05,$ED,$F9,$04,$EE,$08
		dc.b	$04,$E2,$02,$05,$E3,$0C,$05,$E5,$F5,$00,$00,$00,$06,$EC,$F9,$05
		dc.b	$ED,$08,$02,$F0,$FD,$03,$E1,$02,$04,$E2,$0B,$06,$E4,$F6,$05,$EB
		dc.b	$FA,$06,$EC,$09,$03,$EF,$FD,$02,$E0,$01,$03,$E1,$0A,$05,$E3,$F6
		dc.b	$04,$EA,$FB,$05,$EB,$09,$04,$EE,$FD,$01,$DF,$01,$02,$E0,$0A,$04
		dc.b	$E2,$F6,$03,$E9,$FC,$04,$EA,$0A,$05,$ED,$FC,$02,$F0,$02,$01,$DF
		dc.b	$09,$03,$E1,$F7,$02,$E8,$FD,$03,$E9,$0A,$06,$EC,$FB,$03,$EF,$02
		dc.b	$02,$E0,$F7,$00,$00,$00,$01,$E7,$00,$02,$E8,$0B,$05,$EB,$FB,$04
		dc.b	$EE,$03,$01,$DF,$F8,$00,$00,$00      
loc_12AA0:
		dc.b	$04,$08,$09,$04,$FC,$01,$05,$08,$09,$05,$FC,$01,$06,$08,$09,$06
		dc.b	$FC,$01,$07,$08,$09,$07,$FC,$01,$08,$08,$09,$08,$FC,$01,$07,$08
		dc.b	$09,$07,$FC,$01,$06,$08,$09,$06,$FC,$01,$05,$08,$09,$05,$FC,$01
		dc.b	$04,$08,$09,$04,$FC,$01,$04,$F9,$F7,$04,$0B,$FC,$05,$F9,$F7,$05
		dc.b	$0B,$FC,$06,$F9,$F7,$06,$0B,$FC,$07,$F9,$F7,$07,$0B,$FC,$08,$F9
		dc.b	$F7,$08,$0B,$FC,$07,$F9,$F7,$07,$0B,$FC,$06,$F9,$F7,$06,$0B,$FC
		dc.b	$05,$F9,$F7,$05,$0B,$FC,$04,$F9,$F7,$04,$0B,$FC,$04,$03,$F1,$04
		dc.b	$F4,$09,$05,$03,$F1,$05,$F4,$09,$06,$03,$F1,$06,$F4,$09,$07,$03
		dc.b	$F1,$07,$F4,$09,$08,$03,$F1,$08,$F4,$09,$07,$03,$F1,$07,$F4,$09
		dc.b	$06,$03,$F1,$06,$F4,$09,$05,$03,$F1,$05,$F4,$09,$04,$03,$F1,$04
		dc.b	$F4,$09						         
;=============================================================================== 
; Object 0x35 - 
; [ End ]
;===============================================================================       

;=============================================================================== 
; Object 0x08 - 
; [ Begin ]
;===============================================================================       
Obj_0x08_Water_Splash: ; loc_12B42:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_12B50(pc,d0),d1
		jmp     loc_12B50(pc,d1)
loc_12B50:
		dc.w    loc_12B56-loc_12B50
		dc.w    loc_12B84-loc_12B50
		dc.w    JmpTo5_DeleteObject-loc_12B50 ; loc_12B9C-...
loc_12B56:
		addq.b	#$02,$0024(a0)
		move.l	#Obj_0x08_Mappings,$0004(a0) ; loc_12CF4
		ori.b   #$04,$0001(a0)
		move.b	#1,$0018(a0)
		move.b	#$10,$0019(a0)
		move.w	#$449C,$0002(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.w	(MainCharacter+8).w,8(a0)
loc_12B84:
		move.w	(Water_Level_1).w,$000C(a0)
		lea	(loc_12CEC).l,A1
		jsr	 AnimateSprite           ; (loc_d412)
		jmp     DisplaySprite           ; (loc_d3C2)
; loc_12B9C:
JmpTo5_DeleteObject:
		jmp	(DeleteObject).l
loc_12BA2:
		dc.w    loc_12BA4-loc_12BA2
loc_12BA4:
		dc.b	$00,$05,$00,$05,$01,$05,$02,$05,$03,$05,$04,$FF
loc_12BB0:
		dc.w    loc_12BBC-loc_12BB0
		dc.w    loc_12BDE-loc_12BB0
		dc.w    loc_12C00-loc_12BB0
		dc.w    loc_12C22-loc_12BB0
		dc.w    loc_12C44-loc_12BB0
		dc.w    loc_12C66-loc_12BB0
loc_12BBC:
		dc.w	$0004
		dc.l	$F0050000,$0000FFF0,$F0050800,$08000000
		dc.l	$00051000,$1000FFF0,$00051800,$18000000
loc_12BDE:
		dc.w	$0004
		dc.l	$F0050004,$0002FFF0,$F0050804,$08020000
		dc.l	$00051004,$1002FFF0,$00051804,$18020000
loc_12C00:
		dc.w	$0004
		dc.l	$F0050008,$0004FFF0,$F0050808,$08040000
		dc.l	$00051008,$1004FFF0,$00051808,$18040000
loc_12C22:
		dc.w	$0004
		dc.l	$F005000C,$0006FFF0,$F005080C,$08060000
		dc.l	$0005100C,$1006FFF0,$0005180C,$18060000
loc_12C44:
		dc.w	$0004
		dc.l	$F0050010,$0008FFF0,$F0050810,$08080000
		dc.l	$00051010,$1008FFF0,$00051810,$18080000
loc_12C66:
		dc.w	$0004
		dc.l	$E00B0014,$000AFFE8,$E00B0814,$080A0000
		dc.l	$000B1014,$100AFFE8,$000B1814,$180A0000
loc_12C88:
		dc.w    loc_12C9A-loc_12C88
		dc.w    loc_12C9C-loc_12C88
		dc.w    loc_12CA6-loc_12C88
		dc.w    loc_12CB0-loc_12C88
		dc.w    loc_12CBA-loc_12C88
		dc.w    loc_12CC4-loc_12C88
		dc.w    loc_12CCE-loc_12C88
		dc.w    loc_12CD8-loc_12C88
		dc.w    loc_12CE2-loc_12C88
loc_12C9A:
		dc.w	$0000
loc_12C9C:
		dc.w	$0001
		dc.l	$F8010000,$0000FFFC
loc_12CA6:
		dc.w	$0001
		dc.l	$F8010002,$0001FFFC
loc_12CB0:
		dc.w	$0001
		dc.l	$F8010004,$0002FFFC
loc_12CBA:
		dc.w	$0001
		dc.l	$F8010006,$0003FFFC
loc_12CC4:
		dc.w	$0001
		dc.l	$F8010008,$0004FFFC
loc_12CCE:
		dc.w	$0001
		dc.l	$F805000A,$0005FFF8
loc_12CD8:
		dc.w	$0001
		dc.l	$F805000E,$0007FFF8
loc_12CE2:
		dc.w	$0001
		dc.l	$F00F0012,$0009FFF0
loc_12CEC:		
		dc.w    loc_12CEE-loc_12CEC
loc_12CEE:
		dc.b	$04,$00,$01,$02,$FC,$00  
Obj_0x08_Mappings:		 
loc_12CF4:
		dc.w    loc_12CFA-loc_12CF4
		dc.w    loc_12d0C-loc_12CF4
		dc.w    loc_12d1E-loc_12CF4
loc_12CFA:
		dc.w	$0002
		dc.l	$F204006D,$0036FFF8,$FA0C006F,$0037FFF0
loc_12d0C:
		dc.w	$0002
		dc.l	$E2000073,$0039FFF8,$EA0E0074,$003AFFF0
loc_12d1E:
		dc.w	$0001
		dc.l	$E20F0080,$0040FFF0
;=============================================================================== 
; Object 0x08 - 
; [ End ]
;===============================================================================

;=============================================================================== 
; Sub Routine AnglePos
; [ Begin ]		         
;===============================================================================        
; loc_12d28: Sonic_AnglePos:
AnglePos:
		move.l	#Primary_Collision,(Collision_addr).w
		cmpi.b	#$0C,$003E(a0)
		beq.s	loc_12d40
		move.l	#Secondary_Collision,(Collision_addr).w
loc_12d40:
		move.b	$003E(a0),d5
		btst	#$03,$0022(a0)
		beq.s	loc_12d58
		moveq	#0,d0
		move.b	d0,(Primary_Angle).w
		move.b	d0,(Secondary_Angle).w
		rts
loc_12d58:
		moveq	#$03,d0
		move.b	d0,(Primary_Angle).w
		move.b	d0,(Secondary_Angle).w
		move.b	$0026(a0),d0
		addi.b	#$20,d0
		bpl.s	loc_12d7A
		move.b	$0026(a0),d0
		bpl.s	loc_12d74
		subq.b	#1,d0
loc_12d74:
		addi.b	#$20,d0
		bra.s	loc_12D86
loc_12d7A:
		move.b	$0026(a0),d0
		bpl.s	loc_12D82
		addq.b	#1,d0
loc_12D82:
		addi.b	#$1F,d0
loc_12D86:
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	 Sonic_WalkVertL         ; loc_12FDC
		cmpi.b	#$80,d0
		beq.w	 Sonic_WalkCeiling       ; loc_12F2E
		cmpi.b	#$C0,d0
		beq.w	 Sonic_WalkVertR         ; loc_12E86
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.b	$0017(a0),d0
		ext.w   d0
		add.w   d0,d3
		lea	(Primary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindFloor               ; loc_132C4
		move.w	d1,-(sp)
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.b	$0017(a0),d0
		ext.w   d0
		neg.w	d0
		add.w   d0,d3
		lea	(Secondary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindFloor               ; loc_132C4
		move.w	(sp)+,d0
		bsr.w	Sonic_Angle             ; loc_12E4A
		tst.w	d1
		beq.s	loc_12E10
		bpl.s	loc_12E12
		cmpi.w	#$FFF2,d1
		blt.s   loc_12E10
		add.w   d1,$000C(a0)
loc_12E10:
		rts
loc_12E12:
		move.b	$0010(a0),d0
		bpl.s	loc_12E1A
		neg.b   d0
loc_12E1A:
		addq.b	#$04,d0
		cmpi.b	#$0E,d0
		bcs.s	loc_12E26
		move.b	#$0E,d0
loc_12E26:
		cmp.b	d0,d1
		bgt.s   loc_12E30
loc_12E2A:
		add.w   d1,$000C(a0)
		rts
loc_12E30:
		tst.b	$0038(a0)
		bne.s	loc_12E2A 
		bset	#1,$0022(a0)
		bclr	#$05,$0022(a0)
		move.b	#1,$001D(a0)
		rts
		
;=============================================================================== 
; Sub Routine Sonic_Angle
; [ Begin ]		         
;===============================================================================		   
Sonic_Angle: ; loc_12E4A:
		move.b	(Secondary_Angle).w,d2
		cmp.w	d0,d1
		ble.s   loc_12E58
		move.b	(Primary_Angle).w,d2
		move.w	d0,d1
loc_12E58:
		btst	#$00,d2
		bne.s	loc_12E74
		move.b	d2,d0
		sub.b   $0026(a0),d0
		bpl.s	loc_12E68
		neg.b   d0
loc_12E68:
		cmpi.b	#$20,d0
		bcc.s	loc_12E74
		move.b	d2,$0026(a0)
		rts
loc_12E74:
		move.b	$0026(a0),d2
		addi.b	#$20,d2
		andi.b	#$C0,d2
		move.b	d2,$0026(a0)
		rts  
;===============================================================================		
Sonic_WalkVertR: ; loc_12E86:
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0017(a0),d0
		ext.w   d0
		neg.w	d0
		add.w   d0,d2
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d3
		lea	(Primary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindWall		; loc_1349E
		move.w	d1,-(sp)
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0017(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d3
		lea	(Secondary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindWall		; loc_1349E
		move.w	(sp)+,d0
		bsr.w	Sonic_Angle             ; loc_12E4A		
		tst.w	d1
		beq.s	loc_12EF4
		bpl.s	loc_12EF6
		cmpi.w	#$FFF2,d1
		blt.s   loc_12EF4		 
		add.w   d1,8(a0)
loc_12EF4:
		rts
loc_12EF6:
		move.b	$0012(a0),d0
		bpl.s	loc_12EFE
		neg.b   d0  
loc_12EFE:
		addq.b	#$04,d0
		cmpi.b	#$0E,d0
		bcs.s	loc_12F0A
		move.b	#$0E,d0
loc_12F0A:		
		cmp.b	d0,d1
		bgt.s   loc_12F14
loc_12F0E:
		add.w   d1,8(a0)
		rts
loc_12F14:
		tst.b	$0038(a0)
		bne.s	loc_12F0E
		bset	#1,$0022(a0)
		bclr	#$05,$0022(a0)
		move.b	#1,$001D(a0)
		rts
;===============================================================================		
Sonic_WalkCeiling: ; loc_12F2E:
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d2
		eori.w  #$000F,d2
		move.b	$0017(a0),d0
		ext.w   d0
		add.w   d0,d3
		lea	(Primary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0800,d6
		bsr.w	FindFloor               ; loc_132C4
		move.w	d1,-(sp)
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d2
		eori.w  #$000F,d2
		move.b	$0017(a0),d0
		ext.w   d0
		sub.w   d0,d3
		lea	(Secondary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0800,d6
		bsr.w	FindFloor               ; loc_132C4
		move.w	(sp)+,d0
		bsr.w	Sonic_Angle             ; loc_12E4A
		tst.w	d1
		beq.s	loc_12FA2
		bpl.s	loc_12FA4
		cmpi.w	#$FFF2,d1
		blt.s   loc_12FA2
		sub.w   d1,$000C(a0)
loc_12FA2:
		rts
loc_12FA4:
		move.b	$0010(a0),d0
		bpl.s	loc_12FAC
		neg.b   d0
loc_12FAC:
		addq.b	#$04,d0
		cmpi.b	#$0E,d0
		bcs.s	loc_12FB8
		move.b	#$0E,d0
loc_12FB8:
		cmp.b	d0,d1
		bgt.s   loc_12FC2
loc_12FBC:
		sub.w   d1,$000C(a0)
		rts
loc_12FC2:
		tst.b	$0038(a0)
		bne.s	loc_12FBC   
		bset	#1,$0022(a0)
		bclr	#$05,$0022(a0)
		move.b	#1,$001D(a0)
		rts
;===============================================================================		
Sonic_WalkVertL: ; loc_12FDC:
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0017(a0),d0
		ext.w   d0
		sub.w   d0,d2
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d3
		eori.w  #$000F,d3
		lea	(Primary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0400,d6
		bsr.w	FindWall		; loc_1349E
		move.w	d1,-(sp)
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0017(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d3
		eori.w  #$000F,d3
		lea	(Secondary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0400,d6
		bsr.w	FindWall		; loc_1349E
		move.w	(sp)+,d0
		bsr.w	Sonic_Angle             ; loc_12E4A
		tst.w	d1
		beq.s	loc_13050
		bpl.s	loc_13052
		cmpi.w	#$FFF2,d1
		blt.s   loc_13050
		sub.w   d1,8(a0)
loc_13050:
		rts
loc_13052:
		move.b	$0012(a0),d0
		bpl.s	loc_1305A
		neg.b   d0
loc_1305A:
		addq.b	#$04,d0
		cmpi.b	#$0E,d0
		bcs.s	loc_13066
		move.b	#$0E,d0
loc_13066:		
		cmp.b	d0,d1
		bgt.s   loc_13070
loc_1306A:
		sub.w   d1,8(a0)
		
		rts
loc_13070:
		tst.b	$0038(a0)
		bne.s	loc_1306A
		bset	#1,$0022(a0)  
		bclr	#$05,$0022(a0)
		move.b	#1,$001D(a0)
		rts
		
;=============================================================================== 
; Sub Routine Floor_ChkTile
; [ Begin ]		         
;===============================================================================		  
Floor_ChkTile: ; loc_1308A:
		move.w	d2,d0
		add.w   d0,d0
		andi.w	#$0F00,d0
		move.w	d3,d1
		lsr.w	#$03,d1
		move.w	d1,d4
		lsr.w	#$04,d1
		andi.w	#$007F,d1
		add.w   d1,d0
		moveq	#-1,d1
		clr.w	d1
		lea	(Level_Layout).w,A1
		move.b	$00(A1,d0),d1
		add.w   d1,d1
		move.w	loc_130C4(pc,d1),d1
		move.w	d2,d0
		andi.w	#$0070,d0
		add.w   d0,d1
		andi.w	#$000E,d4
		add.w   d4,d1
		move.l	d1,A1
		rts
loc_130C4:
		dc.w	$0000,$0080,$0100,$0180,$0200,$0280,$0300,$0380
		dc.w	$0400,$0480,$0500,$0580,$0600,$0680,$0700,$0780
		dc.w	$0800,$0880,$0900,$0980,$0A00,$0A80,$0B00,$0B80
		dc.w	$0C00,$0C80,$0d00,$0D80,$0E00,$0E80,$0F00,$0F80
		dc.w	$1000,$1080,$1100,$1180,$1200,$1280,$1300,$1380
		dc.w	$1400,$1480,$1500,$1580,$1600,$1680,$1700,$1780
		dc.w	$1800,$1880,$1900,$1980,$1A00,$1A80,$1B00,$1B80
		dc.w	$1C00,$1C80,$1d00,$1D80,$1E00,$1E80,$1F00,$1F80
		dc.w	$2000,$2080,$2100,$2180,$2200,$2280,$2300,$2380
		dc.w	$2400,$2480,$2500,$2580,$2600,$2680,$2700,$2780
		dc.w	$2800,$2880,$2900,$2980,$2A00,$2A80,$2B00,$2B80
		dc.w	$2C00,$2C80,$2d00,$2D80,$2E00,$2E80,$2F00,$2F80
		dc.w	$3000,$3080,$3100,$3180,$3200,$3280,$3300,$3380
		dc.w	$3400,$3480,$3500,$3580,$3600,$3680,$3700,$3780
		dc.w	$3800,$3880,$3900,$3980,$3A00,$3A80,$3B00,$3B80
		dc.w	$3C00,$3C80,$3d00,$3D80,$3E00,$3E80,$3F00,$3F80
		dc.w	$4000,$4080,$4100,$4180,$4200,$4280,$4300,$4380
		dc.w	$4400,$4480,$4500,$4580,$4600,$4680,$4700,$4780
		dc.w	$4800,$4880,$4900,$4980,$4A00,$4A80,$4B00,$4B80
		dc.w	$4C00,$4C80,$4d00,$4D80,$4E00,$4E80,$4F00,$4F80
		dc.w	$5000,$5080,$5100,$5180,$5200,$5280,$5300,$5380
		dc.w	$5400,$5480,$5500,$5580,$5600,$5680,$5700,$5780
		dc.w	$5800,$5880,$5900,$5980,$5A00,$5A80,$5B00,$5B80
		dc.w	$5C00,$5C80,$5d00,$5D80,$5E00,$5E80,$5F00,$5F80
		dc.w	$6000,$6080,$6100,$6180,$6200,$6280,$6300,$6380
		dc.w	$6400,$6480,$6500,$6580,$6600,$6680,$6700,$6780
		dc.w	$6800,$6880,$6900,$6980,$6A00,$6A80,$6B00,$6B80
		dc.w	$6C00,$6C80,$6d00,$6D80,$6E00,$6E80,$6F00,$6F80
		dc.w	$7000,$7080,$7100,$7180,$7200,$7280,$7300,$7380
		dc.w	$7400,$7480,$7500,$7580,$7600,$7680,$7700,$7780
		dc.w	$7800,$7880,$7900,$7980,$7A00,$7A80,$7B00,$7B80
		dc.w	$7C00,$7C80,$7d00,$7D80,$7E00,$7E80,$7F00,$7F80
		
;=============================================================================== 
; Sub Routine FindFloor
; [ Begin ]		         
;===============================================================================		  
FindFloor: ; loc_132C4:		
		bsr.w	Floor_ChkTile           ; loc_1308A
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$03FF,d0
		beq.s	loc_132d6
		btst	d5,d4
		bne.s	loc_132E4
loc_132d6:
		add.w   A3,d2
		bsr.w	FindFloor2              ; loc_1336A
		sub.w   A3,d2
		addi.w	#$0010,d1
		rts
loc_132E4:
		move.l	(Collision_addr).w,A2
		add.w   d0,d0
		move.w	$00(A2,d0),d0
		beq.s	loc_132d6
		lea	(AngleMap).l,A2          ; loc_2d1EA
		move.b	$00(A2,d0),(a4)
		lsl.w	#$04,d0
		move.w	d3,d1
		btst	#$0A,d4
		beq.s	loc_13308
		not.w   d1
		neg.b   (a4)
loc_13308:
		btst	#$0B,d4
		beq.s	loc_13318
		addi.b	#$40,(a4)
		neg.b   (a4)
		subi.b	#$40,(a4)		
loc_13318:
		andi.w	#$000F,d1
		add.w   d0,d1
		lea	(Colision_Array_1).l,A2  ; loc_2d2EA
		move.b	$00(A2,d1),d0
		ext.w   d0
		eor.w   d6,d4
		btst	#$0B,d4
		beq.s	loc_13334
		neg.w	d0
loc_13334:
		tst.w	d0
		beq.s	loc_132d6
		bmi.s	loc_13350
		cmpi.b	#$10,d0
		beq.s	loc_1335C
		move.w	d2,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		move.w	#$000F,d1
		sub.w   d0,d1
		rts
loc_13350:
		move.w	d2,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		bpl.w	 loc_132d6
loc_1335C:		
		sub.w   A3,d2
		bsr.w	FindFloor2              ; loc_1336A
		add.w   A3,d2
		subi.w	#$0010,d1
		rts
;=============================================================================== 
; Sub Routine FindFloor
; [ End ]		         
;=============================================================================== 

;=============================================================================== 
; Sub Routine FindFloor2
; [ Begin ]		         
;===============================================================================		 
FindFloor2: ; loc_1336A:
		bsr.w	Floor_ChkTile           ; loc_1308A
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$03FF,d0
		beq.s	loc_1337C
		btst	d5,d4
		bne.s	loc_1338A
loc_1337C:
		move.w	#$000F,d1
		move.w	d2,d0
		andi.w	#$000F,d0
		sub.w   d0,d1
		rts
loc_1338A:
		move.l	(Collision_addr).w,A2
		add.w   d0,d0
		move.w	$00(A2,d0),d0
		beq.s	loc_1337C
		lea	(AngleMap).l,A2          ; loc_2d1EA
		move.b	$00(A2,d0),(a4)
		lsl.w	#$04,d0
		move.w	d3,d1
		btst	#$0A,d4
		beq.s	loc_133AE
		not.w   d1
		neg.b   (a4)
loc_133AE:
		btst	#$0B,d4
		beq.s	loc_133BE
		addi.b	#$40,(a4)
		neg.b   (a4)
		subi.b	#$40,(a4)
loc_133BE:
		andi.w	#$000F,d1
		add.w   d0,d1
		lea	(Colision_Array_1).l,A2  ; loc_2d2EA
		move.b	$00(A2,d1),d0		  
		ext.w   d0
		eor.w   d6,d4
		btst	#$0B,d4
		beq.s	loc_133DA
		neg.w	d0		 
loc_133DA:
		tst.w	d0
		beq.s	loc_1337C 
		bmi.s	loc_133F0
		move.w	d2,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		move.w	#$000F,d1
		sub.w   d0,d1
		rts
loc_133F0:
		move.w	d2,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		bpl.w	 loc_1337C
		not.w  d1
		rts
loc_13400:
		bsr.w	Floor_ChkTile           ; loc_1308A
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$03FF,d0
		beq.s	loc_13412
		btst	d5,d4
		bne.s	loc_13418
loc_13412:
		move.w	#$0010,d1
		rts
loc_13418:
		move.l	(Collision_addr).w,A2
		add.w   d0,d0
		move.w	$00(A2,d0),d0
		beq.s	loc_13412
		lea	(AngleMap).l,A2          ; loc_2d1EA
		move.b	$00(A2,d0),(a4)
		lsl.w	#$04,d0
		move.w	d3,d1
		btst	#$0A,d4
		beq.s	loc_1343C
		not.w   d1
		neg.b   (a4)
loc_1343C:
		btst	#$0B,d4
		beq.s	loc_1344C
		addi.b	#$40,(a4)
		neg.b   (a4)
		subi.b	#$40,(a4)
loc_1344C:
		andi.w	#$000F,d1
		add.w   d0,d1
		lea	(Colision_Array_1).l,A2  ; loc_2d2EA
		move.b	$00(A2,d1),d0
		ext.w   d0
		eor.w   d6,d4
		btst	#$0B,d4
		beq.s	loc_13468
		neg.w	d0
loc_13468:
		tst.w	d0
		beq.s	loc_13412
		bmi.s	loc_13484
		cmpi.b	#$10,d0
		beq.s	loc_13490
		move.w	d2,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		move.w	#$000F,d1
		sub.w   d0,d1
		rts
loc_13484:
		move.w	d2,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		bpl.w	 loc_13412
loc_13490:
		sub.w   A3,d2
		bsr.w	FindFloor2              ; loc_1336A
		add.w   A3,d2
		subi.w	#$0010,d1
		rts
;=============================================================================== 
; Sub Routine FindFloor2
; [ End ]		         
;===============================================================================		 
            
;=============================================================================== 
; Sub Routine FindWall
; [ Begin ]		         
;===============================================================================		  
FindWall: ; loc_1349E:
		bsr.w	Floor_ChkTile           ; loc_1308A
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$03FF,d0
		beq.s	loc_134B0
		btst	d5,d4
		bne.s	loc_134BE
loc_134B0:
		add.w   A3,d3
		bsr.w	FindWall2               ; loc_13544
		sub.w   A3,d3
		addi.w	#$0010,d1
		rts
loc_134BE:
		move.l	(Collision_addr).w,A2
		add.w   d0,d0
		move.w	$00(A2,d0),d0
		beq.s	loc_134B0
		lea	(AngleMap).l,A2          ; loc_2d1EA
		move.b	$00(A2,d0),(a4)
		lsl.w	#$04,d0
		move.w	d2,d1
		btst	#$0B,d4
		beq.s	loc_134EA
		not.w   d1
		addi.b	#$40,(a4)
		neg.b   (a4)
		subi.b	#$40,(a4)
loc_134EA:
		btst	#$0A,d4
		beq.s	loc_134F2
		neg.b   (a4)
loc_134F2:
		andi.w	#$000F,d1
		add.w   d0,d1
		lea	(Colision_Array_2).l,A2  ; loc_2E2EA
		move.b	$00(A2,d1),d0
		ext.w   d0
		eor.w   d6,d4
		btst	#$0A,d4
		beq.s	loc_1350E
		neg.w	d0
loc_1350E:
		tst.w	d0
		beq.s	loc_134B0
		bmi.s	loc_1352A
		cmpi.b	#$10,d0
		beq.s	loc_13536
		move.w	d3,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		move.w	#$000F,d1
		sub.w   d0,d1
		rts
loc_1352A:
		move.w	d3,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		bpl.w	 loc_134B0
loc_13536:
		sub.w   A3,d3
		bsr.w	FindWall2               ; loc_13544
		add.w   A3,d3
		subi.w	#$0010,d1
		rts
;=============================================================================== 
; Sub Routine FindWall
; [ End ]		         
;===============================================================================    

;=============================================================================== 
; Sub Routine FindWall2
; [ Begin ]		         
;===============================================================================		 
FindWall2: ; loc_13544:
		bsr.w	Floor_ChkTile           ; loc_1308A
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$03FF,d0
		beq.s	loc_13556
		btst	d5,d4
		bne.s	loc_13564
loc_13556:
		move.w	#$000F,d1
		move.w	d3,d0
		andi.w	#$000F,d0
		sub.w   d0,d1
		rts
loc_13564:
		move.l	(Collision_addr).w,A2
		add.w   d0,d0
		move.w	$00(A2,d0),d0
		beq.s	loc_13556
		lea	(AngleMap).l,A2          ; loc_2d1EA
		move.b	$00(A2,d0),(a4)
		lsl.w	#$04,d0
		move.w	d2,d1
		btst	#$0B,d4
		beq.s	loc_13590
		not.w   d1
		addi.b	#$40,(a4)
		neg.b   (a4)
		subi.b	#$40,(a4)
loc_13590:
		btst	#$0A,d4
		beq.s	loc_13598
		neg.b   (a4)
loc_13598:
		andi.w	#$000F,d1
		add.w   d0,d1
		lea	(Colision_Array_2).l,A2  ; loc_2E2EA
		move.b	$00(A2,d1),d0
		ext.w   d0
		eor.w   d6,d4
		btst	#$0A,d4
		beq.s	loc_135B4
		neg.w	d0
loc_135B4:		
		tst.w	d0
		beq.s	loc_13556
		bmi.s	loc_135CA
		move.w	d3,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		move.w	#$000F,d1
		sub.w   d0,d1
		rts
loc_135CA:
		move.w	d3,d1
		andi.w	#$000F,d1
		add.w   d1,d0
		bpl.w	 loc_13556
		not.w  d1
		rts
;=============================================================================== 
; Sub Routine FindWall2
; [ End ]		         
;===============================================================================  

; ---------------------------------------------------------------------------
; This subroutine takes 'raw' bitmap-like collision block data as input and
; converts it into the proper collision arrays (ColArray and ColArray2).
; Pointers to said raw data are dummied out.
;
; Since this would require a special read/write cartridge,it will NOT
; function normally; the same code exists in Sonic 1 and Sonic CD (with it
; working in the latter due to the Sega CD storing code in RAM),as well
; as the Nick Arcade prototype,where it converts GHZ's collision format
; to S2's standard
; ---------------------------------------------------------------------------

RawColBlocks		= Colision_Array_1
ConvRowColBlocks	= Colision_Array_1

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; return_135DA: FloorLog_Unk:
ConvertCollisionArray:
		rts
; ---------------------------------------------------------------------------
; loc_135DC:
		; The raw format stores the collision data column by column for the normal collision array.
		; This makes a copy of the data,but stored row by row,for the rotated collision array.
		lea	(RawColBlocks).l,a1
		lea	(ConvRowColBlocks).l,a2

		move.w	#$100-1,d3	; number of blocks in collision data

loc_135EC:
		moveq	#$10,d5
		move.w	#$000F,d2
loc_135F2:		
		moveq	#0,d4
		move.w	#$000F,d1
loc_135F8:		
		move.w	(a1)+,d0
		lsr.l	d5,d0
		addx.w  d4,d4
		dbf	d1,loc_135F8
		move.w	d4,(a2)+
		suba.w  #$0020,A1
		subq.w	#1,d5
		dbf	d2,loc_135F2
		adda.w	#$0020,A1
		dbf	d3,loc_135EC
		lea	(ConvRowColBlocks).l,A1  ; loc_2d2EA
		lea	(Colision_Array_2).l,A2  ; loc_2E2EA
		bsr.s	loc_13630
		lea	(RawColBlocks).l,A1  ; loc_2d2EA
		lea	(Colision_Array_1).l,A2  ; loc_2d2EA
loc_13630:				
		move.w	#$0FFF,d3
loc_13634:		
		moveq	#0,d2
		move.w	#$000F,d1
		move.w	(a1)+,d0
		beq.s	loc_13662
		bmi.s	loc_1364C
loc_13640:		
		lsr.w	#1,d0
		bcc.s	loc_13646
		addq.b	#1,d2
loc_13646:
		dbf	d1,loc_13640
		bra.s	loc_13664
loc_1364C:
		cmpi.w	#$FFFF,d0
		beq.s	loc_1365E
loc_13652:		
		lsl.w	#1,d0
		bcc.s	loc_13658
		subq.b	#1,d2
loc_13658:
		dbf	d1,loc_13652
		bra.s	loc_13664
loc_1365E:
		move.w	#$0010,d0
loc_13662:
		move.w	d0,d2
loc_13664:
		move.b	d2,(a2)+
		dbf	d3,loc_13634
		rts
;=============================================================================== 
; Sub Routine Sonic_WalkSpeed
; [ Begin ]		         
;===============================================================================				  
Sonic_WalkSpeed: ; loc_1366C:
		move.l	#Primary_Collision,(Collision_addr).w
		cmpi.b	#$0C,$003E(a0)
		beq.s	loc_13684
		move.l	#Secondary_Collision,(Collision_addr).w
loc_13684:
		move.b	$003F(a0),d5
		move.l	8(a0),d3
		move.l	$000C(a0),d2
		move.w	$0010(a0),d1
		ext.l   d1
		asl.l   #$08,d1
		add.l   d1,d3
		move.w	$0012(a0),d1
		ext.l   d1
		asl.l   #$08,d1
		add.l   d1,d2
		swap	d2
		swap	d3
		move.b	d0,(Primary_Angle).w
		move.b	d0,(Secondary_Angle).w
		move.b	d0,d1
		addi.b	#$20,d0
		bpl.s	loc_136C4
		move.b	d1,d0
		bpl.s	loc_136BE
		subq.b	#1,d0
loc_136BE:
		addi.b	#$20,d0
		bra.s	loc_136CE
loc_136C4:
		move.b	d1,d0
		bpl.s	loc_136CA
		addq.b	#1,d0
loc_136CA:
		addi.b	#$1F,d0
loc_136CE:
		andi.b	#$C0,d0
		beq.w	 loc_137CE
		cmpi.b	#$80,d0
		beq.w	 loc_13A3C
		andi.b	#$38,d1
		bne.s	loc_136E6
		addq.w	#$08,d2
loc_136E6:
		cmpi.b	#$40,d0
		beq.w	 loc_13B04
		bra.w	loc_13982		    
loc_136F2:
		move.l	#Primary_Collision,(Collision_addr).w
		cmpi.b	#$0C,$003E(a0)
		beq.s	loc_1370A
		move.l	#Secondary_Collision,(Collision_addr).w
loc_1370A:
		move.b	$003F(a0),d5
		move.b	d0,(Primary_Angle).w
		move.b	d0,(Secondary_Angle).w
		addi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	 loc_13A94
		cmpi.b	#$80,d0
		beq.w	 Sonic_DontRunOnWalls    ; loc_139CC
		cmpi.b	#$C0,d0
		beq.w	 loc_1391A
loc_13736:		
		move.l	#Primary_Collision,(Collision_addr).w
		cmpi.b	#$0C,$003E(a0)
		beq.s	loc_1374E
		move.l	#Secondary_Collision,(Collision_addr).w
loc_1374E:
		move.b	$003E(a0),d5
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.b	$0017(a0),d0
		ext.w   d0
		add.w   d0,d3
		lea	(Primary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindFloor               ; loc_132C4
		move.w	d1,-(sp)
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.b	$0017(a0),d0
		ext.w   d0
		sub.w   d0,d3
		lea	(Secondary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindFloor               ; loc_132C4
		move.w	(sp)+,d0
		move.b	#$00,d2
loc_137AE:		
		move.b	(Secondary_Angle).w,d3
		cmp.w	d0,d1
		ble.s   loc_137BC
		move.b	(Primary_Angle).w,d3
		exg.l   d0,d1
loc_137BC:
		btst	#$00,d3
		beq.s	loc_137C4
		move.b	d2,d3
loc_137C4:
		rts
; loc_137C6:
		move.w	$000C(a0),d2
		move.w	8(a0),d3		
loc_137CE:
		addi.w	#$000A,d2
		lea	(Primary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindFloor               ; loc_132C4
		move.b	#$00,d2
loc_137E6:		
		move.b	(Primary_Angle).w,d3
		btst	#$00,d3
		beq.s	loc_137F2
		move.b	d2,d3
loc_137F2:
		rts 
		
;=============================================================================== 
; Sub Routine ChkFloorEdge
; [ Begin ]		         
;===============================================================================		               
; loc_137F4: Sonic_HitFloor:
ChkFloorEdge:
		move.w	8(a0),d3
		move.w	$000C(a0),d2
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.l	#Primary_Collision,(Collision_addr).w
		cmpi.b	#$0C,$003E(a0)
		beq.s	loc_1381E
		move.l	#Secondary_Collision,(Collision_addr).w
loc_1381E:
		lea	(Primary_Angle).w,A4
		move.b	#$00,(a4)
		move.w	#$0010,A3
		move.w	#0,d6
		move.b	$003E(a0),d5
		bsr.w	FindFloor               ; loc_132C4
		move.b	(Primary_Angle).w,d3
		btst	#$00,d3
		beq.s	loc_13844
		move.b	#$00,d3
loc_13844:
		rts
;=============================================================================== 
; Sub Routine ChkFloorEdge
; [ End ]		         
;===============================================================================		  

;=============================================================================== 
; Sub Routine ChkFloorEdge2
; [ Begin ]		         
;===============================================================================		 
; loc_13846: Sonic_HitFloor2:
ChkFloorEdge2:
		move.w	8(a1),d3
		move.w	$000C(a1),d2
		moveq	#0,d0
		move.b	$0016(a1),d0
		ext.w   d0
		add.w   d0,d2
		move.l	#Primary_Collision,(Collision_addr).w
		cmpi.b	#$0C,$003E(a1)
		beq.s	loc_13870
		move.l	#Secondary_Collision,(Collision_addr).w
loc_13870:
		lea	(Primary_Angle).w,A4
		move.b	#$00,(a4)
		move.w	#$0010,A3
		move.w	#0,d6
		move.b	$003E(a1),d5
		bsr.w	FindFloor               ; loc_132C4
		move.b	(Primary_Angle).w,d3
		btst	#$00,d3
		beq.s	loc_13896
		move.b	#$00,d3
loc_13896:
		rts
;=============================================================================== 
; Sub Routine ChkFloorEdge2
; [ End ]		         
;===============================================================================   

;=============================================================================== 
; Sub Routine ObjHitFloor
; [ Begin ]		         
;===============================================================================		   
ObjHitFloor: ; loc_13898:
		move.w	8(a0),d3
ObjHitFloor2: ; loc_1389C:               
		move.w	$000C(a0),d2
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d2
		lea	(Primary_Angle).w,A4
		move.b	#$00,(a4)
		move.w	#$0010,A3
		move.w	#0,d6
		moveq	#$0C,d5
		bsr.w	FindFloor               ; loc_132C4
		move.b	(Primary_Angle).w,d3
		btst	#$00,d3
		beq.s	loc_138CC
		move.b	#$00,d3
loc_138CC:
		rts 
;=============================================================================== 
; Sub Routine ObjHitFloor
; [ End ]		         
;===============================================================================  
		 
loc_138CE:
		move.w	8(a1),d3
		move.w	$000C(a1),d2
		move.b	$0016(a1),d0
		ext.w   d0
		add.w   d0,d2
		lea	(Primary_Angle).w,A4
		move.b	#$00,(a4)
		move.w	#$0010,A3
		move.w	#0,d6
		moveq	#$0C,d5
		bra.w	FindFloor               ; loc_132C4
loc_138F4:
		move.w	8(a0),d3
		move.w	$000C(a0),d2
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d2
		lea	(Primary_Angle).w,A4
		move.b	#$00,(a4)
		move.w	#$0010,A3
		move.w	#0,d6
		moveq	#$0C,d5
		bra.w	loc_13400
;===============================================================================		
loc_1391A:
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0017(a0),d0
		ext.w   d0
		sub.w   d0,d2
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d3
		lea	(Primary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindWall		; loc_1349E
		move.w	d1,-(sp)
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0017(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.b	$0016(a0),d0
		ext.w   d0
		add.w   d0,d3
		lea	(Secondary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindWall		; loc_1349E
		move.w	(sp)+,d0
		move.b	#$C0,d2
		bra.w	loc_137AE 
;===============================================================================		               
loc_1397A:
		move.w	$000C(a0),d2
		move.w	8(a0),d3		
loc_13982:
		addi.w	#$000A,d3
		lea	(Primary_Angle).w,A4
		move.w	#$0010,A3
		move.w	#0,d6
		bsr.w	FindWall		; loc_1349E
		move.b	#$C0,d2
		bra.w	loc_137E6 
		  
;=============================================================================== 
; Sub Routine ObjHitWallRight
; [ Begin ]		         
;===============================================================================		  
ObjHitWallRight: ; loc_1399E:
		add.w   8(a0),d3
		move.w	$000C(a0),d2
		lea	(Primary_Angle).w,A4
		move.b	#$00,(a4)
		move.w	#$0010,A3
		move.w	#0,d6
		moveq	#$0D,d5
		bsr.w	FindWall		; loc_1349E
		move.b	(Primary_Angle).w,d3
		btst	#$00,d3
		beq.s	loc_139CA
		move.b	#$C0,d3
loc_139CA:
		rts
;=============================================================================== 
; Sub Routine ObjHitWallRight
; [ End ]		         
;===============================================================================		  
		
;=============================================================================== 
; Sub Routine Sonic_DontRunOnWalls
; [ Begin ]		         
;===============================================================================		  
Sonic_DontRunOnWalls: ; loc_139CC:
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d2
		eori.w  #$000F,d2
		move.b	$0017(a0),d0
		ext.w   d0
		add.w   d0,d3
		lea	(Primary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0800,d6
		bsr.w	FindFloor               ; loc_132C4
		move.w	d1,-(sp)
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d2
		eori.w  #$000F,d2
		move.b	$0017(a0),d0
		ext.w   d0
		sub.w   d0,d3
		lea	(Secondary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0800,d6
		bsr.w	FindFloor               ; loc_132C4
		move.w	(sp)+,d0
		move.b	#$80,d2
		bra.w	loc_137AE
;=============================================================================== 
; Sub Routine Sonic_DontRunOnWalls
; [ End ]		         
;===============================================================================               
              
;loc_13A34:
		move.w	$000C(a0),d2
		move.w	8(a0),d3
loc_13A3C:
		subi.w	#$000A,d2
		eori.w  #$000F,d2
		lea	(Primary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0800,d6
		bsr.w	FindFloor               ; loc_132C4
		move.b	#$80,d2
		bra.w	loc_137E6 
;===============================================================================		
; ObjHitCeiling ; loc_13A5C:
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d2
		eori.w  #$000F,d2
		lea	(Primary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0800,d6
		moveq	#$0D,d5
		bsr.w	FindFloor               ; loc_132C4
		move.b	(Primary_Angle).w,d3
		btst	#$00,d3
		beq.s	loc_13A92
		move.b	#$80,d3
loc_13A92:
		rts
;===============================================================================		
loc_13A94:
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0017(a0),d0
		ext.w   d0
		sub.w   d0,d2
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d3
		eori.w  #$000F,d3
		lea	(Primary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0400,d6
		bsr.w	FindWall		; loc_1349E
		move.w	d1,-(sp)
		move.w	$000C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$0017(a0),d0
		ext.w   d0
		add.w   d0,d2
		move.b	$0016(a0),d0
		ext.w   d0
		sub.w   d0,d3
		eori.w  #$000F,d3
		lea	(Secondary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0400,d6
		bsr.w	FindWall		; loc_1349E
		move.w	(sp)+,d0
		move.b	#$40,d2
		bra.w	loc_137AE   
		
;=============================================================================== 
; Sub Routine Sonic_HitWall
; [ Begin ]		         
;===============================================================================		   
Sonic_HitWall: ; loc_13AFC:
		move.w	$000C(a0),d2
		move.w	8(a0),d3		
loc_13B04:
		subi.w	#$000A,d3
		eori.w  #$000F,d3
		lea	(Primary_Angle).w,A4
		move.w	#$FFF0,A3
		move.w	#$0400,d6
		bsr.w	FindWall		; loc_1349E
		move.b	#$40,d2
		bra.w	loc_137E6    
;===============================================================================				             
ObjHitWallLeft: ; loc_13B24:
		add.w   8(a0),d3
		move.w	$000C(a0),d2
		lea	(Primary_Angle).w,A4
		move.b	#$00,(a4)
		move.w	#$FFF0,A3
		move.w	#$0400,d6
		moveq	#$0D,d5
		bsr.w	FindWall		; loc_1349E
		move.b	(Primary_Angle).w,d3
		btst	#$00,d3
		beq.s	loc_13B50
		move.b	#$40,d3
loc_13B50:
		rts
		nop		             ; Filler
;=============================================================================== 
; Object 0x79 - Lamp Post
; [ Begin ]
;===============================================================================		      
Obj_0x79_Lamp_Post: ; loc_13B54:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_13B68(pc,d0),d1
		jsr	loc_13B68(pc,d1)
		jmp     MarkObjGone             ; (loc_d2A0)
loc_13B68:
		dc.w    loc_13B6E-loc_13B68
		dc.w    loc_13Bd0-loc_13B68
		dc.w    loc_13C58-loc_13B68
loc_13B6E:
		addq.b	#$02,$0024(a0)
		move.l	#Obj79_MapUnc_13D8E,$0004(a0) ; loc_13D8E
		move.w	#$047C,$0002(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$04,$0001(a0)
		move.b	#$08,$0019(a0)
		move.b	#$05,$0018(a0)
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		bclr	#$07,$02(A2,d0)
		btst	#$00,$02(A2,d0)
		bne.s	loc_13BC2
		move.b	(Last_star_pole_hit).w,d1
		andi.b	#$7F,d1
		move.b	$0028(a0),d2
		andi.b	#$7F,d2
		cmp.b	d2,d1
		bcs.s	loc_13Bd0
loc_13BC2:
		bset	#$00,$02(A2,d0)
		move.b	#$04,$0024(a0)
		rts
loc_13Bd0:
		tst.w	(Debug_placement_mode).w
		bne.w	 loc_13C56
		tst.b	(MainCharacter+$2A).w
		bmi.w	 loc_13C56
		move.b	(Last_star_pole_hit).w,d1
		andi.b	#$7F,d1
		move.b	$0028(a0),d2
		andi.b	#$7F,d2
		cmp.b	d2,d1
		bcs.s	loc_13C0E
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		bset	#$00,$02(A2,d0)
		move.b	#$04,$0024(a0)
		bra.w	loc_13C56
loc_13C0E:
		move.w	(MainCharacter+8).w,d0
		sub.w   8(a0),d0
		addi.w	#8,d0
		cmpi.w	#$0010,d0
		bcc.w	 loc_13C56
		move.w	(MainCharacter+$C).w,d0
		sub.w   $000C(a0),d0
		addi.w	#$0040,d0
		cmpi.w	#$0068,d0
		bcc.s	loc_13C56
		move.w	#SndID_Checkpoint,d0
		jsr	(PlaySound).l             ; loc_14C6
		addq.b	#$02,$0024(a0)
		bsr.w	Lamp_Post_Save_Info     ; loc_13C6A
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		bset	#$00,$02(A2,d0)
loc_13C56:
		rts
loc_13C58:
		move.b	(Vint_runcount+3).w,d0
		andi.b	#$02,d0
		lsr.b	#1,d0
		addq.b	#1,d0
		move.b	d0,$001A(a0)
		rts
Lamp_Post_Save_Info: ; loc_13C6A:
		move.b	$0028(a0),(Last_star_pole_hit).w
		move.b	(Last_star_pole_hit).w,(Saved_Last_star_pole_hit).w
		move.w	8(a0),(Saved_x_pos).w
		move.w	$000C(a0),(Saved_y_pos).w
		move.w	(Ring_count).w,(Saved_Ring_count).w
		move.b	(Extra_life_flags).w,(Saved_Extra_life_flags).w
		move.l	(Timer).w,(Saved_Timer).w
		move.b	(Dynamic_Resize_Routine).w,(Saved_Dynamic_Resize_Routine).w
		move.w	(Camera_Max_Y_pos_now).w,(Saved_Camera_Max_Y_pos).w
		move.w	(Camera_X_pos).w,(Saved_Camera_X_pos).w
		move.w	(Camera_Y_pos).w,(Saved_Camera_Y_pos).w
		move.w	(Camera_BG_X_pos).w,(Saved_Camera_BG_X_pos).w
		move.w	(Camera_BG_Y_pos).w,(Saved_Camera_BG_Y_pos).w
		move.w	(Camera_BG2_X_pos).w,(Saved_Camera_BG2_X_pos).w
		move.w	(Camera_BG2_Y_pos).w,(Saved_Camera_BG2_Y_pos).w
		move.w	(Camera_BG3_X_pos).w,(Saved_Camera_BG3_X_pos).w
		move.w	(Camera_BG3_Y_pos).w,(Saved_Camera_BG3_Y_pos).w
		move.w	(Water_Level_2).w,(Saved_Water_Level).w
		move.b	(Water_routine).w,(Saved_Water_routine).w
		move.b	(Water_fullscreen_flag).w,(Saved_Water_move).w
		rts
Lamp_Post_Load_Info: ; loc_13CE4:
		move.b	(Saved_Last_star_pole_hit).w,(Last_star_pole_hit).w
		move.w	(Saved_x_pos).w,(MainCharacter+8).w
		move.w	(Saved_y_pos).w,(MainCharacter+$C).w
		move.w	(Saved_Ring_count).w,(Ring_count).w
		move.b	(Saved_Extra_life_flags).w,(Extra_life_flags).w
		clr.w	(Ring_count).w
		clr.b   (Extra_life_flags).w
		move.l	(Saved_Timer).w,(Timer).w
		move.b	#$3B,(Timer_frame).w
		subq.b	#1,(Timer_second).w
		move.b	(Saved_Dynamic_Resize_Routine).w,(Dynamic_Resize_Routine).w
		move.b	(Saved_Water_routine).w,(Water_routine).w
		move.w	(Saved_Camera_Max_Y_pos).w,(Camera_Max_Y_pos_now).w
		move.w	(Saved_Camera_Max_Y_pos).w,(Camera_Max_Y_pos).w
		move.w	(Saved_Camera_X_pos).w,(Camera_X_pos).w
		move.w	(Saved_Camera_Y_pos).w,(Camera_Y_pos).w
		move.w	(Saved_Camera_BG_X_pos).w,(Camera_BG_X_pos).w
		move.w	(Saved_Camera_BG_Y_pos).w,(Camera_BG_Y_pos).w
		move.w	(Saved_Camera_BG2_X_pos).w,(Camera_BG2_X_pos).w
		move.w	(Saved_Camera_BG2_Y_pos).w,(Camera_BG2_Y_pos).w
		move.w	(Saved_Camera_BG3_X_pos).w,(Camera_BG3_X_pos).w
		move.w	(Saved_Camera_BG3_Y_pos).w,(Camera_BG3_Y_pos).w
		tst.b	(Water_flag).w
		beq.s	loc_13d7A
		move.w	(Saved_Water_Level).w,(Water_Level_2).w
		move.b	(Saved_Water_routine).w,(Water_routine).w
		move.b	(Saved_Water_move).w,(Water_fullscreen_flag).w
loc_13d7A:
		tst.b	(Last_star_pole_hit).w
		bpl.s	loc_13D8C
		move.w	(Saved_x_pos).w,d0
		subi.w	#$00A0,d0
		move.w	d0,(Camera_Min_X_pos).w
loc_13D8C:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj79_MapUnc_13D8E:	binclude	"mappings/sprite/obj79.bin"
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 7D - Points that can be gotten at the end of an act (leftover from S1)
; ---------------------------------------------------------------------------
; Sprite_13DFC: Obj_0x7D_Hidden_Bonus:
Obj7D:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj7D_Index(pc,d0.w),d1
		jmp	Obj7D_Index(pc,d1.w)
; ===========================================================================
; off_13E0A:
Obj7D_Index:	offsetTable
		offsetTableEntry.w Obj7D_Init
		offsetTableEntry.w Obj7D_Main
; ===========================================================================
; loc_13E0E:
Obj7D_Init:
		moveq	#$10,d2
		move.w	d2,d3
		add.w	d3,d3
		lea	(MainCharacter).w,a1
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bcc.s	Obj7D_NoAdd
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		add.w	d2,d1
		cmp.w	d3,d1
		bcc.s	Obj7D_NoAdd
		tst.w	(Debug_placement_mode).w
		bne.s	Obj7D_NoAdd
		tst.b	(Enter_SpecialStage_flag).w
		bne.s	Obj7D_NoAdd
		addq.b	#2,routine(a0)
		move.l	#Obj7D_MapUnc_13Ed6,4(a0)
		move.w	#$84B6,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#0,$18(a0)
		move.b	#$10,$19(a0)
		move.b	$28(a0),$1A(a0)
		move.w	#$77,$30(a0)
		move.w	#SndID_Bonus,d0
		jsr	(PlaySound).l
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	Obj7D_Points(pc,d0.w),d0
		jsr	(AddPoints).l
; loc_13E90:
Obj7D_NoAdd:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	JmpTo6_DeleteObject
		rts
; ===========================================================================
; loc_13EA4:
JmpTo6_DeleteObject:
		jmp	(DeleteObject).l
; ===========================================================================
; word_13EAA:
Obj7D_Points:
		dc.w	0
		dc.w 1000
		dc.w  100
		dc.w    1
; ===========================================================================
; loc_13EB2:
Obj7D_Main:
		subq.w	#1,$30(a0)
		bmi.s	JmpTo7_DeleteObject
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	JmpTo7_DeleteObject
		jmp	(DisplaySprite).l
; ===========================================================================
; loc_13Ed0:
JmpTo7_DeleteObject:
		jmp	(DeleteObject).l
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
; Hidden_Bonus_Mappings:
Obj7D_MapUnc_13Ed6:
		dc.w    loc_13EDE-Obj7D_MapUnc_13Ed6
		dc.w    loc_13EE0-Obj7D_MapUnc_13Ed6
		dc.w    loc_13EEA-Obj7D_MapUnc_13Ed6
		dc.w    loc_13EF4-Obj7D_MapUnc_13Ed6
loc_13EDE:
		dc.w	$0000
loc_13EE0:
		dc.w	$0001
		dc.l	$F40E0000,$0000FFF0
loc_13EEA:
		dc.w	$0001
		dc.l	$F40E000C,$0006FFF0
loc_13EF4:
		dc.w	$0001
		dc.l	$F40E0018,$000CFFF0
;===============================================================================
; Object 0x7D - Hidden Bonus at end of levels - Sonic 1 Leftover
; [ End ]
;===============================================================================
		nop		             ; Filler
;===============================================================================
; Object ??? - Unknow Object 0x013F00
; [ Begin ]
;===============================================================================
S1_Obj_0x47: ; Unknow_Obj_0x013F00: ; loc_13F00:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_13F0E(pc,d0),d1
		jmp     loc_13F0E(pc,d1)
loc_13F0E:
		dc.w    loc_13F12-loc_13F0E
		dc.w    loc_13F40-loc_13F0E
loc_13F12:
		addq.b	#2,$24(a0)
		move.l	#S1_Obj_0x47_Mappings,4(a0) ; loc_1401E
		move.w	#$380,2(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#$D7,$20(a0)
loc_13F40:
		move.b	$21(a0),d0
		beq.w	loc_14002
		lea	(MainCharacter).w,A1
		bclr	#0,$21(a0)
		beq.s	loc_13F56
		bsr.s	loc_13F6C
loc_13F56:
		lea	(Sidekick).w,A1
		bclr	#1,$21(a0)
		beq.s	loc_13F64
		bsr.s	loc_13F6C
loc_13F64:
		clr.b   $21(a0)
		bra.w	loc_14002
loc_13F6C:
		move.w	8(a0),d1
		move.w	$C(a0),d2
		sub.w   8(a1),d1
		sub.w   $C(a1),d2
		jsr	(CalcAngle).l              ; loc_34A2
		jsr	(CalcSine).l		; loc_320A
		muls.w  #$F900,d1
		asr.l   #8,d1
		move.w	d1,$10(a1)
		muls.w  #$F900,d0
		asr.l   #8,d0
		move.w	d0,$12(a1)
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)
		clr.b   $3C(a1)
		move.b	#1,$1C(a0)
		move.w	#SndID_Bumper,d0
		jsr	(PlaySound).l		; (loc_14C6)
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_13FDA
		cmpi.b	#$8A,2(A2,d0)
		bcc.s	loc_14000
		addq.b	#1,2(A2,d0)
loc_13FDA:
		moveq	#1,d0
		jsr	(AddPoints).l               ; (loc_22Fd0)
		bsr.w	SingleObjLoad        ; loc_E772
		bne.s	loc_14000
		_move.b	#$29,0(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#4,$1A(a1)
loc_14000:
		rts
loc_14002:
		lea	(loc_14010).l,A1
		bsr.w	AnimateSprite           ; loc_d412
		bra.w	MarkObjGone             ; loc_d2A0              
loc_14010:
		dc.w    loc_14014-loc_14010
		dc.w    loc_14017-loc_14010
loc_14014:
		dc.b	$0F,$00,$FF
loc_14017:
		dc.b	$03,$01,$02,$01,$02,$FD,$00
S1_Obj_0x47_Mappings: ; Unknow_Obj_0x013F00_Mappings:   loc_1401E:
		dc.w    loc_14024-S1_Obj_0x47_Mappings
		dc.w    loc_14036-S1_Obj_0x47_Mappings
		dc.w    loc_14048-S1_Obj_0x47_Mappings
loc_14024:
		dc.w	$0002
		dc.l	$F0070000,$0000FFF0,$F0070800,$08000000
loc_14036:
		dc.w	$0002
		dc.l	$F4060008,$0004FFF4,$F4020808,$08040004
loc_14048:
		dc.w	$0002
		dc.l	$F007000E,$0007FFF0,$F007080E,$08070000				  
;=============================================================================== 
; Object ??? - Unknow Object 0x013F00
; [ Begin ]
;===============================================================================          
		nop		             ; Filler
;=============================================================================== 
; Object ??? - Unknow Object 0x01405C
; [ Begin ]
;===============================================================================		  
S1_Obj_0x64: ; Unknow_Obj_0x01405C: ; loc_1405C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1406A(pc,d0),d1
		jmp     loc_1406A(pc,d1)
loc_1406A:
		dc.w    loc_14076-loc_1406A
		dc.w    loc_140D8-loc_1406A
		dc.w    loc_140F2-loc_1406A
		dc.w    loc_141AC-loc_1406A
		dc.w    loc_141CA-loc_1406A
		dc.w    loc_141CE-loc_1406A
loc_14076:
		addq.b	#$02,$0024(a0)
		move.l	#Obj_0x0A_Bubbles_Mappings,$0004(a0) ; loc_14374
		move.w	#$8500,$0002(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$84,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#1,$0018(a0)
		move.b	$0028(a0),d0
		bpl.s	loc_140BE
		addq.b	#$08,$0024(a0)
		andi.w	#$007F,d0
		move.b	d0,$0032(a0)
		move.b	d0,$0033(a0)
		move.b	#$06,$001C(a0)
		bra.w	loc_141CE
loc_140BE:
		move.b	d0,$001C(a0)
		move.w	8(a0),$0030(a0)
		move.w	#$FF78,$0012(a0)
		jsr	 (PseudoRandomNumber).l      ; loc_31E4
		move.b	d0,$0026(a0)
loc_140D8:
		lea	(loc_14348).l,A1
		jsr	 AnimateSprite           ; (loc_d412)
		cmpi.b	#$06,$001A(a0)
		bne.s	loc_140F2
		move.b	#1,$002E(a0)
loc_140F2:
		move.w	(Water_Level_1).w,d0
		cmp.w	$000C(a0),d0
		bcs.s	loc_1410A
loc_140FC		
		move.b	#$06,$0024(a0)
		addq.b	#$03,$001C(a0)
		bra.w	loc_141AC
loc_1410A:
		move.b	$0026(a0),d0
		addq.b	#1,$0026(a0)
		andi.w	#$007F,d0
		lea	(loc_1220C).l,A1
		move.b	$00(A1,d0),d0
		ext.w   d0
		add.w   $0030(a0),d0
		move.w	d0,8(a0)
		tst.b	$002E(a0)
		beq.s	loc_14196
		bsr.w	loc_1430A
		beq.s	loc_14196
		bsr.w	ResumeMusic             ; loc_124FE
		move.w	#SndID_InhalingBubble,d0
		jsr	(PlaySound).l		; (loc_14C6)
		lea	(MainCharacter).w,A1
		clr.w	$0010(a1)
		clr.w	$0012(a1)
		clr.w	$0014(a1)
		move.b	#$15,$001C(a1)
		move.w	#$0023,$002E(a1)
		move.b	#$00,$003C(a1)
		bclr	#$05,$0022(a1)
		bclr	#$04,$0022(a1)
		btst	#$02,$0022(a1)
		beq.w	 loc_140FC
		bclr	#$02,$0022(a1)
		move.b	#$13,$0016(a1)
		move.b	#$09,$0017(a1)
		subq.w	#$05,$000C(a1)
		bra.w	loc_140FC
loc_14196:
		bsr.w	ObjectMove              ; loc_d27A
		tst.b	$0001(a0)
		bpl.s	JmpTo8_DeleteObject
		jmp     DisplaySprite           ; (loc_d3C2)
; loc_141A6:
JmpTo8_DeleteObject:
		jmp	(DeleteObject).l
loc_141AC:
		lea	(loc_14348).l,A1
		jsr	 AnimateSprite           ; (loc_d412)
		tst.b	$0001(a0)
		bpl.s	JmpTo9_DeleteObject
		jmp     DisplaySprite           ; (loc_d3C2)
; loc_141C4:
JmpTo9_DeleteObject:
		jmp	(DeleteObject).l

loc_141CA:
		bra.w	DeleteObject            ; loc_d3B4
loc_141CE:
		tst.w	$0036(a0)
		bne.s	loc_14230
		move.w	(Water_Level_1).w,d0
		cmp.w	$000C(a0),d0
		bcc.w	 loc_142d6
		tst.b	$0001(a0)
		bpl.w	 loc_142d6
		subq.w	#1,$0038(a0)
		bpl.w	 loc_142CA
		move.w	#$0001,$0036(a0)
loc_141F6:		
		jsr	 (PseudoRandomNumber).l      ; loc_31E4
		move.w	d0,d1
		andi.w	#$0007,d0
		cmpi.w	#$0006,d0
		bcc.s	loc_141F6
		move.b	d0,$0034(a0)
		andi.w	#$000C,d1
		lea	(loc_142F8).l,A1
		adda.w	d1,A1
		move.l	A1,$003C(a0)
		subq.b	#1,$0032(a0)
		bpl.s	loc_1422E
		move.b	$0033(a0),$0032(a0)
		bset	#$07,$0036(a0)
loc_1422E:
		bra.s	loc_14238
loc_14230:
		subq.w	#1,$0038(a0)
		bpl.w	 loc_142CA
loc_14238:
		jsr	 (PseudoRandomNumber).l      ; loc_31E4
		andi.w	#$001F,d0
		move.w	d0,$0038(a0)
		bsr.w	SingleObjLoad        ; loc_E772
		bne.s	loc_142AE
		move.w	8(a0),8(a1)
		jsr	 (PseudoRandomNumber).l      ; loc_31E4
		andi.w	#$000F,d0
		subq.w	#$08,d0
		add.w   d0,8(a1)
		move.w	$000C(a0),$000C(a1)
		moveq	#0,d0
		move.b	$0034(a0),d0
		move.l	$003C(a0),A2
		move.b	$00(A2,d0),$0028(a1)
		btst	#$07,$0036(a0)
		beq.s	loc_142AE
		jsr	 (PseudoRandomNumber).l      ; loc_31E4
		andi.w	#$0003,d0
		bne.s	loc_1429A
		bset	#$06,$0036(a0)
		bne.s	loc_142AE
		move.b	#$02,$0028(a1)
loc_1429A:
		tst.b	$0034(a0)
		bne.s	loc_142AE
		bset	#$06,$0036(a0)
		bne.s	loc_142AE
		move.b	#$02,$0028(a1)
loc_142AE:
		subq.b	#1,$0034(a0)
		bpl.s	loc_142CA
		jsr	 (PseudoRandomNumber).l      ; loc_31E4
		andi.w	#$007F,d0
		addi.w	#$0080,d0
		add.w   d0,$0038(a0)
		clr.w	$0036(a0)
loc_142CA:
		lea	(loc_14348).l,A1
		jsr	 AnimateSprite           ; (loc_d412)
loc_142d6:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 DeleteObject            ; loc_d3B4
		move.w	(Water_Level_1).w,d0
		cmp.w	$000C(a0),d0
		bcs.w	 DisplaySprite           ; loc_d3C2
		rts 
loc_142F8:
		dc.w	$0001,$0000,$0000,$0100,$0000,$0001,$0001,$0000
		dc.w	$0100              
loc_1430A:
		tst.b	(MainCharacter+$2A).w
		bmi.s	loc_14344
		lea	(MainCharacter).w,A1
		move.w	8(a1),d0
		move.w	8(a0),d1
		subi.w	#$0010,d1
		cmp.w	d0,d1
		bcc.s	loc_14344
		addi.w	#$0020,d1
		cmp.w	d0,d1
		bcs.s	loc_14344
		move.w	$000C(a1),d0
		move.w	$000C(a0),d1
		cmp.w	d0,d1
		bcc.s	loc_14344
		addi.w	#$0010,d1
		cmp.w	d0,d1
		bcs.s	loc_14344
		moveq	#1,d0
		rts
loc_14344:
		moveq	#0,d0
		rts		
loc_14348:
		dc.w    loc_14356-loc_14348
		dc.w    loc_1435B-loc_14348
		dc.w    loc_14361-loc_14348
		dc.w    loc_14368-loc_14348
		dc.w    loc_14368-loc_14348
		dc.w    loc_1436A-loc_14348
		dc.w    loc_1436F-loc_14348
loc_14356:
		dc.b	$0E,$00,$01,$02,$FC
loc_1435B:
		dc.b	$0E,$01,$02,$03,$04,$FC
loc_14361:
		dc.b	$0E,$02,$03,$04,$05,$06,$FC
loc_14368:
		dc.b	$04,$FC
loc_1436A:
		dc.b	$04,$06,$07,$08,$FC
loc_1436F:
		dc.b	$0F,$13,$14,$15,$FF
Obj_0x0A_Bubbles_Mappings: ; loc_14374:
		dc.w    loc_143A2-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143AC-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143B6-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143C0-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143CA-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143d4-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143DE-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143E8-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1440A-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1442C-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14436-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14440-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1444A-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14454-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1445E-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14468-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14472-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1447C-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14486-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14490-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1449A-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_144A4-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_144AE-Obj_0x0A_Bubbles_Mappings
loc_143A2:
		dc.w	$0001
		dc.l	$FC000000,$0000FFFC
loc_143AC:
		dc.w	$0001
		dc.l	$FC000001,$0000FFFC
loc_143B6:
		dc.w	$0001
		dc.l	$FC000002,$0001FFFC
loc_143C0:
		dc.w	$0001
		dc.l	$F8050003,$0001FFF8
loc_143CA:
		dc.w	$0001
		dc.l	$F8050007,$0003FFF8
loc_143d4:
		dc.w	$0001
		dc.l	$F40A000B,$0005FFF4
loc_143DE:
		dc.w	$0001
		dc.l	$F00F0014,$000AFFF0
loc_143E8:
		dc.w	$0004
		dc.l	$F0050024,$0012FFF0,$F0050824,$08120000
		dc.l	$00051024,$1012FFF0,$00051824,$18120000
loc_1440A:
		dc.w	$0004
		dc.l	$F0050028,$0014FFF0,$F0050828,$08140000
		dc.l	$00051028,$1014FFF0,$00051828,$18140000
loc_1442C:
		dc.w	$0001
		dc.l	$F406002C,$0016FFF8
loc_14436:
		dc.w	$0001
		dc.l	$F4060032,$0019FFF8
loc_14440:
		dc.w	$0001
		dc.l	$F4060038,$001CFFF8
loc_1444A:
		dc.w	$0001
		dc.l	$F406003E,$001FFFF8
loc_14454:
		dc.w	$0001
		dc.l	$F4062044,$2022FFF8
loc_1445E:
		dc.w	$0001
		dc.l	$F406204A,$2025FFF8
loc_14468:
		dc.w	$0001
		dc.l	$F4062050,$2028FFF8
loc_14472:
		dc.w	$0001
		dc.l	$F4062056,$202BFFF8
loc_1447C:
		dc.w	$0001
		dc.l	$F406205C,$202EFFF8
loc_14486:
		dc.w	$0001
		dc.l	$F4062062,$2031FFF8
loc_14490:
		dc.w	$0001
		dc.l	$F8050068,$0034FFF8
loc_1449A:
		dc.w	$0001
		dc.l	$F805006C,$0036FFF8
loc_144A4:
		dc.w	$0001
		dc.l	$F8050070,$0038FFF8
loc_144AE:
		dc.w	$0000		
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 03 - Collision plane/layer switcher
; ---------------------------------------------------------------------------
; Sprite_144B0: Obj_0x03_Layer_Switch:
Obj03:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj03_Index(pc,d0.w),d1
		jsr	Obj03_Index(pc,d1.w)
		tst.w	(Debug_mode_flag).w
		beq.w	MarkObjGone3
		jmp	(MarkObjGone).l
; ===========================================================================
; off_144CC:
Obj03_Index:	offsetTable
		offsetTableEntry.w Obj03_Init
		offsetTableEntry.w Obj03_MainX
		offsetTableEntry.w Obj03_MainY
; ===========================================================================
; loc_144d2:
Obj03_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj03_MapUnc_147d0,4(a0)
		move.w	#$26BC,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)
		move.b	$28(a0),d0
		btst	#2,d0
		beq.s	Obj03_Init_CheckX

; Obj03_Init_CheckY:
		addq.b	#2,routine(a0)	; => Obj03_MainY
		andi.w	#7,d0
		move.b	d0,$1A(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	Obj03_Sizes(pc,d0.w),$32(a0)
		bra.w	Obj03_MainY
; ===========================================================================
; word_14520:
Obj03_Sizes:	dc.w	$20,$40,$80,$100
; ===========================================================================
; loc_14528:
Obj03_Init_CheckX:
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		add.w	d0,d0
		move.w	Obj03_Sizes(pc,d0.w),$32(a0)

; loc_14538:
Obj03_MainX:
		tst.w	(Debug_placement_mode).w
		bne.w	return_1465A
		move.b	#0,$34(a0)
		move.w	$30(a0),d5
		move.w	8(a0),d0
		move.w	d0,d1
		subq.w	#8,d0
		addq.w	#8,d1
		move.w	$C(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		lea	(Obj03_Characters).l,a2
		moveq	#7,d6

loc_1456A:
		move.l	(a2)+,d4
		beq.w	loc_1464A
		move.l	d4,a1
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_1459A
		cmp.w	d1,d4
		bcc.w	loc_1459A
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_1459A
		cmp.w	d3,d4
		bcc.w	loc_1459A
		ori.w	#$8000,d5
		bra.w	loc_1464A
; ===========================================================================

loc_1459A:
		tst.w	d5
		bpl.w	loc_1464A
		swap	d0
		move.b	$28(a0),d0
		bpl.s	loc_145B2
		btst	#1,$22(a1)
		bne.w	loc_14644

loc_145B2:
		move.w	8(a1),d4
		cmp.w	8(a0),d4
		bcs.s	loc_145F6
		btst	#0,1(a0)
		bne.s	loc_145E2
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#3,d0
		beq.s	loc_145E2
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_145E2:
		bclr	#7,2(a1)
		btst	#5,d0
		beq.s	loc_1462E
		bset	#7,2(a1)
		bra.s	loc_1462E
; ===========================================================================

loc_145F6:
		btst	#0,1(a0)
		bne.s	loc_1461C
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#4,d0
		beq.s	loc_1461C
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1461C:
		bclr	#7,2(a1)
		btst	#6,d0
		beq.s	loc_1462E
		bset	#7,2(a1)

loc_1462E:
		move.b	#1,$34(a0)
		tst.w	(Debug_mode_flag).w
		beq.s	loc_14644
		move.w	#SndID_Checkpoint,d0
		jsr	(PlaySound).l

loc_14644:
		swap	d0
		andi.w	#$7FFF,d5

loc_1464A:
		add.l	d5,d5
		dbf	d6,loc_1456A
		swap	d5
		move.b	d5,$30(a0)
		bsr.w	loc_147A0

return_1465A:
		rts
; ===========================================================================
; loc_1465C:
Obj03_MainY:
		tst.w	(Debug_placement_mode).w
		bne.w	return_1477E
		move.b	#0,$34(a0)
		move.w	$30(a0),d5
		move.w	$08(a0),d0
		move.w	d0,d1
		move.w	$32(a0),d4
		sub.w	d4,d0
		add.w	d4,d1
		move.w	$C(a0),d2
		move.w	d2,d3
		subq.w	#8,d2
		addq.w	#8,d3
		lea	(Obj03_Characters).l,a2
		moveq	#7,d6

loc_1468E:
		move.l	(a2)+,d4
		beq.w	loc_1476E
		move.l	d4,a1
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_146BE
		cmp.w	d1,d4
		bcc.w	loc_146BE
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_146BE
		cmp.w	d3,d4
		bcc.w	loc_146BE
		ori.w	#$8000,d5
		bra.w	loc_1476E
; ===========================================================================

loc_146BE:
		tst.w	d5
		bpl.w	loc_1476E
		swap	d0
		move.b	$28(a0),d0
		bpl.s	loc_146d6
		btst	#1,$22(a1)
		bne.w	loc_14768

loc_146d6:
		move.w	$C(a1),d4
		cmp.w	$C(a0),d4
		bcs.s	loc_1471A
		btst	#0,1(a0)
		bne.s	loc_14706
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#3,d0
		beq.s	loc_14706
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_14706:
		bclr	#7,2(a1)
		btst	#5,d0
		beq.s	loc_14752
		bset	#7,2(a1)
		bra.s	loc_14752
; ===========================================================================

loc_1471A:
		btst	#0,1(a0)
		bne.s	loc_14740
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#4,d0
		beq.s	loc_14740
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_14740:
		bclr	#7,2(a1)
		btst	#6,d0
		beq.s	loc_14752
		bset	#7,2(a1)

loc_14752:
		move.b	#1,$34(a0)
		tst.w	(Debug_mode_flag).w
		beq.s	loc_14768
		move.w	#SndID_Checkpoint,d0
		jsr	(PlaySound).l

loc_14768:
		swap	d0
		andi.w	#$7FFF,d5

loc_1476E:
		add.l	d5,d5
		dbf	d6,loc_1468E
		swap	d5
		move.b	d5,$30(a0)
		bsr.w	loc_147A0

return_1477E:
		rts
; ===========================================================================
; dword_14780:
Obj03_Characters:
		; character 1,character 2
		dc.l	MainCharacter,Sidekick
		dc.l	0,0
		dc.l	0,0
		dc.l	0,0
		even
; ===========================================================================

loc_147A0:
		tst.b	$34(a0)
		beq.s	return_147CE
		tst.w	(MainCharacter+2).w
		bpl.s	loc_147B4
		bset	#7,(Shield+2).w
		bra.s	loc_147BA

loc_147B4:
		bclr	#7,(Shield+2).w

loc_147BA:
		tst.w	(Sidekick+2).w
		bpl.s	loc_147C8
		bset	#7,(Tails_Tails+2).w
		bra.s	return_147CE

loc_147C8:
		bclr	#7,(Tails_Tails+2).w

return_147CE:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj03_MapUnc_147d0:	binclude	"mappings/sprite/obj03.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0B - Section of pipe that tips you off from CPZ
; ---------------------------------------------------------------------------
; Sprite_148AC: Obj_0x0B_Open_Close_Platform:
Obj0B:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj0B_Index(pc,d0.w),d1
		jmp	Obj0B_Index(pc,d1.w)
; ===========================================================================
; off_148BA:
Obj0B_Index:	offsetTable
		offsetTableEntry.w Obj0B_Init
		offsetTableEntry.w Obj0B_Main
		offsetTableEntry.w Obj0B_Turn
; ===========================================================================
; loc_148C0:
Obj0B_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj0B_MapUnc_14996,4(a0)
		move.w	#$E3B0,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F0,d0
		addi.w	#$10,d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$30(a0)
		move.w	d0,$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		addq.w	#1,d0
		lsl.w	#4,d0
		move.b	d0,$36(a0)
; loc_14914:
Obj0B_Main:
		move.b	(Vint_runcount+3).w,d0
		add.b	$36(a0),d0
		bne.s	loc_1494C
		addq.b	#2,routine(a0)

; loc_14922:
Obj0B_Turn:
		subq.w	#1,$30(a0)
		bpl.s	loc_14940
		move.w	#$7F,$30(a0)
		tst.b	$1C(a0)
		beq.s	loc_1493A
		move.w	$32(a0),$30(a0)

loc_1493A:
		bchg	#0,$1C(a0)

loc_14940:
		lea	(Ani_obj0B).l,a1
		jsr	(AnimateSprite).l

loc_1494C:
		tst.b	$1A(a0)
		bne.s	loc_14966
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#$11,d3
		move.w	8(a0),d4
		bsr.w	PlatformObject
		bra.w	MarkObjGone
; ---------------------------------------------------------------------------

loc_14966:
		btst	#3,$22(a0)
		beq.s	loc_1497E
		lea	(MainCharacter).w,a1
		bclr	#3,$22(a1)
		bclr	#3,$22(a0)

loc_1497E:
		bra.w	MarkObjGone
; ===========================================================================
; animation script
; off_14982:
Ani_obj0B:	dc.w	byte_14986-Ani_obj0B
		dc.w	byte_1498E-Ani_obj0B
byte_14986:	dc.b	7, 0, 1, 2, 3, 4, $FE, 1
byte_1498E:	dc.b	7, 4, 3, 2, 1, 0, $FE, 1
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj0B_MapUnc_14996:	binclude	"mappings/sprite/obj0B.bin"
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0C - Small floating platform (used in CPZ in the Nick Arcade prototype)
; ---------------------------------------------------------------------------
; Sprite_149FC: Obj_0x0C:
Obj0C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj0C_Index(pc,d0.w),d1
		jmp	Obj0C_Index(pc,d1.w)
; ===========================================================================
; off_14A0A:
Obj0C_Index:	offsetTable
		offsetTableEntry.w Obj0C_Init
		offsetTableEntry.w Obj0C_Main
; ===========================================================================
; loc_14A0E:
Obj0C_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj0C_MapUnc_14AE6,4(a0)
		move.w	#$E418,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),d0
		subi.w	#$10,d0
		move.w	d0,$3A(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F0,d0
		addi.w	#$10,d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$30(a0)
		move.w	d0,$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		move.b	d0,$3E(a0)
		move.b	d0,$3F(a0)
; loc_14A6E:
Obj0C_Main:
		move.b	$3C(a0),d0
		beq.s	loc_14AAC
		cmpi.b	#$80,d0
		bne.s	loc_14ABC
		move.b	$3D(a0),d1
		bne.s	loc_14A8E
		subq.b	#1,$3E(a0)
		bpl.s	loc_14A8E
		move.b	$3F(a0),$3E(a0)
		bra.s	loc_14ABC
; ===========================================================================

loc_14A8E:
		addq.b	#1,$3D(a0)
		move.b	d1,d0
		bsr.w	JmpTo_CalcSine
		addi.w	#8,d0
		asr.w	#6,d0
		subi.w	#$10,d0
		add.w	$3A(a0),d0
		move.w	d0,$C(a0)
		bra.s	loc_14Ad2
; ===========================================================================

loc_14AAC:
		move.w	(Vint_runcount+2).w,d1
		andi.w	#$3FF,d1
		bne.s	loc_14AC0
		move.b	#1,$3D(a0)

loc_14ABC:
		addq.b	#1,$3C(a0)


loc_14AC0:
		bsr.w	JmpTo_CalcSine
		addi.w	#8,d1
		asr.w	#4,d1
		add.w	$3A(a0),d1
		move.w	d1,$C(a0)

loc_14Ad2:
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#9,d3
		move.w	8(a0),d4
		bsr.w	PlatformObject
		bra.w	MarkObjGone
; ===========================================================================
; ---------------------------------------------------------------------------
; Unused sprite mappings
; ---------------------------------------------------------------------------
Obj0C_MapUnc_14AE6:	binclude	"mappings/sprite/obj0C.bin"

; ===========================================================================
		nop
; loc_14AF4:
JmpTo_CalcSine:
		jmp	(CalcSine).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 12 - Emerald from Hidden Palace Zone
; ---------------------------------------------------------------------------
; Sprite_14AFC: Obj_0x12_Emerald:
Obj12:
		moveq	#0,d0
		move.b	$024(a0),d0
		move.w	Obj12_Index(pc,d0.w),d1
		jmp	Obj12_Index(pc,d1.w)
; ===========================================================================
; off_14B0A:
Obj12_Index:	offsetTable
		offsetTableEntry.w Obj12_Init
		offsetTableEntry.w Obj12_Main
; ===========================================================================
; loc_14B0E:
Obj12_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj12_MapUnc_14B62,4(a0)
		move.w	#$6392,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$20,$19(a0)
		move.b	#4,$18(a0)
; loc_14B36:
Obj12_Main:
		move.w	#$20,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj12_MapUnc_14B62:	binclude	"mappings/sprite/obj12.bin"
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 13 - Waterfall in Hidden Palace Zone (unused)
; ---------------------------------------------------------------------------
; Sprite_14B78: Obj_0x13_Hpz_Waterfalls:
Obj13:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj13_Index(pc,d0.w),d1
		jmp	Obj13_Index(pc,d1.w)
; ===========================================================================
; off_14B86:
Obj13_Index:	offsetTable
		offsetTableEntry.w Obj13_Init
		offsetTableEntry.w Obj13_Main
		offsetTableEntry.w Obj13_ChkDel2
; ===========================================================================
; loc_14B8C:
Obj13_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj13_MapUnc_14CF4,4(a0)
		move.w	#$E315,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#$12,$1A(a0)
		bsr.s	Obj13_LoadSubObject
		move.b	#$A0,$16(a1)
		bset	#4,1(a1)
		move.l	a1,$38(a0)
		move.w	$C(a0),$34(a0)
		move.w	$C(a0),$36(a0)
		cmpi.b	#$10,$28(a0)
		bcs.s	Obj13_LowerToWater
		bsr.s	Obj13_LoadSubObject
		move.l	a1,$3C(a0)
		move.w	$C(a0),$C(a1)
		addi.w	#$98,$C(a1)
		bra.s	Obj13_LowerToWater
; ===========================================================================
; loc_14BF4:
Obj13_LoadSubObject:
		jsr	(SingleObjLoad2).l
		bne.s	+
		_move.b	#$13,0(a1)	; load obj13
		addq.b	#4,routine(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#Obj13_MapUnc_14CF4,4(a1)
		move.w	#$E315,2(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#1,$18(a1)
+		rts
; ===========================================================================
; loc_14C38:
Obj13_LowerToWater:
		moveq	#0,d1
		move.b	$28(a0),d1
		move.w	$34(a0),d0
		subi.w	#$78,d0
		lsl.w	#4,d1
		add.w	d1,d0
		move.w	d0,$C(a0)
		move.w	d0,$34(a0)
; loc_14C52:
Obj13_Main:
		move.l	$38(a0),a1
		move.b	#$12,$1A(a0)
		move.w	$34(a0),d0
		move.w	(Water_Level_1).w,d1
		cmp.w	d0,d1
		bcc.s	+
		move.w	d1,d0
+
		move.w	d0,$C(a0)
		sub.w	$36(a0),d0
		addi.w	#$80,d0
		bmi.s	loc_14CBC
		lsr.w	#4,d0
		move.w	d0,d1
		cmpi.w	#$F,d0
		bcs.s	+
		moveq	#$F,d0
+
		move.b	d0,$1A(a1)
		cmpi.b	#$10,$28(a0)
		bcs.s	Obj13_ChkDel
		move.l	$3C(a0),a1
		subi.w	#$F,d1
		bcc.s	+
		moveq	#0,d1
+
		addi.w	#$13,d1
		move.b	d1,$1A(a1)
; loc_14CA4:
Obj13_ChkDel:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_14CBC:
		moveq	#$13,d0
		move.b	d0,$1A(a0)
		move.b	d0,$1A(a1)
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		rts
; loc_14CDC:
Obj13_ChkDel2:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj13_MapUnc_14CF4:	binclude	"mappings/sprite/obj13.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 04 - Surface of the water
; ---------------------------------------------------------------------------
; Sprite_15090: Obj_0x04:
Obj04:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj04_Index(pc,d0.w),d1
		jmp	Obj04_Index(pc,d1.w)
; ===========================================================================
; off_1509E:
Obj04_Index:	offsetTable
		offsetTableEntry.w Obj04_Init
		offsetTableEntry.w Obj04_Action
		offsetTableEntry.w Obj04_Action2
; ===========================================================================
; loc_150A4:
Obj04_Init:
		addq.b	#2,routine(a0)	; => Obj04_Action
		move.l	#Obj04_MapUnc_151C2,4(a0)
		move.w	#$8400,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$80,$19(a0)
		move.w	8(a0),$30(a0)
		cmpi.b	#neo_green_hill_zone,(Current_Zone).w
		bne.s	Obj04_Action
		addq.b	#2,routine(a0)	; => Obj04_Action2
		move.l	#Obj04_MapUnc_152B2,4(a0)
		bra.w	Obj04_Action2
; ===========================================================================
; loc_150E4:
Obj04_Action:
		move.w	(Water_Level_1).w,d1
		move.w	d1,$C(a0)
		tst.b	$32(a0)
		bne.s	Obj04_Animate
		btst	#7,(Ctrl_1_Press).w	; is the Start button pressed?
		beq.s	Obj04_Display		; if not,branch
		addq.b	#3,$1A(a0)		; use different frames
		move.b	#1,$32(a0)		; stop animation
		bra.s	Obj04_Display
; ===========================================================================
; loc_15106:
Obj04_Animate:
		tst.w	(Game_paused).w		; if the game paused?
		bne.s	Obj04_Display		; if yes,branch
		move.b	#0,$32(a0)		; resume animation
		subq.b	#3,$1A(a0)		; use normal frames
; loc_15116:
Obj04_Display:
		lea	(Ani_obj04).l,a1
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	(a1,d1.w),$1A(a0)
		addq.b	#1,$1B(a0)
		andi.b	#$3F,$1B(a0)
		bra.w	JmpTo_DisplaySprite
; ===========================================================================
; water sprite animation 'script' (custom format for this object)
; byte_15136:
Ani_obj04:	dc.b	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1
		dc.b	1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
		dc.b	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1
		dc.b	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0
		even
; ===========================================================================
; loc_15176:
Obj04_Action2:
		move.w	(Water_Level_1).w,d1
		move.w	d1,$C(a0)
		tst.b	$32(a0)
		bne.s	Obj04_Animate2
		btst	#7,(Ctrl_1_Press).w	; is the Start button pressed?
		beq.s	loc_151A8		; if not,branch
		addq.b	#2,$1A(a0)		; use different frames
		move.b	#1,$32(a0)		; stop animation
		bra.s	loc_151BE
; ===========================================================================
; loc_15198:
Obj04_Animate2:
		tst.w	(Game_paused).w		; is the game paused?
		bne.s	loc_151BE		; if yes,branch
		move.b	#0,$32(a0)		; resume animation
		subq.b	#2,$1A(a0)		; use normal frames

loc_151A8:
		subq.b	#1,$1E(a0)
		bpl.s	loc_151BE
		move.b	#5,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_151BE:
		bra.w	JmpTo_DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj04_MapUnc_151C2:	binclude	"mappings/sprite/obj04_a.bin"
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj04_MapUnc_152B2:	binclude	"mappings/sprite/obj04_b.bin"	; took me awhile to realize I accidentally binclude'd the above mappings twice,oops

;=============================================================================== 
; Object 0x49 - Green Hill - Waterfalls 
; [ Begin ]        
;===============================================================================  
Obj_0x49_Waterfall: ; loc_15352:		 
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_15360(pc,d0),d1
		jmp     loc_15360(pc,d1)
loc_15360:
		dc.w    loc_15364-loc_15360
		dc.w    loc_1539E-loc_15360
               
loc_15364:
		addq.b	#$02,$0024(a0)
		move.l	#Obj49_MapUnc_15404,$0004(a0) ; loc_15404
		move.w	#$23AE,$0002(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		move.b	#$04,$0001(a0)
		move.b	#$20,$0019(a0)
		move.w	8(a0),$0030(a0)
		move.b	#$00,$0018(a0)
		move.b	#$80,$0016(a0)
		bset	#$04,$0001(a0)
loc_1539E:
		tst.w	(Two_player_mode).w
		bne.s	loc_153B8
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 JmpTo10_DeleteObject
loc_153B8:
		move.w	8(a0),d1
		move.w	d1,d2
		subi.w	#$0040,d1
		addi.w	#$0040,d2
		move.b	$0028(a0),d3
		move.b	#$00,$001A(a0)
		move.w	(MainCharacter+8).w,d0
		cmp.w	d1,d0
		bcs.s	loc_153EA
		cmp.w	d2,d0
		bcc.s	loc_153EA
		move.b	#1,$001A(a0)
		add.b   d3,$001A(a0)
		bra.w	JmpTo_DisplaySprite
loc_153EA:
		move.w	(Sidekick+8).w,d0
		cmp.w	d1,d0
		bcs.s	loc_153FC
		cmp.w	d2,d0
		bcc.s	loc_153FC
		move.b	#1,$001A(a0)
loc_153FC:
		add.b   d3,$001A(a0)
		bra.w	JmpTo_DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj49_MapUnc_15404:	binclude	"mappings/sprite/obj49.bin"
;=============================================================================== 
; Object 0x49 - Green Hill - Waterfalls 
; [ End ]		         
;===============================================================================		

;=============================================================================== 
; Object 0x31 - Hill Top / Metropolis - Lava Attributes 
; [ Begin ]		         
;===============================================================================   
Obj_0x31_Lava_Attributes: ; loc_155A0:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_155AE(pc,d0),d1
		jmp     loc_155AE(pc,d1)
loc_155AE:
		dc.w    loc_155B6-loc_155AE
		dc.w    loc_155EC-loc_155AE
loc_155B2: 
		dc.w	$9694,$9500
		
loc_155B6:
		addq.b	#$02,$0024(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		move.b	loc_155B2(pc,d0),$0020(a0)
		move.l	#Obj31_MapUnc_15612,$0004(a0) ; loc_15612
		move.w	#$8680,$0002(a0)
		move.b	#$84,$0001(a0)
		move.b	#$80,$0019(a0)
		move.b	#$04,$0018(a0)
		move.b	$0028(a0),$001A(a0)
loc_155EC:		
		tst.w	(Two_player_mode).w
		bne.s	loc_15606
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 JmpTo10_DeleteObject
loc_15606:
		tst.w	(Debug_placement_mode).w
		beq.s	loc_15610
		bsr.w	JmpTo_DisplaySprite
loc_15610:		
		rts
; Lava_Attributes_Mappings:		loc_15612:
Obj31_MapUnc_15612:
		dc.w    loc_15618-Obj31_MapUnc_15612
		dc.w    loc_15618-Obj31_MapUnc_15612
		dc.w    loc_15618-Obj31_MapUnc_15612
loc_15618:
		dc.w	$0000
;=============================================================================== 
; Object 0x31 - Hill Top / Metropolis - Lava Attributes 
; [ End ]		         
;=============================================================================== 
;=============================================================================== 
; Object 0x74 - Hill Top / Metropolis / Dust Hill... - Invisible Block 
; [ Begin ]		         
;===============================================================================   
Obj_0x74_Invisible_Block: ; loc_1561A:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_15628(pc,d0),d1
		jmp     loc_15628(pc,d1)
loc_15628:
		dc.w    loc_1562C-loc_15628
		dc.w    loc_15668-loc_15628
loc_1562C:
		addq.b	#$02,$0024(a0)
		move.l	#Obj74_MapUnc_156B2,$0004(a0) ; loc_156B2
		move.w	#$8680,$0002(a0)
		bsr.w	Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04,$0001(a0)
		move.b	$0028(a0),d0
		move.b	d0,d1
		andi.w	#$00F0,d0
		addi.w	#$0010,d0
		lsr.w	#1,d0
		move.b	d0,$0019(a0)
		andi.w	#$000F,d1
		addq.w	#1,d1
		lsl.w	#$03,d1
		move.b	d1,$0016(a0)
loc_15668:
		bsr.w	loc_DDD8
		bne.s	loc_1568A
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	SolidObject_Always
loc_1568A:
		tst.w	(Two_player_mode).w
		bne.s	loc_156A4
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 JmpTo10_DeleteObject
loc_156A4:
		tst.w	(Debug_placement_mode).w
		beq.s	loc_156B0
		jmp     DisplaySprite           ; (loc_d3C2)
loc_156B0:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj74_MapUnc_156B2:	binclude	"mappings/sprite/obj74.bin"
; ===========================================================================
		nop
; loc_15720:
JmpTo_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_15726:
JmpTo10_DeleteObject:
		jmp	(DeleteObject).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 06 - Twisting spiral pathway in EHZ
; ---------------------------------------------------------------------------
; Sprite_1572C: Obj_0x06_Spiral_Attributes:
Obj06:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj06_Index(pc,d0.w),d1
		jsr	Obj06_Index(pc,d1.w)
		tst.w	(Two_player_mode).w
		beq.s	Obj06_ChkDel
		rts
; ---------------------------------------------------------------------------
; Deletes the object the instant it goes off screen in 1-player mode
; loc_15742:
Obj06_ChkDel:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	JmpTo11_DeleteObject
		rts
; ---------------------------------------------------------------------------
; loc_15756:
JmpTo11_DeleteObject:
		jmp	(DeleteObject).l
; ===========================================================================
; off_1575C:
Obj06_Index:	offsetTable
		offsetTableEntry.w Obj06_Init
		offsetTableEntry.w Obj06_Spiral
		offsetTableEntry.w Obj06_Cylinder
; ===========================================================================
; loc_15762:
Obj06_Init:
		addq.b	#2,routine(a0)
		move.b	#$d0,$19(a0)
		tst.b	$28(a0)
		bpl.s	Obj06_Spiral
		addq.b	#2,routine(a0)
		bra.w	Obj06_Cylinder
; ===========================================================================
; spiral pathway from EHZ
; loc_1577A:
Obj06_Spiral:
		lea	(MainCharacter).w,a1
		moveq	#3,d6
		bsr.s	+
		lea	(Sidekick).w,a1
		addq.b	#1,d6
+
		btst	d6,$22(a0)
		bne.w	loc_15822
		btst	#1,$22(a1)
		bne.w	return_15820
		btst	#3,$22(a1)
		bne.s	loc_157E2
		move.w	8(a1),d0
		sub.w	8(a0),d0
		tst.w	$10(a1)
		bmi.s	loc_157BE
		cmpi.w	#-$C0,d0
		bgt.s	return_15820
		cmpi.w	#-$d0,d0
		blt.s	return_15820
		bra.s	loc_157CA
; ---------------------------------------------------------------------------

loc_157BE:
		cmpi.w	#$C0,d0
		blt.s	return_15820
		cmpi.w	#$d0,d0
		bgt.s	return_15820

loc_157CA:
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$30,d1
		bcc.s	return_15820
		bsr.w	loc_FAF2		; RideObject_SetRide - to document later
		rts
; ---------------------------------------------------------------------------

loc_157E2:
		move.w	8(a1),d0
		sub.w	8(a0),d0
		tst.w	$10(a1)
		bmi.s	loc_157FE
		cmpi.w	#-$B0,d0
		bgt.s	return_15820
		cmpi.w	#-$C0,d0
		blt.s	return_15820
		bra.s	loc_1580A
; ---------------------------------------------------------------------------

loc_157FE:
		cmpi.w	#$B0,d0
		blt.s	return_15820
		cmpi.w	#$C0,d0
		bgt.s	return_15820

loc_1580A:
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$30,d1
		bcc.s	return_15820
		bsr.w	loc_FAF2

return_15820:
		rts
; ---------------------------------------------------------------------------

loc_15822:
		move.w	$14(a1),d0
		bpl.s	+
		neg.w	d0
+
		cmpi.w	#$600,d0
		bcs.s	Obj06_Spiral_CharacterFallsOff
		btst	#1,$22(a1)
		bne.s	Obj06_Spiral_CharacterFallsOff
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$d0,d0
		bmi.s	Obj06_Spiral_CharacterFallsOff
		cmpi.w	#$1A0,d0
		bcs.s	Obj06_Spiral_MoveCharacter
; loc_1584C:
Obj06_Spiral_CharacterFallsOff:
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		rts
; ---------------------------------------------------------------------------
; loc_15864:
Obj06_Spiral_MoveCharacter:
		btst	#3,$22(a1)
		beq.s	return_15820
		move.b	Obj06_CosineTable(pc,d0.w),d1
		ext.w	d1
		move.w	$C(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$16(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$C(a1)
		lsr.w	#3,d0
		andi.w	#$3F,d0
		move.b	Obj06_FlipAngleTable(pc,d0.w),$27(a1)
		rts
; ===========================================================================
; Fun fact - Sega had a patent which included the original source code
; for these tables: https://patents.google.com/patent/US5411272
; byte_15896: sloopdirtbl:
Obj06_FlipAngleTable:
		dc.b	$00,$00
		dc.b	$01,$01,$16,$16,$16,$16,$2C,$2C
		dc.b	$2C,$2C,$42,$42,$42,$42,$58,$58
		dc.b	$58,$58,$6E,$6E,$6E,$6E,$84,$84
		dc.b	$84,$84,$9A,$9A,$9A,$9A,$B0,$B0
		dc.b	$B0,$B0,$C6,$C6,$C6,$C6,$DC,$DC
		dc.b	$DC,$DC,$F2,$F2,$F2,$F2,$01,$01
		dc.b	$00,$00
; byte_158CA:
; slooptbl:
Obj06_CosineTable:
		dc.b	 32,32,32,32,32,32,32,32
		dc.b	 32,32,32,32,32,32,32,32

		dc.b	 32,32,32,32,32,32,32,32
		dc.b	 32,32,32,32,32,32,31,31
		dc.b	 31,31,31,31,31,31,31,31
		dc.b	 31,31,31,31,31,30,30,30

		dc.b	 30,30,30,30,30,30,29,29
		dc.b	 29,29,29,28,28,28,28,27
		dc.b	 27,27,27,26,26,26,25,25
		dc.b	 25,24,24,24,23,23,22,22

		dc.b	 21,21,20,20,19,18,18,17
		dc.b	 16,16,15,14,14,13,12,12
		dc.b	 11,10,10, 9, 8, 8, 7, 6
		dc.b	  6, 5, 4, 4, 3, 2, 2, 1

		dc.b	  0,-1,-2,-2,-3,-4,-4,-5
		dc.b	 -6,-7,-7,-8,-9,-9,-10,-10
		dc.b	-11,-11,-12,-12,-13,-14,-14,-15
		dc.b	-15,-16,-16,-17,-17,-18,-18,-19

		dc.b	-19,-19,-20,-21,-21,-22,-22,-23
		dc.b	-23,-24,-24,-25,-25,-26,-26,-27
		dc.b	-27,-28,-28,-28,-29,-29,-30,-30
		dc.b	-30,-31,-31,-31,-32,-32,-32,-33

		dc.b	-33,-33,-33,-34,-34,-34,-35,-35
		dc.b	-35,-35,-35,-35,-35,-35,-36,-36
		dc.b	-36,-36,-36,-36,-36,-36,-36,-37
		dc.b	-37,-37,-37,-37,-37,-37,-37,-37

		dc.b	-37,-37,-37,-37,-37,-37,-37,-37
		dc.b	-37,-37,-37,-37,-37,-37,-37,-37
		dc.b	-37,-37,-37,-37,-36,-36,-36,-36
		dc.b	-36,-36,-36,-35,-35,-35,-35,-35

		dc.b	-35,-35,-35,-34,-34,-34,-33,-33
		dc.b	-33,-33,-32,-32,-32,-31,-31,-31
		dc.b	-30,-30,-30,-29,-29,-28,-28,-28
		dc.b	-27,-27,-26,-26,-25,-25,-24,-24

		dc.b	-23,-23,-22,-22,-21,-21,-20,-19
		dc.b	-19,-18,-18,-17,-16,-16,-15,-14
		dc.b	-14,-13,-12,-11,-11,-10,-9,-8
		dc.b	 -7,-7,-6,-5,-4,-3,-2,-1

		dc.b	  0, 1, 2, 3, 4, 5, 6, 7
		dc.b	  8, 8, 9,10,10,11,12,13
		dc.b	 13,14,14,15,15,16,16,17
		dc.b	 17,18,18,19,19,20,20,21

		dc.b	 21,22,22,23,23,24,24,24
		dc.b	 25,25,25,25,26,26,26,26
		dc.b	 27,27,27,27,28,28,28,28
		dc.b	 28,28,29,29,29,29,29,29

		dc.b	 29,30,30,30,30,30,30,30
		dc.b	 31,31,31,31,31,31,31,31
		dc.b	 31,31,32,32,32,32,32,32
		dc.b	 32,32,32,32,32,32,32,32

		dc.b	 32,32,32,32,32,32,32,32
		dc.b	 32,32,32,32,32,32,32,32
		even
; ===========================================================================
; rotating meshed cage from MTZ
; loc_15A6A:
Obj06_Cylinder:
		lea	(MainCharacter).w,a1
		lea	(MTZCylinder_Angle_Sonic).w,a2
		moveq	#3,d6
		bsr.s	loc_15A80
		lea	(Sidekick).w,a1
		lea	(MTZCylinder_Angle_Tails).w,a2
		addq.b	#1,d6

loc_15A80:
		btst	d6,$22(a0)
		bne.w	loc_15AEE
		move.w	8(a1),d0
		sub.w	8(a0),d0
		cmpi.w	#-$C0,d0
		blt.s	return_15AEC
		cmpi.w	#$C0,d0
		bge.s	return_15AEC
		move.w	$C(a0),d0
		addi.w	#$3C,d0
		move.w	$C(a1),d2
		move.b	$16(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.s	return_15AEC
		cmpi.w	#-$10,d0
		bcs.s	return_15AEC
		cmpi.b	#6,routine(a1)
		bcc.s	return_15AEC
		add.w	d0,d2
		addq.w	#3,d2
		move.w	d2,$C(a1)
		move.b	#1,$29(a1)
		bsr.w	loc_FAF2
		move.w	#1,$1C(a1)
		move.b	#0,(a2)
		tst.w	$14(a1)
		bne.s	return_15AEC
		move.w	#1,$14(a1)

return_15AEC:
		rts
; ===========================================================================

loc_15AEE:
		btst	#1,$22(a1)
		bne.s	loc_15B28
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$C0,d0
		bmi.s	loc_15B0A
		cmpi.w	#$180,d0
		bcs.s	loc_15B42

loc_15B0A:
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		bset	#1,$22(a1)
		rts
; ---------------------------------------------------------------------------

loc_15B28:
		move.b	(a2),d0
		addi.b	#$20,d0
		cmpi.b	#$40,d0
		bcc.s	+
		asr.w	$12(a1)
		bra.s	loc_15B0A
; ---------------------------------------------------------------------------
+		move.w	#0,$12(a1)
		bra.s	loc_15B0A
; ===========================================================================

loc_15B42:
		btst	#3,$22(a1)
		beq.s	return_15AEC
		move.b	(a2),d0
		bsr.w	JmpTo2_CalcSine
		muls.w	#$2800,d1
		swap	d1
		move.w	$C(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$16(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$C(a1)
		move.b	(a2),d0
		move.b	d0,$27(a1)
		addq.b	#4,(a2)
		tst.w	$14(a1)
		bne.s	return_15B80
		move.w	#1,$14(a1)

return_15B80:
		rts
; ===========================================================================
		nop
; loc_15B84:
JmpTo2_CalcSine:
		jmp	(CalcSine).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 14 - See saw from Hill Top Zone
; ---------------------------------------------------------------------------
; Sprite_15B8C: Obj_0x14_See_Saw:
Obj14:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj14_Index(pc,d0.w),d1
		jsr	Obj14_Index(pc,d1.w)
		move.w	$30(a0),d0
		bra.w	JmpTo_MarkObjGone2
; ===========================================================================
; off_15BA2:
Obj14_Index:	offsetTable
		offsetTableEntry.w Obj14_Init
		offsetTableEntry.w Obj14_Main
		offsetTableEntry.w return_15CD8
		offsetTableEntry.w Obj14_Ball_Init
		offsetTableEntry.w Obj14_Ball_Main
		offsetTableEntry.w Obj14_Ball_Fly
; ===========================================================================
; loc_15BAE:
Obj14_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj14_MapUnc_15F54,4(a0)
		move.w	#$3C6,2(a0)
		bsr.w	JmpTo_Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#$30,$19(a0)
		move.w	8(a0),$30(a0)
		tst.b	$28(a0)
		bne.s	loc_15C08
		bsr.w	SingleObjLoad2
		bne.s	loc_15C08
		_move.b	#$14,0(a1)		; load obj14 (see saw)
		addq.b	#6,routine(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	$22(a0),$22(a1)
		move.l	a0,$3C(a1)

loc_15C08:
		btst	#0,$22(a0)
		beq.s	loc_15C16
		move.b	#2,$1A(a0)

loc_15C16:
		move.b	$1A(a0),$3A(a0)
; loc_15C1C:
Obj14_Main:
		move.b	$3A(a0),d1
		btst	#3,$22(a0)
		beq.s	loc_15C76
		moveq	#2,d1
		lea	(MainCharacter).w,a1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_15C3C
		neg.w	d0
		moveq	#0,d1

loc_15C3C:
		cmpi.w	#8,d0
		bcc.s	loc_15C44
		moveq	#1,d1

loc_15C44:
		btst	#4,$22(a0)
		beq.s	Obj14_UpdateMappingAndCollision
		moveq	#2,d2
		lea	(Sidekick).w,a1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_15C60
		neg.w	d0
		moveq	#0,d2

loc_15C60:
		cmpi.w	#8,d0
		bcc.s	loc_15C68
		moveq	#1,d2

loc_15C68:
		add.w	d2,d1
		cmpi.w	#3,d1
		bne.s	loc_15C72
		addq.w	#1,d1

loc_15C72:
		lsr.w	#1,d1
		bra.s	Obj14_UpdateMappingAndCollision
; ===========================================================================

loc_15C76:
		btst	#4,$22(a0)
		beq.s	loc_15C9C
		moveq	#2,d1
		lea	(Sidekick).w,a1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_15C92
		neg.w	d0
		moveq	#0,d1

loc_15C92:
		cmpi.w	#8,d0
		bcc.s	Obj14_UpdateMappingAndCollision
		moveq	#1,d1
		bra.s	Obj14_UpdateMappingAndCollision
; ===========================================================================

loc_15C9C:
		move.w	(MainCharacter+$12).w,d0
		move.w	(Sidekick+$12).w,d2
		cmp.w	d0,d2
		blt.s	loc_15CAA
		move.w	d2,d0

loc_15CAA:
		move.w	d0,$38(a0)
; loc_15CAE:
Obj14_UpdateMappingAndCollision:
		bsr.w	Obj14_SetMapping
		lea	(Obj14_SlantedCol).l,a2
		btst	#0,$1A(a0)
		beq.s	loc_15CC6
		lea	(Obj14_FlatCol).l,a2

loc_15CC6:
		move.w	8(a0),-(sp)
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#8,d3
		move.w	(sp)+,d4
		bra.w	loc_F9d6

return_15CD8:
		rts
; ===========================================================================
; loc_15CDA:
Obj14_SetMapping:
		move.b	$1A(a0),d0
		cmp.b	d1,d0
		beq.s	return_15d04
		bcc.s	loc_15CE6
		addq.b	#2,d0

loc_15CE6:
		subq.b	#1,d0
		move.b	d0,$1A(a0)
		move.b	d1,$3A(a0)
		bclr	#0,1(a0)
		btst	#1,$1A(a0)
		beq.s	return_15d04
		bset	#0,1(a0)

return_15d04:
		rts
; ===========================================================================
; loc_15d06:
Obj14_Ball_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj14_MapUnc_15FE0,4(a0)
		move.w	#$3DE,2(a0)
		bsr.w	JmpTo_Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#$8B,$20(a0)
		move.b	#$C,$19(a0)
		move.w	8(a0),$30(a0)		; save see-saw x position
		addi.w	#$28,8(a0)
		addi.w	#$10,$C(a0)
		move.w	$C(a0),$34(a0)		; save bottom of seesaw y position
		btst	#0,$22(a0)
		beq.s	Obj14_Ball_Main
		subi.w	#$50,8(a0)
		move.b	#2,$3A(a0)
; loc_15d60:
Obj14_Ball_Main:
		bsr.w	Obj14_Animate
		move.l	$3C(a0),a1		; a1=parent object (seesaw)
		moveq	#0,d0
		move.b	$3A(a0),d0		; d0 = ball angle - seesaw angle
		sub.b	$3A(a1),d0
		beq.s	Obj14_SetBallToRestOnSeeSaw
		bcc.s	loc_15d78
		neg.b	d0

loc_15d78:
		move.w	#-$818,d1
		move.w	#-$114,d2
		cmpi.b	#1,d0
		beq.s	loc_15D9E
		move.w	#-$AF0,d1
		move.w	#-$CC,d2
		cmpi.w	#$A00,$38(a1)		; check if character y_vel that jumped on
		blt.s	loc_15D9E		; seesaw > 2560
		move.w	#-$E00,d1
		move.w	#-$A0,d2

loc_15D9E:
		move.w	d1,$12(a0)
		move.w	d2,$10(a0)
		move.w	8(a0),d0
		sub.w	$30(a0),d0
		bcc.s	loc_15DB4
		neg.w	$10(a0)

loc_15DB4:
		addq.b	#2,routine(a0)
		bra.s	Obj14_Ball_Fly
; ===========================================================================
; loc_15DBA:
Obj14_SetBallToRestOnSeeSaw:
		lea	(Obj14_YOffsets).l,a2
		moveq	#0,d0
		move.b	$1A(a1),d0
		move.w	#$28,d2
		move.w	8(a0),d1
		sub.w	$30(a0),d1
		bcc.s	loc_15DD8
		neg.w	d2
		addq.w	#2,d0

loc_15DD8:
		add.w	d0,d0
		move.w	$34(a0),d1		; d1 = bottom of seesaw y position
		add.w	(a2,d0.w),d1		; + offset for current angle
		move.w	d1,$C(a0)		; set y position so ball rests on seesaw
		add.w	$30(a0),d2
		move.w	d2,8(a0)
		clr.w	$E(a0)
		clr.w	$A(a0)
		rts
; ===========================================================================
; loc_15DF8:
Obj14_Ball_Fly:
		bsr.w	Obj14_Animate
		tst.w	$12(a0)
		bpl.s	loc_15E1A
		bsr.w	JmpTo_ObjectMoveAndFall
		move.w	$34(a0),d0		; d0 = bottom of seesaw y position
		subi.w	#$2F,d0
		cmp.w	$C(a0),d0
		bgt.s	return_15E18
		bsr.w	JmpTo_ObjectMoveAndFall

return_15E18:
		rts
; ===========================================================================

loc_15E1A:
		bsr.w	JmpTo_ObjectMoveAndFall
		move.l	$3C(a0),a1		; a1=parent object (seesaw)
		lea	(Obj14_YOffsets).l,a2
		moveq	#0,d0
		move.b	$1A(a1),d0
		move.w	8(a0),d1
		sub.w	$30(a0),d1
		bcc.s	loc_15E3A
		addq.w	#2,d0

loc_15E3A:
		add.w	d0,d0
		move.w	$34(a0),d1		; d1 = bottom of seesaw y position
		add.w	(a2,d0.w),d1		; + offset for current angle
		cmp.w	$C(a0),d1
		bgt.s	return_15E8E		; return if y position < d1
		move.l	$3C(a0),a1		; a1=parent object (seesaw)
		moveq	#2,d1			; d1 = x_vel >= 0 ? 0 : 2
		tst.w	$10(a0)
		bmi.s	loc_15E58
		moveq	#0,d1

loc_15E58:
		move.b	d1,$3A(a1)		; set seesaw angle to d1
		move.b	d1,$3A(a0)		; set ball angle to d1
		cmp.b	$1A(a1),d1
		beq.s	loc_15E82

		; launch main character if stood on seesaw
		lea	(MainCharacter).w,a2
		bclr	#3,$22(a1)
		beq.s	loc_15E74
		bsr.s	Obj14_LaunchCharacter

loc_15E74:
		;  launch sidekick if stood on seesaw
		lea	(Sidekick).w,a2		; a2=character
		bclr	#4,$22(a1)
		beq.s	loc_15E82
		bsr.s	Obj14_LaunchCharacter

loc_15E82:
		clr.w	$10(a0)			; clear ball velocity
		clr.w	$12(a0)
		subq.b	#2,routine(a0)		; set ball to main state

return_15E8E:		
		rts
; ===========================================================================
; loc_15E90:
Obj14_LaunchCharacter:
		move.w	$12(a0),$12(a2)		; set character y velocity to inverse of sol
		neg.w	$12(a2)			; y velocity
		bset	#1,$22(a2)		; set character airborne flag
		bclr	#3,$22(a2)		; clear character on object flag
		clr.b	$3C(a2)			; clear character jumping
		move.b	#$10,$1C(a2)		; set character to spring animation
		move.b	#2,routine(a2)		; set character to airborne state
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l
; ===========================================================================
; heights of the contact point of the ball on the seesaw
; word_15EC0:
Obj14_YOffsets:
		dc.w -8,-28,-47,-28,-8	; low,balanced,high,balanced,low
; ===========================================================================
; loc_15ECA:
Obj14_Animate:
		move.b	(Timer_frames+1).w,d0
		andi.b	#3,d0
		bne.s	Obj14_SetSolToFaceMainCharacter
		bchg	#5,2(a0)
; loc_15EDA:
Obj14_SetSolToFaceMainCharacter:
		andi.b	#$FE,1(a0)
		move.w	(MainCharacter+8).w,d0
		sub.w	8(a0),d0
		bcs.s	return_15EF0
		ori.b	#1,1(a0)

return_15EF0:
		rts
; ===========================================================================
; byte_15EF2:
Obj14_SlantedCol:
		dc.b	$14,$14,$16,$18,$1A,$1C,$1A,$18,$16,$14,$13,$12,$11,$10,$F,$E
		dc.b 	 $D,$C,$B,$A, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,$FF,$FE
		dc.b	$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F2,$F2,$F2,$F2
		dc.b	$F2
; byte_15F23:
Obj14_FlatCol:
		dc.b	  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
		dc.b	  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
		dc.b	  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
		dc.b	  0
		even

; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj14_MapUnc_15F54:	binclude	"mappings/sprite/obj14_a.bin"
Obj14_MapUnc_15FE0:	binclude	"mappings/sprite/obj14_b.bin"

; ===========================================================================
; loc_15FF8:
JmpTo_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_15FFE:
JmpTo_ObjectMoveAndFall:
		jmp	(ObjectMoveAndFall).l
; loc_16004:
JmpTo_MarkObjGone2:
		jmp	(MarkObjGone2).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 16 - Diagonally moving lift from HTZ
; ---------------------------------------------------------------------------
; Sprite_1600C: Obj_0x16_Teleferics:
Obj16:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj16_Index(pc,d0.w),d1
		jmp	Obj16_Index(pc,d1.w)
; ===========================================================================
; off_1601A:
Obj16_Index:	offsetTable
		offsetTableEntry.w Obj16_Init
		offsetTableEntry.w Obj16_Main
; ===========================================================================
; loc_1601E:
Obj16_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj16_MapUnc_1611E,4(a0)
		move.w	#$43E6,2(a0)
		bsr.w	JmpTo2_Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$20,$19(a0)
		move.b	#0,$1A(a0)
		move.b	#1,$18(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#3,d0
		move.w	d0,$34(a0)
; loc_16064:
Obj16_Main:
		move.w	8(a0),-(sp)
		bsr.w	Obj16_RunSecondaryRoutine
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#-$28,d3
		move.w	(sp)+,d4
		bsr.w	PlatformObject
		bra.w	JmpTo_MarkObjGone
; ===========================================================================
; loc_16080:
Obj16_RunSecondaryRoutine:
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	Obj16_Main_States(pc,d0.w),d1
		jmp	Obj16_Main_States(pc,d1.w)
; ===========================================================================
; off_1608E:
Obj16_Main_States:	offsetTable
		offsetTableEntry.w Obj16_Wait
		offsetTableEntry.w Obj16_Slide
		offsetTableEntry.w Obj16_Fall
; ===========================================================================
; loc_16094:
Obj16_Wait:
		move.b	$22(a0),d0
		andi.b	#$18,d0		; is a player standing on it?
		beq.s	return_160BA	; if not,branch
		addq.b	#2,$25(a0)
		move.w	#$200,$10(a0)
		btst	#0,$22(a0)
		beq.s	loc_160B4
		neg.w	$10(a0)

loc_160B4:
		move.w	#$100,$12(a0)

return_160BA:
		rts
; ===========================================================================
; loc_160BC:
Obj16_Slide:
		bsr.w	JmpTo_ObjectMove
		subq.w	#1,$34(a0)
		bne.s	return_16100
		addq.b	#2,$25(a0)
		move.b	#2,$1A(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		bsr.w	SingleObjLoad2
		bne.s	return_16100
		_move.b	#$1C,0(a1)		; load obj1C (scenery)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	1(a0),1(a1)
		move.b	#6,$28(a1)

return_16100:
		rts
; ===========================================================================
; loc_16102:
Obj16_Fall:
		bsr.w	JmpTo_ObjectMove
		addi.w	#$38,$12(a0)
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$C(a0),d0
		bcs.w	JmpTo12_DeleteObject
		rts 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj16_MapUnc_1611E:	binclude	"mappings/sprite/obj16.bin"
; ===========================================================================
		nop
; loc_16204:
JmpTo12_DeleteObject:
		jmp	(DeleteObject).l
; loc_1620A:
JmpTo_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_16210:
JmpTo2_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_16216:
JmpTo_ObjectMove:
		jmp	(ObjectMove).l

;=============================================================================== 
; Object 0x19 - Oil Ocean - Elevators
; [ Begin ]		         
;===============================================================================  
Obj_0x19_Elevator: ; loc_1621C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1622A(pc,d0),d1
		jmp     loc_1622A(pc,d1)
loc_1622A:
		dc.w    loc_16238-loc_1622A
		dc.w    loc_162A0-loc_1622A
loc_1622E		
		dc.b	$20,$00,$18,$01,$20,$02,$40,$03,$30,$04
loc_16238:
		addq.b	#$02,$0024(a0)
		move.l	#Obj19_MapUnc_16412,$0004(a0) ; loc_16412
		move.w	#$63A0,$0002(a0)
		cmpi.b	#oil_ocean_zone,(Current_Zone).w
		bne.s	loc_16258
		move.w	#$6300,$0002(a0)
loc_16258:
		bsr.w	JmpTo3_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		lsr.w	#$03,d0
		andi.w	#$001E,d0
		lea	loc_1622E(pc,d0),A2
		move.b	(a2)+,$0019(a0)
		move.b	(a2)+,$001A(a0)
		move.b	#$04,$0018(a0)
		move.w	8(a0),$0030(a0)
		move.w	$000C(a0),$0032(a0)
		andi.b	#$0F,$0028(a0)
		cmpi.b	#$07,$0028(a0)
		bne.s	loc_162A0
		subi.w	#$00C0,$000C(a0)
loc_162A0:
		move.w	8(a0),-(sp)
		bsr.w	loc_162d0
		moveq	#0,d1
		move.b	$0019(a0),d1
		move.w	#$0010,d3
		move.w	(sp)+,d4
		bsr.w	PlatformObject
		move.w	$0030(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 JmpTo13_DeleteObject
		bra.w	JmpTo2_DisplaySprite
loc_162d0:
		moveq	#0,d0
		move.b	$0028(a0),d0
		andi.w	#$000F,d0
		add.w   d0,d0
		move.w	loc_162E4(pc,d0),d1
		jmp     loc_162E4(pc,d1)
loc_162E4:
		dc.w    loc_16304-loc_162E4
		dc.w    loc_1630E-loc_162E4
		dc.w    loc_1632E-loc_162E4
		dc.w    loc_1634E-loc_162E4
		dc.w    loc_1635E-loc_162E4
		dc.w    loc_1637E-loc_162E4
		dc.w    loc_16380-loc_162E4
		dc.w    loc_16380-loc_162E4
		dc.w    loc_1639C-loc_162E4
		dc.w    loc_1639C-loc_162E4
		dc.w    loc_1639C-loc_162E4
		dc.w    loc_1639C-loc_162E4
		dc.w    loc_163d6-loc_162E4
		dc.w    loc_163d6-loc_162E4
		dc.w    loc_163d6-loc_162E4
		dc.w    loc_163d6-loc_162E4
loc_16304:
		move.b	(Oscillating_Data+8).w,d0
		move.w	#$0040,d1
		bra.s	loc_16316
loc_1630E:
		move.b	(Oscillating_Data+$C).w,d0
		move.w	#$0060,d1
loc_16316:
		btst	#$00,$0022(a0)
		beq.s	loc_16322
		neg.w	d0
		add.w   d1,d0
loc_16322:
		move.w	$0030(a0),d1
		sub.w   d0,d1
		move.w	d1,8(a0)
		rts
loc_1632E:
		move.b	(Oscillating_Data+$1C).w,d0
		move.w	#$0080,d1
		btst	#$00,$0022(a0)
		beq.s	loc_16342
		neg.w	d0
		add.w   d1,d0
loc_16342:
		move.w	$0032(a0),d1
		sub.w   d0,d1
		move.w	d1,$000C(a0)
		rts
loc_1634E:
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		beq.s	loc_1635C
		addq.b	#1,$0028(a0)
loc_1635C:
		rts
loc_1635E:
		bsr.w	JmpTo2_ObjectMove
		moveq	#$08,d1
		move.w	$0032(a0),d0
		subi.w	#$0060,d0
		cmp.w	$000C(a0),d0
		bcc.s	loc_16374
		neg.w	d1
loc_16374:
		add.w   d1,$0012(a0)
		bne.s	loc_1637E
		addq.b	#1,$0028(a0)
loc_1637E:
		rts
loc_16380:
		bsr.w	JmpTo2_ObjectMove
		moveq	#$08,d1
		move.w	$0032(a0),d0
		subi.w	#$0060,d0
		cmp.w	$000C(a0),d0
		bcc.s	loc_16396
		neg.w	d1
loc_16396:
		add.w   d1,$0012(a0)
		rts
loc_1639C:
		move.b	(Oscillating_Data+$38).w,d1
		subi.b	#$40,d1
		ext.w   d1
		move.b	(Oscillating_Data+$3C).w,d2
		subi.b	#$40,d2
		ext.w   d2
		btst	#$02,d0
		beq.s	loc_163BA
		neg.w	d1
		neg.w	d2
loc_163BA:
		btst	#1,d0
		beq.s	loc_163C4
		neg.w	d1
		exg.l   d1,d2
loc_163C4:
		add.w   $0030(a0),d1
		move.w	d1,8(a0)
		add.w   $0032(a0),d2
		move.w	d2,$000C(a0)
		rts
loc_163d6:
		move.b	(Oscillating_Data+$38).w,d1
		subi.b	#$40,d1
		ext.w   d1
		move.b	(Oscillating_Data+$3C).w,d2
		subi.b	#$40,d2
		ext.w   d2
		btst	#$02,d0
		beq.s	loc_163F4
		neg.w	d1
		neg.w	d2
loc_163F4:
		btst	#1,d0
		beq.s	loc_163FE
		neg.w	d1
		exg.l   d1,d2
loc_163FE:
		neg.w	d1
		add.w   $0030(a0),d1
		move.w	d1,8(a0)
		add.w   $0032(a0),d2
		move.w	d2,$000C(a0)
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj19_MapUnc_16412:	binclude	"mappings/sprite/obj19.bin"
; ===========================================================================
		nop
; loc_16450:
JmpTo2_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_16456:
JmpTo13_DeleteObject:
		jmp	(DeleteObject).l
; loc_1645C:
JmpTo3_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_16462:
JmpTo2_ObjectMove:
		jmp	(ObjectMove).l
		
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 1B - Speed booster from CPZ
; ---------------------------------------------------------------------------
; Sprite_16468: Obj_0x1B_Speed_Booster:
Obj1B:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj1B_Index(pc,d0.w),d1
		jmp	Obj1B_Index(pc,d1.w)
; ===========================================================================
; off_16476:
Obj1B_Index:	offsetTable
		offsetTableEntry.w Obj1B_Init
		offsetTableEntry.w Obj1B_Main
; ---------------------------------------------------------------------------
; word_1647A:
Obj1B_BoosterSpeeds:
		dc.w	$1000
		dc.w	 $A00
; ===========================================================================
; loc_1647E:
Obj1B_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj1B_MapUnc_1658A,4(a0)
		move.w	#$E39C,2(a0)
		bsr.w	JmpTo4_Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$20,$19(a0)
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	Obj1B_BoosterSpeeds(pc,d0.w),$30(a0)
; loc_164B4:
Obj1B_Main:
		move.b	(Timer_frames+1).w,d0
		andi.b	#2,d0
		move.b	d0,$1A(a0)
		move.w	8(a0),d0
		move.w	d0,d1
		subi.w	#$10,d0
		addi.w	#$10,d1
		move.w	$C(a0),d2
		move.w	d2,d3
		subi.w	#$10,d2
		addi.w	#$10,d3

		lea	(MainCharacter).w,a1		; a1=character
		btst	#1,$22(a1)
		bne.s	loc_16510
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_16510
		cmp.w	d1,d4
		bcc.w	loc_16510
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_16510
		cmp.w	d3,d4
		bcc.w	loc_16510
		move.w	d0,-(sp)
		bsr.w	Obj1B_GiveBoost
		move.w	(sp)+,d0

loc_16510:
		lea	(Sidekick).w,a1			; a1=character
		btst	#1,$22(a1)
		bne.s	loc_16540
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_16540
		cmp.w	d1,d4
		bcc.w	loc_16540
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_16540
		cmp.w	d3,d4
		bcc.w	loc_16540
		bsr.w	Obj1B_GiveBoost

loc_16540:
		bra.w	JmpTo2_MarkObjGone
; ===========================================================================
; sub_16544:
Obj1B_GiveBoost:
		move.w	$30(a0),$10(a1)			; make the character go super fast
		bclr	#0,$22(a1)			; turn him right
		btst	#0,$22(a0)			; was that the correct direction?
		beq.s	loc_16562			; if yes,branch
		bset	#0,$22(a1)			; turn him left
		neg.w	$10(a1)				; make the boosting direction left

loc_16562:
		move.w	#$F,$2E(a1)			; don't let him turn around for a few frames
		move.w	$10(a1),$14(a1)			; update his inertia value
		bclr	#5,$22(a0)
		bclr	#6,$22(a0)
		bclr	#5,$22(a1)
		move.w	#SndID_Spring,d0				; play "spring" sound
		jmp	(PlaySound).l
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj1B_MapUnc_1658A:	binclude	"mappings/sprite/obj1B.bin"
; ===========================================================================
; loc_165A4:
JmpTo2_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_165AA:
JmpTo4_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l

;=============================================================================== 
; Object 0x1D - Chemical Plant - Worms
; [ Begin ]		         
;===============================================================================  
Obj_0x1D_Worms: ; loc_165B0:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_165BE(pc,d0),d1
		jmp     loc_165BE(pc,d1)
loc_165BE:
		dc.w    loc_165d0-loc_165BE
		dc.w    loc_1667E-loc_165BE
		dc.w    loc_1669C-loc_165BE
		dc.w    loc_1667E-loc_165BE
		dc.w    loc_166d0-loc_165BE		 
;loc_165C8:
		dc.w	$FB80,$FB00,$FA00,$F900		  
loc_165d0:
		addq.b	#$02,$0024(a0)
		move.w	#$FB80,$0012(a0)
		moveq	#0,d1
		move.b	$0028(a0),d1
		move.b	d1,d0
		andi.b	#$0F,d1
		moveq	#$02,d5
		andi.b	#$F0,d0
		beq.s	loc_165F0
		moveq	#$06,d5
loc_165F0:
		move.b	$0022(a0),d4
		moveq	#0,d2
		move.l	A0,A1
		bra.s	loc_16600
loc_165FA:		
		bsr.w	SingleObjLoad2      ; loc_E788
		bne.s	loc_16678
loc_16600:
		_move.b	0(a0),0(a1)
		move.b	d5,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.l	#Obj1D_MapUnc_16702,$0004(a1) ; loc_16702
		move.w	#$643C,$0002(a1)
		bsr.w	JmpTo_Adjust2PArtPointer2
		move.b	#$04,$0001(a1)
		move.b	#$03,$0018(a1)
		move.b	#$8B,$0020(a1)
		move.w	8(a1),$0038(a1)
		move.w	$000C(a1),$0030(a1)
		move.w	$0012(a0),$0012(a1)
		move.w	$0012(a1),$0034(a1)
		move.b	#$08,$0019(a1)
		move.w	#$0060,$003A(a1)
		move.w	#$000B,$0036(a1)
		andi.b	#1,d4
		beq.s	loc_16672
		neg.w	$0036(a1)
		neg.w	$003A(a1)
loc_16672:
		move.w	d2,$0032(a1)
		addq.w	#$03,d2
loc_16678:
		dbf	d1,loc_165FA
		rts
loc_1667E:
		subq.w	#1,$0032(a0)
		bpl.s	loc_16698
		addq.b	#$02,$0024(a0)
		move.w	#$003B,$0032(a0)
		move.w	#SndID_ArrowFiring,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_16698:
		bra.w	JmpTo3_MarkObjGone
loc_1669C:
		bsr.w	JmpTo3_ObjectMove
		move.w	$0036(a0),d0
		add.w   d0,$0010(a0)
		addi.w	#$0018,$0012(a0)
		bne.s	loc_166B4
		neg.w	$0036(a0)
loc_166B4:
		move.w	$0030(a0),d0
		cmp.w	$000C(a0),d0
		bhi.s	loc_166CC
		move.w	$0034(a0),$0012(a0)
		clr.w	$0010(a0)
		subq.b	#$02,$0024(a0)
loc_166CC:
		bra.w	JmpTo3_MarkObjGone
loc_166d0:
		bsr.w	JmpTo3_ObjectMove
		addi.w	#$0018,$0012(a0)
		bne.s	loc_166E8
		move.w	$003A(a0),d0
		add.w   $0038(a0),d0
		move.w	d0,8(a0)
loc_166E8:
		move.w	$0030(a0),d0
		cmp.w	$000C(a0),d0
		bhi.s	loc_166FE
		move.w	$0034(a0),$0012(a0)
		move.w	$0038(a0),8(a0)
loc_166FE:
		bra.w	JmpTo3_MarkObjGone
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj1D_MapUnc_16702:	binclude	"mappings/sprite/obj1D.bin"
; ===========================================================================
		nop
; loc_16710:
JmpTo3_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_16716:
JmpTo_Adjust2PArtPointer2:
		jmp	(Adjust2PArtPointer2).l
; loc_1671C:
JmpTo3_ObjectMove:
		jmp	(ObjectMove).l

		align 4

;=============================================================================== 
; Object 0x1E - Chemical Plant - Tube Attributes
; [ Begin ]		         
;===============================================================================		  
Obj_0x1E_Tube_Attributes: ; loc_16724:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_16740(pc,d0),d1
		jsr	 loc_16740(pc,d1)
		move.b	$002C(a0),d0
		add.b   $0036(a0),d0
		beq.w	 JmpTo_MarkObjGone3
		rts
loc_16740:
		dc.w    loc_1674A-loc_16740
		dc.w    loc_1675E-loc_16740
loc_16744:		
		dc.w	$00A0,$0100,$0120
loc_1674A:
		addq.b	#$02,$0024(a0)
		move.b	$0028(a0),d0
		add.w   d0,d0
		andi.w	#$0006,d0
		move.w	loc_16744(pc,d0),$002A(a0)
loc_1675E:
		lea	(MainCharacter).w,A1
		lea	$002C(a0),A4
		bsr.s	loc_16770
		lea	(Sidekick).w,A1
		lea	$0036(a0),A4
loc_16770:
		moveq	#0,d0
		move.b	(a4),d0
		move.w	loc_1677C(pc,d0),d0
		jmp     loc_1677C(pc,d0)
loc_1677C:
		dc.w    loc_16784-loc_1677C
		dc.w    loc_16898-loc_1677C
		dc.w    loc_1697C-loc_1677C
		dc.w    loc_169E8-loc_1677C
loc_16784:
		tst.w	(Debug_placement_mode).w
		bne.w	 loc_16896
		move.w	$002A(a0),d2
		move.w	8(a1),d0
		sub.w   8(a0),d0
		cmp.w	d2,d0
		bcc.w	 loc_16896
		move.w	$000C(a1),d1
		sub.w   $000C(a0),d1
		cmpi.w	#$0080,d1
		bcc.w	 loc_16896
		moveq	#0,d3
		cmpi.w	#$00A0,d2
		beq.s	loc_167C6
		moveq	#$08,d3
		cmpi.w	#$0120,d2
		beq.s	loc_167C6
		moveq	#$04,d3
		neg.w	d0
		addi.w	#$0100,d0
loc_167C6:
		cmpi.w	#$0080,d0
		bcs.s	loc_167FC
		moveq	#0,d2
		move.b	$0028(a0),d0
		lsr.w	#$02,d0
		andi.w	#$000F,d0
		move.b	loc_167EC(pc,d0),d2
		cmpi.b	#$02,d2
loc_167E0:
		bne.s	loc_16806
		move.b	(Timer_frames).w,d2
		andi.b	#1,d2
		bra.s	loc_16806
loc_167EC:
		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$02,$00,$01,$02,$01
loc_167FC:
		moveq	#$02,d2
		cmpi.w	#$0040,d1
		bcc.s	loc_16806
		moveq	#$03,d2
loc_16806:
		move.b	d2,$0001(a4)
		add.w   d3,d2
		add.w   d2,d2
		andi.w	#$001E,d2
		lea	loc_16AFE(pc),A2
		adda.w	$00(A2,d2),A2
		move.w	(a2)+,$0004(a4)
		subq.w	#$04,$0004(a4)
		move.w	(a2)+,d4
		add.w   8(a0),d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		add.w   $000C(a0),d5
		move.w	d5,$000C(a1)
		move.l	A2,$0006(a4)
		move.w	(a2)+,d4
		add.w   8(a0),d4
loc_16840:
		move.w	(a2)+,d5
		add.w   $000C(a0),d5
		addq.b	#$02,(a4)
		move.b	#$81,$002A(a1)
		move.b	#$02,$001C(a1)
		move.w	#$0800,$0014(a1)
		move.w	#0,$0010(a1)
loc_16860:
		move.w	#0,$0012(a1)
		bclr	#$05,$0022(a0)
		bclr	#$05,$0022(a1)
		bset	#1,$0022(a1)
		move.b	#$00,$003C(a1)
		bclr	#$07,$0002(a1)
		move.w	#$0800,d2
		bsr.w	loc_16A80
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_16896:
		rts
loc_16898:
		subq.b	#1,$0002(a4)
		bpl.s	loc_168DC
		move.l	$0006(a4),A2
		move.w	(a2)+,d4
		add.w   8(a0),d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		add.w   $000C(a0),d5
		move.w	d5,$000C(a1)
		tst.b	$0001(a4)
		bpl.s	loc_168BE
		subq.w	#$08,A2
loc_168BE:
		move.l	A2,$0006(a4)
		subq.w	#$04,$0004(a4)
		beq.s	loc_16902
		move.w	(a2)+,d4
		add.w   8(a0),d4
		move.w	(a2)+,d5
		add.w   $000C(a0),d5
		move.w	#$0800,d2
		bra.w	loc_16A80
loc_168DC:
		move.l	8(a1),d2
		move.l	$000C(a1),d3
		move.w	$0010(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d2
		move.w	$0012(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d3
		move.l	d2,8(a1)
		move.l	d3,$000C(a1)
		rts
loc_16902:
		cmpi.b	#$04,$0001(a4)
		bcc.s	loc_16924
		move.b	$0028(a0),d0
		andi.w	#$00FC,d0
		add.b   $0001(a4),d0
		move.b	#$04,$0001(a4)
		move.b	loc_1693C(pc,d0),d0
		bne.w	 loc_16A10
loc_16924:
		andi.w	#$07FF,$000C(a1)
		move.b	#$06,(a4)
		clr.b   $002A(a1)
		move.w	#SndID_SpindashRelease,d0
		jmp	(PlaySound).l             ; loc_14C6
loc_1693C:
		dc.b	$02,$01,$00,$00,$FF,$03,$00,$00,$04,$FE,$00,$00,$FD,$FC,$00,$00
		dc.b	$FB,$FB,$00,$00,$07,$06,$00,$00,$F9,$FA,$00,$00,$08,$09,$00,$00
		dc.b	$F8,$F7,$00,$00,$0B,$0A,$00,$00,$0C,$00,$00,$00,$F5,$F6,$00,$00
		dc.b	$F4,$00,$00,$00,$00,$0D,$00,$00,$F3,$0E,$00,$00,$00,$F2,$00,$00
loc_1697C:
		subq.b	#1,$0002(a4)
		bpl.s	loc_169B0
		move.l	$0006(a4),A2
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$000C(a1)
		tst.b	$0001(a4)
		bpl.s	loc_1699A
		subq.w	#$08,A2
loc_1699A:
		move.l	A2,$0006(a4)
		subq.w	#$04,$0004(a4)
		beq.s	loc_169d6
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$0800,d2
		bra.w	loc_16A80
loc_169B0:
		move.l	8(a1),d2
		move.l	$000C(a1),d3
		move.w	$0010(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d2
		move.w	$0012(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d3
		move.l	d2,8(a1)
		move.l	d3,$000C(a1)
		rts
loc_169d6:
		andi.w	#$07FF,$000C(a1)
		clr.b   (a4)
		move.w	#SndID_SpindashRelease,d0
		jmp	(PlaySound).l             ; loc_14C6
loc_169E8:
		move.w	$002A(a0),d2
		move.w	8(a1),d0
		sub.w   8(a0),d0
		cmp.w	d2,d0
		bcc.w	 loc_16A0C
		move.w	$000C(a1),d1
		sub.w   $000C(a0),d1
		cmpi.w	#$0080,d1
		bcc.w	 loc_16A0C
		rts
loc_16A0C:
		clr.b   (a4)
		rts
loc_16A10:
		bpl.s	loc_16A42
		neg.b   d0
		move.b	#$FC,$0001(a4)
		add.w   d0,d0
		lea	(loc_17006).l,A2
		adda.w	$00(A2,d0),A2
		move.w	(a2)+,d0
		subq.w	#$04,d0
		move.w	d0,$0004(a4)
		lea	$00(A2,d0),A2
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$000C(a1)
		subq.w	#$08,A2
		bra.s	loc_16A62
loc_16A42:
		add.w   d0,d0
		lea	(loc_17006).l,A2
		adda.w	$00(A2,d0),A2
		move.w	(a2)+,$0004(a4)
		subq.w	#$04,$0004(a4)
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$000C(a1)
loc_16A62:
		move.l	A2,$0006(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$0800,d2
		bsr.w	loc_16A80
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l             ; loc_14C6
		addq.b	#$02,(a4)
		rts
loc_16A80:
		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w   8(a1),d0
		bge.s   loc_16A90
		neg.w	d0
		neg.w	d2
loc_16A90:
		moveq	#0,d1
		move.w	d5,d1
		sub.w   $000C(a1),d1
		bge.s   loc_16A9E
		neg.w	d1
		neg.w	d3
loc_16A9E:
		cmp.w	d0,d1
		bcs.s	loc_16Ad0
		moveq	#0,d1
		move.w	d5,d1
		sub.w   $000C(a1),d1
		swap	d1
		divs.w  d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w   8(a1),d0
		beq.s	loc_16ABC
		swap	d0
		divs.w  d1,d0
loc_16ABC:
		move.w	d0,$0010(a1)
		move.w	d3,$0012(a1)
		tst.w	d1
		bpl.s	loc_16ACA
		neg.w	d1
loc_16ACA:
		move.w	d1,$0002(a4)
		rts
loc_16Ad0:
		moveq	#0,d0
		move.w	d4,d0
		sub.w   8(a1),d0
		swap	d0
		divs.w  d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w   $000C(a1),d1
		beq.s	loc_16AEA
		swap	d1
		divs.w  d0,d1
loc_16AEA:
		move.w	d1,$0012(a1)
		move.w	d2,$0010(a1)
		tst.w	d0
		bpl.s	loc_16AF8
		neg.w	d0
loc_16AF8:
		move.w	d0,$0002(a4)
		rts
loc_16AFE:              
		dc.w    loc_16B16-loc_16AFE
		dc.w    loc_16B8C-loc_16AFE
		dc.w    loc_16BEA-loc_16AFE
		dc.w    loc_16C60-loc_16AFE
		dc.w    loc_16CBE-loc_16AFE
		dc.w    loc_16d30-loc_16AFE
		dc.w    loc_16D8E-loc_16AFE
		dc.w    loc_16E00-loc_16AFE
		dc.w    loc_16E5E-loc_16AFE
		dc.w    loc_16Ed4-loc_16AFE
		dc.w    loc_16F32-loc_16AFE
		dc.w    loc_16FA8-loc_16AFE
loc_16B16:
		dc.w	$0074
		dc.w	$0090,$0010,$0090,$0070,$0040,$0070,$0035,$006F
		dc.w	$0028,$006A,$001E,$0062,$0015,$0058,$0011,$004A
		dc.w	$0010,$0040,$0011,$0035,$0015,$0027,$001E,$001E
		dc.w	$0028,$0015,$0035,$0011,$0040,$0010,$0050,$0010
		dc.w	$005E,$0012,$0068,$0018,$006D,$0024,$0070,$0030
		dc.w	$006D,$003D,$0068,$0048,$005E,$004E,$0050,$0050
		dc.w	$0030,$0050,$0022,$0052,$0017,$005A,$0011,$0063
		dc.w	$0010,$0070 
loc_16B8C:
		dc.w	$005C
		dc.w	$0090,$0010,$0090,$0070,$0040,$0070,$002E,$006E
		dc.w	$001D,$0062,$0013,$0053,$0010,$0040,$0013,$002D
		dc.w	$001D,$001E,$002E,$0013,$0040,$0010,$0058,$0010
		dc.w	$0064,$0014,$006C,$001A,$0070,$0028,$006C,$0036
		dc.w	$0064,$003C,$0058,$0040,$004B,$003D,$0040,$0038
		dc.w	$0036,$0032,$0028,$0030,$0010,$0030
loc_16BEA:
		dc.w	$0074
		dc.w	$0010,$0070,$0011,$0063,$0017,$005A,$0022,$0052
		dc.w	$0030,$0050,$0050,$0050,$005E,$004E,$0068,$0048
		dc.w	$006D,$003D,$0070,$0030,$006D,$0024,$0068,$0018
		dc.w	$005E,$0012,$0050,$0010,$0040,$0010,$0035,$0011
		dc.w	$0028,$0015,$001E,$001E,$0015,$0027,$0011,$0035
		dc.w	$0010,$0040,$0011,$004A,$0015,$0058,$001E,$0062
		dc.w	$0028,$006A,$0035,$006F,$0040,$0070,$0090,$0070
		dc.w	$0090,$0010
loc_16C60:
		dc.w	$005C
		dc.w	$0010,$0030,$0028,$0030,$0036,$0032,$0040,$0038
		dc.w	$004B,$003D,$0058,$0040,$0064,$003C,$006C,$0036
		dc.w	$0070,$0028,$006C,$001A,$0064,$0014,$0058,$0010
		dc.w	$0040,$0010,$002E,$0013,$001D,$001E,$0013,$002D
		dc.w	$0010,$0040,$0013,$0053,$001D,$0062,$002E,$006E
		dc.w	$0040,$0070,$0090,$0070,$0090,$0010
loc_16CBE:
		dc.w	$0070
		dc.w	$0010,$0010,$0010,$0070,$00C0,$0070,$00CA,$006F
		dc.w	$00d4,$006C,$00DB,$0068,$00E3,$0062,$00E8,$005A
		dc.w	$00ED,$0052,$00EF,$0048,$00F0,$0040,$00EF,$0036
		dc.w	$00ED,$002E,$00E8,$0026,$00E3,$001E,$00DB,$0017
		dc.w	$00d4,$0014,$00CA,$0012,$00C0,$0010,$00B7,$0011
		dc.w	$00AF,$0012,$00A6,$0017,$009E,$001E,$0097,$0026
		dc.w	$0093,$002E,$0091,$0036,$0090,$0040,$0090,$0070		  
loc_16d30:
		dc.w	$005C
		dc.w	$0010,$0010,$0010,$0070,$00C0,$0070,$00d2,$006E
		dc.w	$00E3,$0062,$00ED,$0053,$00F0,$0040,$00ED,$002D
		dc.w	$00E3,$001E,$00d2,$0013,$00C0,$0010,$00A8,$0010
		dc.w	$009C,$0014,$0094,$001A,$0090,$0028,$0094,$0036
		dc.w	$009C,$003C,$00A8,$0040,$00B5,$003D,$00C0,$0038
		dc.w	$00CA,$0032,$00D8,$0030,$00F0,$0030
loc_16D8E:
		dc.w	$0070
		dc.w	$0090,$0070,$0090,$0040,$0091,$0036,$0093,$002E
		dc.w	$0097,$0026,$009E,$001E,$00A6,$0017,$00AF,$0012
		dc.w	$00B7,$0011,$00C0,$0010,$00CA,$0012,$00d4,$0014
		dc.w	$00DB,$0017,$00E3,$001E,$00E8,$0026,$00ED,$002E
		dc.w	$00EF,$0036,$00F0,$0040,$00EF,$0048,$00ED,$0052
		dc.w	$00E8,$005A,$00E3,$0062,$00DB,$0068,$00d4,$006C
		dc.w	$00CA,$006F,$00C0,$0070,$0010,$0070,$0010,$0010		
loc_16E00:
		dc.w	$005C
		dc.w	$00F0,$0030,$00D8,$0030,$00CA,$0032,$00C0,$0038
		dc.w	$00B5,$003D,$00A8,$0040,$009C,$003C,$0094,$0036
		dc.w	$0090,$0028,$0094,$001A,$009C,$0014,$00A8,$0010
		dc.w	$00C0,$0010,$00d2,$0013,$00E3,$001E,$00ED,$002D
		dc.w	$00F0,$0040,$00ED,$0053,$00E3,$0062,$00d2,$006E
		dc.w	$00C0,$0070,$0010,$0070,$0010,$0010
loc_16E5E:
		dc.w	$0074
		dc.w	$0110,$0010,$0110,$0070,$0040,$0070,$0035,$006F
		dc.w	$0028,$006A,$001E,$0062,$0015,$0058,$0011,$004A
		dc.w	$0010,$0040,$0011,$0035,$0015,$0027,$001E,$001E
		dc.w	$0028,$0015,$0035,$0011,$0040,$0010,$0050,$0010
		dc.w	$005E,$0012,$0068,$0018,$006D,$0024,$0070,$0030
		dc.w	$006D,$003D,$0068,$0048,$005E,$004E,$0050,$0050
		dc.w	$0030,$0050,$0022,$0052,$0017,$005A,$0011,$0063
		dc.w	$0010,$0070
loc_16Ed4:
		dc.w	$005C
		dc.w	$0110,$0010,$0110,$0070,$0040,$0070,$002E,$006E
		dc.w	$001D,$0062,$0013,$0053,$0010,$0040,$0013,$002D
		dc.w	$001D,$001E,$002E,$0013,$0040,$0010,$0058,$0010
		dc.w	$0064,$0014,$006C,$001A,$0070,$0028,$006C,$0036
		dc.w	$0064,$003C,$0058,$0040,$004B,$003D,$0040,$0038
		dc.w	$0036,$0032,$0028,$0030,$0010,$0030
loc_16F32:
		dc.w	$0074
		dc.w	$0010,$0070,$0011,$0063,$0017,$005A,$0022,$0052
		dc.w	$0030,$0050,$0050,$0050,$005E,$004E,$0068,$0048
		dc.w	$006D,$003D,$0070,$0030,$006D,$0024,$0068,$0018
		dc.w	$005E,$0012,$0050,$0010,$0040,$0010,$0035,$0011
		dc.w	$0028,$0015,$001E,$001E,$0015,$0027,$0011,$0035
		dc.w	$0010,$0040,$0011,$004A,$0015,$0058,$001E,$0062
		dc.w	$0028,$006A,$0035,$006F,$0040,$0070,$0110,$0070
		dc.w	$0110,$0010
loc_16FA8:
		dc.w	$005C
		dc.w	$0010,$0030,$0028,$0030,$0036,$0032,$0040,$0038
		dc.w	$004B,$003D,$0058,$0040,$0064,$003C,$006C,$0036
		dc.w	$0070,$0028,$006C,$001A,$0064,$0014,$0058,$0010
		dc.w	$0040,$0010,$002E,$0013,$001D,$001E,$0013,$002D
		dc.w	$0010,$0040,$0013,$0053,$001D,$0062,$002E,$006E
		dc.w	$0040,$0070,$0110,$0070,$0110,$0010
loc_17006:
		dc.w    loc_17024-loc_17006
		dc.w    loc_17024-loc_17006
		dc.w    loc_1703A-loc_17006
		dc.w    loc_17064-loc_17006
		dc.w    loc_1707A-loc_17006
		dc.w    loc_17090-loc_17006
		dc.w    loc_170A6-loc_17006
		dc.w    loc_170B8-loc_17006
		dc.w    loc_170d2-loc_17006
		dc.w    loc_170EC-loc_17006
		dc.w    loc_170FE-loc_17006
		dc.w    loc_17110-loc_17006
		dc.w    loc_1712A-loc_17006
		dc.w    loc_17140-loc_17006
		dc.w    loc_1714E-loc_17006
loc_17024:
		dc.w	$0014
		dc.w	$0790,$03B0,$0710,$03B0,$0710,$06B0,$0A90,$06B0
		dc.w	$0A90,$0670
loc_1703A:
		dc.w	$0028
		dc.w	$0790,$03F0,$0790,$04B0,$0A00,$04B0,$0C10,$04B0
		dc.w	$0C10,$0330,$0D90,$0330,$0D90,$01B0,$0F10,$01B0
		dc.w	$0F10,$02B0,$0F90,$02B0
loc_17064:
		dc.w	$0014
		dc.w	$0AF0,$0630,$0E90,$0630,$0E90,$06B0,$0F90,$06B0
		dc.w	$0F90,$0670
loc_1707A:
		dc.w	$0014
		dc.w	$0F90,$02F0,$0F90,$04B0,$0F10,$04B0,$0F10,$0630
		dc.w	$0F90,$0630
loc_17090:
		dc.w	$0014
		dc.w	$1410,$0530,$1190,$0530,$1190,$06B0,$1410,$06B0
		dc.w	$1410,$0570
loc_170A6:
		dc.w	$0010
		dc.w	$1AF0,$0530,$1B90,$0530,$1B90,$0330,$1E10,$0330
loc_170B8:
		dc.w	$0018
		dc.w	$1A90,$0570,$1A90,$05B0,$1C10,$05B0,$1C10,$0430
		dc.w	$1E10,$0430,$1E10,$0370
loc_170d2:
		dc.w	$0018
		dc.w	$2490,$0370,$2490,$03d0,$2390,$03d0,$2390,$05d0
		dc.w	$2510,$05d0,$2510,$0570
loc_170EC:
		dc.w	$0010
		dc.w	$24F0,$0330,$2590,$0330,$2590,$0530,$2570,$0530
loc_170FE:
		dc.w	$0010
		dc.w	$0310,$0330,$0290,$0330,$0290,$0230,$0490,$0230
loc_17110:
		dc.w	$0018
		dc.w	$0310,$0370,$0310,$03B0,$0410,$03B0,$0410,$02B0
		dc.w	$0490,$02B0,$0490,$0270
loc_1712A:
		dc.w	$0014
		dc.w	$0490,$06F0,$0490,$0730,$0690,$0730,$0890,$0730
		dc.w	$0890,$06F0
loc_17140:
		dc.w	$000C
		dc.w	$0BF0,$0330,$0D90,$0330,$0D90,$02F0
loc_1714E:
		dc.w	$001C
		dc.w	$0D90,$02B0,$0C90,$02B0,$0C90,$00B0,$0E80,$00B0
		dc.w	$1110,$00B0,$1110,$0230,$10F0,$0230 
;=============================================================================== 
; Object 0x1E - Chemical Plant - Tube Attributes
; [ End ]		         
;===============================================================================		   
; loc_1716C:
JmpTo_MarkObjGone3:
		jmp     (MarkObjGone3).l

		align 4
;=============================================================================== 
; Object 0x20 - Fireball - Hill Top 
; [ Begin ]		         
;===============================================================================  
Obj_0x20_Fireball: ; loc_17174:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_17182(pc,d0),d1
		jmp     loc_17182(pc,d1)
loc_17182:
		dc.w    loc_17190-loc_17182
		dc.w    loc_171F2-loc_17182
		dc.w    loc_17200-loc_17182
		dc.w    loc_1729A-loc_17182
		dc.w    loc_172C0-loc_17182
		dc.w    loc_1734E-loc_17182
		dc.w    loc_173AE-loc_17182
loc_17190:
		addq.b	#$02,$0024(a0)
		move.b	#$08,$0016(a0)
		move.b	#$08,$0017(a0)
		move.l	#Fireball_Mappings,$0004(a0) ; loc_173d0
		move.w	#$8416,$0002(a0)
		bsr.w	JmpTo5_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$03,$0018(a0)
		move.b	#$08,$0019(a0)
		move.w	$000C(a0),$0030(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		lsl.w	#$03,d0
		andi.w	#$0780,d0
		neg.w	d0
		move.w	d0,$0010(a0)
		move.w	d0,$0012(a0)
		move.b	$0028(a0),d0
		andi.w	#$000F,d0
		lsl.w	#$04,d0
		move.w	d0,$0032(a0)
		move.w	d0,$0034(a0)
loc_171F2:
		lea	(loc_173B2).l,A1
		bsr.w	JmpTo_AnimateSprite
		bra.w	JmpTo4_MarkObjGone
loc_17200:
		cmpi.b	#$05,$001E(a0)
		bne.s	loc_17230
		bsr.w	JmpTo_SingleObjLoad2
		bne.s	loc_17222
		bsr.s	loc_1723E
		bsr.w	JmpTo_SingleObjLoad2
		bne.s	loc_17222
		bsr.s	loc_1723E
		neg.w	$0010(a1)
		bset	#$00,$0001(a1)
loc_17222:
		move.w	#SndID_ArrowFiring,d0
		jsr	(PlaySound).l             ; loc_14C6
		addq.b	#$02,$0024(a0)
loc_17230:
		lea	(loc_173B2).l,A1
		bsr.w	JmpTo_AnimateSprite
		bra.w	JmpTo4_MarkObjGone
loc_1723E:
		_move.b	#$20,0(a1)
		move.b	#$08,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	$0010(a0),$0010(a1)
		move.w	$0012(a0),$0012(a1)
		move.b	#$08,$0016(a1)
		move.b	#$08,$0017(a1)
		move.l	$0004(a0),$0004(a1)
		move.w	$0002(a0),$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$03,$0018(a1)
		move.b	#$08,$0019(a1)
		move.b	#$8B,$0020(a1)
		move.w	$000C(a1),$0030(a1)
		rts
loc_1729A:
		subq.w	#1,$0032(a0)
		bpl.s	loc_172B2
		move.w	$0034(a0),$0032(a0)
		move.b	#$02,$0024(a0)
		move.w	#$0001,$001C(a0)
loc_172B2:
		lea	(loc_173B2).l,A1
		bsr.w	JmpTo_AnimateSprite
		bra.w	JmpTo4_MarkObjGone
loc_172C0:
		subq.b	#1,$001E(a0)
		bpl.s	loc_172d6
		move.b	#$07,$001E(a0)
		addq.b	#1,$001A(a0)
		andi.b	#1,$001A(a0)
loc_172d6:
		bsr.w	JmpTo4_ObjectMove
		addi.w	#$0018,$0012(a0)
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$00E0,d0
		cmp.w	$000C(a0),d0
		bcc.s	loc_172F2
		bra.w	JmpTo14_DeleteObject
loc_172F2:
		bclr	#1,$0001(a0)
		tst.w	$0012(a0)
		bmi.s	loc_1734A
		bset	#1,$0001(a0)
		bsr.w	ObjHitFloor             ; loc_13898
		tst.w	d1
		bpl.s	loc_1734A
		add.w   d1,$000C(a0)
		addq.b	#$02,$0024(a0)
		move.b	#$02,$001C(a0)
		move.b	#$04,$001A(a0)
		move.w	#0,$0012(a0)
		move.l	#$00017410,$0004(a0)
		move.w	#$839E,$0002(a0)
		bsr.w	JmpTo5_Adjust2PArtPointer
		move.b	#$00,$001A(a0)
		move.w	#$0009,$0032(a0)
		move.b	#$03,$0036(a0)
loc_1734A:
		bra.w	JmpTo4_MarkObjGone
loc_1734E:
		subq.w	#1,$0032(a0)
		bpl.s	loc_173A0
		move.w	#$007F,$0032(a0)
		subq.b	#1,$0036(a0)
		bmi.s	loc_173A0
		bsr.w	JmpTo_SingleObjLoad2
		bne.s	loc_173A0
		moveq	#0,d0
		move.w	#$000F,d1
loc_1736C:		
		move.l	$00(A0,d0),$00(A1,d0)
		addq.w	#$04,d0
		dbf	d1,loc_1736C
		move.w	#$0009,$0032(a1)
		move.w	#$0200,$001C(a1)
		move.w	#$000E,d0
		tst.w	$0010(a1)
		bpl.s	loc_17390
		neg.w	d0
loc_17390:
		add.w   d0,8(a1)
		move.l	A1,-(sp)
		bsr.w	loc_138CE
		move.l	(sp)+,A1
		add.w   d1,$000C(a1)
loc_173A0:
		lea	(loc_173B2).l,A1
		bsr.w	JmpTo_AnimateSprite
		bra.w	JmpTo4_MarkObjGone
loc_173AE:
		bra.w	JmpTo14_DeleteObject
loc_173B2:
		dc.w    loc_173B8-loc_173B2
		dc.w    loc_173BF-loc_173B2
		dc.w    loc_173C2-loc_173B2
loc_173B8:
		dc.b	$0B,$02,$03,$FC,$04,$FD,$01
loc_173BF:
		dc.b	$7F,$05,$FF
loc_173C2:
		dc.b	$05,$04,$05,$02,$03,$00,$01,$00,$01,$02,$03,$04,$05,$FC
Fireball_Mappings:		
loc_173d0:
		dc.w    loc_173DC-loc_173d0
		dc.w    loc_173E6-loc_173d0
		dc.w    loc_173F0-loc_173d0
		dc.w    loc_173FA-loc_173d0
		dc.w    loc_17404-loc_173d0
		dc.w    loc_1740E-loc_173d0
loc_173DC:
		dc.w	$0001
		dc.l	$F8050000,$0000FFF8
loc_173E6:
		dc.w	$0001
		dc.l	$F8050004,$0002FFF8
loc_173F0:
		dc.w	$0001
		dc.l	$F9050008,$0004FFF8
loc_173FA:
		dc.w	$0001
		dc.l	$F6050008,$0004FFF8
loc_17404:
		dc.w	$0001
		dc.l	$F605000C,$0006FFF8
loc_1740E:
		dc.w	$0000
loc_17410_B:
		dc.w    loc_1741C-loc_17410_B
		dc.w    loc_17426-loc_17410_B
		dc.w    loc_17430-loc_17410_B
		dc.w    loc_1743A-loc_17410_B
		dc.w    loc_17444-loc_17410_B
		dc.w    loc_1744E-loc_17410_B
loc_1741C:
		dc.w	$0001
		dc.l	$F0070000,$0000FFF8
loc_17426:
		dc.w	$0001
		dc.l	$F0070800,$0800FFF8
loc_17430:
		dc.w	$0001
		dc.l	$F0070008,$0004FFF8
loc_1743A:
		dc.w	$0001
		dc.l	$F0070808,$0804FFF8
loc_17444:
		dc.w	$0001
		dc.l	$00050010,$0008FFF8
loc_1744E:
		dc.w	$0001
		dc.l	$00050810,$0808FFF8    
; loc_17458:
JmpTo14_DeleteObject:
		jmp	(DeleteObject).l
; loc_1745E:
JmpTo4_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_17464:
JmpTo_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1746A:
JmpTo_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_17470:
JmpTo5_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_17476:
JmpTo4_ObjectMove:
		jmp	(ObjectMove).l
;=============================================================================== 
; Object 0x20 - Fireball - Hill Top 
; [ End ]		         
;=============================================================================== 
;=============================================================================== 
; Object 0x2F - Hill Top - Breakable Floor
; [ Begin ]		         
;=============================================================================== 
Obj_0x2F_Breakable_Floor: ; loc_1747C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1748A(pc,d0),d1
		jmp     loc_1748A(pc,d1)
loc_1748A:
		dc.w    loc_1749A-loc_1748A
		dc.w    loc_174D8-loc_1748A
		dc.w    loc_1764C-loc_1748A
loc_17490:
		dc.b	$24,$00,$20,$02,$18,$04,$10,$06,$08,$08
loc_1749A:
		addq.b	#$02,$0024(a0)
		move.l	#Obj2F_MapUnc_1786A,$0004(a0) ; loc_1786A
		move.w	#$C000,$0002(a0)
		bsr.w	JmpTo6_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$04,$0018(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		andi.w	#$001E,d0
		lea	loc_17490(pc,d0),A2
		move.b	(a2)+,$0016(a0)
		move.b	(a2)+,$001A(a0)
loc_174D8:
		move.w	(Chain_Bonus_counter).w,$0038(a0)
		move.b	(MainCharacter+$1C).w,$0032(a0)
		move.b	(Sidekick+$1C).w,$0033(a0)
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	JmpTo_SolidObject
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		bne.s	loc_17514
loc_17510:		
		bra.w	JmpTo5_MarkObjGone
loc_17514:
		cmpi.b	#$18,d0
		bne.s	loc_17578
		cmpi.b	#$02,$0032(a0)
		bne.s	loc_17530
		tst.b	$0028(a0)
		bmi.s	loc_17560
		cmpi.b	#$0E,(MainCharacter+$3E).w
		beq.s	loc_17560
loc_17530:
		move.b	#$0C,(MainCharacter+$3E).w
		move.b	#$0D,(MainCharacter+$3F).w
		cmpi.b	#$02,$0033(a0)
		bne.s	loc_17552
		tst.b	$0028(a0)
		bmi.s	loc_17560
		cmpi.b	#$0E,(Sidekick+$3E).w
		beq.s	loc_17560
loc_17552:
		move.b	#$0C,(Sidekick+$3E).w
		move.b	#$0D,(Sidekick+$3F).w
		bra.s	loc_17510
loc_17560:
		lea	(MainCharacter).w,A1
		move.b	$0032(a0),d0
		bsr.s	loc_175AE
		lea	(Sidekick).w,A1
		move.b	$0033(a0),d0
		bsr.s	loc_175AE
		bra.w	loc_17614
loc_17578:
		move.b	d0,d1
		andi.b	#$08,d1
		beq.s	loc_175E0
		cmpi.b	#$02,$0032(a0)
		bne.s	loc_17596
		tst.b	$0028(a0)
		bmi.s	loc_175A6
		cmpi.b	#$0E,(MainCharacter+$3E).w
		beq.s	loc_175A6
loc_17596:
		move.b	#$0C,(MainCharacter+$3E).w
		move.b	#$0D,(MainCharacter+$3F).w
		bra.w	loc_17510
loc_175A6:
		lea	(MainCharacter).w,A1
		bsr.s	loc_175B4
		bra.s	loc_17614
loc_175AE:
		cmpi.b	#$02,d0
		bne.s	loc_175CC
loc_175B4:
		bset	#$02,$0022(a1)
		move.b	#$0E,$0016(a1)
		move.b	#$07,$0017(a1)
		move.b	#$02,$001C(a1)
loc_175CC:
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$02,$0024(a1)
		rts
loc_175E0:
		andi.b	#$10,d0
		beq.w	 loc_17510
		cmpi.b	#$02,$0033(a0)
		bne.s	loc_175FE
		tst.b	$0028(a0)
		bmi.s	loc_1760E
		cmpi.b	#$0E,(Sidekick+$3E).w
		beq.s	loc_1760E
loc_175FE:
		move.b	#$0C,(Sidekick+$3E).w
		move.b	#$0D,(Sidekick+$3F).w
		bra.w	loc_17510
loc_1760E:
		lea	(Sidekick).w,A1
		bsr.s	loc_175B4
loc_17614:
		move.w	$0038(a0),(Chain_Bonus_counter).w
		andi.b	#$E7,$0022(a0)
		lea	(loc_17662).l,A4
		moveq	#0,d0
		move.b	$001A(a0),d0
		addq.b	#1,$001A(a0)
		move.l	d0,d1
		add.w   d0,d0
		add.w   d0,d0
		lea	$00(A4,d0),A4
		neg.w	d1
		addi.w	#$0009,d1
		move.w	#$0018,d2
		bsr.w	JmpTo_BreakObjectToPieces
		bsr.w	loc_17818
loc_1764C:
		bsr.w	JmpTo5_ObjectMove
		addi.w	#$0018,$0012(a0)
		tst.b	$0001(a0)
		bpl.w	 JmpTo15_DeleteObject
		bra.w	JmpTo3_DisplaySprite
loc_17662:
		dc.w	$FF00,$F800,$0100,$F800,$FF20,$F900,$00E0,$F900
		dc.w	$FF40,$FA00,$00C0,$FA00,$FF60,$FB00,$00A0,$FB00
		dc.w	$FF80,$FC00,$0080,$FC00  
;=============================================================================== 
; Object 0x2F - Hill Top - Breakable Floor
; [ End ]		         
;===============================================================================  
;=============================================================================== 
; Object 0x32 - Rock - Hill Top / Tunel Obstacule - Chemical Plant
; [ Begin ]		         
;=============================================================================== 
Obj_0x32_Breakable_Obstacule: ; loc_1768A:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_17698(pc,d0),d1
		jmp     loc_17698(pc,d1)
loc_17698:
		dc.w    loc_1769E-loc_17698
		dc.w    loc_176F2-loc_17698
		dc.w    loc_177DA-loc_17698
loc_1769E:
		addq.b	#$02,$0024(a0)
		move.l	#Obj32_MapUnc_179C2,$0004(a0) ; loc_179C2
		move.w	#$43B2,$0002(a0)
		move.b	#$18,$0019(a0)
		move.l	#loc_177F0,$003C(a0)
		cmpi.b	#chemical_plant_zone,(Current_Zone).w
		bne.s	loc_176E2
		move.l	#Obj32_MapUnc_179F6,$0004(a0) ; loc_179F6
		move.w	#$6430,$0002(a0)
		move.b	#$10,$0019(a0)
		move.l	#loc_17808,$003C(a0)
loc_176E2:
		bsr.w	JmpTo6_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$04,$0018(a0)
loc_176F2:
		move.w	(Chain_Bonus_counter).w,$0038(a0)
		move.b	(MainCharacter+$1C).w,$0032(a0)
		move.b	(Sidekick+$1C).w,$0033(a0)
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		move.w	#$0010,d2
		move.w	#$0011,d3
		move.w	8(a0),d4
		bsr.w	JmpTo_SolidObject
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		bne.s	loc_1772C
loc_17728:		
		bra.w	JmpTo5_MarkObjGone
loc_1772C:
		cmpi.b	#$18,d0
		bne.s	loc_1775A
		cmpi.b	#$02,$0032(a0)
		beq.s	loc_17742
		cmpi.b	#$02,$0033(a0)
		bne.s	loc_17728
loc_17742:
		lea	(MainCharacter).w,A1
		move.b	$0032(a0),d0
		bsr.s	loc_17772
		lea	(Sidekick).w,A1
		move.b	$0033(a0),d0
		bsr.s	loc_17772
		bra.w	loc_177C2
loc_1775A:
		move.b	d0,d1
		andi.b	#$08,d1
		beq.s	loc_177AA
		cmpi.b	#$02,$0032(a0)
		bne.s	loc_17728
		lea	(MainCharacter).w,A1
		bsr.s	loc_17778
		bra.s	loc_177C2
loc_17772:
		cmpi.b	#$02,d0
		bne.s	loc_17796
loc_17778:
		bset	#$02,$0022(a1)
		move.b	#$0E,$0016(a1)
		move.b	#$07,$0017(a1)
		move.b	#$02,$001C(a1)
		move.w	#$Fd00,$0012(a1)
loc_17796:
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$02,$0024(a1)
		rts
loc_177AA:
		andi.b	#$10,d0
		beq.w	 loc_17728
		cmpi.b	#$02,$0033(a0)
		bne.w	 loc_17728
		lea	(Sidekick).w,A1
		bsr.s	loc_17778
loc_177C2:
		move.w	$0038(a0),(Chain_Bonus_counter).w
		andi.b	#$E7,$0022(a0)
		move.l	$003C(a0),A4
		bsr.w	JmpTo_BreakObjectToPieces
		bsr.w	loc_17818
loc_177DA:
		bsr.w	JmpTo5_ObjectMove
		addi.w	#$0018,$0012(a0)
		tst.b	$0001(a0)
		bpl.w	 JmpTo15_DeleteObject
		bra.w	JmpTo3_DisplaySprite
loc_177F0:
		dc.w	$FE00,$FE00,$0000,$FD80,$0200,$FE00,$FE40,$FE40
		dc.w	$0000,$FE00,$01C0,$FE40
loc_17808:
		dc.w	$FF00,$FE00,$0100,$FE00,$FF40,$FE40,$00C0,$FE40		
;=============================================================================== 
; Object 0x32 - Rock - Hill Top / Tunel Obstacule - Chemical Plant
; [ End ]		         
;===============================================================================              
loc_17818:
		bsr.w	JmpTo_SingleObjLoad
		bne.s	loc_17860
		_move.b	#$29,0(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	(Chain_Bonus_counter).w,d2
		addq.w	#$02,(Chain_Bonus_counter).w
		cmpi.w	#$0006,d2
		bcs.s	loc_17840
		moveq	#$06,d2
loc_17840:
		moveq	#0,d0
		move.w	loc_17862(pc,d2),d0
		cmpi.w	#$0020,(Chain_Bonus_counter).w
		bcs.s	loc_17854
		move.w	#$03E8,d0
		moveq	#$0A,d2
loc_17854:
		jsr	 AddPoints               ; (loc_22Fd0)
		lsr.w	#1,d2
		move.b	d2,$001A(a1)
loc_17860:
		rts
loc_17862:
		dc.w	$000A,$0014,$0032,$0064
; ---------------------------------------------------------------------------
; Sprite mappings - Obj2F
; ---------------------------------------------------------------------------
Obj2F_MapUnc_1786A:	binclude	"mappings/sprite/obj2F.bin"
; ---------------------------------------------------------------------------
; Sprite mappings - Obj32
; ---------------------------------------------------------------------------
Obj32_MapUnc_179C2:	binclude	"mappings/sprite/obj32_HTZ.bin"	; HTZ rock
Obj32_MapUnc_179F6:	binclude	"mappings/sprite/obj32_CPZ.bin" ; CPZ tube cover
; ===========================================================================
		nop
; loc_17A1C:
JmpTo3_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_17A22:
JmpTo15_DeleteObject:
		jmp	(DeleteObject).l
; loc_17A28:
JmpTo_SingleObjLoad:
		jmp	(SingleObjLoad).l
; loc_17A2E:
JmpTo5_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_17A34:
JmpTo6_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_17A3A:
JmpTo_BreakObjectToPieces:
		jmp	(BreakObjectToPieces).l
; loc_17A40:
JmpTo_SolidObject:
		jmp	(SolidObject).l
; loc_17A46:
JmpTo5_ObjectMove:
		jmp	(ObjectMove).l

;=============================================================================== 
; Object 0x30 - 
; [ Begin ]		         
;===============================================================================		  
Obj_0x30: ; loc_17A4C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_17A5A(pc,d0),d1
		jmp     loc_17A5A(pc,d1)
loc_17A5A:
		dc.w    loc_17A68-loc_17A5A
		dc.w    loc_17AB4-loc_17A5A
loc_17A5E:
		dc.w	$C000,$C000,$C000,$E000,$FF00
loc_17A68:
		addq.b	#$02,$0024(a0)
		move.w	$000C(a0),$0032(a0)
		move.w	8(a0),$0030(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		move.b	loc_17A5E(pc,d0),$0019(a0)
		cmpi.b	#$06,d0
		bcs.s	loc_17AB4
		bne.s	loc_17A96
		cmpi.w	#$0380,(Camera_Y_pos).w
		bcc.s	loc_17AB4
		bra.s	loc_17A9E
loc_17A96:
		cmpi.w	#$0380,(Camera_Y_pos).w
		bcs.s	loc_17AB4
loc_17A9E:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	loc_17AB0
		bclr	#$07,$02(A2,d0)
loc_17AB0:
		bra.w	JmpTo16_DeleteObject
loc_17AB4:
		move.w	$0032(a0),d0
		add.w   (Camera_BG_Y_offset).w,d0
		move.w	d0,$000C(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		move.w	loc_17AD8(pc,d0),d1
		jsr	 loc_17AD8(pc,d1)
		tst.b	(Screen_Shaking_Flag_HTZ).w
		beq.w	 JmpTo2_MarkObjGone3
		rts
loc_17AD8:
		dc.w    loc_17AE2-loc_17AD8
		dc.w    loc_17AE2-loc_17AD8
		dc.w    loc_17AFA-loc_17AD8
		dc.w    loc_17B40-loc_17AD8
		dc.w    loc_17B5A-loc_17AD8
loc_17AE2:
		move.w	#$00CB,d1
		move.w	#$0080,d2
		move.w	#$0081,d3
		move.w	8(a0),d4
		bsr.w	JmpTo_SolidObject_Always
		bra.w	loc_FBF4
loc_17AFA:
		move.w	#$00CB,d1
		move.w	#$0078,d2
		move.w	#$0079,d3
		move.w	8(a0),d4
		bsr.w	JmpTo_SolidObject_Always
		bsr.w	loc_FBF4
loc_17B12:               
		btst	#$03,$0022(a0)
		beq.s	loc_17B28
		move.l	A0,-(sp)
		move.l	A0,A1
		lea	(MainCharacter).w,A0
		bsr.w	JmpTo_Touch_ChkHurt
		move.l	(sp)+,A0
loc_17B28:
		btst	#$04,$0022(a0)
		beq.s	loc_17B3E
		move.l	A0,-(sp)
		move.l	A0,A1
		lea	(Sidekick).w,A0
		bsr.w	JmpTo_Touch_ChkHurt
		move.l	(sp)+,A0
loc_17B3E:
		rts
loc_17B40:
		move.w	#$00EB,d1
		move.w	#$0078,d2
		move.w	#$0079,d3
		move.w	8(a0),d4
		bsr.w	JmpTo_SolidObject_Always
		bsr.w	loc_FBF4
		bra.s	loc_17B12
loc_17B5A:
		move.w	#$010A,d1
		move.w	#$003E,d2
		move.w	8(a0),d4
		lea	(loc_17B74).l,A2
		bsr.w	JmpTo_SlopedSolid
		bra.w	loc_FBF4     
loc_17B74:
		dc.b	$40,$40,$40,$40,$40,$40,$40,$40,$3F,$3F,$3E,$3E,$3D,$3D,$3C,$3C
		dc.b	$3B,$3B,$3A,$3A,$39,$39,$38,$38,$37,$37,$36,$36,$35,$35,$34,$34
		dc.b	$33,$33,$32,$32,$31,$31,$30,$30,$2F,$2F,$2E,$2E,$2D,$2D,$2C,$2C
		dc.b	$2B,$2B,$2A,$2A,$29,$29,$28,$28,$27,$27,$26,$26,$25,$25,$24,$24
		dc.b	$23,$23,$22,$22,$21,$21,$20,$20,$1F,$1F,$1E,$1E,$1D,$1D,$1C,$1C
		dc.b	$1B,$1B,$1A,$1A,$19,$19,$18,$18,$17,$17,$16,$16,$15,$15,$14,$14
		dc.b	$13,$13,$12,$12,$11,$11,$10,$10,$0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C
		dc.b	$0B,$0B,$0A,$0A,$09,$09,$08,$08,$07,$07,$06,$06,$05,$05,$04,$04
		dc.b	$03,$03,$02,$02,$01,$01,$00,$00,$FF,$FF,$FE,$FE,$FD,$FD,$FC,$FC
		dc.b	$FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8,$F7,$F7,$F6,$F6,$F5,$F5,$F4,$F4
		dc.b	$F3,$F3,$F2,$F2,$F1,$F1,$F0,$F0,$EF,$EF,$EE,$EE,$ED,$ED,$EC,$EC
		dc.b	$EB,$EB,$EA,$EA,$E9,$E9,$E8,$E8,$E7,$E7,$E6,$E6,$E5,$E5,$E4,$E4
		dc.b	$E3,$E3,$E2,$E2,$E1,$E1,$E0,$E0,$DF,$DF,$DE,$DE,$DD,$DD,$DC,$DC
		dc.b	$DB,$DB,$DA,$DA,$D9,$D9,$D8,$D8,$d7,$d7,$d6,$d6,$d5,$d5,$d4,$d4
		dc.b	$d3,$d3,$d2,$d2,$d1,$d1,$d0,$d0,$CF,$CF,$CE,$CE,$CD,$CD,$CC,$CC
		dc.b	$CB,$CB,$CA,$CA,$C9,$C9,$C8,$C8,$C7,$C7,$C6,$C6,$C5,$C5,$C4,$C4
		dc.b	$C3,$C3,$C2,$C2,$C1,$C1,$C0,$C0,$C0,$C0,$C0,$C0		         
;=============================================================================== 
; Object 0x30 - 
; [ End ]		         
;===============================================================================  
; loc_17C80:
JmpTo16_DeleteObject:
		jmp	(DeleteObject).l
; loc_17C86:
JmpTo_Touch_ChkHurt:
		jmp	(Touch_ChkHurt).l
; loc_17C8C:
JmpTo2_MarkObjGone3:
		jmp     (MarkObjGone3)
; loc_17C92:
JmpTo_SolidObject_Always:
		jmp	(SolidObject_Always).l
; loc_17C98:
JmpTo_SlopedSolid:
		jmp	(SlopedSolid).l

		align 4

;=============================================================================== 
; Object 0x33 - Oil Ocean - Touch to Boost Up
; [ Begin ]		         
;===============================================================================		  
Obj_0x33_Touch_Booster: ; loc_17CA0:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_17CAE(pc,d0),d1
		jmp     loc_17CAE(pc,d1)
loc_17CAE:
		dc.w    loc_17CB2-loc_17CAE
		dc.w    loc_17CF6-loc_17CAE
loc_17CB2:
		addq.b	#$02,$0024(a0)
		move.l	#Obj33_MapUnc_17EE2,$0004(a0) ; loc_17EE2
		move.w	#$632C,$0002(a0)
		bsr.w	JmpTo7_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$03,$0018(a0)
		move.b	#$18,$0019(a0)
		move.w	$000C(a0),$0030(a0)
		addq.b	#$02,$0025(a0)
		move.w	#$0078,$0036(a0)
		tst.b	$0028(a0)
		beq.s	loc_17CF6
		move.b	#$04,$0025(a0)
loc_17CF6:
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_17d22(pc,d0),d1
		jsr	 loc_17d22(pc,d1)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#$08,d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	JmpTo2_SolidObject
		bra.w	JmpTo6_MarkObjGone
loc_17d22:
		dc.w    loc_17d2C-loc_17d22
		dc.w    loc_17d46-loc_17d22
		dc.w    loc_17D82-loc_17d22
		dc.w    loc_17E68-loc_17d22
		dc.w    loc_17EE0-loc_17d22
loc_17d2C:
		subq.w	#1,$0036(a0)
		bpl.s	loc_17d44
		move.w	#$0078,$0036(a0)
		move.l	#$FFF69800,$0032(a0)
		addq.b	#$02,$0025(a0)
loc_17d44:
		rts
loc_17d46:
		move.l	$000C(a0),d1
		add.l   $0032(a0),d1
		move.l	d1,$000C(a0)
		addi.l	#$00003800,$0032(a0)
		swap	d1
		cmp.w	$0030(a0),d1
		bcs.s	loc_17D80
		move.l	$0032(a0),d0
		cmpi.l	#$00010000,d0
		bcc.s	loc_17d72
		subq.b	#$02,$0025(a0)
loc_17d72:
		lsr.l	#$02,d0
		neg.l   d0
		move.l	d0,$0032(a0)
		move.w	$0030(a0),$000C(a0)
loc_17D80:
		rts
loc_17D82:
		move.w	8(a0),d2
		move.w	d2,d3
		subi.w	#$0010,d2
		addi.w	#$0010,d3
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		beq.s	loc_17DF0
		cmpi.b	#$18,d0
		beq.s	loc_17DF2
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		bsr.s	loc_17DAE
		lea	(Sidekick).w,A1
		addq.b	#1,d6
loc_17DAE:
		btst	d6,$0022(a0)
		beq.s	loc_17DF0
		move.w	8(a1),d0
		cmp.w	d2,d0
		bcs.s	loc_17DF0
		cmp.w	d3,d0
		bcc.s	loc_17DF0
		move.b	#1,$002A(a1)
		move.w	#0,$0014(a1)
		move.w	#0,$0010(a1)
		move.w	#0,$0012(a1)
		bclr	#$05,$0022(a1)
		bclr	#$07,$0002(a1)
		move.l	#$FFF69800,$0032(a0)
		addq.b	#$02,$0025(a0)
loc_17DF0:
		rts
loc_17DF2:
		lea	(MainCharacter).w,A1
		move.w	8(a1),d0
		cmp.w	d2,d0
		bcs.s	loc_17E66
		cmp.w	d3,d0
		bcc.s	loc_17E66
		lea	(Sidekick).w,A2
		move.w	8(a2),d0
		cmp.w	d2,d0
		bcs.s	loc_17E66
		cmp.w	d3,d0
		bcc.s	loc_17E66
		move.b	#1,$002A(a1)
		move.w	#0,$0014(a1)
		move.w	#0,$0010(a1)
		move.w	#0,$0012(a1)
		bclr	#$05,$0022(a1)
		bclr	#$07,$0002(a1)
		move.b	#1,$002A(a2)
		move.w	#0,$0014(a2)
		move.w	#0,$0010(a2)
		move.w	#0,$0012(a2)
		bclr	#$05,$0022(a2)
		bclr	#$07,$0002(a2)
		move.l	#$FFF69800,$0032(a0)
		addq.b	#$02,$0025(a0)
loc_17E66:
		rts
loc_17E68:
		move.l	$000C(a0),d1
		add.l   $0032(a0),d1
		move.l	d1,$000C(a0)
		addi.l	#$00003800,$0032(a0)
		swap	d1
		move.w	$0030(a0),d0
		subi.w	#$007D,d0
		cmp.w	d0,d1
		bne.s	loc_17EDE
		addq.b	#$02,$0025(a0)
		lea	(MainCharacter).w,A1
		move.b	$0022(a0),d0
		andi.b	#$08,d0
		bsr.s	loc_17EA8
		lea	(Sidekick).w,A1
		move.b	$0022(a0),d0
		andi.b	#$10,d0
loc_17EA8:
		beq.s	loc_17EDE
		move.w	8(a0),8(a1)
		move.b	#$02,$001C(a1)
		move.w	#$0800,$0014(a1)
		bset	#1,$0022(a1)
		move.w	#$F000,$0012(a1)
		bclr	#$03,$0022(a1)
		move.b	#$00,$002A(a1)
		move.w	#SndID_Spring,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_17EDE:
		rts
loc_17EE0:
		rts

; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj33_MapUnc_17EE2:	binclude	"mappings/sprite/obj33.bin"
; ===========================================================================
		nop
; loc_17EF8:
JmpTo6_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_17EFE:
JmpTo7_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_17F04:
JmpTo2_SolidObject:
		jmp	(SolidObject).l

		align 4

;=============================================================================== 
; Object 0x43 - Oil Ocean - Giant Spikeball
; [ Begin ]		         
;===============================================================================		 
Obj_0x43_Giant_Spikeball: ; loc_17F0C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_17F1A(pc,d0),d1
		jmp     loc_17F1A(pc,d1)
loc_17F1A:
		dc.w    loc_17F32-loc_17F1A
		dc.w    loc_17Fd6-loc_17F1A
		dc.w    loc_18028-loc_17F1A
loc_17F20:
		dc.b	$00,$68,$00,$00,$00,$00,$01,$E8,$FF,$E8,$00,$18,$01,$A8,$FF,$A8
		dc.b	$FF,$D8
loc_17F32:
		addq.b	#$02,$0024(a0)
		move.w	#$C30C,$0002(a0)
		bsr.w	JmpTo8_Adjust2PArtPointer
		moveq	#0,d1
		move.b	$0028(a0),d1
		lea	loc_17F20(pc,d1),A2
		move.b	(a2)+,d1
		move.l	A0,A1
		bra.s	loc_17F74
loc_17F50:		
		bsr.w	JmpTo2_SingleObjLoad2
		bne.s	loc_17FA0
		_move.b	0(a0),0(a1)
		move.b	#$04,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.b	#1,$0036(a1)
loc_17F74:
		move.l	#Obj43_MapUnc_1808E,$0004(a1) ; loc_1808E
		move.w	$0002(a0),$0002(a1)
		move.b	#$04,$0001(a1)
		move.b	#$04,$0018(a1)
		move.b	#$18,$0019(a1)
		move.b	#$A5,$0020(a1)
		move.w	8(a1),$0030(a1)
loc_17FA0:
		dbf	d1,loc_17F50
		move.l	A0,$003C(a1)
		move.l	A1,$003C(a0)
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$0030(a0),d0
		sub.w   d1,d0
		move.w	d0,$0032(a0)
		move.w	d0,$0032(a1)
		add.w   d1,d0
		add.w   d1,d0
		move.w	d0,$0034(a0)
		move.w	d0,$0034(a1)
		move.w	(a2)+,d0
		add.w   d0,8(a0)
		move.w	(a2)+,d0
		add.w   d0,8(a1)
loc_17Fd6:
		bsr.s	loc_18032
		move.w	$0032(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bls.s   loc_17FFC
		move.w	$0034(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	loc_18002
loc_17FFC:
		jmp     DisplaySprite           ; (loc_d3C2)
loc_18002:
		move.l	$003C(a0),A1
		cmpa.l  A0,A1
		beq.s	loc_18010
		jsr	 (DeleteObject2)
loc_18010:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	JmpTo17_DeleteObject
		bclr	#$07,$02(A2,d0)
; loc_18022:
JmpTo17_DeleteObject:
		jmp	(DeleteObject).l
loc_18028:
		bsr.s	loc_18032
		bsr.s	loc_18068
		jmp     DisplaySprite           ; (loc_d3C2)
loc_18032:
		tst.b	$0036(a0)
		bne.s	loc_18050
		move.w	8(a0),d0
		subq.w	#1,d0
		cmp.w	$0032(a0),d0
		bne.s	loc_1804A
		move.b	#1,$0036(a0)
loc_1804A:
		move.w	d0,8(a0)
		rts
loc_18050:
		move.w	8(a0),d0
		addq.w	#1,d0
		cmp.w	$0034(a0),d0
		bne.s	loc_18062
		move.b	#$00,$0036(a0)
loc_18062:
		move.w	d0,8(a0)
		rts
loc_18068:
		move.l	$003C(a0),A1
		move.w	8(a0),d0
		subi.w	#$0018,d0
		move.w	8(a1),d2
		addi.w	#$0018,d2
		cmp.w	d0,d2
		bne.s	loc_1808C
		eori.b  #1,$0036(a0)
		eori.b  #1,$0036(a1)
loc_1808C:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj43_MapUnc_1808E:	binclude	"mappings/sprite/obj43.bin"
; ===========================================================================
		nop
; loc_180C4:
JmpTo2_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_180CA:
JmpTo8_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 07 - Oil Ocean in OOZ
; ---------------------------------------------------------------------------
; Sprite_180d0: Obj_0x07:
Obj07:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj07_Index(pc,d0.w),d1
		jmp	Obj07_Index(pc,d1.w)
; ===========================================================================
; off_180DE:
Obj07_Index:	offsetTable
		offsetTableEntry.w Obj07_Init
		offsetTableEntry.w Obj07_Main
; ===========================================================================
; loc_180E2:
Obj07_Init:
		addq.b	#2,routine(a0)
		move.w	#$758,$C(a0)
		move.b	#$20,$19(a0)
		move.w	$C(a0),$30(a0)
		move.b	#$30,$38(a0)
		bset	#7,$22(a0)
; loc_18104:
Obj07_Main:
		; check player 1
		lea	(MainCharacter).w,a1
		moveq	#8,d1
		move.b	$22(a0),d0
		and.b	d1,d0
		bne.s	Obj07_CheckKillChar1
		cmpi.b	#$30,$38(a0)
		beq.s	Obj07_CheckSupportChar1
		addq.b	#1,$38(a0)
		bra.s	Obj07_CheckSupportChar1
; ---------------------------------------------------------------------------
; loc_18120:
Obj07_CheckKillChar1:
		tst.b	$38(a0)
		beq.s	Obj07_SuffocateCharacter
		subq.b	#1,$38(a0)
; loc_1812A:
Obj07_CheckSupportChar1:
		moveq	#$20,d1
		moveq	#0,d3
		move.b	$38(a0),d3
		moveq	#3,d6
		move.w	8(a1),d4
		move.w	d4,8(a0)
		bsr.w	JmpTo_PlatformObject_SingleCharacter	; stop the character from falling past the oil

		; check 2
		lea	(Sidekick).w,a1
		moveq	#$10,d1
		move.b	$22(a0),d0
		and.b	d1,d0
		bne.s	Obj07_CheckKillChar2
		cmpi.b	#$30,$3A(a0)
		beq.s	Obj07_CheckSupportChar2
		addq.b	#1,$3A(a0)
		bra.s	Obj07_CheckSupportChar2
; ---------------------------------------------------------------------------
; loc_1815C:
Obj07_CheckKillChar2:
		tst.b	$3A(a0)
		beq.s	Obj07_SuffocateCharacter
		subq.b	#1,$3A(a0)
; loc_18166:
Obj07_CheckSupportChar2:
		moveq	#$20,d1
		moveq	#0,d3
		move.b	$3A(a0),d3
		moveq	#4,d6
		move.w	8(a1),d4
		move.w	d4,8(a0)
		bsr.w	JmpTo_PlatformObject_SingleCharacter	; stop the character from falling past the oil
		rts
; ---------------------------------------------------------------------------
; loc_1817E:
Obj07_SuffocateCharacter:
		not.b	d1
		and.b	d1,$22(a0)
		move.l	a0,-(sp)
		movea.l	a0,a2
		movea.l	a1,a0
		bsr.w	JmpTo3_KillCharacter
		movea.l	(sp)+,a0
		rts
; ===========================================================================
		nop
; loc_18194:
JmpTo3_KillCharacter:
		jmp	(KillSonic).l
; loc_1819A:
JmpTo_PlatformObject_SingleCharacter:
		jmp	(PlatformObject_SingleCharacter).l

;=============================================================================== 
; Object 0x45 - Oil Ocean - Spring Push to Boost 
; [ Begin ]		         
;===============================================================================  
Obj_0x45_Spring_Push_Boost: ; loc_181A0:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_181B2(pc,d0),d1
		jsr	 loc_181B2(pc,d1)
		bra.w	JmpTo7_MarkObjGone
loc_181B2:
		dc.w    loc_181B8-loc_181B2
		dc.w    loc_1822E-loc_181B2
		dc.w    loc_18322-loc_181B2
loc_181B8:
		addq.b	#$02,$0024(a0)
		move.l	#Obj45_MapUnc_185C2,$0004(a0) ; loc_185C2
		move.w	#$43C5,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$04,$0018(a0)
		move.b	$0028(a0),d0
		lsr.w	#$03,d0
		andi.w	#$000E,d0
		move.w	loc_181EE(pc,d0),d0
		jmp     loc_181EE(pc,d0)
loc_181EE:
		dc.w    loc_18216-loc_181EE
		dc.w    loc_181F2-loc_181EE
loc_181F2:
		move.b	#$04,$0024(a0)
		move.b	#1,$001C(a0)
		move.b	#$0A,$001A(a0)
		move.w	#$43C5,$0002(a0)
		move.b	#$14,$0019(a0)
		move.w	8(a0),$0034(a0)
loc_18216:
		move.b	$0028(a0),d0
		andi.w	#$0002,d0
		move.w	loc_1822A(pc,d0),$0030(a0)
		bsr.w	JmpTo9_Adjust2PArtPointer
		rts
loc_1822A:
		dc.w	$F000,$F600
loc_1822E:
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		bne.s	loc_18244
		tst.b	$0032(a0)
		beq.s	loc_18250
		subq.b	#1,$0032(a0)
		bra.s	loc_18250
loc_18244:
		cmpi.b	#$09,$0032(a0)
		beq.s	loc_1826E
		addq.b	#1,$0032(a0)
loc_18250:
		moveq	#0,d3
		move.b	$0032(a0),d3
		move.b	d3,$001A(a0)
		add.w   d3,d3
		move.w	#$001B,d1
		move.w	#$0014,d2
		move.w	8(a0),d4
		bsr.w	JmpTo_SolidObject45
		rts
loc_1826E:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		bsr.s	loc_1827C
		lea	(Sidekick).w,A1
		moveq	#$04,d6
loc_1827C:
		bclr	d6,$0022(a0)
		beq.w	 loc_18320
		move.w	$0030(a0),$0012(a1)
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$10,$001C(a1)
		move.b	#$02,$0024(a1)
		move.b	$0028(a0),d0
		bpl.s	loc_182AE
		move.w	#0,$0010(a1)
loc_182AE:
		btst	#$00,d0
		beq.s	loc_182EE
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#$00,$002C(a1)
		move.b	#$04,$002D(a1)
		btst	#1,d0
		bne.s	loc_182DE
		move.b	#1,$002C(a1)
loc_182DE:
		btst	#$00,$0022(a1)
		beq.s	loc_182EE
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_182EE:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_18304
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_18304:
		cmpi.b	#$08,d0
		bne.s	loc_18316
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_18316:
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6
loc_18320:
		rts
loc_18322:
		move.b	#$00,$0036(a0)
		move.w	#$001F,d1
		move.w	#$000C,d2
		move.w	#$000D,d3
		move.w	8(a0),d4
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	JmpTo_SolidObject_Always_SingleCharacter
		cmpi.w	#$0001,d4
		bne.s	loc_18368
		move.b	$0022(a0),d1
		move.w	8(a0),d2
		sub.w   8(a1),d2
		bcs.s	loc_1835E
		eori.b  #1,d1
loc_1835E:
		andi.b	#1,d1
		bne.s	loc_18368
		bsr.w	loc_183E4
loc_18368:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	JmpTo_SolidObject_Always_SingleCharacter
		cmpi.w	#$0001,d4
		bne.s	loc_18396
		move.b	$0022(a0),d1
		move.w	8(a0),d2
		sub.w   8(a1),d2
		bcs.s	loc_1838E
		eori.b  #1,d1
loc_1838E:
		andi.b	#1,d1
		bne.s	loc_18396
		bsr.s	loc_183E4
loc_18396:
		tst.b	$0036(a0)
		bne.s	loc_183E2
		move.w	$0034(a0),d0
		cmp.w	8(a0),d0
		beq.s	loc_183E2
		bcc.s	loc_183C4
		subq.b	#$04,$001A(a0)
		subq.w	#$04,8(a0)
		cmp.w	8(a0),d0
		bcs.s	loc_183DE
		move.b	#$0A,$001A(a0)
		move.w	$0034(a0),8(a0)
		bra.s	loc_183DE
loc_183C4:
		subq.b	#$04,$001A(a0)
		addq.w	#$04,8(a0)
		cmp.w	8(a0),d0
		bcc.s	loc_183DE
		move.b	#$0A,$001A(a0)
		move.w	$0034(a0),8(a0)
loc_183DE:
		bsr.w	loc_18478
loc_183E2:
		rts
loc_183E4:
		btst	#$00,$0022(a0)
		beq.s	loc_18420
		btst	#$00,$0022(a1)
		bne.w	 loc_18476
		tst.w	d0
		bne.w	 loc_18406
		tst.w	$0014(a1)
		beq.s	loc_18476
		bpl.s	loc_18470
		bra.s	loc_18476
loc_18406:
		move.w	$0034(a0),d0
		addi.w	#$0012,d0
		cmp.w	8(a0),d0
		beq.s	loc_18470
		addq.w	#1,8(a0)
		moveq	#1,d0
		move.w	#$0040,d1
		bra.s	loc_1844E
loc_18420:
		btst	#$00,$0022(a1)
		beq.s	loc_18476
		tst.w	d0
		bne.w	 loc_18436
		tst.w	$0014(a1)
		bmi.s	loc_18470
		bra.s	loc_18476
loc_18436:
		move.w	$0034(a0),d0
		subi.w	#$0012,d0
		cmp.w	8(a0),d0
		beq.s	loc_18470
		subq.w	#1,8(a0)
		moveq	#-1,d0
		move.w	#$FFC0,d1
loc_1844E:
		add.w   d0,8(a1)
		move.w	d1,$0014(a1)
		move.w	#0,$0010(a1)
		move.w	$0034(a0),d0
		sub.w   8(a0),d0
		bcc.s	loc_18468
		neg.w	d0
loc_18468:
		addi.w	#$000A,d0
		move.b	d0,$001A(a0)
loc_18470:
		move.b	#1,$0036(a0)
loc_18476:
		rts
loc_18478:
		move.b	$0022(a0),d0
		andi.b	#$60,d0
		beq.w	 loc_18578
		lea	(MainCharacter).w,A1
		moveq	#$05,d6
		bsr.s	loc_18492
		lea	(Sidekick).w,A1
		moveq	#$06,d6
loc_18492:
		bclr	d6,$0022(a0)
		beq.w	 loc_18578
		move.w	$0034(a0),d0
		sub.w   8(a0),d0
		bcc.s	loc_184A6
		neg.w	d0
loc_184A6:
		addi.w	#$000A,d0
		lsl.w	#$07,d0
		neg.w	d0
		move.w	d0,$0010(a1)
		subq.w	#$04,8(a1)
		bset	#$00,$0022(a1)
		btst	#$00,$0022(a0)
		bne.s	loc_184d4
		bclr	#$00,$0022(a1)
		addi.w	#8,8(a1)
		neg.w	$10(a1)
loc_184d4:
		move.w	#$000F,$002E(a1)
		move.w	$0010(a1),$0014(a1)
		btst	#2,$22(a1)
		bne.s	loc_184EE
		move.b	#0,$1C(a1)
loc_184EE:
		move.b	$28(a0),d0
		bpl.s	loc_184FA
		move.w	#0,$12(a1)
loc_184FA:
		btst	#0,d0
		beq.s	loc_1853A
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_1852A
		move.b	#3,$2C(a1)
loc_1852A:
		btst	#0,$22(a1)
		beq.s	loc_1853A
		neg.b   $27(a1)
		neg.w	$14(a1)
loc_1853A:
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18550
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
loc_18550:
		cmpi.b	#8,d0
		bne.s	loc_18562
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)
loc_18562:
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6
loc_18578:
		rts 
loc_1857A:   ; Unused Obj Conf
		dc.w    loc_1857E-loc_1857A
		dc.w    loc_185A0-loc_1857A
loc_1857E:
		dc.b	$00,$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$09,$09,$09,$09,$09
		dc.b	$09,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00,$00,$00,$00,$00
		dc.b	$00,$FF
loc_185A0:
		dc.b	$00,$0A,$0B,$0C,$0D,$0E,$0F,$10,$11,$12,$13,$13,$13,$13,$13,$13
		dc.b	$13,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$0A,$0A,$0A,$0A,$0A
		dc.b	$0A,$FF		
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj45_MapUnc_185C2:	binclude	"mappings/sprite/obj45.bin"
; ===========================================================================

;=============================================================================== 
; Object 0x46 - Oil Ocean - Spring With Ball - Sonic call stay on ball 
; [ Begin ]		         
;===============================================================================  
Obj_0x46_Spring_Ball: ; loc_18ABE:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_18ACC(pc,d0),d1
		jmp     loc_18ACC(pc,d1)
loc_18ACC:
		dc.w    loc_18Ad4-loc_18ACC
		dc.w    loc_18B92-loc_18ACC
		dc.w    loc_18BE0-loc_18ACC
		dc.w    loc_18C84-loc_18ACC
loc_18Ad4:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	loc_18AF0
		bclr	#$07,$02(A2,d0)
		bset	#$00,$02(A2,d0)
		bne.w	 JmpTo18_DeleteObject
loc_18AF0:
		addq.b	#$02,$0024(a0)
		move.b	#$0F,$0016(a0)
		move.b	#$0F,$0017(a0)
		move.l	#Obj46_MapUnc_18CFA,$0004(a0) ; loc_18CFA
		move.w	#$6354,$0002(a0)
		bsr.w	JmpTo9_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$03,$0018(a0)
		move.w	8(a0),$0034(a0)
		move.w	$000C(a0),$0036(a0)
		move.b	#$10,$0019(a0)
		move.b	#$00,$001A(a0)
		move.w	#0,$0014(a0)
		move.b	#1,$001F(a0)
		bsr.w	JmpTo2_SingleObjLoad
		bne.s	loc_18B8E
		_move.b	#$46,0(a1)
		addq.b	#$06,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		addi.w	#$0012,$000C(a1)
		move.l	#Obj45_MapUnc_185C2,$0004(a1) ; loc_185C2
		move.w	#$43C5,$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$10,$0019(a1)
		move.b	#$04,$0018(a1)
		move.b	#$09,$001A(a1)
		move.l	A0,$003C(a1)
loc_18B8E:
		move.l	A1,$003C(a0)
loc_18B92:
		btst	#$06,(Ctrl_2_Press).w
		bne.s	loc_18BAC
		lea	(ButtonVine_Trigger).w,A2
		moveq	#0,d0
		move.b	$0028(a0),d0
		lsr.w	#$04,d0
		tst.b	$00(A2,d0)
		beq.s	loc_18BD8
loc_18BAC:
		addq.b	#$02,$0024(a0)
		bset	#1,$0022(a0)
		move.w	#$Fd00,$0012(a0)
		move.w	#$0100,$0014(a0)
		move.l	$003C(a0),A1
		move.b	#1,$0030(a1)
		btst	#$00,$0022(a0)
		beq.s	loc_18BD8
		neg.w	$0014(a0)
loc_18BD8:
		bsr.w	loc_18C98
		bra.w	JmpTo7_MarkObjGone
loc_18BE0:
		move.w	8(a0),-(sp)
		bsr.w	JmpTo6_ObjectMove
		btst	#1,$0022(a0)
		beq.s	loc_18C34
		addi.w	#$0018,$0012(a0)
		bmi.s	loc_18C32
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$00E0,d0
		cmp.w	$000C(a0),d0
		bcs.s	loc_18C6C
		jsr	 ObjHitFloor             ; (loc_13898)
		tst.w	d1
		bpl.w	 loc_18C32
		add.w   d1,$000C(a0)
		clr.w	$0012(a0)
		bclr	#1,$0022(a0)
		move.w	#$0100,$0010(a0)
		btst	#$00,$0022(a0)
		beq.s	loc_18C32
		neg.w	$0010(a0)
loc_18C32:
		bra.s	loc_18C4C
loc_18C34:
		jsr	 ObjHitFloor             ; (loc_13898)
		cmpi.w	#8,d1
		blt.s   loc_18C48
		bset	#1,$0022(a0)
		bra.s	loc_18C4C
loc_18C48:
		add.w   d1,$000C(a0)
loc_18C4C:
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		move.w	#$0010,d2
		move.w	#$0011,d3
		move.w	(sp)+,d4
		bsr.w	JmpTo3_SolidObject
		bsr.w	loc_18C98
		bra.w	JmpTo7_MarkObjGone
loc_18C6C:
		move.w	(sp)+,d4
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	loc_18C80
		bclr	#$07,$02(A2,d0)
loc_18C80:
		bra.w	JmpTo18_DeleteObject
loc_18C84:
		tst.b	$0030(a0)
		beq.s	loc_18C94
		subq.b	#1,$001A(a0)
		bne.s	loc_18C94
		clr.b   $0030(a0)
loc_18C94:
		bra.w	JmpTo7_MarkObjGone
loc_18C98:
		tst.b	$001A(a0)
		beq.s	loc_18CA6
		move.b	#$00,$001A(a0)
		rts
loc_18CA6:
		move.b	$0014(a0),d0
		beq.s	loc_18Cd2
		bmi.s	loc_18CDA
		subq.b	#1,$001E(a0)
		bpl.s	loc_18Cd2
		neg.b   d0
		addq.b	#$08,d0
		bcs.s	loc_18CBC
		moveq	#0,d0
loc_18CBC:
		move.b	d0,$001E(a0)
		move.b	$001F(a0),d0
		addq.b	#1,d0
		cmpi.b	#$04,d0
		bne.s	loc_18CCE
		moveq	#1,d0
loc_18CCE:
		move.b	d0,$001F(a0)
loc_18Cd2:
		move.b	$001F(a0),$001A(a0)
		rts
loc_18CDA:
		subq.b	#1,$001E(a0)
		bpl.s	loc_18Cd2
		addq.b	#$08,d0
		bcs.s	loc_18CE6
		moveq	#0,d0
loc_18CE6:
		move.b	d0,$001E(a0)
		move.b	$001F(a0),d0
		subq.b	#1,d0
		bne.s	loc_18CF4
		moveq	#$03,d0
loc_18CF4:
		move.b	d0,$001F(a0)
		bra.s	loc_18Cd2 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj46_MapUnc_18CFA:	binclude	"mappings/sprite/obj46.bin"
; ===========================================================================
		nop
; loc_18d6C:
JmpTo18_DeleteObject:
		jmp	(DeleteObject).l
; loc_18d72:
JmpTo2_SingleObjLoad:
		jmp	(SingleObjLoad).l
; loc_18d78:
JmpTo7_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_18d7E:
JmpTo9_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_18D84:
JmpTo3_SolidObject:
		jmp	(SolidObject).l
; loc_18D8A:
JmpTo_SolidObject_Always_SingleCharacter:
		jmp	(SolidObject_Always_SingleCharacter).l
; loc_18D90:
JmpTo_SolidObject45:
		jmp	(SolidObject45).l
; loc_18D96:
JmpTo6_ObjectMove:
		jmp	(ObjectMove).l

;=============================================================================== 
; Object 0x47 - Switch - Oil Ocean / Dust Hill
; [ Begin ]		         
;===============================================================================		  
Obj_0x47_Switch: ; loc_18D9C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_18DAA(pc,d0),d1
		jmp     loc_18DAA(pc,d1)  
loc_18DAA:		  
		dc.w    loc_18DAE-loc_18DAA
		dc.w    loc_18DDA-loc_18DAA
loc_18DAE:
		addq.b	#$02,$0024(a0)
		move.l	#Obj47_MapUnc_18E3E,$0004(a0) ; loc_18E3E
		move.w	#$0424,$0002(a0)
		bsr.w	JmpTo10_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$04,$0018(a0)
		addq.w	#$04,$000C(a0)
loc_18DDA:
		tst.b	$0001(a0)
		bpl.s	loc_18E3A
		move.w	#$001B,d1
		move.w	#$0004,d2
		move.w	#$0005,d3
		move.w	8(a0),d4
		bsr.w	JmpTo4_SolidObject
		move.b	#$00,$001A(a0)
		move.b	$0028(a0),d0
		andi.w	#$000F,d0
		lea	(ButtonVine_Trigger).w,A3
		lea	$00(A3,d0),A3
		moveq	#0,d3
		btst	#$06,$0028(a0)
		beq.s	loc_18E16
		moveq	#$07,d3
loc_18E16:
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		bne.s	loc_18E24
		bclr	d3,(a3)
		bra.s	loc_18E3A
loc_18E24:
		tst.b	(a3)
		bne.s	loc_18E32
		move.w	#SndID_Blip,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_18E32:
		bset	d3,(a3)
		move.b	#1,$001A(a0)
loc_18E3A:
		bra.w	JmpTo8_MarkObjGone
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj47_MapUnc_18E3E:	binclude	"mappings/sprite/obj47.bin"
; ===========================================================================
		nop
; loc_18E64:
JmpTo8_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_18E6A:
JmpTo10_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_18E70:
JmpTo4_SolidObject:
		jmp	(SolidObject).l

		align 4

;=============================================================================== 
; Object 0x3D - Break to Boost - Oil Ocean
; [ Begin ]		         
;===============================================================================  
Obj_0x3D_Break_Boost: ; loc_18E78:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_18E86(pc,d0),d1
		jmp     loc_18E86(pc,d1)
loc_18E86:
		dc.w    loc_18E8E-loc_18E86
		dc.w    loc_18EB6-loc_18E86
		dc.w    loc_18FCC-loc_18E86
		dc.w    loc_18FE2-loc_18E86
loc_18E8E:
		addq.b	#$02,$0024(a0)
		move.l	#Obj3D_MapUnc_1916E,$0004(a0) ; loc_1916E
		move.w	#$6332,$0002(a0)
		bsr.w	JmpTo11_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$18,$0019(a0)
		move.b	#$04,$0018(a0)
loc_18EB6:
		move.b	(MainCharacter+$1C).w,$0032(a0)
		move.b	(Sidekick+$1C).w,$0033(a0)
		move.w	(MainCharacter+$12).w,$0034(a0)
		move.w	(Sidekick+$12).w,$0036(a0)
		move.w	#$001B,d1
		move.w	#$0010,d2
		move.w	#$0011,d3
		move.w	8(a0),d4
		bsr.w	JmpTo5_SolidObject
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		bne.s	loc_18EF0
loc_18EEC:		
		bra.w	JmpTo9_MarkObjGone
loc_18EF0:
		cmpi.b	#$18,d0
		bne.s	loc_18F26
		cmpi.b	#$02,$0032(a0)
		beq.s	loc_18F06
		cmpi.b	#$02,$0033(a0)
		bne.s	loc_18EEC
loc_18F06:
		lea	(MainCharacter).w,A1
		move.b	$0032(a0),d0
		move.w	$0034(a0),d1
		bsr.s	loc_18F42
		lea	(Sidekick).w,A1
		move.b	$0033(a0),d0
		move.w	$0036(a0),d1
		bsr.s	loc_18F42
		bra.w	loc_18F94
loc_18F26:
		move.b	d0,d1
		andi.b	#$08,d1
		beq.s	loc_18F78
		cmpi.b	#$02,$0032(a0)
		bne.s	loc_18EEC
		lea	(MainCharacter).w,A1
		move.w	$0034(a0),d1
		bsr.s	loc_18F48
		bra.s	loc_18F94
loc_18F42:
		cmpi.b	#$02,d0
		bne.s	loc_18F64
loc_18F48:
		bset	#$02,$0022(a1)
		move.b	#$0E,$0016(a1)
		move.b	#$07,$0017(a1)
		move.b	#$02,$001C(a1)
		move.w	d1,$0012(a1)
loc_18F64:
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$02,$0024(a1)
		rts
loc_18F78:
		andi.b	#$10,d0
		beq.w	 loc_18EEC
		cmpi.b	#$02,$0033(a0)
		bne.w	 loc_18EEC
		lea	(Sidekick).w,A1
		move.w	$0036(a0),d1
		bsr.s	loc_18F48
loc_18F94:
		andi.b	#$E7,$0022(a0)
		bsr.w	JmpTo3_SingleObjLoad2
		bne.s	loc_18FB8
		moveq	#0,d0
		move.w	#$0009,d1
loc_18FA6:		
		move.l	$00(A0,d0),$00(A1,d0)
		addq.w	#$04,d0
		dbf	d1,loc_18FA6
		move.b	#$06,$0024(a1)
loc_18FB8:
		lea	(loc_1912E).l,A4
		addq.b	#1,$001A(a0)
		moveq	#$0F,d1
		move.w	#$0018,d2
		bsr.w	JmpTo2_BreakObjectToPieces
loc_18FCC:
		bsr.w	JmpTo7_ObjectMove
		addi.w	#$0018,$0012(a0)
		tst.b	$0001(a0)
		bpl.w	 JmpTo19_DeleteObject
		bra.w	JmpTo4_DisplaySprite
loc_18FE2:
		lea	(MainCharacter).w,A1
		lea	$002C(a0),A4
		bsr.s	loc_19004
		lea	(Sidekick).w,A1
		lea	$0036(a0),A4
		bsr.s	loc_19004
		move.b	$002C(a0),d0
		add.b   $0036(a0),d0
		beq.w	 JmpTo3_MarkObjGone3
		rts
loc_19004:
		moveq	#0,d0
		move.b	(a4),d0
		move.w	loc_19010(pc,d0),d0
		jmp     loc_19010(pc,d0)   
loc_19010:
		dc.w    loc_19014-loc_19010
		dc.w    loc_19092-loc_19010
loc_19014:
		move.w	8(a1),d0
		sub.w   8(a0),d0
		addi.w	#$0010,d0
		cmpi.w	#$0020,d0
		bcc.w	 loc_19090
		move.w	$000C(a1),d1
		sub.w   $000C(a0),d1
		cmpi.w	#$0010,d1
		bcc.w	 loc_19090
		addq.b	#$02,(a4)
		move.w	$000C(a0),$000C(a1)
		move.b	#$81,$002A(a1)
		move.b	#$02,$001C(a1)
		move.w	#$0800,$0014(a1)
		move.w	#$0800,$0010(a1)
		move.w	#0,$0012(a1)
		bclr	#$05,$0022(a0)
		bclr	#$05,$0022(a1)
		bset	#1,$0022(a1)
		bset	#$03,$0022(a1)
		move.w	A0,d0
		subi.w	#MainCharacter,d0
		lsr.w	#$06,d0
		andi.w	#$007F,d0
		move.b	d0,$003D(a1)
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_19090:
		rts
loc_19092:
		bra.s	loc_190D8
		subq.b	#1,$0002(a4)
		bpl.s	loc_190D8
		move.l	$0006(a4),A2
		move.w	(a2)+,d4
		add.w   8(a0),d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		add.w   $000C(a0),d5
		move.w	d5,$000C(a1)
		tst.b	$0001(a4)
		bpl.s	loc_190BA
		subq.w	#$08,A2
loc_190BA:
		move.l	A2,$0006(a4)
		subq.w	#$04,$0004(a4)
		beq.s	loc_190FE
		move.w	(a2)+,d4
		add.w   8(a0),d4
		move.w	(a2)+,d5
		add.w   $000C(a0),d5
		move.w	#$0800,d2
		bra.w	loc_16A80
loc_190D8:
		move.l	8(a1),d2
		move.l	$000C(a1),d3
		move.w	$0010(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d2
		move.w	$0012(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d3
		move.l	d2,8(a1)
		move.l	d3,$000C(a1)
		rts
loc_190FE:
		cmpi.b	#$04,$0001(a4)
		bcc.s	loc_19116
		moveq	#0,d0
		move.b	$0028(a0),d0
		add.b   $0001(a4),d0
		move.b	#$04,$0001(a4)
loc_19116:
		andi.w	#$07FF,$000C(a1)
		move.b	#$06,(a4)
		clr.b   $002A(a1)
		move.w	#SndID_SpindashRelease,d0
		jmp	(PlaySound).l             ; loc_14C6     
loc_1912E:
		dc.w	$FC00,$FC00,$FE00,$FC00,$0200,$FC00,$0400,$FC00
		dc.w	$FC40,$FE00,$FE40,$FE00,$01C0,$FE00,$03C0,$FE00
		dc.w	$FC80,$0200,$FE80,$0200,$0180,$0200,$0380,$0200
		dc.w	$FCC0,$0400,$FEC0,$0400,$0140,$0400,$0340,$0400 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj3D_MapUnc_1916E:	binclude	"mappings/sprite/obj3D.bin"
; ===========================================================================
		nop
; loc_19218:
JmpTo4_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1921E
JmpTo19_DeleteObject:
		jmp	(DeleteObject).l
; loc_19224:
JmpTo9_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1922A:
JmpTo3_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_19230:
JmpTo3_MarkObjGone3:
		jmp	(MarkObjGone3).l
; loc_19236:
JmpTo11_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1923C:
JmpTo2_BreakObjectToPieces:
		jmp	(BreakObjectToPieces).l
; loc_19242:
JmpTo5_SolidObject:
		jmp	(SolidObject).l
; loc_19248:
JmpTo7_ObjectMove:
		jmp	(ObjectMove).l

		align 4

;=============================================================================== 
; Object 0x48 - Cannon - Oil Ocean 
; [ Begin ]		         
;===============================================================================		  
Obj_0x48_Cannon: ; loc_19250:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1926E(pc,d0),d1
		jsr	 loc_1926E(pc,d1)
		move.b	$002C(a0),d0
		add.b   $0036(a0),d0
		beq.w	 JmpTo10_MarkObjGone
		bra.w	JmpTo5_DisplaySprite
loc_1926E:
		dc.w    loc_19282-loc_1926E
		dc.w    loc_192d2-loc_1926E
loc_19272:
		dc.b	$04
loc_19273:
		dc.b	$00,$06,$07,$07,$00,$05,$07,$05,$00,$04,$07,$06,$00,$07,$07
loc_19282:
		addq.b	#$02,$0024(a0)
		move.l	#Obj48_MapUnc_194CA,$0004(a0) ; loc_194CA
		move.w	#$6368,$0002(a0)
		bsr.w	JmpTo12_Adjust2PArtPointer
		move.b	$0028(a0),d0
		andi.w	#$000F,d0
		btst	#$00,$0022(a0)
		beq.s	loc_192AA
		addq.w	#$04,d0
loc_192AA:
		add.w   d0,d0
		move.b	loc_19272(pc,d0),$0001(a0)
		move.b	loc_19273(pc,d0),$003F(a0)
		beq.s	loc_192C0
		move.b	#1,$003E(a0)
loc_192C0:
		move.b	$003F(a0),$001A(a0)
		move.b	#$28,$0019(a0)
		move.b	#1,$0018(a0)
loc_192d2:
		lea	(MainCharacter).w,A1
		lea	$002C(a0),A4
		moveq	#$2C,d2
		bsr.s	loc_192E8
		lea	(Sidekick).w,A1
		lea	$0036(a0),A4
		moveq	#$36,d2
loc_192E8:
		moveq	#0,d0
		move.b	(a4),d0
		move.w	loc_192F4(pc,d0),d0
		jmp     loc_192F4(pc,d0)
loc_192F4:
		dc.w    loc_192FC-loc_192F4
		dc.w    loc_193B0-loc_192F4
		dc.w    loc_1945E-loc_192F4
		dc.w    loc_194BE-loc_192F4
loc_192FC:
		tst.w	(Debug_placement_mode).w
		bne.w	 loc_193AE
		move.w	8(a1),d0
		sub.w   8(a0),d0
		addi.w	#$0010,d0
		cmpi.w	#$0020,d0
		bcc.w	 loc_193AE
		move.w	$000C(a1),d1
		sub.w   $000C(a0),d1
		addi.w	#$0010,d1
		cmpi.w	#$0020,d1
		bcc.w	 loc_193AE
		btst	#$03,$0022(a1)
		beq.s	loc_1934A
		moveq	#0,d0
		move.b	$003D(a1),d0
		lsl.w	#$06,d0
		addi.l	#MainCharacter,d0
		move.l	d0,A3
		move.b	#$00,$00(A3,d2)
loc_1934A:
		move.w	A0,d0
		subi.w	#MainCharacter,d0
		lsr.w	#$06,d0
		andi.w	#$007F,d0
		move.b	d0,$003D(a1)
		addq.b	#$02,(a4)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.b	#$81,$002A(a1)
		move.b	#$02,$001C(a1)
		move.w	#$1000,$0014(a1)
		move.w	#0,$0010(a1)
		move.w	#0,$0012(a1)
		bclr	#$05,$0022(a0)
		bclr	#$05,$0022(a1)
		bset	#1,$0022(a1)
		bset	#$03,$0022(a1)
		move.b	$003F(a0),$001A(a0)
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_193AE:
		rts
loc_193B0:
		tst.b	$003E(a0)
		bne.s	loc_193D8
		cmpi.b	#$07,$001A(a0)
		beq.s	loc_193F2
		subq.w	#1,$001E(a0)
		bpl.s	loc_193d6
		move.w	#$0007,$001E(a0)
		addq.b	#1,$001A(a0)
		cmpi.b	#$07,$001A(a0)
		beq.s	loc_193F2
loc_193d6:
		rts
loc_193D8:
		tst.b	$001A(a0)
		beq.s	loc_193F2
		subq.w	#1,$001E(a0)
		bpl.s	loc_193d6
		move.w	#$0007,$001E(a0)
		subq.b	#1,$001A(a0)
		beq.s	loc_193F2
		rts
loc_193F2:
		addq.b	#$02,(a4)
		move.b	$0028(a0),d0
		addq.b	#1,d0
		btst	#$00,$0022(a0)
		beq.s	loc_19404
		subq.b	#$02,d0
loc_19404:
		andi.w	#$0003,d0
		add.w   d0,d0
		add.w   d0,d0
		move.w	loc_1944E(pc,d0),$0010(a1)
		move.w	loc_19450(pc,d0),$0012(a1)
		move.w	#$0003,$001E(a0)
		tst.b	$0028(a0)
		bpl.s	loc_1944C
		move.b	#$00,$002A(a1)
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$00,$003C(a1)
		move.b	#$02,$0024(a1)
		move.b	#$06,(a4)
		move.w	#$0007,$003C(a0)
loc_1944C:
		rts   
loc_1944E:
		dc.w	$0000
loc_19450:
		dc.w	$F000,$1000,$0000,$0000,$1000,$F000,$0000
loc_1945E:
		cmpi.b	#$02,$002C(a0)
		beq.s	loc_19498
		cmpi.b	#$02,$0036(a0)
		beq.s	loc_19498
		subq.w	#1,$001E(a0)
		bpl.s	loc_19498
		move.w	#$0001,$001E(a0)
		tst.b	$003E(a0)
		beq.s	loc_1948E
		cmpi.b	#$07,$001A(a0)
		beq.s	loc_19498
		addq.b	#1,$001A(a0)
		bra.s	loc_19498
loc_1948E:
		tst.b	$001A(a0)
		beq.s	loc_19498
		subq.b	#1,$001A(a0)
loc_19498:
		move.l	8(a1),d2
		move.l	$000C(a1),d3
		move.w	$0010(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d2
		move.w	$0012(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d3
		move.l	d2,8(a1)
		move.l	d3,$000C(a1)
		rts
loc_194BE:
		subq.w	#1,$003C(a0)
		bpl.s	loc_194C8
		move.b	#$00,(a4)
loc_194C8:
		rts		
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj48_MapUnc_194CA:	binclude	"mappings/sprite/obj48.bin"
; ===========================================================================
		nop
; loc_1964C:
JmpTo5_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_19652:
JmpTo10_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_19658:
JmpTo12_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l

		align 4
;=============================================================================== 
; Object 0x22 - Arrow Shooter - Neo Green Hill 
; [ Begin ]		         
;===============================================================================  
Obj_0x22_Arrow_Shooter: ; loc_19660:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1966E(pc,d0),d1
		jmp     loc_1966E(pc,d1)
loc_1966E:
		dc.w    loc_19678-loc_1966E
		dc.w    loc_196AC-loc_1966E
		dc.w    loc_196F6-loc_1966E
		dc.w    loc_1973C-loc_1966E
		dc.w    loc_19780-loc_1966E
loc_19678:
		addq.b	#$02,$0024(a0)
		move.l	#Obj22_MapUnc_197C6,$0004(a0) ; loc_197C6
		move.w	#$0417,$0002(a0)
		bsr.w	JmpTo13_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$03,$0018(a0)
		move.b	#$10,$0019(a0)
		move.b	#1,$001A(a0)
		andi.b	#$0F,$0028(a0)
loc_196AC:
		cmpi.b	#$02,$001C(a0)
		beq.s	loc_196d2
		moveq	#0,d2
		lea	(MainCharacter).w,A1
		bsr.s	loc_196E0
		lea	(Sidekick).w,A1
		bsr.s	loc_196E0
		tst.b	d2
		bne.s	loc_196CE
		tst.b	$001C(a0)
		beq.s	loc_196CE
		moveq	#$02,d2
loc_196CE:
		move.b	d2,$001C(a0)
loc_196d2:
		lea	(loc_197B0).l,A1
		bsr.w	JmpTo2_AnimateSprite
		bra.w	JmpTo11_MarkObjGone
loc_196E0:
		move.w	8(a0),d0
		sub.w   8(a1),d0
		bcc.s	loc_196EC
		neg.w	d0
loc_196EC:
		cmpi.w	#$0040,d0
		bcc.s	loc_196F4
		moveq	#1,d2
loc_196F4:
		rts
loc_196F6:
		bsr.w	JmpTo3_SingleObjLoad
		bne.s	loc_1972A
		_move.b	0(a0),0(a1)
		addq.b	#$06,$0024(a1)
		move.l	$0004(a0),$0004(a1)
		move.w	$0002(a0),$0002(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.b	$0001(a0),$0001(a1)
		move.b	$0022(a0),$0022(a1)
loc_1972A:
		subq.b	#$02,$0024(a0)
		lea	(loc_197B0).l,A1
		bsr.w	JmpTo2_AnimateSprite
		bra.w	JmpTo11_MarkObjGone
loc_1973C:
		addq.b	#$02,$0024(a0)
		move.b	#$08,$0016(a0)
		move.b	#$10,$0017(a0)
		move.b	#$04,$0018(a0)
		move.b	#$9B,$0020(a0)
		move.b	#$08,$0019(a0)
		move.b	#$00,$001A(a0)
		move.w	#$0400,$0010(a0)
		btst	#$00,$0022(a0)
		beq.s	loc_19776
		neg.w	$0010(a0)
loc_19776:
		move.w	#SndID_ArrowFiring,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_19780:
		bsr.w	JmpTo8_ObjectMove
		btst	#$00,$0022(a0)
		bne.s	loc_197A0
		moveq	#-8,d3
		bsr.w	ObjHitWallLeft          ; loc_13B24
		tst.w	d1
		bmi.w	 loc_1979C
		bra.w	JmpTo11_MarkObjGone
loc_1979C:
		bra.w	JmpTo20_DeleteObject
loc_197A0:
		moveq	#$08,d3
		bsr.w	ObjHitWallRight         ; loc_1399E
		tst.w	d1
		bmi.w	 loc_1979C
		bra.w	JmpTo11_MarkObjGone
loc_197B0:		
		dc.w    loc_197B6-loc_197B0
		dc.w    loc_197B9-loc_197B0
		dc.w    loc_197BD-loc_197B0
loc_197B6:
		dc.b	$1F,$01,$FF
loc_197B9:
		dc.b	$03,$01,$02,$FF
loc_197BD:
		dc.b	$07,$03,$04,$FC,$04,$03,$01,$FD,$00
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj22_MapUnc_197C6:	binclude	"mappings/sprite/obj22.bin"
; ===========================================================================
		nop
; loc_1982C:
JmpTo20_DeleteObject:
		jmp	(DeleteObject).l
; loc_19832:
JmpTo3_SingleObjLoad:
		jmp	(SingleObjLoad).l
; loc_19838:
JmpTo11_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1983E:
JmpTo2_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_19844:
JmpTo13_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1984A:
JmpTo8_ObjectMove:
		jmp	(ObjectMove).l
	             
;=============================================================================== 
; Object 0x23 - Neo Green Hill - Pillar That Drops Lower Half 
; [ Begin ]		         
;=============================================================================== 
Obj_0x23_Pillar: ; loc_19850:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1985E(pc,d0),d1
		jmp     loc_1985E(pc,d1)
loc_1985E:
		dc.w    loc_19862-loc_1985E
		dc.w    loc_198E6-loc_1985E
loc_19862:
		addq.b	#$02,$0024(a0)
		move.l	#Pillar_Mappings,$0004(a0) ; loc_199AA
		move.w	#$2000,$0002(a0)
		bsr.w	JmpTo14_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$20,$0016(a0)
		move.b	#$04,$0018(a0)
		bsr.w	JmpTo4_SingleObjLoad2
		bne.s	loc_198E6
		_move.b	0(a0),0(a1)
		addq.b	#$02,$0024(a1)
		addq.b	#$02,$0025(a1)
		move.l	$0004(a0),$0004(a1)
		move.w	$0002(a0),$0002(a1)
		move.w	8(a0),8(a1)
		move.w	8(a0),$0030(a1)
		move.w	$000C(a0),$000C(a1)
		addi.w	#$0030,$000C(a1)
		move.b	$0001(a0),$0001(a1)
		move.b	#$10,$0019(a1)
		move.b	#$10,$0016(a1)
		move.b	#$04,$0018(a1)
		move.b	#1,$001A(a1)
loc_198E6:
		move.w	8(a0),-(sp)
		bsr.w	loc_1990C
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	JmpTo6_SolidObject
		bra.w	JmpTo12_MarkObjGone
loc_1990C:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1991A(pc,d0),d1
		jmp     loc_1991A(pc,d1)		 
loc_1991A:
		dc.w    loc_19950-loc_1991A
		dc.w    loc_19922-loc_1991A
		dc.w    loc_19952-loc_1991A
		dc.w    loc_1997C-loc_1991A
loc_19922:
		tst.w	(Debug_placement_mode).w
		bne.s	loc_19950
		lea	(MainCharacter).w,A1
		bsr.s	loc_19932
		lea	(Sidekick).w,A1
loc_19932:
		move.w	8(a0),d0
		sub.w   8(a1),d0
		bcc.s	loc_1993E
		neg.w	d0
loc_1993E:
		cmpi.w	#$0080,d0
		bcc.s	loc_19950
		move.b	#$04,$0025(a0)
		move.w	#8,$0034(a0)
loc_19950:
		rts
loc_19952:
		move.w	$0034(a0),d0
		subq.w	#1,d0
		bcc.s	loc_19960
		addq.b	#$02,$0025(a0)
		rts
loc_19960:
		move.w	d0,$0034(a0)
		move.b	loc_19974(pc,d0),d0
		ext.w   d0
		add.w   $0030(a0),d0
		move.w	d0,8(a0)
		rts
loc_19974:
		dc.b	$00,$01,$FF,$01,$00,$FF,$00,$01
loc_1997C:
		bsr.w	JmpTo9_ObjectMove         ; loc_1A0BC
		addi.w	#$0038,$0012(a0)
		bsr.w	ObjHitFloor             ; loc_13898
		tst.w	d1
		bpl.w	 loc_199A8
		add.w   d1,$000C(a0)
		clr.w	$0012(a0)
		move.w	$000C(a0),$0032(a0)
		move.b	#$02,$001A(a0)
		clr.b   $0025(a0)
loc_199A8:
		rts
Pillar_Mappings:		
loc_199AA:		
		dc.w    loc_199B0-loc_199AA
		dc.w    loc_199E2-loc_199AA
		dc.w    loc_199FC-loc_199AA
loc_199B0:
		dc.w	$0006
		dc.l	$E005005D,$002EFFE0,$E005085D,$082E0010
		dc.l	$E00d0061,$0030FFF0,$F00d0069,$0034FFF0
		dc.l	$000d0069,$0034FFF0,$100d0071,$0038FFF0
loc_199E2:
		dc.w	$0003
		dc.l	$F00d0069,$0034FFF0,$000d0079,$003CFFF0
		dc.l	$10040081,$0040FFF0
loc_199FC:
		dc.w	$0004
		dc.l	$090d208B,$2045FFF0,$F00d0069,$0034FFF0
		dc.l	$000d0079,$003CFFF0,$10040081,$0040FFF0
;=============================================================================== 
; Object 0x23 - Neo Green Hill - Pillar That Drops Lower Half 
; [ End ]		         
;===============================================================================		 
;=============================================================================== 
; Object 0x2B - Neo Green Hill - Breakable Pillar
; [ Begin ]		         
;===============================================================================		       
Obj_0x2B_Breakable_Pillar: ; loc_19A1E:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_19A2C(pc,d0),d1
		jmp     loc_19A2C(pc,d1)
loc_19A2C:
		dc.w    loc_19A32-loc_19A2C
		dc.w    loc_19A60-loc_19A2C
		dc.w    loc_19B50-loc_19A2C
loc_19A32:
		addq.b	#$02,$0024(a0)
		move.l	#Breakable_Pillar_Mappings,$0004(a0) ; loc_19C30
		move.w	#$2000,$0002(a0)
		bsr.w	JmpTo14_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$18,$0016(a0)
		move.b	#$04,$0018(a0)
loc_19A60:
		move.w	8(a0),-(sp)
		bsr.w	loc_19AEA
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	JmpTo6_SolidObject
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		bne.w	 loc_19A92
		bra.w	JmpTo12_MarkObjGone
loc_19A92:
		lea	(loc_19B80).l,A4
		lea	(loc_19B72).l,A2
		addq.b	#$07,$001A(a0)
		bsr.w	loc_19BB8
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		bsr.s	loc_19AB8
		lea	(Sidekick).w,A1
		addq.b	#1,d6
		bra.w	loc_19B50
loc_19AB8:
		bclr	d6,$0022(a0)
		beq.s	loc_19AE8
		bset	#$02,$0022(a1)
		move.b	#$0E,$0016(a1)
		move.b	#$07,$0017(a1)
		move.b	#$02,$001C(a1)
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$02,$0024(a1)
loc_19AE8:
		rts
loc_19AEA:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_19AF8(pc,d0),d1
		jmp     loc_19AF8(pc,d1)
loc_19AF8:
		dc.w    loc_19AFE-loc_19AF8
		dc.w    loc_19B28-loc_19AF8
		dc.w    loc_19B26-loc_19AF8
loc_19AFE:
		tst.w	(Debug_placement_mode).w
		bne.s	loc_19B26
		lea	(MainCharacter).w,A1
		bsr.s	loc_19B0E
		lea	(Sidekick).w,A1
loc_19B0E:
		move.w	8(a0),d0
		sub.w   8(a1),d0
		bcc.s	loc_19B1A
		neg.w	d0
loc_19B1A:
		cmpi.w	#$0040,d0
		bcc.s	loc_19B26
		move.b	#$02,$0025(a0)
loc_19B26:
		rts
loc_19B28:
		subq.w	#1,$0034(a0)
		bcc.s	loc_19B4E
		move.w	#$0003,$0034(a0)
		subq.w	#$04,$000C(a0)
		addq.b	#$04,$0016(a0)
		addq.b	#1,$001A(a0)
		cmpi.b	#$06,$001A(a0)
		bne.s	loc_19B4E
		move.b	#$04,$0025(a0)
loc_19B4E:
		rts
loc_19B50:
		tst.b	$003F(a0)
		beq.s	loc_19B5C
		subq.b	#1,$003F(a0)
		bra.s	loc_19B66
loc_19B5C:
		bsr.w	JmpTo9_ObjectMove         ; loc_1A0BC
		addi.w	#$0018,$0012(a0)
loc_19B66:
		tst.b	$0001(a0)
		bpl.w	 JmpTo21_DeleteObject
		bra.w	JmpTo6_DisplaySprite
loc_19B72:
		dc.b	$00,$00,$00,$00,$04,$04,$08,$08,$0C,$0C,$10,$10,$14,$14		
loc_19B80:
		dc.w	$FE00,$FE00,$0200,$FE00,$FE40,$FE40,$01C0,$FE40
		dc.w	$FE80,$FE80,$0180,$FE80,$FEC0,$FEC0,$0140,$FEC0
		dc.w	$FF00,$FF00,$0100,$FF00,$FF40,$FF40,$00C0,$FF40
		dc.w	$FF80,$FF80,$0080,$FF80  
loc_19BB8:
		moveq	#0,d0
		move.b	$001A(a0),d0
		add.w   d0,d0
		move.l	$0004(a0),A3
		adda.w	$00(A3,d0),A3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#$05,$0001(a0)
		_move.b	0(a0),d4
		move.b	$0001(a0),d5
		move.l	A0,A1
		bra.s	loc_19BE6
loc_19BDE:		
		bsr.w	JmpTo4_SingleObjLoad2
		bne.s	loc_19C26
		addq.w	#$08,A3
loc_19BE6:
		move.b	#$04,$0024(a1)
		_move.b	d4,0(a1)
		move.l	A3,$0004(a1)
		move.b	d5,$0001(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	$0002(a0),$0002(a1)
		move.b	$0018(a0),$0018(a1)
		move.b	$0019(a0),$0019(a1)
		move.w	(a4)+,$0010(a1)
		move.w	(a4)+,$0012(a1)
		move.b	(a2)+,$003F(a1)
		dbf	d1,loc_19BDE
loc_19C26:
		move.w	#SndID_SlowSmash,d0
		jmp	(PlaySound).l             ; loc_14C6  
Breakable_Pillar_Mappings:				             
loc_19C30:
		dc.w    loc_19C4C-loc_19C30
		dc.w    loc_19C7E-loc_19C30
		dc.w    loc_19CB8-loc_19C30
		dc.w    loc_19CF2-loc_19C30
		dc.w    loc_19d34-loc_19C30
		dc.w    loc_19d76-loc_19C30
		dc.w    loc_19DC0-loc_19C30
		dc.w    loc_19E0A-loc_19C30
		dc.w    loc_19E4C-loc_19C30
		dc.w    loc_19E9E-loc_19C30
		dc.w    loc_19EF0-loc_19C30
		dc.w    loc_19F52-loc_19C30
		dc.w    loc_19FB4-loc_19C30
		dc.w    loc_1A026-loc_19C30
loc_19C4C:
		dc.w	$0006
		dc.l	$100d208B,$2045FFF0,$E805005D,$002EFFE0
		dc.l	$E805085D,$082E0010,$E80d0061,$0030FFF0
		dc.l	$F80d0069,$0034FFF0,$080d0083,$0041FFF0
loc_19C7E:
		dc.w	$0007
		dc.l	$140d208B,$2045FFF0,$E405005D,$002EFFE0
		dc.l	$E405085D,$082E0010,$E40d0061,$0030FFF0
		dc.l	$F40d0069,$0034FFF0,$FC0d0069,$0034FFF0
		dc.l	$0C0d0083,$0041FFF0
loc_19CB8:
		dc.w	$0007
		dc.l	$180d208B,$2045FFF0,$E005005D,$002EFFE0
		dc.l	$E005085D,$082E0010,$E00d0061,$0030FFF0
		dc.l	$F00d0069,$0034FFF0,$000d0069,$0034FFF0
		dc.l	$100d0083,$0041FFF0
loc_19CF2:
		dc.w	$0008
		dc.l	$1C0d208B,$2045FFF0,$DC05005D,$002EFFE0
		dc.l	$DC05085D,$082E0010,$DC0d0061,$0030FFF0
		dc.l	$EC0d0069,$0034FFF0,$FC0d0069,$0034FFF0
		dc.l	$040d0069,$0034FFF0,$140d0083,$0041FFF0
loc_19d34:
		dc.w	$0008
		dc.l	$200d208B,$2045FFF0,$D805005D,$002EFFE0
		dc.l	$D805085D,$082E0010,$D80d0061,$0030FFF0
		dc.l	$E80d0069,$0034FFF0,$F80d0069,$0034FFF0
		dc.l	$080d0069,$0034FFF0,$180d0083,$0041FFF0
loc_19d76:
		dc.w	$0009
		dc.l	$240d208B,$2045FFF0,$d405005D,$002EFFE0
		dc.l	$d405085D,$082E0010,$d40d0061,$0030FFF0
		dc.l	$E40d0069,$0034FFF0,$F40d0069,$0034FFF0
		dc.l	$040d0069,$0034FFF0,$0C0d0069,$0034FFF0
		dc.l	$1C0d0083,$0041FFF0
loc_19DC0:
		dc.w	$0009
		dc.l	$280d208B,$2045FFF0,$d005005D,$002EFFE0
		dc.l	$d005085D,$082E0010,$d00d0061,$0030FFF0
		dc.l	$E00d0069,$0034FFF0,$F00d0069,$0034FFF0
		dc.l	$000d0069,$0034FFF0,$100d0069,$0034FFF0
		dc.l	$200d0083,$0041FFF0
loc_19E0A:
		dc.w	$0008
		dc.l	$E805005D,$002EFFE0,$E805085D,$082E0010
		dc.l	$E8050061,$0030FFF0,$E8050065,$00320000
		dc.l	$F8050069,$0034FFF0,$F805006D,$00360000
		dc.l	$08050083,$0041FFF0,$08050087,$00430000
loc_19E4C:
		dc.w	$000A
		dc.l	$E405005D,$002EFFE0,$E405085D,$082E0010
		dc.l	$E4050061,$0030FFF0,$E4050065,$00320000
		dc.l	$F4050069,$0034FFF0,$F405006D,$00360000
		dc.l	$FC050069,$0034FFF0,$FC05006D,$00360000
		dc.l	$0C050083,$0041FFF0,$0C050087,$00430000
loc_19E9E:
		dc.w	$000A
		dc.l	$E005005D,$002EFFE0,$E005085D,$082E0010
		dc.l	$E0050061,$0030FFF0,$E0050065,$00320000
		dc.l	$F0050069,$0034FFF0,$F005006D,$00360000
		dc.l	$00050069,$0034FFF0,$0005006D,$00360000
		dc.l	$10050083,$0041FFF0,$10050087,$00430000
loc_19EF0:
		dc.w	$000C
		dc.l	$DC05005D,$002EFFE0,$DC05085D,$082E0010
		dc.l	$DC050061,$0030FFF0,$DC050065,$00320000
		dc.l	$EC050069,$0034FFF0,$EC05006D,$00360000
		dc.l	$FC050069,$0034FFF0,$FC05006D,$00360000
		dc.l	$04050069,$0034FFF0,$0405006D,$00360000
		dc.l	$14050083,$0041FFF0,$14050087,$00430000
loc_19F52:
		dc.w	$000C
		dc.l	$D805005D,$002EFFE0,$D805085D,$082E0010
		dc.l	$D8050061,$0030FFF0,$D8050065,$00320000
		dc.l	$E8050069,$0034FFF0,$E805006D,$00360000
		dc.l	$F8050069,$0034FFF0,$F805006D,$00360000
		dc.l	$08050069,$0034FFF0,$0805006D,$00360000
		dc.l	$18050083,$0041FFF0,$18050087,$00430000
loc_19FB4:
		dc.w	$000E
		dc.l	$d405005D,$002EFFE0,$d405085D,$082E0010
		dc.l	$d4050061,$0030FFF0,$d4050065,$00320000
		dc.l	$E4050069,$0034FFF0,$E405006D,$00360000
		dc.l	$F4050069,$0034FFF0,$F405006D,$00360000
		dc.l	$04050069,$0034FFF0,$0405006D,$00360000
		dc.l	$0C050069,$0034FFF0,$0C05006D,$00360000
		dc.l	$1C050083,$0041FFF0,$1C050087,$00430000
loc_1A026:
		dc.w	$000E
		dc.l	$d005005D,$002EFFE0,$d005085D,$082E0010
		dc.l	$d0050061,$0030FFF0,$d0050065,$00320000
		dc.l	$E0050069,$0034FFF0,$E005006D,$00360000
		dc.l	$F0050069,$0034FFF0,$F005006D,$00360000
		dc.l	$00050069,$0034FFF0,$0005006D,$00360000
		dc.l	$10050069,$0034FFF0,$1005006D,$00360000
		dc.l	$20050083,$0041FFF0,$20050087,$00430000		
;=============================================================================== 
; Object 0x2B - Neo Green Hill - Breakable Pillar
; [ End ]		         
;=============================================================================== 
; loc_1A098:
JmpTo6_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1A09E:
JmpTo21_DeleteObject:
		jmp	(DeleteObject).l
; loc_1A0A4:
JmpTo12_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1A0AA:
JmpTo4_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1A0B0:
JmpTo14_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1A0B6:
JmpTo6_SolidObject:
		jmp	(SolidObject).l
; loc_1A0BC:
JmpTo9_ObjectMove:
		jmp	(ObjectMove).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 2C - Sprite that makes leaves fly off when you hit it from NGHZ
; ---------------------------------------------------------------------------
; Sprite_1A0C4: Obj_0x2C_Leaves:
Obj2C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj2C_Index(pc,d0.w),d1
		jmp	Obj2C_Index(pc,d1.w)
; ===========================================================================
; off_1A0d2:
Obj2C_Index:	offsetTable
		offsetTableEntry.w Obj2C_Init
		offsetTableEntry.w Obj2C_Main
		offsetTableEntry.w Obj2C_Leaf
; ---------------------------------------------------------------------------
; byte_1A0D8:
Obj2C_CollisionFlags:
		dc.b	$d6
		dc.b	$d4
		dc.b	$d5
		even
; ===========================================================================
; loc_1A0DC:
Obj2C_Init:
		addq.b	#2,routine(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.b	Obj2C_CollisionFlags(pc,d0.w),$20(a0)
		move.l	#Obj31_MapUnc_15612,4(a0)
		move.w	#$8680,2(a0)
		move.b	#$84,1(a0)
		move.b	#$80,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)
; loc_1A112:
Obj2C_Main:
		move.w	$8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo22_DeleteObject
		; these instructions were deleted from the final,meaning
		; entering edit mode will no longer display its collision box
		tst.w	(Debug_placement_mode).w
		beq.s	loc_1A130
		bsr.w	JmpTo7_DisplaySprite

loc_1A130:
		move.b	$21(a0),d0
		beq.s	return_1A16C
		move.b	(Timer_frames+1).w,d0
		andi.w	#$F,d0
		bne.s	loc_1A150
		lea	(MainCharacter).w,a2	; a2=character
		bclr	#0,$21(a0)
		beq.s	Obj2C_RemoveCollision
		bsr.s	Obj2C_CreateLeaves
		bra.s	Obj2C_RemoveCollision
; ---------------------------------------------------------------------------

loc_1A150:
		addi.w	#8,d0
		andi.w	#$F,d0
		bne.s	Obj2C_RemoveCollision
		lea	(Sidekick).w,a2		; a2=character
		bclr	#1,$21(a0)
		beq.s	Obj2C_RemoveCollision
		bsr.s	Obj2C_CreateLeaves
; loc_1A168:
Obj2C_RemoveCollision:
		clr.b	$21(a0)

return_1A16C:
		rts
; ===========================================================================
; loc_1A16E:
Obj2C_CreateLeaves:
		move.w	$10(a2),d0
		bpl.s	loc_1A176
		neg.w	d0

loc_1A176:
		cmpi.w	#$200,d0
		bcc.s	loc_1A18A
		move.w	$12(a2),d0
		bpl.s	loc_1A184
		neg.w	d0

loc_1A184:
		cmpi.w	#$200,d0
		bcs.s	return_1A16C

loc_1A18A:
		lea	(Obj2C_Speeds).l,a3
		moveq	#4-1,d6

loc_1A192:		
		bsr.w	JmpTo4_SingleObjLoad
		bne.w	loc_1A21E
		_move.b	#$2C,0(a1)		; load obj2C (leaves generator)
		move.b	#4,routine(a1)
		move.w	8(a2),8(a1)
		move.w	$C(a2),$C(a1)
		bsr.w	JmpTo_PseudoRandomNumber
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,8(a1)
		swap	d0
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,$C(a1)
		move.w	(a3)+,$10(a1)
		move.w	(a3)+,$12(a1)
		btst	#0,$22(a2)
		beq.s	loc_1A1E0
		neg.w	$10(a1)

loc_1A1E0:
		move.w	8(a1),$30(a1)
		move.w	$C(a1),$34(a1)
		andi.b	#1,d0
		move.b	d0,$1A(a1)
		move.l	#Obj2C_MapUnc_1A2BC,4(a1)
		move.w	#$E410,2(a1)
		move.b	#$84,1(a1)
		move.b	#8,$19(a1)
		move.b	#1,$18(a1)
		move.b	#4,$38(a1)
		; typo,this should be using a1 instead of a0
		move.b	d1,$26(a0)

loc_1A21E:
		dbf	d6,loc_1A192
		rts
; ===========================================================================
; word_1A224:
Obj2C_Speeds:
		dc.w	-$80,-$80
		dc.w	 $C0,-$40
		dc.w	-$C0,$40
		dc.w	 $80,$80
; ===========================================================================
; loc_1A234:
Obj2C_Leaf:
		move.b	$38(a0),d0
		add.b	d0,$26(a0)
		add.b	(Vint_runcount+3).w,d0
		andi.w	#$1F,d0
		bne.s	loc_1A252
		add.b	d7,d0
		andi.b	#1,d0
		beq.s	loc_1A252
		neg.b	$38(a0)

loc_1A252:
		move.l	$30(a0),d2
		move.l	$34(a0),d3
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$30(a0)
		move.l	d3,$34(a0)
		swap	d2
		andi.w	#3,d3
		addq.w	#4,d3
		add.w	d3,$12(a0)
		move.b	$26(a0),d0
		bsr.w	JmpTo3_CalcSine
		asr.w	#6,d0
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		asr.w	#6,d1
		add.w	$34(a0),d1
		move.w	d1,$C(a0)
		subq.b	#1,$1E(a0)
		bpl.s	loc_1A2B0
		move.b	#$B,$1E(a0)
		bchg	#1,$1A(a0)

loc_1A2B0:
		tst.b	1(a0)
		bpl.w	JmpTo22_DeleteObject
		bra.w	JmpTo7_DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj2C_MapUnc_1A2BC:	binclude	"mappings/sprite/obj2C.bin"

; ===========================================================================
; loc_1A2EC:
JmpTo7_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1A2F2:
JmpTo22_DeleteObject:
		jmp	(DeleteObject).l
; loc_1A2F8:
JmpTo4_SingleObjLoad:
		jmp	(SingleObjLoad).l
; loc_1A2FE:
JmpTo_PseudoRandomNumber:
		jmp     (PseudoRandomNumber).l
; loc_1A304:
JmpTo3_CalcSine:
		jmp	(CalcSine).l

		align 4

;=============================================================================== 
; Object 0x40 - Chemical Plant / Neo Green Hill - Springs 
; [ Begin ]		         
;===============================================================================  
Obj_0x40_Diagonal_Springs: ; loc_1A30C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1A31E(pc,d0),d1
		jsr	 loc_1A31E(pc,d1)
		bra.w	JmpTo13_MarkObjGone
loc_1A31E:
		dc.w    loc_1A328-loc_1A31E
		dc.w    loc_1A364-loc_1A31E
loc_1A322:
		dc.w	$FC00,$F600,$F800
loc_1A328:
		addq.b	#$02,$0024(a0)
		move.l	#Obj40_MapUnc_1A58A,$0004(a0) ; loc_1A58A
		move.w	#$0440,$0002(a0)
		bsr.w	JmpTo15_Adjust2PArtPointer ; loc_1A5C0
		ori.b   #$04,$0001(a0)
		move.b	#$1C,$0019(a0)
		move.b	#$04,$0018(a0)
		bset	#$07,$0022(a0)
		move.b	$0028(a0),d0
		andi.w	#$0002,d0
		move.w	loc_1A322(pc,d0),$0030(a0)
loc_1A364:
		lea	(loc_1A57E).l,A1
		bsr.w	JmpTo3_AnimateSprite      ; loc_1A5BA
		move.w	#$0027,d1
		move.w	#8,d2
		move.w	8(a0),d4
		lea	loc_1A52E(pc),A2
		tst.b	$001A(a0)
		beq.s	loc_1A388
		lea	loc_1A556(pc),A2
loc_1A388:
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	JmpTo_SlopedSolid_SingleCharacter
		btst	#$03,$0022(a0)
		beq.s	loc_1A3A0
		bsr.s	loc_1A3BA
loc_1A3A0:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	JmpTo_SlopedSolid_SingleCharacter
		btst	#$04,$0022(a0)
		beq.s	loc_1A3B8
		bsr.s	loc_1A3BA
loc_1A3B8:
		rts
loc_1A3BA:
		btst	#$00,$0022(a0)
		bne.s	loc_1A3d2
		move.w	8(a0),d0
		subi.w	#$0010,d0
		cmp.w	8(a1),d0
		bcs.s	loc_1A3E2
		rts
loc_1A3d2:
		move.w	8(a0),d0
		addi.w	#$0010,d0
		cmp.w	8(a1),d0
		bcc.s	loc_1A3E2
		rts
loc_1A3E2:
		cmpi.b	#1,$001C(a0)
		beq.s	loc_1A3F2
		move.w	#$0100,$001C(a0)
		rts
loc_1A3F2:
		tst.b	$001A(a0)
		beq.s	loc_1A3FA
		rts
loc_1A3FA:
		move.w	8(a0),d0
		subi.w	#$001C,d0
		sub.w   8(a1),d0
		neg.w	d0
		btst	#$00,$0022(a0)
		beq.s	loc_1A416
		not.w  d0
		addi.w	#$0027,d0
loc_1A416:
		tst.w	d0
		bpl.s	loc_1A41C
		moveq	#0,d0
loc_1A41C:
		lea	(loc_1A4E6).l,A3
		move.b	$00(A3,d0),d0
		move.w	#$FC00,$0012(a1)
		sub.b   d0,$0012(a1)
		bset	#$00,$0022(a1)
		btst	#$00,$0022(a0)
		bne.s	loc_1A446
		bclr	#$00,$0022(a1)
		neg.b   d0
loc_1A446:
		move.w	$0010(a1),d1
		bpl.s	loc_1A44E
		neg.w	d1
loc_1A44E:
		cmpi.w	#$0400,d1
		bcs.s	loc_1A458
		sub.b   d0,$0010(a1)
loc_1A458:
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$10,$001C(a1)
		move.b	#$02,$0024(a1)
		move.b	$0028(a0),d0
		btst	#$00,d0
		beq.s	loc_1A4B4
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#1,$002C(a1)
		move.b	#$08,$002D(a1)
		btst	#1,d0
		bne.s	loc_1A4A4
		move.b	#$03,$002C(a1)
loc_1A4A4:
		btst	#$00,$0022(a1)
		beq.s	loc_1A4B4
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_1A4B4:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_1A4CA
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_1A4CA:
		cmpi.b	#$08,d0
		bne.s	loc_1A4DC
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_1A4DC:
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6   
loc_1A4E6:
		dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
		dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$02,$02,$02
		dc.b	$03,$03,$03,$03,$03,$03,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00
		dc.b	$00,$00,$00,$00,$00,$00,$00,$00   
loc_1A52E:
		dc.b	$08,$08,$08,$08,$08,$08,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F,$10,$10
		dc.b	$11,$12,$13,$14,$14,$15,$15,$16,$17,$18,$18,$18,$18,$18,$18,$18
		dc.b	$18,$18,$18,$18,$18,$18,$18,$18      
loc_1A556:
		dc.b	$08,$08,$08,$08,$08,$08,$08,$09,$0A,$0B,$0C,$0C,$0C,$0C,$0D,$0D
		dc.b	$0D,$0D,$0D,$0D,$0E,$0E,$0F,$0F,$10,$10,$10,$10,$0F,$0F,$0E,$0E
		dc.b	$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D		
loc_1A57E:
		dc.w    loc_1A582-loc_1A57E
		dc.w    loc_1A585-loc_1A57E
loc_1A582:
		dc.b	$0F,$00,$FF
loc_1A585:
		dc.b	$03,$01,$00,$FD,$00 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj40_MapUnc_1A58A:	binclude	"mappings/sprite/obj40.bin"
; ===========================================================================
		nop
; loc_1A5B4:
JmpTo13_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1A5BA:
JmpTo3_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1A5C0;
JmpTo15_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1A5C6:
JmpTo_SlopedSolid_SingleCharacter:
		jmp	(SlopedSolid_SingleCharacter).l
		
;=============================================================================== 
; Object 0x42 - Metropolis - Steam Vent 
; [ Begin ]		         
;===============================================================================		  
Obj_0x42_Steam_Vent: ; loc_1A5CC:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1A5DA(pc,d0),d1
		jmp     loc_1A5DA(pc,d1)
loc_1A5DA:
		dc.w    loc_1A5E0-loc_1A5DA
		dc.w    loc_1A620-loc_1A5DA
		dc.w    loc_1A7CC-loc_1A5DA
loc_1A5E0:
		addq.b	#$02,$0024(a0)
		move.l	#Obj42_MapUnc_1A7FE,$0004(a0) ; loc_1A7FE
		move.w	#$6000,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$04,$0018(a0)
		bsr.w	JmpTo16_Adjust2PArtPointer
		move.b	#$07,$001A(a0)
		move.w	$000C(a0),$0034(a0)
		move.w	#$0010,$0036(a0)
		addi.w	#$0010,$000C(a0)
loc_1A620:
		move.w	#$001B,d1
		move.w	#$0010,d2
		move.w	#$0010,d3
		move.w	8(a0),d4
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	JmpTo2_SolidObject_Always_SingleCharacter
		btst	#$03,$0022(a0)
		beq.s	loc_1A64A
		bsr.w	loc_1A726
loc_1A64A:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	JmpTo2_SolidObject_Always_SingleCharacter
		btst	#$04,$0022(a0)
		beq.s	loc_1A664
		bsr.w	loc_1A726
loc_1A664:
		move.b	$0025(a0),d0
		bne.s	loc_1A67C
		subq.w	#1,$0032(a0)
		bpl.s	loc_1A6E0
		move.w	#$007F,$0032(a0)
		addq.b	#$02,$0025(a0)
		bra.s	loc_1A6E0
loc_1A67C:
		subq.b	#$02,d0
		bne.s	loc_1A6AE
		subq.w	#$08,$0036(a0)
		bne.s	loc_1A6A0
		addq.b	#$02,$0025(a0)
		bsr.s	loc_1A6E4
		addi.w	#$0028,8(a1)
		bsr.s	loc_1A6E4
		subi.w	#$0028,8(a1)
		bset	#$00,$0001(a1)
loc_1A6A0:
		move.w	$0036(a0),d0
		add.w   $0034(a0),d0
		move.w	d0,$000C(a0)
		bra.s	loc_1A6E0
loc_1A6AE:
		subq.b	#$02,d0
		bne.s	loc_1A6C4
		subq.w	#1,$0032(a0)
		bpl.s	loc_1A6E0
		move.w	#$007F,$0032(a0)
		addq.b	#$02,$0025(a0)
		bra.s	loc_1A6E0
loc_1A6C4:
		addq.w	#$08,$0036(a0)
		cmpi.w	#$0010,$0036(a0)
		bne.s	loc_1A6d4
		clr.b   $0025(a0)
loc_1A6d4:
		move.w	$0036(a0),d0
		add.w   $0034(a0),d0
		move.w	d0,$000C(a0)
loc_1A6E0:
		bra.w	JmpTo14_MarkObjGone
loc_1A6E4:
		bsr.w	JmpTo5_SingleObjLoad
		bne.s	loc_1A724
		_move.b	0(a0),0(a1)
		addq.b	#$04,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$0034(a0),$000C(a1)
		move.b	#$07,$001E(a1)
		move.l	$0004(a0),$0004(a1)
		move.w	#$2405,$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$18,$0019(a1)
		move.b	#$04,$0018(a1)
loc_1A724:
		rts
loc_1A726:
		cmpi.b	#$02,$0025(a0)
		beq.s	loc_1A730
		rts
loc_1A730:
		move.w	#$FA00,$0012(a1)
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$10,$001C(a1)
		move.b	#$02,$0024(a1)
		move.b	$0028(a0),d0
		bpl.s	loc_1A75A
		move.w	#0,$0010(a1)
loc_1A75A:
		btst	#$00,d0
		beq.s	loc_1A79A
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#$00,$002C(a1)
		move.b	#$04,$002D(a1)
		btst	#1,d0
		bne.s	loc_1A78A
		move.b	#1,$002C(a1)
loc_1A78A:
		btst	#$00,$0022(a1)
		beq.s	loc_1A79A
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_1A79A:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_1A7B0
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_1A7B0:
		cmpi.b	#$08,d0
		bne.s	loc_1A7C2
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_1A7C2:
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6
loc_1A7CC:
		subq.b	#1,$001E(a0)
		bpl.s	loc_1A7FA
		move.b	#$07,$001E(a0)
		move.b	#$00,$0020(a0)
		addq.b	#1,$001A(a0)
		cmpi.b	#$02,$001A(a0)
		bne.s	loc_1A7F0
		move.b	#$8B,$0020(a0)
loc_1A7F0:
		cmpi.b	#$07,$001A(a0)
		beq.w	 JmpTo23_DeleteObject
loc_1A7FA:
		bra.w	JmpTo8_DisplaySprite
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj42_MapUnc_1A7FE:	binclude	"mappings/sprite/obj42.bin"
; ===========================================================================
		nop
; loc_1A890:
JmpTo8_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1A896:
JmpTo23_DeleteObject:
		jmp	(DeleteObject).l
; loc_1A89C:
JmpTo5_SingleObjLoad:
		jmp	(SingleObjLoad).l
; loc_1A8A2:
JmpTo14_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1A8A8:
JmpTo16_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1A8AE:
JmpTo2_SolidObject_Always_SingleCharacter:
		jmp	(SolidObject_Always_SingleCharacter).l

;=============================================================================== 
; Object 0x64 - Metropolis - Pistons 
; [ Begin ]		         
;===============================================================================		  
Obj_0x64_Pistons: ; loc_1A8B4:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1A8C2(pc,d0),d1
		jmp     loc_1A8C2(pc,d1)
loc_1A8C2:
		dc.w    loc_1A8CE-loc_1A8C2
		dc.w    loc_1A936-loc_1A8C2
loc_1A8C6:
		dc.b	$40,$0C,$40,$01,$10,$20,$40,$01
loc_1A8CE:
		addq.b	#$02,$0024(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		lsr.w	#$02,d0
		andi.w	#$001C,d0
		lea	loc_1A8C6(pc,d0),A3
		move.b	(a3)+,$0019(a0)
		move.b	(a3)+,$002E(a0)
		lsr.w	#$02,d0
		move.b	d0,$001A(a0)
		bne.s	loc_1A8FE
		move.b	#$6C,$0016(a0)
		bset	#$04,$0001(a0)
loc_1A8FE:
		move.l	#Obj64_MapUnc_1A9F0,$0004(a0) ; loc_1A9F0
		move.w	#$2000,$0002(a0)
		bsr.w	JmpTo17_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$04,$0018(a0)
		move.w	8(a0),$0034(a0)
		move.w	$000C(a0),$0030(a0)
		moveq	#0,d0
		move.b	(a3)+,d0
		move.w	d0,$003C(a0)
		andi.b	#$0F,$0028(a0)
loc_1A936:
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$0028(a0),d0
		add.w   d0,d0
		move.w	loc_1A988(pc,d0),d1
		jsr	 loc_1A988(pc,d1)
		move.w	(sp)+,d4
		tst.b	$0001(a0)
		bpl.s	loc_1A96A
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$002E(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	JmpTo7_SolidObject
loc_1A96A:
		move.w	$0034(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	J_DeleteObject_17       ; loc_1A982
		jmp     DisplaySprite           ; (loc_d3C2)
J_DeleteObject_17: ; loc_1A982:
		jmp     DeleteObject            ; (loc_d3B4)   
loc_1A988:		              
		dc.w    loc_1A98C-loc_1A988
		dc.w    loc_1A98E-loc_1A988
loc_1A98C:
		rts
loc_1A98E:
		tst.b	$0038(a0)
		bne.s	loc_1A9B2
		tst.w	$003A(a0)
		beq.s	loc_1A9A0
		subq.w	#$08,$003A(a0)
		bra.s	loc_1A9d2
loc_1A9A0:
		subq.w	#1,$0036(a0)
		bpl.s	loc_1A9d2
		move.w	#$003C,$0036(a0)
		move.b	#1,$0038(a0)
loc_1A9B2:
		move.w	$003A(a0),d0
		cmp.w	$003C(a0),d0
		beq.s	loc_1A9C2
		addq.w	#$08,$003A(a0)
		bra.s	loc_1A9d2
loc_1A9C2:
		subq.w	#1,$0036(a0)
		bpl.s	loc_1A9d2
		move.w	#$003C,$0036(a0)
		clr.b   $0038(a0)
loc_1A9d2:
		move.w	$003A(a0),d0
		btst	#$00,$0022(a0)
		beq.s	loc_1A9E4
		neg.w	d0
		addi.w	#$0040,d0
loc_1A9E4:
		move.w	$0030(a0),d1
		add.w   d0,d1
		move.w	d1,$000C(a0)
		rts		   
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj64_MapUnc_1A9F0:	binclude	"mappings/sprite/obj64.bin"

;=============================================================================== 
; Object 0x64 - Metropolis - Pistons 
; [ End ]		         
;===============================================================================		  
; loc_1AA68:
JmpTo17_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1AA6E:
JmpTo7_SolidObject:
		jmp	(SolidObject).l

;=============================================================================== 
; Object 0x65 - Metropolis - Platform / Platform Over Gears
; [ Begin ]		         
;===============================================================================		 
Obj_0x65_Platform: ; loc_1AA74:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1AA82(pc,d0),d1
		jmp     loc_1AA82(pc,d1)
loc_1AA82:
		dc.w    loc_1AA9A-loc_1AA82
		dc.w    loc_1ABB0-loc_1AA82
		dc.w    loc_1AE08-loc_1AA82
		dc.w    loc_1AE26-loc_1AA82
loc_1AA8A:
		dc.b	$40,$0C,$80,$01,$20,$0C,$40,$03,$10,$10,$20,$00,$40,$0C,$80,$07
loc_1AA9A:
		addq.b	#$02,$0024(a0)
		move.l	#Obj65_MapUnc_1AE2C,$0004(a0) ; loc_1AE2C
		move.w	#$6000,$0002(a0)
		bsr.w	JmpTo18_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$04,$0018(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		lsr.w	#$02,d0
		andi.w	#$001C,d0
		lea	loc_1AA8A(pc,d0),A3
		move.b	(a3)+,$0019(a0)
		move.b	(a3)+,$0016(a0)
		lsr.w	#$02,d0
		move.b	d0,$001A(a0)
		cmpi.b	#1,d0
		bne.s	loc_1AAE6
		bset	#$07,$0022(a0)
loc_1AAE6:
		cmpi.b	#$02,d0
		bne.s	loc_1AB02
		addq.b	#$04,$0024(a0)
		move.l	#Obj65_MapUnc_1AE68,$0004(a0) ; loc_1AE68
		move.w	#$655F,$0002(a0)
		bra.w	loc_1AE26
loc_1AB02:
		move.w	8(a0),$0034(a0)
		move.w	$000C(a0),$0030(a0)
		moveq	#0,d0
		move.b	(a3)+,d0
		move.w	d0,$003C(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		bpl.w	 loc_1ABAA
		andi.b	#$0F,d0
		move.b	d0,$003E(a0)
		move.b	(a3),$0028(a0)
		cmpi.b	#$07,(a3)
		bne.s	loc_1AB38
		move.w	$003C(a0),$003A(a0)
loc_1AB38:
		bsr.w	JmpTo5_SingleObjLoad2
		bne.s	loc_1AB98
		_move.b	0(a0),0(a1)
		addq.b	#$04,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		addi.w	#$FFB4,8(a1)
		addi.w	#$0014,$000C(a1)
		btst	#$00,$0022(a0)
		bne.s	loc_1AB74
		subi.w	#$FFE8,8(a1)
		bset	#$00,$0001(a1)
loc_1AB74:
		move.l	#Obj65_MapUnc_1AE68,$0004(a1) ; loc_1AE68
		move.w	#$655F,$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$10,$0019(a1)
		move.b	#$04,$0018(a1)
		move.l	A0,$003C(a1)
loc_1AB98:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	loc_1ABAA
		bclr	#$07,$02(A2,d0)
loc_1ABAA:
		andi.b	#$0F,$0028(a0)
loc_1ABB0:
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$0028(a0),d0
		add.w   d0,d0
		move.w	loc_1AC0E(pc,d0),d1
		jsr	 loc_1AC0E(pc,d1)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	JmpTo8_SolidObject
		move.w	$0034(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	loc_1ABF6
		jmp     DisplaySprite           ; (loc_d3C2)
loc_1ABF6:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	JmpTo25_DeleteObject
		bclr	#$07,$02(A2,d0)
; loc_1AC08:
JmpTo25_DeleteObject:
		jmp	(DeleteObject).l
loc_1AC0E:
		dc.w    loc_1AC1E-loc_1AC0E
		dc.w    loc_1AC34-loc_1AC0E
		dc.w    loc_1ACC0-loc_1AC0E
		dc.w    loc_1Ad1C-loc_1AC0E
		dc.w    loc_1ADC0-loc_1AC0E
		dc.w    loc_1ADCE-loc_1AC0E
		dc.w    loc_1AC20-loc_1AC0E
		dc.w    loc_1ACA0-loc_1AC0E
loc_1AC1E:
		rts
loc_1AC20:
		tst.b	$0038(a0)
		bne.s	loc_1AC32
		subq.w	#1,$0036(a0)
		bne.s	loc_1AC60
		move.b	#1,$0038(a0)
loc_1AC32:
		bra.s	loc_1AC52
loc_1AC34:
		tst.b	$0038(a0)
		bne.s	loc_1AC52
		lea	(ButtonVine_Trigger).w,A2
		moveq	#0,d0
		move.b	$003E(a0),d0
		btst	#$00,$00(A2,d0)
		beq.s	loc_1AC60
		move.b	#1,$0038(a0)
loc_1AC52:
		move.w	$003C(a0),d0
		cmp.w	$003A(a0),d0
		beq.s	loc_1AC7E
		addq.w	#$02,$003A(a0)
loc_1AC60:
		move.w	$003A(a0),d0
		btst	#$00,$0022(a0)
		beq.s	loc_1AC72
		neg.w	d0
		addi.w	#$0080,d0
loc_1AC72:
		move.w	$0034(a0),d1
		sub.w   d0,d1
		move.w	d1,8(a0)
		rts
loc_1AC7E:
		addq.b	#1,$0028(a0)
		move.w	#$00B4,$0036(a0)
		clr.b   $0038(a0)
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	loc_1AC60
		bset	#$00,$02(A2,d0)
		bra.s	loc_1AC60
loc_1ACA0:
		tst.b	$0038(a0)
		bne.s	loc_1ACBE
		lea	(ButtonVine_Trigger).w,A2
		moveq	#0,d0
		move.b	$003E(a0),d0
		btst	#$00,$00(A2,d0)
		beq.s	loc_1ACDC
		move.b	#1,$0038(a0)
loc_1ACBE:
		bra.s	loc_1ACd2
loc_1ACC0:
		tst.b	$0038(a0)
		bne.s	loc_1ACd2
		subq.w	#1,$0036(a0)
		bne.s	loc_1ACDC
		move.b	#1,$0038(a0)
loc_1ACd2:
		tst.w	$003A(a0)
		beq.s	loc_1ACFA
		subq.w	#$02,$003A(a0)
loc_1ACDC:
		move.w	$003A(a0),d0
		btst	#$00,$0022(a0)
		beq.s	loc_1ACEE
		neg.w	d0
		addi.w	#$0080,d0
loc_1ACEE:
		move.w	$0034(a0),d1
		sub.w   d0,d1
		move.w	d1,8(a0)
		rts
loc_1ACFA:
		subq.b	#1,$0028(a0)
		move.w	#$00B4,$0036(a0)
		clr.b   $0038(a0)
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	loc_1ACDC
		bclr	#$00,$02(A2,d0)
		bra.s	loc_1ACDC
loc_1Ad1C:
		move.w	$0034(a0),d4
		move.w	d4,d5
		btst	#$00,$0022(a0)
		bne.s	loc_1Ad34
		subi.w	#$0020,d4
		addi.w	#$0060,d5
		bra.s	loc_1Ad3C
loc_1Ad34:
		subi.w	#$00A0,d4
		subi.w	#$0020,d5
loc_1Ad3C:
		move.w	$000C(a0),d2
		move.w	d2,d3
		subi.w	#$0010,d2
		addi.w	#$0040,d3
		moveq	#0,d1
		move.w	(MainCharacter+8).w,d0
		cmp.w	d4,d0
		bcs.s	loc_1Ad66
		cmp.w	d5,d0
		bcc.s	loc_1Ad66
		move.w	(MainCharacter+$C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_1Ad66
		cmp.w	d3,d0
		bcc.s	loc_1Ad66
		moveq	#1,d1
loc_1Ad66:
		move.w	(Sidekick+8).w,d0
		cmp.w	d4,d0
		bcs.s	loc_1AD80
		cmp.w	d5,d0
		bcc.s	loc_1AD80
		move.w	(Sidekick+$C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_1AD80
		cmp.w	d3,d0
		bcc.s	loc_1AD80
		moveq	#1,d1
loc_1AD80:
		tst.b	d1
		beq.s	loc_1AD96
		move.w	$003C(a0),d0
		cmp.w	$003A(a0),d0
		beq.s	loc_1ADBE
		addi.w	#$0010,$003A(a0)
		bra.s	loc_1ADA2
loc_1AD96:
		tst.w	$003A(a0)
		beq.s	loc_1ADA2
		subi.w	#$0010,$003A(a0)
loc_1ADA2:
		move.w	$003A(a0),d0
		btst	#$00,$0022(a0)
		beq.s	loc_1ADB4
		neg.w	d0
		addi.w	#$0040,d0
loc_1ADB4:
		move.w	$0034(a0),d1
		sub.w   d0,d1
		move.w	d1,8(a0)
loc_1ADBE:
		rts
loc_1ADC0:
		btst	#$03,$0022(a0)
		beq.s	loc_1ADCC
		addq.b	#1,$0028(a0)
loc_1ADCC:
		rts
loc_1ADCE:
		tst.b	$0038(a0)
		bne.s	loc_1ADE8
		addq.w	#$02,8(a0)
		cmpi.w	#$1B40,8(a0)
		bne.s	loc_1ADFA
		move.b	#1,$0038(a0)
		bra.s	loc_1ADFA
loc_1ADE8:
		subq.w	#$02,8(a0)
		cmpi.w	#$1800,8(a0)
		bne.s	loc_1ADFA
		move.b	#$00,$0038(a0)
loc_1ADFA:
		move.w	8(a0),$0034(a0)
		move.w	8(a0),(MTZ_Platform_Cog_X).w
		rts
loc_1AE08:
		move.l	$003C(a0),A1
		move.w	$003A(a1),d0
loc_1AE10:		
		andi.w	#$0007,d0
		move.b	loc_1AE1E(pc,d0),$001A(a0)
		bra.w	JmpTo15_MarkObjGone
loc_1AE1E:
		dc.b	$00,$00,$02,$02,$02,$01,$01,$01
loc_1AE26:
		move.w	(MTZ_Platform_Cog_X).w,d0
		bra.s	loc_1AE10  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj65_MapUnc_1AE2C:	binclude	"mappings/sprite/obj65_a.bin"
Obj65_MapUnc_1AE68:	binclude	"mappings/sprite/obj65_b.bin"

;=============================================================================== 
; Object 0x65 - Metropolis - Platform Over Gears
; [ End ]		         
;===============================================================================		  
; loc_1AEA4:
JmpTo15_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1AEAA:
JmpTo5_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1AEB0:
JmpTo18_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1AEB6:
JmpTo8_SolidObject:
		jmp	(SolidObject).l

;=============================================================================== 
; Object 0x66 - Metropolis - Springs on Walls
; [ Begin ]		         
;===============================================================================		   
Obj_0x66_Spring_Wall: ; loc_1AEBC:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1AECA(pc,d0),d1
		jmp     loc_1AECA(pc,d1)
loc_1AECA:
		dc.w    loc_1AECE-loc_1AECA
		dc.w    loc_1AF12-loc_1AECA
loc_1AECE:
		addq.b	#$02,$0024(a0)
		move.l	#Obj66_MapUnc_1B084,$0004(a0) ; loc_1B084
		move.w	#$8680,$0002(a0)
		bsr.w	JmpTo19_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$08,$0019(a0)
		move.b	#$04,$0018(a0)
		move.b	#$40,$0016(a0)
		move.b	$0028(a0),d0
		lsr.b	#$04,d0
		andi.b	#$07,d0
		move.b	d0,$001A(a0)
		beq.s	loc_1AF12
		move.b	#$80,$0016(a0)
loc_1AF12:
		move.w	#$0013,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	JmpTo3_SolidObject_Always_SingleCharacter
		cmpi.b	#1,d4
		bne.s	loc_1AF5A
		btst	#1,$0022(a1)
		beq.s	loc_1AF5A
		move.b	$0022(a0),d1
		move.w	8(a0),d0
		sub.w   8(a1),d0
		bcs.s	loc_1AF52
		eori.b  #1,d1
loc_1AF52:
		andi.b	#1,d1
		bne.s	loc_1AF5A
		bsr.s	loc_1AFB0
loc_1AF5A:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	JmpTo3_SolidObject_Always_SingleCharacter
		cmpi.b	#1,d4
		bne.s	loc_1AF90
		btst	#1,$0022(a1)
		beq.s	loc_1AF90
		move.b	$0022(a0),d1
		move.w	8(a0),d0
		sub.w   8(a1),d0
		bcs.s	loc_1AF88
		eori.b  #1,d1
loc_1AF88:
		andi.b	#1,d1
		bne.s	loc_1AF90
		bsr.s	loc_1AFB0
loc_1AF90:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 JmpTo26_DeleteObject
		tst.w	(Debug_placement_mode).w
		beq.s	loc_1AFAE
		bsr.w	JmpTo9_DisplaySprite
loc_1AFAE:
		rts
loc_1AFB0:
		move.w	$0030(a0),$0010(a1)
		move.w	#$F800,$0010(a1)
		move.w	#$F800,$0012(a1)
		bset	#$00,$0022(a1)
		btst	#$00,$0022(a0)
		bne.s	loc_1AFDA
		bclr	#$00,$0022(a1)
		neg.w	$0010(a1)
loc_1AFDA:
		move.w	#$000F,$002E(a1)
		move.w	$0010(a1),$0014(a1)
		btst	#$02,$0022(a1)
		bne.s	loc_1AFF4
		move.b	#$00,$001C(a1)
loc_1AFF4:
		move.b	$0028(a0),d0
		bpl.s	loc_1B000
		move.w	#0,$0012(a1)
loc_1B000:
		btst	#$00,d0
		beq.s	loc_1B040
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#1,$002C(a1)
		move.b	#$08,$002D(a1)
		btst	#1,d0
		bne.s	loc_1B030
		move.b	#$03,$002C(a1)
loc_1B030:
		btst	#$00,$0022(a1)
		beq.s	loc_1B040
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_1B040:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_1B056
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_1B056:
		cmpi.b	#$08,d0
		bne.s	loc_1B068
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_1B068:
		bclr	#$05,$0022(a0)
		bclr	#$06,$0022(a0)
		bclr	#$05,$0022(a1)
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj66_MapUnc_1B084:	binclude	"mappings/sprite/obj66.bin"

;===============================================================================
; Object 0x66 - Metropolis - Springs on Walls
; [ End ]
;===============================================================================
; loc_1B0AC:
JmpTo9_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1B0B2:
JmpTo26_DeleteObject:
		jmp	(DeleteObject).l
; loc_1B0B8:
JmpTo19_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1B0BE:
JmpTo3_SolidObject_Always_SingleCharacter:
		jmp	(SolidObject_Always_SingleCharacter).l

;===============================================================================
; Object 0x67 - Metropolis - Teleport Attributes
; [ Begin ]
;===============================================================================
Obj_0x67_Teleport_Attributes: ; loc_1B0C4:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1B0EC(pc,d0),d1
		jsr	 loc_1B0EC(pc,d1)
		move.b	$002C(a0),d0
		add.b   $0036(a0),d0
		beq.w	 JmpTo4_MarkObjGone3
		lea	(loc_1B4BA).l,A1
		bsr.w	JmpTo4_AnimateSprite
		bra.w	JmpTo10_DisplaySprite
loc_1B0EC:
		dc.w    loc_1B0F0-loc_1B0EC
		dc.w    loc_1B114-loc_1B0EC
loc_1B0F0:
		addq.b	#$02,$0024(a0)
		move.l	#Teleport_Attributes_Mappings,$0004(a0) ; loc_1B4d4
		move.w	#$633C,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$05,$0018(a0)
loc_1B114:
		lea	(MainCharacter).w,A1
		lea	$002C(a0),A4
		bsr.s	loc_1B126
		lea	(Sidekick).w,A1
		lea	$0036(a0),A4
loc_1B126:
		moveq	#0,d0
		move.b	(a4),d0
		move.w	loc_1B132(pc,d0),d0
		jmp     loc_1B132(pc,d0)
loc_1B132:
		dc.w    loc_1B138-loc_1B132
		dc.w    loc_1B1C8-loc_1B132
		dc.w    loc_1B1FC-loc_1B132
loc_1B138:
		tst.w	(Debug_placement_mode).w
		bne.w	 loc_1B1C6
		move.w	8(a1),d0
		sub.w   8(a0),d0
		addq.w	#$03,d0
		btst	#$00,$0022(a0)
		beq.s	loc_1B156
		addi.w	#$000A,d0
loc_1B156:
		cmpi.w	#$0010,d0
		bcc.s	loc_1B1C6
		move.w	$000C(a1),d1
		sub.w   $000C(a0),d1
		addi.w	#$0020,d1
		cmpi.w	#$0040,d1
		bcc.s	loc_1B1C6
		tst.b	$002A(a1)
		bne.s	loc_1B1C6
		addq.b	#$02,(a4)
		move.b	#$81,$002A(a1)
		move.b	#$02,$001C(a1)
		move.w	#$0800,$0014(a1)
		move.w	#0,$0010(a1)
		move.w	#0,$0012(a1)
		bclr	#$05,$0022(a0)
		bclr	#$05,$0022(a1)
		bset	#1,$0022(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		clr.b   $0001(a4)
		move.w	#SndID_Roll,d0
		jsr	(PlaySound).l             ; loc_14C6
		move.w	#$0100,$001C(a0)
loc_1B1C6:
		rts
loc_1B1C8:
		move.b	$0001(a4),d0
		addq.b	#$02,$0001(a4)
		jsr	(CalcSine).l		; loc_320A
		asr.w   #$05,d0
		move.w	$000C(a0),d2
		sub.w   d0,d2
		move.w	d2,$000C(a1)
		cmpi.b	#$80,$0001(a4)
		bne.s	loc_1B1FA
		bsr.w	loc_1B278
		addq.b	#$02,(a4)
		move.w	#SndID_SpindashRelease,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_1B1FA:
		rts
loc_1B1FC:
		subq.b	#1,$0002(a4)
		bpl.s	loc_1B230
		move.l	$0006(a4),A2
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$000C(a1)
		tst.b	$0028(a0)
		bpl.s	loc_1B21A
		subq.w	#$08,A2
loc_1B21A:
		move.l	A2,$0006(a4)
		subq.w	#$04,$0004(a4)
		beq.s	loc_1B256
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$1000,d2
		bra.w	loc_1B2DC
loc_1B230:
		move.l	8(a1),d2
		move.l	$000C(a1),d3
		move.w	$0010(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d2
		move.w	$0012(a1),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d3
		move.l	d2,8(a1)
		move.l	d3,$000C(a1)
		rts
loc_1B256:
		andi.w	#$07FF,$000C(a1)
		clr.b   (a4)
		clr.b   $002A(a1)
		btst	#$04,$0028(a0)
		bne.s	loc_1B276
		move.w	#0,$0010(a1)
		move.w	#0,$0012(a1)
loc_1B276:
		rts
loc_1B278:
		move.b	$0028(a0),d0
		bpl.s	loc_1B2AC
		neg.b   d0
		andi.w	#$000F,d0
		add.w   d0,d0
		lea	(loc_1B35A).l,A2
		adda.w	$00(A2,d0),A2
		move.w	(a2)+,d0
		subq.w	#$04,d0
		move.w	d0,$0004(a4)
		lea	$00(A2,d0),A2
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$000C(a1)
		subq.w	#$08,A2
		bra.s	loc_1B2d0
loc_1B2AC:
		andi.w	#$000F,d0
		add.w   d0,d0
		lea	(loc_1B35A).l,A2
		adda.w	$00(A2,d0),A2
		move.w	(a2)+,$0004(a4)
		subq.w	#$04,$0004(a4)
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$000C(a1)
loc_1B2d0:
		move.l	A2,$0006(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$1000,d2
loc_1B2DC:
		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w   8(a1),d0
		bge.s   loc_1B2EC
		neg.w	d0
		neg.w	d2
loc_1B2EC:
		moveq	#0,d1
		move.w	d5,d1
		sub.w   $000C(a1),d1
		bge.s   loc_1B2FA
		neg.w	d1
		neg.w	d3
loc_1B2FA:
		cmp.w	d0,d1
		bcs.s	loc_1B32C
		moveq	#0,d1
		move.w	d5,d1
		sub.w   $000C(a1),d1
		swap	d1
		divs.w  d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w   8(a1),d0
		beq.s	loc_1B318
		swap	d0
		divs.w  d1,d0
loc_1B318:
		move.w	d0,$0010(a1)
		move.w	d3,$0012(a1)
		tst.w	d1
		bpl.s	loc_1B326
		neg.w	d1
loc_1B326:
		move.w	d1,$0002(a4)
		rts
loc_1B32C:
		moveq	#0,d0
		move.w	d4,d0
		sub.w   8(a1),d0
		swap	d0
		divs.w  d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w   $000C(a1),d1
		beq.s	loc_1B346
		swap	d1
		divs.w  d0,d1
loc_1B346:
		move.w	d1,$0012(a1)
		move.w	d2,$0010(a1)
		tst.w	d0
		bpl.s	loc_1B354
		neg.w	d0
loc_1B354:
		move.w	d0,$0002(a4)
		rts
loc_1B35A:
		dc.w    loc_1B37A-loc_1B35A
		dc.w    loc_1B394-loc_1B35A
		dc.w    loc_1B39E-loc_1B35A
		dc.w    loc_1B3A8-loc_1B35A
		dc.w    loc_1B3B2-loc_1B35A
		dc.w    loc_1B3BC-loc_1B35A
		dc.w    loc_1B3C6-loc_1B35A
		dc.w    loc_1B3d0-loc_1B35A
		dc.w    loc_1B3EA-loc_1B35A
		dc.w    loc_1B404-loc_1B35A
		dc.w    loc_1B41E-loc_1B35A
		dc.w    loc_1B438-loc_1B35A
		dc.w    loc_1B452-loc_1B35A
		dc.w    loc_1B46C-loc_1B35A
		dc.w    loc_1B486-loc_1B35A
		dc.w    loc_1B4A0-loc_1B35A
loc_1B37A:
		dc.w	$0018
		dc.b	$07,$28,$02,$70,$06,$d0,$02,$70,$06,$C0,$02,$88,$06,$C0,$03,$E0
		dc.b	$06,$d0,$03,$F0,$07,$28,$03,$F0
loc_1B394:
		dc.w	$0008
		dc.b	$0B,$D8,$05,$F0,$0E,$00,$05,$F0
loc_1B39E:
		dc.w	$0008
		dc.b	$0C,$58,$03,$70,$0E,$00,$03,$70
loc_1B3A8:
		dc.w	$0008
		dc.b	$13,$D8,$01,$F0,$15,$80,$01,$F0
loc_1B3B2:
		dc.w	$0008
		dc.b	$05,$D8,$03,$70,$07,$80,$03,$70
loc_1B3BC:
		dc.w	$0008
		dc.b	$05,$D8,$05,$F0,$07,$00,$05,$F0
loc_1B3C6:
		dc.w	$0008
		dc.b	$0B,$A8,$07,$70,$08,$80,$07,$70
loc_1B3d0:
		dc.w	$0018
		dc.b	$0B,$D8,$01,$F0,$0C,$30,$01,$F0,$0C,$40,$01,$E0,$0C,$40,$00,$C0
		dc.b	$0C,$50,$00,$B0,$0C,$A8,$00,$B0
loc_1B3EA:
		dc.w	$0018
		dc.b	$14,$D8,$04,$B0,$15,$30,$04,$B0,$15,$40,$04,$C0,$15,$40,$05,$A0
		dc.b	$15,$30,$05,$B0,$14,$D8,$05,$B0
loc_1B404:
		dc.w	$0018
		dc.b	$17,$28,$03,$30,$15,$d0,$03,$30,$15,$C0,$03,$20,$15,$C0,$02,$40
		dc.b	$15,$d0,$02,$30,$16,$28,$02,$30
loc_1B41E:
		dc.w	$0018
		dc.b	$0F,$D8,$03,$B0,$10,$30,$03,$B0,$10,$40,$03,$A0,$10,$40,$02,$C0
		dc.b	$10,$50,$02,$B0,$10,$A8,$02,$B0
loc_1B438:
		dc.w	$0018
		dc.b	$0F,$D8,$04,$B0,$10,$B0,$04,$B0,$10,$C0,$04,$A0,$10,$C0,$03,$C0
		dc.b	$10,$d0,$03,$B0,$11,$28,$03,$B0
loc_1B452:
		dc.w	$0018
		dc.b	$1E,$58,$01,$B0,$1F,$30,$01,$B0,$1F,$40,$01,$C0,$1F,$40,$02,$A0
		dc.b	$1F,$50,$02,$B0,$20,$A8,$02,$B0
loc_1B46C:
		dc.w	$0018
		dc.b	$20,$A8,$04,$70,$20,$50,$04,$70,$20,$40,$04,$80,$20,$40,$05,$A0
		dc.b	$20,$50,$05,$B0,$20,$A8,$05,$B0
loc_1B486:
		dc.w	$0018
		dc.b	$22,$58,$05,$B0,$23,$30,$05,$B0,$23,$40,$05,$A0,$23,$40,$04,$C0
		dc.b	$23,$50,$04,$B0,$23,$A8,$04,$B0
loc_1B4A0:
		dc.w	$0018
		dc.b	$22,$D8,$02,$B0,$23,$30,$02,$B0,$23,$40,$02,$C0,$23,$40,$04,$60
		dc.b	$23,$30,$04,$70,$22,$D8,$04,$70		
loc_1B4BA:		 
		dc.w    loc_1B4BE-loc_1B4BA
		dc.w    loc_1B4C1-loc_1B4BA
loc_1B4BE:
		dc.b	$1F,$00,$FF
loc_1B4C1:
		dc.b	$01,$01,$00,$00,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$01,$00
		dc.b	$FE,$02,$00   
Teleport_Attributes_Mappings:
loc_1B4d4:
		dc.w    loc_1B4D8-loc_1B4d4
		dc.w    loc_1B4DA-loc_1B4d4
loc_1B4D8:
		dc.w	$0000
loc_1B4DA:
		dc.w	$0006
		dc.l	$E0050000,$0000FFEC,$E0050000,$0000FFF8
		dc.l	$F0050000,$0000FFEC,$F0050000,$0000FFF8
		dc.l	$00050000,$0000FFEC,$00050000,$0000FFF8		             
;=============================================================================== 
; Object 0x67 - Metropolis - Teleport Attributes
; [ End ]		         
;===============================================================================               
; loc_1B50C:
JmpTo10_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1B512:
JmpTo4_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1B518:
JmpTo4_MarkObjGone3:
		jmp	(MarkObjGone3).l

		align 4
;=============================================================================== 
; Object 0x68 - Metropolis - Block with Arrow
; [ Begin ]		         
;===============================================================================		    
Obj_0x68_Block_Arrow: ; loc_1B520:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1B52E(pc,d0),d1
		jmp     loc_1B52E(pc,d1)
loc_1B52E:
		dc.w    loc_1B534-loc_1B52E
		dc.w    loc_1B5d6-loc_1B52E
		dc.w    loc_1B5EE-loc_1B52E
loc_1B534:
		addq.b	#$02,$0024(a0)
		move.l	#Obj68_MapUnc_1B6DC,$0004(a0) ; loc_1B6DC
		move.w	#$6414,$0002(a0)
		bsr.w	JmpTo20_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$04,$0018(a0)
		bsr.w	JmpTo6_SingleObjLoad2
		bne.s	loc_1B5d0
		_move.b	0(a0),0(a1)
		addq.b	#$04,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	8(a1),$0030(a1)
		move.w	$000C(a1),$0032(a1)
		move.l	$0004(a0),$0004(a1)
		move.w	#$241C,$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$10,$0019(a1)
		move.b	#$04,$0018(a1)
		move.w	(Timer_frames).w,d0
		lsr.w	#$06,d0
		move.w	d0,d1
		andi.w	#$0001,d0
		move.w	d0,$0036(a1)
		lsr.w	#1,d1
		add.b   $0028(a0),d1
		andi.w	#$0003,d1
		move.b	d1,$0025(a1)
		move.b	d1,$001A(a1)
		lea	(loc_1B6D8).l,A2
		move.b	$00(A2,d1),$0020(a1)
loc_1B5d0:
		move.b	#$04,$001A(a0)
loc_1B5d6:
		move.w	#$001B,d1
		move.w	#$0010,d2
		move.w	#$0011,d3
		move.w	8(a0),d4
		bsr.w	JmpTo9_SolidObject
		bra.w	JmpTo16_MarkObjGone
loc_1B5EE:
		bsr.w	loc_1B656
		moveq	#0,d0
		move.b	$0025(a0),d0
		add.w   d0,d0
		move.w	loc_1B60A(pc,d0),d1
		jsr	 loc_1B60A(pc,d1)
		move.w	$0030(a0),d0
		bra.w	JmpTo2_MarkObjGone2
loc_1B60A:
		dc.w    loc_1B612-loc_1B60A
		dc.w    loc_1B624-loc_1B60A
		dc.w    loc_1B634-loc_1B60A
		dc.w    loc_1B644-loc_1B60A
loc_1B612:
		moveq	#0,d0
		move.b	$0034(a0),d0
		neg.w	d0
		add.w   $0032(a0),d0
		move.w	d0,$000C(a0)
		rts
loc_1B624:
		moveq	#0,d0
		move.b	$0034(a0),d0
		add.w   $0030(a0),d0
		move.w	d0,8(a0)
		rts
loc_1B634:
		moveq	#0,d0
		move.b	$0034(a0),d0
		add.w   $0032(a0),d0
		move.w	d0,$000C(a0)
		rts
loc_1B644:
		moveq	#0,d0
		move.b	$0034(a0),d0
		neg.w	d0
		add.w   $0030(a0),d0
		move.w	d0,8(a0)
		rts
loc_1B656:
		tst.w	$0038(a0)
		beq.s	loc_1B67A
		move.b	(Timer_frames+1).w,d0
		andi.b	#$3F,d0
		bne.s	loc_1B6d6
		clr.w	$0038(a0)
		tst.b	$0001(a0)
		bpl.s	loc_1B67A
		move.w	#SndID_SpikesMove,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_1B67A:
		tst.w	$0036(a0)
		beq.s	loc_1B6B6
		subi.w	#$0800,$0034(a0)
		bcc.s	loc_1B6d6
		move.w	#0,$0034(a0)
		move.w	#0,$0036(a0)
		move.w	#$0001,$0038(a0)
		addq.b	#1,$0025(a0)
		andi.b	#$03,$0025(a0)
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.b	d0,$001A(a0)
		move.b	loc_1B6D8(pc,d0),$0020(a0)
		rts
loc_1B6B6:
		addi.w	#$0800,$0034(a0)
		cmpi.w	#$2000,$0034(a0)
		bcs.s	loc_1B6d6
		move.w	#$2000,$0034(a0)
		move.w	#$0001,$0036(a0)
		move.w	#$0001,$0038(a0)
loc_1B6d6:
		rts
loc_1B6D8:
		dc.b	$84,$A6,$84,$A6  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj68_MapUnc_1B6DC:	binclude	"mappings/sprite/obj68.bin"

;=============================================================================== 
; Object 0x68 - Metropolis - Block with Arrow
; [ End ]		         
;===============================================================================  
;=============================================================================== 
; Object 0x6D - Metropolis - Floor Harpoon
; [ Begin ]		         
;===============================================================================  
Obj_0x6D_Harpoon: ; loc_1B720:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1B72E(pc,d0),d1
		jmp     loc_1B72E(pc,d1)
loc_1B72E:
		dc.w    loc_1B732-loc_1B72E
		dc.w    loc_1B76C-loc_1B72E
loc_1B732:
		addq.b	#$02,$0024(a0)
		move.l	#Obj68_MapUnc_1B6DC,$0004(a0) ; loc_1B6DC
		move.w	#$241C,$0002(a0)
		bsr.w	JmpTo20_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$04,$0019(a0)
		move.b	#$04,$0018(a0)
		move.w	8(a0),$0030(a0)
		move.w	$000C(a0),$0032(a0)
		move.b	#$84,$0020(a0)
loc_1B76C:
		bsr.w	loc_1B788
		moveq	#0,d0
		move.b	$0034(a0),d0
		neg.w	d0
		add.w   $0032(a0),d0
		move.w	d0,$000C(a0)
		move.w	$0030(a0),d0
		bra.w	JmpTo2_MarkObjGone2
loc_1B788:
		tst.w	$003A(a0)
		beq.s	loc_1B794
		subq.w	#1,$003A(a0)
		rts
loc_1B794:
		tst.w	$0038(a0)
		beq.s	loc_1B7AC
		move.b	(Timer_frames+1).w,d0
		sub.b   $0028(a0),d0
		andi.b	#$7F,d0
		bne.s	loc_1B7EE
		clr.w	$0038(a0)
loc_1B7AC:
		tst.w	$0036(a0)
		beq.s	loc_1B7CE
		subi.w	#$0400,$0034(a0)
		bcc.s	loc_1B7EE
		move.w	#0,$0034(a0)
		move.w	#0,$0036(a0)
		move.w	#$0001,$0038(a0)
		rts
loc_1B7CE:
		addi.w	#$0400,$0034(a0)
		cmpi.w	#$2000,$0034(a0)
		bcs.s	loc_1B7EE
		move.w	#$2000,$0034(a0)
		move.w	#$0001,$0036(a0)
		move.w	#$0003,$003A(a0)
loc_1B7EE:
		rts
;=============================================================================== 
; Object 0x6D - Metropolis - Floor Harpoon
; [ End ]		         
;===============================================================================  
JmpTo16_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1B7F6:
JmpTo6_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1B7FC:
JmpTo20_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1B802:
JmpTo9_SolidObject:
		jmp	(SolidObject).l
; loc_1B808:
JmpTo2_MarkObjGone2:
		jmp	(MarkObjGone2).l

		align 4

;=============================================================================== 
; Object 0x69 - Metropolis - Screew Nut
; [ Begin ]		         
;===============================================================================		   
Obj_0x69_Screw_Nut: ; loc_1B810:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1B81E(pc,d0),d1
		jmp     loc_1B81E(pc,d1)
loc_1B81E:
		dc.w    loc_1B826-loc_1B81E
		dc.w    loc_1B868-loc_1B81E
		dc.w    loc_1B982-loc_1B81E
		dc.w    loc_1B880-loc_1B81E
loc_1B826:
		addq.b	#$02,$0024(a0)
		move.l	#Obj69_MapUnc_1B9A6,$0004(a0) ; loc_1B9A6
		move.w	#$2500,$0002(a0)
		bsr.w	JmpTo21_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$20,$0019(a0)
		move.b	#$0B,$0016(a0)
		move.b	#$04,$0018(a0)
		move.w	$000C(a0),$0032(a0)
		move.b	$0028(a0),d0
		andi.w	#$007F,d0
		lsl.w	#$03,d0
		move.w	d0,$0036(a0)
loc_1B868:
		lea	(MainCharacter).w,A1
		lea	$0038(a0),A4
		moveq	#$03,d6
		bsr.s	loc_1B898
		lea	(Sidekick).w,A1
		lea	$003C(a0),A4
		moveq	#$04,d6
		bsr.s	loc_1B898
loc_1B880:
		move.w	#$002B,d1
		move.w	#$000C,d2
		move.w	#$000D,d3
		move.w	8(a0),d4
		bsr.w	JmpTo10_SolidObject
		bra.w	JmpTo17_MarkObjGone
loc_1B898:
		btst	d6,$0022(a0)
		bne.s	loc_1B8A0
		clr.b   (a4)
loc_1B8A0:
		moveq	#0,d0
		move.b	(a4),d0
		move.w	loc_1B8AC(pc,d0),d0
		jmp     loc_1B8AC(pc,d0)
loc_1B8AC:
		dc.w    loc_1B8B2-loc_1B8AC
		dc.w    loc_1B8d2-loc_1B8AC
		dc.w    loc_1B8F4-loc_1B8AC
loc_1B8B2:
		btst	d6,$0022(a0)
		bne.s	loc_1B8BA
		rts
loc_1B8BA:
		addq.b	#$02,(a4)
		move.b	#$00,$0001(a4)
		move.w	8(a0),d0
		sub.w   8(a1),d0
		bcc.s	loc_1B8d2
		move.b	#1,$0001(a4)
loc_1B8d2:
		move.w	8(a1),d0
		sub.w   8(a0),d0
		tst.b	$0001(a4)
		beq.s	loc_1B8E4
		addi.w	#$000F,d0
loc_1B8E4:
		cmpi.w	#$0010,d0
		bcc.s	loc_1B8F2
		move.w	8(a0),8(a1)
		addq.b	#$02,(a4)
loc_1B8F2:
		rts
loc_1B8F4:
		move.w	8(a1),d0
		sub.w   8(a0),d0
		bcc.s	loc_1B95A
		add.w   d0,$0034(a0)
		move.w	8(a0),8(a1)
		move.w	$0034(a0),d0
		asr.w   #$03,d0
		move.w	d0,d1
		asr.w   #1,d0
		andi.w	#$0003,d0
		move.b	d0,$001A(a0)
		neg.w	d1
		add.w   $0032(a0),d1
		move.w	d1,$000C(a0)
		sub.w   $0032(a0),d1
		move.w	$0036(a0),d0
		cmp.w	d0,d1
		blt.s   loc_1B958
		move.w	d0,d1
		add.w   $0032(a0),d1
		move.w	d1,$000C(a0)
		lsl.w	#$03,d0
		neg.w	d0
		move.w	d0,$0034(a0)
		move.b	#$00,$001A(a0)
		tst.b	$0028(a0)
		bmi.s	loc_1B952
		clr.b   (a4)
		rts
loc_1B952:
		move.b	#$04,$0024(a0)
loc_1B958:
		rts
loc_1B95A:
		add.w   d0,$0034(a0)
		move.w	8(a0),8(a1)
		move.w	$0034(a0),d0
		asr.w   #$03,d0
		move.w	d0,d1
		asr.w   #1,d0
		andi.w	#$0003,d0
		move.b	d0,$001A(a0)
		neg.w	d1
		add.w   $0032(a0),d1
		move.w	d1,$000C(a0)
		rts
loc_1B982:
		bsr.w	JmpTo10_ObjectMove
		addi.w	#$0038,$0012(a0)
		bsr.w	JmpTo_ObjHitFloor
		tst.w	d1
		bpl.w	 loc_1B9A2
		add.w   d1,$000C(a0)
		clr.w	$0012(a0)
		addq.b	#$02,$0024(a0)
loc_1B9A2:
		bra.w	loc_1B880     
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj69_MapUnc_1B9A6:	binclude	"mappings/sprite/obj69.bin"
; ===========================================================================
		nop
; loc_1BA10:
JmpTo17_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1BA16:
JmpTo21_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1BA1C:
JmpTo10_SolidObject:
		jmp	(SolidObject).l
; loc_1BA2:
JmpTo10_ObjectMove:
		jmp	(ObjectMove).l
; loc_1BA28:
JmpTo_ObjHitFloor:
		jmp	(ObjHitFloor).l

		align 4

;=============================================================================== 
; Object 0x6A - Dust Hill - Three Rotating Boxes
; [ Begin ]		         
;===============================================================================		  
Obj_0x6A_Rotating_Boxes: ; loc_1BA30:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1BA3E(pc,d0),d1
		jmp     loc_1BA3E(pc,d1)
loc_1BA3E:
		dc.w    loc_1BA44-loc_1BA3E
		dc.w    loc_1BB5E-loc_1BA3E
		dc.w    loc_1BBE6-loc_1BA3E
loc_1BA44:
		addq.b	#$02,$0024(a0)
		move.l	#Obj65_MapUnc_1AE2C,$0004(a0) ; loc_1AE2C
		move.w	#$6000,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$04,$0018(a0)
		move.b	#$20,$0019(a0)
		move.b	#$0C,$0016(a0)
		move.l	#loc_1BC5C,$002C(a0)
		move.b	#1,$001A(a0)
		cmpi.b	#dust_hill_zone,(Current_Zone).w
		bne.w	 loc_1BB44
		addq.b	#$02,$0024(a0)
		move.l	#Obj6A_MapUnc_1BCB0,$0004(a0) ; loc_1BCB0
		move.w	#$63d4,$0002(a0)
		move.b	#$20,$0019(a0)
		move.b	#$20,$0016(a0)
		move.l	#loc_1BC74,$002C(a0)
		btst	#$00,$0022(a0)
		beq.s	loc_1BABC
		move.l	#loc_1BC92,$002C(a0)
loc_1BABC:
		move.b	#$00,$001A(a0)
		cmpi.b	#$18,$0028(a0)
		bne.w	 loc_1BB50
		bsr.w	JmpTo7_SingleObjLoad2
		bne.s	loc_1BB1C
		bsr.s	loc_1BB1E
		addi.w	#$0040,8(a1)
		addi.w	#$0040,$000C(a1)
		move.b	#$06,$0028(a1)
		btst	#$00,$0022(a0)
		beq.s	loc_1BAF4
		move.b	#$0C,$0028(a1)
loc_1BAF4:
		bsr.w	JmpTo7_SingleObjLoad2
		bne.s	loc_1BB1C
		bsr.s	loc_1BB1E
		subi.w	#$0040,8(a1)
		addi.w	#$0040,$000C(a1)
		move.b	#$0C,$0028(a1)
		btst	#$00,$0022(a0)
		beq.s	loc_1BB1C
		move.b	#$06,$0028(a1)
loc_1BB1C:
		bra.s	loc_1BB44
loc_1BB1E:
		_move.b	0(a0),0(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	8(a0),$0032(a1)
		move.w	$000C(a0),$0030(a1)
		move.b	$0022(a0),$0022(a1)
		rts
loc_1BB44:
		move.w	8(a0),$0032(a0)
		move.w	$000C(a0),$0030(a0)
loc_1BB50:
		bsr.w	JmpTo22_Adjust2PArtPointer
		move.b	$0028(a0),$0038(a0)
		bra.w	loc_1BC22
loc_1BB5E:
		move.w	8(a0),-(sp)
		tst.w	$0036(a0)
		bne.s	loc_1BBAE
		move.b	$003C(a0),d1
		move.b	$0022(a0),d0
		btst	#$03,d0
		bne.s	loc_1BB8A
		btst	#$03,d1
		beq.s	loc_1BB8E
		move.b	#1,$0036(a0)
		move.b	#$00,$003C(a0)
		bra.s	loc_1BBBE
loc_1BB8A:
		move.b	d0,$003C(a0)
loc_1BB8E:
		btst	#$04,d0
		bne.s	loc_1BBA8
		btst	#$04,d1
		beq.s	loc_1BBBE
		move.b	#1,$0036(a0)
		move.b	#$00,$003C(a0)
		bra.s	loc_1BBBE
loc_1BBA8:
		move.b	d0,$003C(a0)
		bra.s	loc_1BBBE
loc_1BBAE:
		jsr	 ObjectMove              ; (loc_d27A)
		subq.w	#1,$0034(a0)
		bne.s	loc_1BBBE
		bsr.w	loc_1BC22
loc_1BBBE:
		move.w	(sp)+,d4
		tst.b	$0001(a0)
		bpl.s	loc_1BBDE
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	JmpTo11_SolidObject
loc_1BBDE:
		move.w	$0032(a0),d0
		bra.w	JmpTo3_MarkObjGone2
loc_1BBE6:
		move.w	8(a0),-(sp)
		jsr	 ObjectMove              ; (loc_d27A)
		subq.w	#1,$0034(a0)
		bne.s	loc_1BBFA
		bsr.w	loc_1BC22
loc_1BBFA:
		move.w	(sp)+,d4
		tst.b	$0001(a0)
		bpl.s	loc_1BC1A
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	JmpTo11_SolidObject
loc_1BC1A:
		move.w	$0032(a0),d0
		bra.w	JmpTo3_MarkObjGone2
loc_1BC22:
		moveq	#0,d0
		move.b	$0038(a0),d0
		move.l	$002C(a0),A1
		lea	$00(A1,d0),A1
		move.w	(a1)+,$0010(a0)
		move.w	(a1)+,$0012(a0)
		move.w	(a1)+,$0034(a0)
		move.w	#$0007,$003A(a0)
		move.b	#$00,$0036(a0)
		addq.b	#$06,$0038(a0)
		cmpi.b	#$18,$0038(a0)
		bcs.s	loc_1BC5A
		move.b	#$00,$0038(a0)
loc_1BC5A:
		rts  
loc_1BC5C:
		dc.w	$0000,$0400,$0010,$0400,$FE00,$0020,$0000,$0400
		dc.w	$0010,$FC00,$FE00,$0020
loc_1BC74:
		dc.w	$0000,$0100,$0040,$FF00,$0000,$0080,$0000,$FF00
		dc.w	$0040,$0100,$0000,$0080,$0100,$0000,$0040
loc_1BC92:
		dc.w	$0000,$0100,$0040,$0100,$0000,$0080,$0000,$FF00
		dc.w	$0040,$FF00,$0000,$0080,$FF00,$0000,$0040
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6A_MapUnc_1BCB0:	binclude	"mappings/sprite/obj6A.bin"
; ===========================================================================
; loc_1BCd4:
JmpTo7_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1BCDA:
JmpTo22_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1BCE0:
JmpTo11_SolidObject:
		jmp	(SolidObject).l
; loc_1BCE6:
JmpTo3_MarkObjGone2:
		jmp	(MarkObjGone2).l

;=============================================================================== 
; Object 0x6B - Metropolis Platforms / Chemical Plant - Block
; [ Begin ]		         
;===============================================================================   
Obj_0x6B_Mz_Platform: ; Obj_0x6B_Block: ; loc_1BCEC:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1BCFA(pc,d0),d1
		jmp     loc_1BCFA(pc,d1)
loc_1BCFA:
		dc.w    loc_1Bd06-loc_1BCFA
		dc.w    loc_1BD88-loc_1BCFA
loc_1BCFE:
		dc.b	$20,$0C,$01,$00,$10,$10,$00,$00
loc_1Bd06:
		addq.b	#$02,$0024(a0)
		move.l	#Obj65_MapUnc_1AE2C,$0004(a0) ; loc_1AE2C
		move.w	#$6000,$0002(a0)
		cmpi.b	#chemical_plant_zone,(Current_Zone).w
		bne.s	loc_1Bd2E
		move.l	#Obj6B_MapUnc_1BF4A,$0004(a0)       ; loc_1BF4A
		move.w	#$6418,$0002(a0)
loc_1Bd2E:
		bsr.w	JmpTo23_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$03,$0018(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		lsr.w	#$02,d0
		andi.w	#$001C,d0
		lea	loc_1BCFE(pc,d0),A2
		move.b	(a2)+,$0019(a0)
		move.b	(a2)+,$0016(a0)
		move.b	(a2)+,$001A(a0)
		move.w	8(a0),$0034(a0)
		move.w	$000C(a0),$0030(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		andi.w	#$000F,d0
		subq.w	#$08,d0
		bcs.s	loc_1BD88
		lsl.w	#$02,d0
		lea	(Oscillating_Data+$2A).w,A2
		lea	$00(A2,d0),A2
		tst.w	(a2)
		bpl.s	loc_1BD88
		bchg    #0,$0022(a0)
loc_1BD88:
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$0028(a0),d0
		andi.w	#$000F,d0
		add.w   d0,d0
		move.w	loc_1BDC8(pc,d0),d1
		jsr	 loc_1BDC8(pc,d1)
		move.w	(sp)+,d4
		tst.b	$0001(a0)
		bpl.s	loc_1BDC0
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	JmpTo12_SolidObject
loc_1BDC0:
		move.w	$0034(a0),d0
		bra.w	JmpTo4_MarkObjGone2
loc_1BDC8:
		dc.w    loc_1BDE0-loc_1BDC8
		dc.w    loc_1BDE2-loc_1BDC8
		dc.w    loc_1BDEE-loc_1BDC8
		dc.w    loc_1BE10-loc_1BDC8
		dc.w    loc_1BE1C-loc_1BDC8
		dc.w    loc_1BE3E-loc_1BDC8
		dc.w    loc_1BE5C-loc_1BDC8
		dc.w    loc_1BDE0-loc_1BDC8
		dc.w    loc_1BE8A-loc_1BDC8
		dc.w    loc_1BE9C-loc_1BDC8
		dc.w    loc_1BEAC-loc_1BDC8
		dc.w    loc_1BEBC-loc_1BDC8
loc_1BDE0:
		rts
loc_1BDE2:
		move.w	#$0040,d1
		moveq	#0,d0
		move.b	(Oscillating_Data+8).w,d0
		bra.s	loc_1BDF8
loc_1BDEE:
		move.w	#$0080,d1
		moveq	#0,d0
		move.b	(Oscillating_Data+$1C).w,d0
loc_1BDF8:
		btst	#$00,$0022(a0)
		beq.s	loc_1BE04
		neg.w	d0
		add.w   d1,d0
loc_1BE04:
		move.w	$0034(a0),d1
		sub.w   d0,d1
		move.w	d1,8(a0)
		rts
loc_1BE10:
		move.w	#$0040,d1
		moveq	#0,d0
		move.b	(Oscillating_Data+8).w,d0
		bra.s	loc_1BE26
loc_1BE1C:
		move.w	#$0080,d1
		moveq	#0,d0
		move.b	(Oscillating_Data+$1C).w,d0
loc_1BE26:
		btst	#$00,$0022(a0)
		beq.s	loc_1BE32
		neg.w	d0
		add.w   d1,d0
loc_1BE32:
		move.w	$0030(a0),d1
		sub.w   d0,d1
		move.w	d1,$000C(a0)
		rts
loc_1BE3E:
		move.b	(Oscillating_Data).w,d0
		lsr.w	#1,d0
		add.w   $0030(a0),d0
		move.w	d0,$000C(a0)
		move.b	$0022(a0),d1
		andi.b	#$18,d1
		beq.s	loc_1BE5A
		addq.b	#1,$0028(a0)
loc_1BE5A:
		rts
loc_1BE5C:
		move.l	$000C(a0),d3
		move.w	$0012(a0),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d3
		move.l	d3,$000C(a0)
		addi.w	#8,$0012(a0)
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$00E0,d0
		cmp.w	$000C(a0),d0
		bcc.s	loc_1BE88
		move.b	#$00,$0028(a0)
loc_1BE88:
		rts
loc_1BE8A:
		move.w	#$0010,d1
		moveq	#0,d0
		move.b	(Oscillating_Data+$28).w,d0
		lsr.w	#1,d0
		move.w	(Oscillating_Data+$2A).w,d3
		bra.s	loc_1BECA
loc_1BE9C:
		move.w	#$0030,d1
		moveq	#0,d0
		move.b	(Oscillating_Data+$2C).w,d0
		move.w	(Oscillating_Data+$2E).w,d3
		bra.s	loc_1BECA
loc_1BEAC:
		move.w	#$0050,d1
		moveq	#0,d0
		move.b	(Oscillating_Data+$30).w,d0
		move.w	(Oscillating_Data+$32).w,d3
		bra.s	loc_1BECA
loc_1BEBC:
		move.w	#$0070,d1
		moveq	#0,d0
		move.b	(Oscillating_Data+$34).w,d0
		move.w	(Oscillating_Data+$36).w,d3
loc_1BECA:
		tst.w	d3
		bne.s	loc_1BED8
		addq.b	#1,$0022(a0)
		andi.b	#$03,$0022(a0)
loc_1BED8:
		move.b	$0022(a0),d2
		andi.b	#$03,d2
		bne.s	loc_1BEF8
		sub.w   d1,d0
		add.w   $0034(a0),d0
		move.w	d0,8(a0)
		neg.w	d1
		add.w   $0030(a0),d1
		move.w	d1,$000C(a0)
		rts
loc_1BEF8:
		subq.b	#1,d2
		bne.s	loc_1BF16
		subq.w	#1,d1
		sub.w   d1,d0
		neg.w	d0
		add.w   $0030(a0),d0
		move.w	d0,$000C(a0)
		addq.w	#1,d1
		add.w   $0034(a0),d1
		move.w	d1,8(a0)
		rts
loc_1BF16:
		subq.b	#1,d2
		bne.s	loc_1BF34
		subq.w	#1,d1
		sub.w   d1,d0
		neg.w	d0
		add.w   $0034(a0),d0
		move.w	d0,8(a0)
		addq.w	#1,d1
		add.w   $0030(a0),d1
		move.w	d1,$000C(a0)
		rts
loc_1BF34:
		sub.w   d1,d0
		add.w   $0030(a0),d0
		move.w	d0,$000C(a0)
		neg.w	d1
		add.w   $0034(a0),d1
		move.w	d1,8(a0)
		rts 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6B_MapUnc_1BF4A:	binclude	"mappings/sprite/obj6B.bin"
; ===========================================================================
		nop
; loc_1BF58:
JmpTo23_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1BF5E:
JmpTo12_SolidObject:
		jmp	(SolidObject).l
; loc_1BF64:
JmpTo4_MarkObjGone2:
		jmp     (MarkObjGone2).l

		align 4
;=============================================================================== 
; Object 0x6C - Moving platforms - clockwise
; [ Begin ]		         
;===============================================================================		  
Obj_0x6C_Mz_Moving_Platforms: ; loc_1BF6C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1BF94(pc,d0),d1
		jsr	 loc_1BF94(pc,d1)
		move.w	$0030(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	loc_1BF90
		bra.w	JmpTo11_DisplaySprite
loc_1BF90:
		bra.w	JmpTo27_DeleteObject
loc_1BF94:
		dc.w    loc_1BF98-loc_1BF94
		dc.w    loc_1C0A0-loc_1BF94
loc_1BF98:
		move.b	$0028(a0),d0
		bmi.w	 loc_1C04A
		addq.b	#$02,$0024(a0)
		move.l	#Obj6C_MapUnc_1C2AA,$0004(a0) ; loc_1C2AA
		move.w	#$63F9,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#$04,$0018(a0)
		bsr.w	JmpTo24_Adjust2PArtPointer
		move.b	#$00,$001A(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		move.w	d0,d1
		lsr.w	#$03,d0
		andi.w	#$001E,d0
		lea	loc_1C18A(pc),A2
		adda.w	$00(A2,d0),A2
		move.w	(a2)+,$0038(a0)
		move.l	A2,$003C(a0)
		andi.w	#$000F,d1
		lsl.w	#$02,d1
		move.b	d1,$0038(a0)
		move.b	#$04,$003A(a0)
		btst	#$00,$0022(a0)
		beq.s	loc_1C02A
		neg.b   $003A(a0)
		moveq	#0,d1
		move.b	$0038(a0),d1
		add.b   $003A(a0),d1
		cmp.b	$0039(a0),d1
		bcs.s	loc_1C026
		move.b	d1,d0
		moveq	#0,d1
		tst.b	d0
		bpl.s	loc_1C026
		move.b	$0039(a0),d1
		subq.b	#$04,d1
loc_1C026:
		move.b	d1,$0038(a0)
loc_1C02A:
		move.w	$00(A2,d1),d0
		add.w   $0030(a0),d0
		move.w	d0,$0034(a0)
		move.w	$02(A2,d1),d0
		add.w   $0032(a0),d0
		move.w	d0,$0036(a0)
		bsr.w	loc_1C112
		bra.w	loc_1C0A0
loc_1C04A:
		andi.w	#$007F,d0
		add.w   d0,d0
		lea	(loc_1C20E).l,A2    
		adda.w	$00(A2,d0),A2
		move.w	(a2)+,d1
		move.l	A0,A1
		move.w	8(a0),d2
		move.w	$000C(a0),d3
		bra.s	loc_1C06E
loc_1C068:		
		bsr.w	JmpTo6_SingleObjLoad
		bne.s	loc_1C098
loc_1C06E:
		_move.b	#$6C,0(a1)
		move.w	(a2)+,d0
		add.w   d2,d0
		move.w	d0,8(a1)
		move.w	(a2)+,d0
		add.w   d3,d0
		move.w	d0,$000C(a1)
		move.w	d2,$0030(a1)
		move.w	d3,$0032(a1)
		move.w	(a2)+,d0
		move.b	d0,$0028(a1)
		move.b	$0022(a0),$0022(a1)
loc_1C098:
		dbf	d1,loc_1C068
		addq.l	#$04,sp
		rts
loc_1C0A0:
		move.w	8(a0),-(sp)
		bsr.w	loc_1C0B6
		moveq	#0,d1
		move.b	$0019(a0),d1
		moveq	#$08,d3
		move.w	(sp)+,d4
		bra.w	JmpTo_PlatformObject
loc_1C0B6:
		move.w	8(a0),d0
		cmp.w	$0034(a0),d0
		bne.s	loc_1C10C
		move.w	$000C(a0),d0
		cmp.w	$0036(a0),d0
		bne.s	loc_1C10C
		moveq	#0,d1
		move.b	$0038(a0),d1
		add.b   $003A(a0),d1
		cmp.b	$0039(a0),d1
		bcs.s	loc_1C0E8
		move.b	d1,d0
		moveq	#0,d1
		tst.b	d0
		bpl.s	loc_1C0E8
		move.b	$0039(a0),d1
		subq.b	#$04,d1
loc_1C0E8:
		move.b	d1,$0038(a0)
		move.l	$003C(a0),A1
		move.w	$00(A1,d1),d0
		add.w   $0030(a0),d0
		move.w	d0,$0034(a0)
		move.w	$02(A1,d1),d0
		add.w   $0032(a0),d0
		move.w	d0,$0036(a0)
		bsr.w	loc_1C112
loc_1C10C:
		bsr.w	JmpTo11_ObjectMove
		rts
loc_1C112:
		moveq	#0,d0
		move.w	#$FF00,d2
		move.w	8(a0),d0
		sub.w   $0034(a0),d0
		bcc.s	loc_1C126
		neg.w	d0
		neg.w	d2
loc_1C126:
		moveq	#0,d1
		move.w	#$FF00,d3
		move.w	$000C(a0),d1
		sub.w   $0036(a0),d1
		bcc.s	loc_1C13A
		neg.w	d1
		neg.w	d3
loc_1C13A:
		cmp.w	d0,d1
		bcs.s	loc_1C164
		move.w	8(a0),d0
		sub.w   $0034(a0),d0
		beq.s	loc_1C150
		ext.l   d0
		asl.l   #$08,d0
		divs.w  d1,d0
		neg.w	d0
loc_1C150:
		move.w	d0,$0010(a0)
		move.w	d3,$0012(a0)
		swap	d0
		move.w	d0,$000A(a0)
		clr.w	$000E(a0)
		rts
loc_1C164:
		move.w	$000C(a0),d1
		sub.w   $0036(a0),d1
		beq.s	loc_1C176
		ext.l   d1
		asl.l   #$08,d1
		divs.w  d0,d1
		neg.w	d1
loc_1C176:
		move.w	d1,$0012(a0)
		move.w	d2,$0010(a0)
		swap	d1
		move.w	d1,$000E(a0)
		clr.w	$000A(a0)
		rts  
loc_1C18A:
		dc.w    loc_1C190-loc_1C18A
		dc.w    loc_1C1BA-loc_1C18A
		dc.w    loc_1C1E4-loc_1C18A
loc_1C190:
		dc.w	$0028
		dc.b	$00,$00,$00,$00,$FF,$EA,$00,$0A,$FF,$E0,$00,$20,$FF,$E0,$00,$E0
		dc.b	$FF,$EA,$00,$F6,$00,$00,$01,$00,$00,$16,$00,$F6,$00,$20,$00,$E0
		dc.b	$00,$20,$00,$20,$00,$16,$00,$0A
loc_1C1BA:
		dc.w	$0028
		dc.b	$00,$00,$00,$00,$FF,$EA,$00,$0A,$FF,$E0,$00,$20,$FF,$E0,$01,$60
		dc.b	$FF,$EA,$01,$76,$00,$00,$01,$80,$00,$16,$01,$76,$00,$20,$01,$60
		dc.b	$00,$20,$00,$20,$00,$16,$00,$0A
loc_1C1E4:
		dc.w	$0028
		dc.b	$00,$00,$00,$00,$FF,$EA,$00,$0A,$FF,$E0,$00,$20,$FF,$E0,$01,$E0
		dc.b	$FF,$EA,$01,$F6,$00,$00,$02,$00,$00,$16,$01,$F6,$00,$20,$01,$E0
		dc.b	$00,$20,$00,$20,$00,$16,$00,$0A		
loc_1C20E: 
		dc.w    loc_1C214-loc_1C20E
		dc.w    loc_1C246-loc_1C20E
		dc.w    loc_1C278-loc_1C20E
loc_1C214:
		dc.w	$0007
		dc.b	$00,$00,$00,$00,$00,$01,$FF,$E0,$00,$3A,$00,$03,$FF,$E0,$00,$80
		dc.b	$00,$03,$FF,$E0,$00,$C6,$00,$03,$00,$00,$01,$00,$00,$06,$00,$20
		dc.b	$00,$C6,$00,$08,$00,$20,$00,$80,$00,$08,$00,$20,$00,$3A,$00,$08  
loc_1C246:
		dc.w	$0007
		dc.b	$00,$00,$00,$00,$00,$11,$FF,$E0,$00,$5A,$00,$13,$FF,$E0,$00,$C0
		dc.b	$00,$13,$FF,$E0,$01,$26,$00,$13,$00,$00,$01,$80,$00,$16,$00,$20
		dc.b	$01,$26,$00,$18,$00,$20,$00,$C0,$00,$18,$00,$20,$00,$5A,$00,$18		
loc_1C278:
		dc.w	$0007
		dc.b	$00,$00,$00,$00,$00,$21,$FF,$E0,$00,$7A,$00,$23,$FF,$E0,$01,$00
		dc.b	$00,$23,$FF,$E0,$01,$86,$00,$23,$00,$00,$02,$00,$00,$26,$00,$20
		dc.b	$01,$86,$00,$28,$00,$20,$01,$00,$00,$28,$00,$20,$00,$7A,$00,$28
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6C_MapUnc_1C2AA:	binclude	"mappings/sprite/obj6C.bin"
; ===========================================================================
		nop
; loc_1C2C0:
JmpTo11_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1C2C6:
JmpTo27_DeleteObject:
		jmp	(DeleteObject).l
; loc_1C2CC:
JmpTo6_SingleObjLoad:
		jmp	(SingleObjLoad).l
; loc_1C2d2:
JmpTo24_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1C2D8:
JmpTo_PlatformObject:
		jmp	(PlatformObject).l
; loc_1C2DE:
JmpTo11_ObjectMove:
		jmp	(ObjectMove).l

;=============================================================================== 
; Object 0x6E - Metropolis - Machine
; [ Begin ]		         
;===============================================================================		   
Obj_0x6E_Machine: ; loc_1C2E4:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1C2F2(pc,d0),d1
		jmp     loc_1C2F2(pc,d1)
loc_1C2F2:
		dc.w    loc_1C300-loc_1C2F2
		dc.w    loc_1C36A-loc_1C2F2
		dc.w    loc_1C3F4-loc_1C2F2
loc_1C2F8: 
		dc.b	$10,$0C,$28,$08,$60,$18,$0C,$0C
loc_1C300:
		addq.b	#$02,$0024(a0)
		move.l	#Obj6E_MapUnc_1C464,$0004(a0) ; loc_1C464
		move.w	#$6000,$0002(a0)
		bsr.w	JmpTo25_Adjust2PArtPointer
loc_1C316:
		ori.b   #$04,$0001(a0)
		move.b	#$04,$0018(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		lsr.w	#$03,d0
		andi.w	#$000E,d0
		lea	loc_1C2F8(pc,d0),A3
		move.b	(a3)+,$0019(a0)
		move.b	(a3)+,$0016(a0)
		lsr.w	#1,d0
		move.b	d0,$001A(a0)
		move.w	8(a0),$0034(a0)
		move.w	$000C(a0),$0030(a0)
		cmpi.b	#$03,d0
		bne.s	loc_1C36A
		addq.b	#$02,$0024(a0)
		move.w	#$63F0,$0002(a0)
		bsr.w	JmpTo25_Adjust2PArtPointer
		move.b	#$05,$0018(a0)
		bra.w	loc_1C3F4
loc_1C36A:
		move.w	8(a0),-(sp)
		move.b	(Oscillating_Data+$20).w,d1
		subi.b	#$38,d1
		ext.w   d1
		move.b	(Oscillating_Data+$24).w,d2
		subi.b	#$38,d2
		ext.w   d2
		btst	#$00,$0028(a0)
		beq.s	loc_1C38E
		neg.w	d1
		neg.w	d2
loc_1C38E:
		btst	#1,$0028(a0)
		beq.s	loc_1C39A
		neg.w	d1
		exg.l   d1,d2
loc_1C39A:
		add.w   $0034(a0),d1
		move.w	d1,8(a0)
		add.w   $0030(a0),d2
		move.w	d2,$000C(a0)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	JmpTo13_SolidObject
		move.w	$0034(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	loc_1C3DC
		jmp     DisplaySprite           ; (loc_d3C2)
loc_1C3DC:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	JmpTo28_DeleteObject
		bclr	#$07,$02(A2,d0)
JmpTo28_DeleteObject:
		jmp	(DeleteObject).l
loc_1C3F4:
		move.b	(Oscillating_Data+$20).w,d1
		lsr.b	#1,d1
		subi.b	#$1C,d1
		ext.w   d1
		move.b	(Oscillating_Data+$24).w,d2
		lsr.b	#1,d2
		subi.b	#$1C,d2
		ext.w   d2
		btst	#$00,$0028(a0)
		beq.s	loc_1C418
		neg.w	d1
		neg.w	d2
loc_1C418:
		btst	#1,$0028(a0)
		beq.s	loc_1C424
		neg.w	d1
		exg.l   d1,d2
loc_1C424:
		add.w   $0034(a0),d1
		move.w	d1,8(a0)
		add.w   $0030(a0),d2
		move.w	d2,$000C(a0)
		move.w	$0034(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	loc_1C44C
		jmp     DisplaySprite           ; (loc_d3C2)
loc_1C44C:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	JmpTo29_DeleteObject
		bclr	#$07,$02(A2,d0)
; loc_1C45E:
JmpTo29_DeleteObject:
		jmp	(DeleteObject).l
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6E_MapUnc_1C464:	binclude	"mappings/sprite/obj6E.bin"

;=============================================================================== 
; Object 0x6E - Metropolis - Machine
; [ End ]		         
;===============================================================================		   
; loc_1C4EC:
JmpTo25_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1C4F2:
JmpTo13_SolidObject:
		jmp	(SolidObject).l

;=============================================================================== 
; Object 0x6F - Metropolis - Parallelogram Elevators
; [ Begin ]		         
;===============================================================================		    
Obj_Ox6F_Parallelogram_Elevator: ; loc_1C4F8:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1C506(pc,d0),d1
		jmp     loc_1C506(pc,d1)
loc_1C506:
		dc.w    loc_1C50A-loc_1C506
		dc.w    loc_1C570-loc_1C506
loc_1C50A:
		addq.b	#$02,$0024(a0)
		move.l	#Obj6F_MapUnc_1C7BE,$0004(a0) ; loc_1C7BE
		move.w	#$653F,$0002(a0)
		bsr.w	JmpTo26_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$04,$0018(a0)
		move.b	#$80,$0019(a0)
		move.b	#$20,$0016(a0)
		move.w	8(a0),$0032(a0)
		move.w	$000C(a0),$0030(a0)
		move.b	$0028(a0),d0
		lsr.w	#$03,d0
		andi.w	#$000E,d0
		lea	(loc_1C632).l,A1
		move.w	$00(A1,d0),d0
		lea	$00(A1,d0),A1
		move.l	A1,$003C(a0)
		bsr.w	loc_1C604
		bset	#$07,$0022(a0)
		andi.b	#$0F,$0028(a0)
loc_1C570:
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$0028(a0),d0
		add.w   d0,d0
		move.w	loc_1C5DA(pc,d0),d1
		jsr	 loc_1C5DA(pc,d1)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	$0019(a0),d1
		lea	(loc_1C6BE).l,A2
		bsr.w	JmpTo_DoubleSlopedSolid
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	loc_1C5AE
		jmp     DisplaySprite           ; (loc_d3C2)
loc_1C5AE:
		move.w	$0032(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	loc_1C5C2
		rts
loc_1C5C2:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	JmpTo30_DeleteObject
		bclr	#$07,$02(A2,d0)
JmpTo30_DeleteObject:
		jmp	(DeleteObject).l

loc_1C5DA:
		dc.w    loc_1C5E0-loc_1C5DA
		dc.w    loc_1C5E2-loc_1C5DA
		dc.w    loc_1C5F2-loc_1C5DA
loc_1C5E0:
		rts
loc_1C5E2:
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		beq.s	loc_1C5F0
		addq.b	#1,$0028(a0)
loc_1C5F0:
		rts
loc_1C5F2:
		jsr	 ObjectMove              ; (loc_d27A)
		subq.w	#1,$0034(a0)
		bne.s	loc_1C602
		bsr.w	loc_1C604
loc_1C602:
		rts
loc_1C604:
		moveq	#0,d0
		move.b	$0038(a0),d0
		move.l	$003C(a0),A1
		move.w	(a1)+,d1
		lea	$00(A1,d0),A1
		move.w	(a1)+,$0010(a0)
		move.w	(a1)+,$0012(a0)
		move.w	(a1)+,$0034(a0)
		addq.b	#$06,$0038(a0)
		cmp.b	$0038(a0),d1
		bhi.s	loc_1C630
		move.b	#$00,$0038(a0)
loc_1C630:
		rts 
loc_1C632:
		dc.w    loc_1C63C-loc_1C632
		dc.w    loc_1C64A-loc_1C632
		dc.w    loc_1C658-loc_1C632
		dc.w    loc_1C672-loc_1C632
		dc.w    loc_1C6A4-loc_1C632
loc_1C63C:
		dc.w	$000C
		dc.b	$01,$00,$FF,$80,$01,$00,$FF,$00,$00,$80,$01,$00
loc_1C64A:
		dc.w	$000C
		dc.b	$01,$00,$FF,$80,$01,$80,$FF,$00,$00,$80,$01,$80
loc_1C658:
		dc.w	$0018
		dc.b	$FF,$00,$00,$80,$00,$80,$FF,$00,$00,$00,$01,$80,$01,$00,$FF,$80
		dc.b	$00,$80,$01,$00,$00,$00,$01,$80
loc_1C672:
		dc.w	$0030
		dc.b	$01,$00,$FF,$80,$02,$00,$01,$00,$00,$00,$01,$00,$FF,$00,$00,$80
		dc.b	$01,$00,$01,$00,$00,$00,$01,$80,$FF,$00,$00,$00,$01,$80,$01,$00
		dc.b	$FF,$80,$01,$00,$FF,$00,$00,$00,$01,$00,$FF,$00,$00,$80,$02,$00
loc_1C6A4:
		dc.w	$0018
		dc.b	$FF,$00,$00,$80,$01,$80,$01,$00,$00,$00,$02,$00,$FF,$00,$00,$00
		dc.b	$02,$00,$01,$00,$FF,$80,$01,$80  
loc_1C6BE:
		dc.w	$E101,$E202,$E303,$E404,$E505,$E606,$E707,$E808
		dc.w	$E909,$EA0A,$EB0B,$EC0C,$Ed0D,$EE0E,$EF0F,$F010
		dc.w	$F111,$F212,$F313,$F414,$F515,$F616,$F717,$F818
		dc.w	$F919,$FA1A,$FB1B,$FC1C,$Fd1D,$FE1E,$FF1F,$0020
		dc.w	$0121,$0222,$0323,$0424,$0525,$0626,$0727,$0828
		dc.w	$0929,$0A2A,$0B2B,$0C2C,$0d2D,$0E2E,$0F2F,$1030
		dc.w	$1131,$1232,$1333,$1434,$1535,$1636,$1737,$1838
		dc.w	$1939,$1A3A,$1B3B,$1C3C,$1d3D,$1E3E,$1F3F,$2040
		dc.w	$2040,$203F,$203E,$203D,$203C,$203B,$203A,$2039
		dc.w	$2038,$2037,$2036,$2035,$2034,$2033,$2032,$2031
		dc.w	$2030,$202F,$202E,$202D,$202C,$202B,$202A,$2029
		dc.w	$2028,$2027,$2026,$2025,$2024,$2023,$2022,$2021
		dc.w	$2020,$201F,$201E,$201D,$201C,$201B,$201A,$2019
		dc.w	$2018,$2017,$2016,$2015,$2014,$2013,$2012,$2011
		dc.w	$2010,$200F,$200E,$200D,$200C,$200B,$200A,$2009
		dc.w	$2008,$2007,$2006,$2005,$2004,$2003,$2002,$2001   
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6F_MapUnc_1C7BE:	binclude	"mappings/sprite/obj6F.bin"
; ===========================================================================
		nop
; loc_1C844:
JmpTo26_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1C84A:
JmpTo_DoubleSlopedSolid:
		jmp	(DoubleSlopedSolid).l

;=============================================================================== 
; Object 0x70 - Metropolis - Rotating Gears
; [ Begin ]		         
;===============================================================================		     
Obj_0x70_Rotating_Gears: ; loc_1C850:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1C85E(pc,d0),d1
		jmp     loc_1C85E(pc,d1)
loc_1C85E:
		dc.w    loc_1C862-loc_1C85E
		dc.w    loc_1C8E2-loc_1C85E
loc_1C862:
		moveq	#$07,d1
		moveq	#0,d4
		lea	(loc_1C9B6).l,A2
		move.l	A0,A1
		move.w	8(a0),d2
		move.w	$000C(a0),d3
		bset	#$07,$0022(a0)
		bra.s	loc_1C884
loc_1C87E:		
		bsr.w	JmpTo8_SingleObjLoad2
		bne.s	loc_1C8DE
loc_1C884:
		_move.b	0(a0),0(a1)
		addq.b	#$02,$0024(a1)
		move.l	#Obj70_MapUnc_1CA16,$0004(a1) ; loc_1CA16
		move.w	#$6378,$0002(a1)
		bsr.w	JmpTo2_Adjust2PArtPointer2
		move.b	#$04,$0001(a1)
		move.b	#$04,$0018(a1)
		move.b	#$10,$0019(a1)
		move.w	d2,$0032(a1)
		move.w	d3,$0030(a1)
		move.b	(a2)+,d0
		ext.w   d0
		add.w   d2,d0
		move.w	d0,8(a1)
		move.b	(a2)+,d0
		ext.w   d0
		add.w   d3,d0
		move.w	d0,$000C(a1)
		move.b	(a2)+,$001A(a1)
		move.w	d4,$0034(a1)
		addq.w	#$03,d4
		move.b	$0022(a0),$0022(a1)
loc_1C8DE:
		dbf	d1,loc_1C87E
loc_1C8E2:
		move.w	8(a0),-(sp)
		move.b	(Timer_frames+1).w,d0
		move.b	d0,d1
		andi.w	#$000F,d0
		bne.s	loc_1C95A
		move.w	$0036(a0),d1
		btst	#$00,$0022(a0)
		beq.s	loc_1C914
		subi.w	#$0018,d1
		bcc.s	loc_1C932
		moveq	#$48,d1
		subq.w	#$03,$0034(a0)
		bcc.s	loc_1C932
		move.w	#$0015,$0034(a0)
		bra.s	loc_1C932
loc_1C914:
		addi.w	#$0018,d1
		cmpi.w	#$0060,d1
		bcs.s	loc_1C932
		moveq	#0,d1
		addq.w	#$03,$0034(a0)
		cmpi.w	#$0018,$0034(a0)
		bcs.s	loc_1C932
		move.w	#0,$0034(a0)
loc_1C932:
		move.w	d1,$0036(a0)
		add.w   $0034(a0),d1
		lea	loc_1C9B6(pc,d1),A1
		move.b	(a1)+,d0
		ext.w   d0
		add.w   $0032(a0),d0
		move.w	d0,8(a0)
		move.b	(a1)+,d0
		ext.w   d0
		add.w   $0030(a0),d0
		move.w	d0,$000C(a0)
		move.b	(a1)+,$001A(a0)
loc_1C95A:
		move.b	$001A(a0),d0
		add.w   d0,d0
		andi.w	#$001E,d0
		moveq	#0,d1
		moveq	#0,d2
		move.b	loc_1C996(pc,d0),d1
		move.b	loc_1C997(pc,d0),d2
		move.w	d2,d3
		move.w	(sp)+,d4
		bsr.w	JmpTo14_SolidObject
		move.w	$0032(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	JmpTo31_DeleteObject
		jmp     DisplaySprite           ; (loc_d3C2)
; loc_1C990:
JmpTo31_DeleteObject:
		jmp	(DeleteObject).l

loc_1C996:		  
		dc.b	$10
loc_1C997:
		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$0C,$10
		dc.b	$08,$10,$0C,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
loc_1C9B6:
		dc.b	$00,$B8,$00,$32,$CE,$04,$48,$00,$08,$32,$32,$0C,$00,$48,$10,$CE
		dc.b	$32,$14,$B8,$00,$18,$CE,$CE,$1C,$0D,$B8,$01,$3F,$DA,$05,$48,$0C
		dc.b	$09,$27,$3C,$0D,$F3,$48,$11,$C1,$26,$15,$B8,$F4,$19,$D9,$C4,$1D
		dc.b	$19,$BC,$02,$46,$E9,$06,$46,$17,$0A,$19,$44,$0E,$E7,$44,$12,$BA
		dc.b	$17,$16,$BA,$E9,$1A,$E7,$BC,$1E,$27,$C4,$03,$48,$F4,$07,$3F,$26
		dc.b	$0B,$0D,$48,$0F,$D9,$3C,$13,$B8,$0C,$17,$C1,$DA,$1B,$F3,$B8,$1F
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj70_MapUnc_1CA16:	binclude	"mappings/sprite/obj70.bin"
; ===========================================================================
		nop
; loc_1CBB8:
JmpTo8_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1CBBE:
JmpTo2_Adjust2PArtPointer2:
		jmp	(Adjust2PArtPointer2).l
; loc_1CBC4:
JmpTo14_SolidObject:
		jmp	(SolidObject).l

		align 4

;=============================================================================== 
; Object 0x72 - Metropolis - Conveyor Belt Attributes
; [ Begin ]		         
;===============================================================================		   
Obj_0x72_Conveyor_Belt_Attributes: ; loc_1CBCC:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1CBDA(pc,d0),d1
		jmp     loc_1CBDA(pc,d1)
loc_1CBDA:
		dc.w    loc_1CBDE-loc_1CBDA
		dc.w    loc_1CBFE-loc_1CBDA
loc_1CBDE:
		addq.b	#$02,$0024(a0)
		move.b	$0028(a0),d0
		lsl.b   #$04,d0
		move.b	d0,$0038(a0)
		move.w	#$0002,$0036(a0)
		btst	#$00,$0022(a0)
		beq.s	loc_1CBFE
		neg.w	$0036(a0)
loc_1CBFE:
		lea	(MainCharacter).w,A1
		bsr.s	loc_1CC0E
		lea	(Sidekick).w,A1
		bsr.s	loc_1CC0E
		bra.w	JmpTo5_MarkObjGone3
loc_1CC0E:
		moveq	#0,d2
		move.b	$0038(a0),d2
		move.w	d2,d3
		add.w   d3,d3
		move.w	8(a1),d0
		sub.w   8(a0),d0
		add.w   d2,d0
		cmp.w	d3,d0
		bcc.s	loc_1CC48
		move.w	$000C(a1),d1
		sub.w   $000C(a0),d1
		addi.w	#$0030,d1
		cmpi.w	#$0030,d1
		bcc.s	loc_1CC48
		btst	#1,$0022(a1)
		bne.s	loc_1CC48
		move.w	$0036(a0),d0
		add.w   d0,8(a1)
loc_1CC48:
		rts
		
;=============================================================================== 
; Object 0x72 - Metropolis - Conveyor Belt Attributes
; [ End ]		         
;===============================================================================             
		nop
; loc_1CC4C:
JmpTo5_MarkObjGone3:
		jmp	(MarkObjGone3).l

		align 4
; ===========================================================================
; ---------------------------------------------------------------------------
; Solid rotating ring platform in DHZ
; (debug object,can be placed in debug mode even in final)
; ---------------------------------------------------------------------------
; Sprite_1CC54: Obj_0x73_Rotating_Rings:
Obj73:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj73_Index(pc,d0.w),d1
		jmp	Obj73_Index(pc,d1.w)
; ===========================================================================
; off_1CC62:
Obj73_Index:	offsetTable
		offsetTableEntry.w Obj73_Init
		offsetTableEntry.w Obj73_Main
		offsetTableEntry.w Obj73_SubObject
; ===========================================================================
; loc_1CC68:
Obj73_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj73_MapUnc_1CE1C,4(a0)
		move.w	#$26BC,2(a0)
		bsr.w	JmpTo27_Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#8,$19(a0)
		move.w	8(a0),$3A(a0)
		move.w	$C(a0),$38(a0)
		move.b	#0,$20(a0)
		bset	#7,$22(a0)
		move.b	$28(a0),d1
		andi.b	#$F0,d1
		ext.w	d1
		asl.w	#3,d1
		move.w	d1,$3E(a0)
		move.b	$22(a0),d0
		ror.b	#2,d0
		andi.b	#$C0,d0
		move.b	d0,$26(a0)
		lea	$29(a0),a2
		move.b	$28(a0),d1
		andi.w	#7,d1
		move.b	#0,(a2)+
		move.w	d1,d3
		lsl.w	#4,d3
		move.b	d3,$3C(a0)
		subq.w	#1,d1
		bcs.s	Obj73_LoadSubObject_End
		btst	#3,$28(a0)
		beq.s	Obj73_LoadSubObject
		subq.w	#1,d1
		bcs.s	Obj73_LoadSubObject_End
; loc_1CCEE:
Obj73_LoadSubObject:
		bsr.w	JmpTo7_SingleObjLoad
		bne.s	Obj73_LoadSubObject_End
		addq.b	#1,$29(a0)
		move.w	a1,d5
		subi.w	#Object_RAM,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5
		move.b	d5,(a2)+
		move.b	#4,routine(a1)
		_move.b	0(a0),0(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	1(a0),1(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.b	$20(a0),$20(a1)
		move.b	$22(a0),$22(a1)
		subi.b	#$10,d3
		move.b	d3,$3C(a1)
		dbf	d1,Obj73_LoadSubObject
; loc_1Cd48:
Obj73_LoadSubObject_End:
		move.w	a0,d5
		subi.w	#Object_RAM,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5
		move.b	d5,(a2)+
; loc_1Cd56:
Obj73_Main:
		move.w	8(a0),-(sp)
		bsr.w	Obj73_Rotate
		move.w	#8,d1
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	JmpTo15_SolidObject
		bra.w	Obj73_Display
; ===========================================================================
; loc_1Cd74:
Obj73_Rotate:
		move.w	$3E(a0),d0
		add.w	d0,$26(a0)
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		move.w	$38(a0),d2
		move.w	$3A(a0),d3
		lea	$29(a0),a2
		moveq	#0,d6
		move.b	(a2)+,d6

-		moveq	#0,d4
		move.b	(a2)+,d4
		lsl.w	#6,d4
		addi.l	#Object_RAM,d4
		move.l	d4,a1
		moveq	#0,d4
		move.b	$3C(a1),d4
		move.l	d4,d5
		muls.w	d0,d4
		asr.l	#8,d4
		muls.w	d1,d5
		asr.l	#8,d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d4,$C(a1)
		move.w	d5,8(a1)
		dbf	d6,-
		rts
; ===========================================================================
; loc_1CDC6:
Obj73_Display:
		move.w	$3A(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	+
		bra.w	JmpTo12_DisplaySprite
; ===========================================================================
+
		moveq	#0,d2
		lea	$29(a0),a2

		move.b	(a2)+,d2
-		moveq	#0,d0
		move.b	(a2)+,d0
		lsl.w	#6,d0
		addi.l	#Object_RAM,d0
		move.l	d0,a1
		bsr.w	JmpTo_DeleteObject2
		dbf	d2,-
		rts
; ===========================================================================
; loc_1CDFE:
Obj73_SubObject:
		move.w	#8,d1
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$36(a0),d4
		bsr.w	JmpTo15_SolidObject
		move.w	8(a0),$36(a0)
		bra.w	JmpTo12_DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj73_MapUnc_1CE1C:	binclude	"mappings/sprite/obj73.bin"
; ===========================================================================
; loc_1CE28:
JmpTo12_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1CE3E:
JmpTo7_SingleObjLoad:
		jmp	(SingleObjLoad).l
; loc_1CE34:
JmpTo_DeleteObject2:
		jmp	(DeleteObject2).l
; loc_1CE3A:
JmpTo27_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1CE40:
JmpTo15_SolidObject:
		jmp	(SolidObject).l

		align 4

;=============================================================================== 
; Object 0x75 - Dust Hill - Spikeball with chain
; [ Begin ]		         
;===============================================================================		
Obj_0x75_Spikeball_Chain: ; loc_1CE48:
		btst	#$06,$0001(a0)
		bne.w	 loc_1CE60
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1CE68(pc,d0),d1
		jmp     loc_1CE68(pc,d1)
loc_1CE60:
		move.w	#$0280,d0
		bra.w	JmpTo_DisplaySprite3
loc_1CE68:
		dc.w    loc_1CE6E-loc_1CE68
		dc.w    loc_1CF4A-loc_1CE68
		dc.w    loc_1CFEC-loc_1CE68
loc_1CE6E:
		addq.b	#$02,$0024(a0)
		move.l	#Obj75_MapUnc_1d00A,$0004(a0) ; loc_1d00A
		move.w	#$2000,$0002(a0)
		bsr.w	JmpTo28_Adjust2PArtPointer
		move.b	#$04,$0001(a0)
		move.b	#$05,$0018(a0)
		move.b	#$10,$0019(a0)
		move.w	8(a0),$0030(a0)
		move.w	$000C(a0),$0032(a0)
		move.b	$0028(a0),d1
		move.b	d1,d0
		andi.w	#$000F,d1
		andi.b	#$F0,d0
		ext.w   d0
		asl.w   #$03,d0
		move.w	d0,$0034(a0)
		move.b	$0022(a0),d0
		ror.b   #$02,d0
		andi.b	#$C0,d0
		move.b	d0,$0026(a0)
		cmpi.b	#$0F,d1
		bne.s	loc_1CEDE
		addq.b	#$02,$0024(a0)
		move.b	#$04,$0018(a0)
		move.b	#$02,$001A(a0)
		rts
loc_1CEDE:
		move.b	#$9A,$0020(a0)
		bsr.w	JmpTo9_SingleObjLoad2
		bne.s	loc_1CF4A
		_move.b	0(a0),0(a1)
		move.l	$0004(a0),$0004(a1)
		move.w	$0002(a0),$0002(a1)
		move.b	#$04,$0001(a1)
		bset	#$06,$0001(a1)
		move.b	#$40,$000E(a1)
		move.w	8(a0),d2
		move.w	$000C(a0),d3
		move.b	d1,$000F(a1)
		subq.w	#1,d1
		lea	$0010(a1),A2
loc_1CF20:		
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#$0001,(a2)+
		dbf	d1,loc_1CF20
		move.w	d2,8(a1)
		move.w	d3,$000C(a1)
		move.b	#$00,$000B(a1)
		move.l	A1,$003C(a0)
		move.b	#$40,$0014(a1)
		bset	#$04,$0001(a1)
loc_1CF4A:
		move.w	$0034(a0),d0
		add.w   d0,$0026(a0)
		move.b	$0026(a0),d0
		bsr.w	JmpTo4_CalcSine
		move.w	$0032(a0),d2
		move.w	$0030(a0),d3
		moveq	#0,d6
		move.l	$003C(a0),A1
		move.b	$000F(a1),d6
		subq.w	#1,d6
		bcs.s	loc_1CFBE
		asl.w   #$04,d0
		ext.l   d0
		asl.l   #$08,d0
		asl.w   #$04,d1
		ext.l   d1
		asl.l   #$08,d1
		moveq	#0,d4
		moveq	#0,d5
		lea	$0010(a1),A2
loc_1CF84:		
		movem.l d4/d5,-(sp)
		swap	d4
		swap	d5
		add.w   d2,d4
		add.w   d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l (sp)+,d4/d5
		add.l   d0,d4
		add.l   d1,d5
		addq.w	#$02,A2
		dbf	d6,loc_1CF84
		swap	d4
		swap	d5
		add.w   d2,d4
		add.w   d3,d5
		move.w	d5,8(a0)
		move.w	d4,$000C(a0)
		move.w	$0028(a1),8(a1)
		move.w	$002A(a1),$000C(a1)
loc_1CFBE:
		tst.w	(Two_player_mode).w
		beq.s	loc_1CFC8
		bra.w	JmpTo13_DisplaySprite
loc_1CFC8:
		move.w	$0030(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 loc_1CFE0
		bra.w	JmpTo13_DisplaySprite
loc_1CFE0:
		move.l	$003C(a0),A1
		bsr.w	JmpTo2_DeleteObject2
		bra.w	JmpTo32_DeleteObject
loc_1CFEC:
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		move.w	#$0010,d2
		move.w	#$0011,d3
		move.w	8(a0),d4
		bsr.w	JmpTo16_SolidObject
		bra.w	JmpTo18_MarkObjGone
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj75_MapUnc_1d00A:	binclude	"mappings/sprite/obj75.bin"
; ============================================================================
		nop
; loc_1d040:
JmpTo_DisplaySprite3:
		jmp	(DisplaySprite3).l
; loc_1d046:
JmpTo13_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1d04C:
JmpTo32_DeleteObject:
		jmp	(DeleteObject).l
; loc_1d052:
JmpTo18_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1d058:
JmpTo2_DeleteObject2:
		jmp	(DeleteObject2).l
; loc_1d05E:
JmpTo9_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1d064:
JmpTo28_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1d06A:
JmpTo4_CalcSine:
		jmp	(CalcSine).l
; loc_1d070:
JmpTo16_SolidObject:
		jmp	(SolidObject).l

		align 4

;=============================================================================== 
; Object 0x76 - Dust Hill - Platform with spikes on sides 
; [ Begin ]		         
;===============================================================================		    
Obj_0x76_Platform_Spikes: ; loc_1d078:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1d086(pc,d0),d1
		jmp     loc_1d086(pc,d1)
loc_1d086:
		dc.w    loc_1d08E-loc_1d086
		dc.w    loc_1d0DE-loc_1d086
loc_1d08A:
		dc.b	$40,$10,$00,$00
loc_1d08E:
		addq.b	#$02,$0024(a0)
		move.l	#Obj76_MapUnc_1d1BA,$0004(a0) ; loc_1d1BA
		move.w	#0,$0002(a0)
		bsr.w	JmpTo29_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$04,$0018(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		lsr.w	#$02,d0
		andi.w	#$001C,d0
		lea	loc_1d08A(pc,d0),A2
		move.b	(a2)+,$0019(a0)
		move.b	(a2)+,$0016(a0)
		move.b	(a2)+,$001A(a0)
		move.w	8(a0),$0034(a0)
		move.w	$000C(a0),$0030(a0)
		andi.w	#$000F,$0028(a0)
loc_1d0DE:
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$0028(a0),d0
		move.w	loc_1d14A(pc,d0),d1
		jsr	 loc_1d14A(pc,d1)
		move.w	(sp)+,d4
		tst.b	$0001(a0)
		bpl.s	loc_1d142
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	$0016(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	JmpTo17_SolidObject
		swap	d6
		andi.w	#$0003,d6
		beq.s	loc_1d142
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_1d12E
		lea	(MainCharacter).w,A1
		bsr.w	JmpTo_Touch_ChkHurt2
		bclr	#$05,$0022(a0)
loc_1d12E:
		andi.b	#$02,d6
		beq.s	loc_1d142
		lea	(Sidekick).w,A1
		bsr.w	JmpTo_Touch_ChkHurt2
		bclr	#$06,$0022(a0)
loc_1d142:
		move.w	$0034(a0),d0
		bra.w	JmpTo5_MarkObjGone2
loc_1d14A:		  
		dc.w    loc_1d14E-loc_1d14A
		dc.w    loc_1d19E-loc_1d14A
loc_1d14E:
		lea	(MainCharacter).w,A1
		bsr.s	loc_1d158
		lea	(Sidekick).w,A1
loc_1d158:
		btst	#1,$0022(a1)
		bne.s	loc_1d19C
		move.w	8(a1),d0
		sub.w   8(a0),d0
		addi.w	#$00C0,d0
loc_1d16C:
		btst	#$00,$0022(a0)
		beq.s	loc_1d178
		subi.w	#$0100,d0
loc_1d178:
		cmpi.w	#$0080,d0
		bcc.s	loc_1d19C
		move.w	$000C(a1),d0
		sub.w   $000C(a0),d0
		addi.w	#$0010,d0
		cmpi.w	#$0020,d0
		bcc.s	loc_1d19C
		move.b	#$02,$0028(a0)
		move.w	#$0080,$0036(a0)
loc_1d19C:
		rts
loc_1d19E:
		tst.w	$0036(a0)
		beq.s	loc_1d1B8
		subq.w	#1,$0036(a0)
		moveq	#-1,d0
		btst	#$00,$0022(a0)
		beq.s	loc_1d1B4
		neg.w	d0
loc_1d1B4:
		add.w   d0,8(a0)
loc_1d1B8:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj76_MapUnc_1d1BA:	binclude	"mappings/sprite/obj76.bin"
; ===========================================================================
		nop
; loc_1d1F0:
JmpTo_Touch_ChkHurt2:
		jmp	(Touch_ChkHurt2).l
; loc_1d1F6:
JmpTo29_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1d1FC:
JmpTo17_SolidObject:
		jmp	(SolidObject).l
; loc_1d202:
JmpTo5_MarkObjGone2:
		jmp	(MarkObjGone2).l

;=============================================================================== 
; Object 0x77 - Dust Hill - Bridge 
; [ Begin ]		         
;===============================================================================		    
Obj_0x77_Bridge: ; loc_1d208:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1d216(pc,d0),d1
		jmp     loc_1d216(pc,d1)
loc_1d216:
		dc.w    loc_1d21A-loc_1d216
		dc.w    loc_1d23C-loc_1d216
loc_1d21A:
		addq.b	#$02,$0024(a0)
		move.l	#Obj77_MapUnc_1d2E0,$0004(a0) ; loc_1d2E0
		move.w	#$643C,$0002(a0)
		bsr.w	JmpTo30_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$80,$0019(a0)
loc_1d23C:
		tst.b	$0034(a0)
		bne.s	loc_1d270
		lea	(ButtonVine_Trigger).w,A2
		moveq	#0,d0
		move.b	$0028(a0),d0
		btst	#$00,$00(A2,d0)
		beq.s	loc_1d270
		move.b	#1,$0034(a0)
		bchg    #$00,$001C(a0)
		tst.b	$0001(a0)
		bpl.s	loc_1d270
		move.w	#SndID_DoorSlam,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_1d270:
		lea	(loc_1d2d0).l,A1
		jsr	(AnimateSprite).l           ; (loc_d412)
		tst.b	$001A(a0)
		bne.s	loc_1d29A
		move.w	#$004B,d1
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	JmpTo18_SolidObject
		bra.w	JmpTo19_MarkObjGone
loc_1d29A:
		move.b	$0022(a0),d0
		andi.b	#$18,d0
		beq.s	loc_1d2CC
		move.b	d0,d1
		andi.b	#$08,d0
		beq.s	loc_1d2B6
		lea	(MainCharacter).w,A1
		bclr	#$03,$0022(a1)
loc_1d2B6:
		andi.b	#$10,d1
		beq.s	loc_1d2C6
		lea	(Sidekick).w,A1
		bclr	#$03,$0022(a1)
loc_1d2C6:
		andi.b	#$E7,$0022(a0)
loc_1d2CC:
		bra.w	JmpTo19_MarkObjGone

loc_1d2d0:               
		dc.w    loc_1d2d4-loc_1d2d0
		dc.w    loc_1d2DA-loc_1d2d0
loc_1d2d4:
		dc.b	$03,$02,$01,$00,$FE,$01
loc_1d2DA:
		dc.b	$03,$00,$01,$02,$FE,$01
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj77_MapUnc_1d2E0:	binclude	"mappings/sprite/obj77.bin"
; ===========================================================================
; loc_1d3AC:
JmpTo19_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1d3B2:
JmpTo30_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1d3B8:
JmpTo18_SolidObject:
		jmp	(SolidObject).l

		align 4

;=============================================================================== 
; Object 0x78 - Chemical Plant - Rotanting Platforms / Down when Touch Platform 
; [ Begin ]		         
;===============================================================================		  
Obj_0x78_Rotating_Platforms: ; loc_1d3C0:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1d3d6(pc,d0),d1
		jsr	 loc_1d3d6(pc,d1)
		move.w	$0030(a0),d0
		bra.w	JmpTo6_MarkObjGone2
loc_1d3d6:
		dc.w    loc_1d3DC-loc_1d3d6
		dc.w    loc_1d460-loc_1d3d6
		dc.w    loc_1d474-loc_1d3d6
loc_1d3DC:
		addq.b	#$02,$0024(a0)
		moveq	#$34,d3
		moveq	#$02,d4
		btst	#$00,$0022(a0)
		beq.s	loc_1d3F0
		moveq	#$3A,d3
		moveq	#-2,d4
loc_1d3F0:
		move.w	8(a0),d2
		move.l	A0,A1
		moveq	#$03,d1
		bra.s	loc_1d408
loc_1d3FA:		
		bsr.w	JmpTo10_SingleObjLoad2
		bne.w	 loc_1d460
		move.b	#$04,$0024(a1)
loc_1d408:
		_move.b	0(a0),0(a1)
		move.l	#Obj6B_MapUnc_1BF4A,$0004(a1) ; loc_1BF4A
		move.w	#$6418,$0002(a1)
		bsr.w	JmpTo3_Adjust2PArtPointer2
		move.b	#$04,$0001(a1)
		move.b	#$03,$0018(a1)
		move.b	#$10,$0019(a1)
		move.b	$0028(a0),$0028(a1)
		move.w	d2,8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	8(a0),$0030(a1)
		move.w	$000C(a1),$0032(a1)
		addi.w	#$0020,d2
		move.b	d3,$002F(a1)
		move.l	A0,$003C(a1)
		add.b   d4,d3
		dbf	d1,loc_1d3FA
loc_1d460:
		moveq	#0,d0
		move.b	$0028(a0),d0
		andi.w	#$0007,d0
		add.w   d0,d0
		move.w	loc_1d4AC(pc,d0),d1
		jsr	 loc_1d4AC(pc,d1)
loc_1d474:
		move.l	$003C(a0),A2
		moveq	#0,d0
		move.b	$002F(a0),d0
		move.w	$00(A2,d0),d0
		add.w   $0032(a0),d0
		move.w	d0,$000C(a0)
		moveq	#0,d1
		move.b	$0019(a0),d1
		addi.w	#$000B,d1
		move.w	#$0010,d2
		move.w	#$0011,d3
		move.w	8(a0),d4
		bsr.w	JmpTo19_SolidObject
		swap	d6
		or.b    d6,$002E(a2)
		rts
loc_1d4AC:
		dc.w    loc_1d4BC-loc_1d4AC
		dc.w    loc_1d528-loc_1d4AC
		dc.w    loc_1d4E0-loc_1d4AC
		dc.w    loc_1d528-loc_1d4AC
		dc.w    loc_1d4BC-loc_1d4AC
		dc.w    loc_1d552-loc_1d4AC
		dc.w    loc_1d4E0-loc_1d4AC
		dc.w    loc_1d552-loc_1d4AC
loc_1d4BC:
		tst.w	$002C(a0)
		bne.s	loc_1d4d4
		move.b	$002E(a0),d0
		andi.b	#$30,d0
		beq.s	loc_1d4d2
		move.w	#$001E,$002C(a0)
loc_1d4d2:
		rts
loc_1d4d4:
		subq.w	#1,$002C(a0)
		bne.s	loc_1d4d2
		addq.b	#1,$0028(a0)
		rts
loc_1d4E0:
		tst.w	$002C(a0)
		bne.s	loc_1d4F8
		move.b	$002E(a0),d0
		andi.b	#$0C,d0
		beq.s	loc_1d4F6
		move.w	#$003C,$002C(a0)
loc_1d4F6:
		rts
loc_1d4F8:
		subq.w	#1,$002C(a0)
		bne.s	loc_1d504
		addq.b	#1,$0028(a0)
		rts
loc_1d504:
		lea	$0034(a0),A1
		move.w	$002C(a0),d0
		lsr.b	#$02,d0
		andi.b	#1,d0
		move.w	d0,(a1)+
		eori.b  #1,d0
		move.w	d0,(a1)+
		eori.b  #1,d0
		move.w	d0,(a1)+
		eori.b  #1,d0
		move.w	d0,(a1)+
		rts
loc_1d528:
		lea	$0034(a0),A1
		cmpi.w	#$0080,(a1)
		beq.s	loc_1d550
		addq.w	#1,(a1)
		moveq	#0,d1
		move.w	(a1)+,d1
		swap	d1
		lsr.l	#1,d1
		move.l	d1,d2
		lsr.l	#1,d1
		move.l	d1,d3
		add.l   d2,d3
		swap	d1
		swap	d2
		swap	d3
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.w	d1,(a1)+
loc_1d550:
		rts
loc_1d552:
		lea	$0034(a0),A1
		cmpi.w	#$FF80,(a1)
		beq.s	loc_1d57A
		subq.w	#1,(a1)
		moveq	#0,d1
		move.w	(a1)+,d1
		swap	d1
		asr.l   #1,d1
		move.l	d1,d2
		asr.l   #1,d1
		move.l	d1,d3
		add.l   d2,d3
		swap	d1
		swap	d2
		swap	d3
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.w	d1,(a1)+
loc_1d57A:
		rts 
;=============================================================================== 
; Object 0x78 - Chemical Plant - Rotanting Platforms / Down when Touch Platform 
; [ End ]		         
;===============================================================================		   
; loc_1d57C:
JmpTo10_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1d582:
JmpTo3_Adjust2PArtPointer2:
		jmp	(Adjust2PArtPointer2).l
; loc_1d588:
JmpTo19_SolidObject:
		jmp	(SolidObject).l
; loc_1d58E:
JmpTo6_MarkObjGone2:
		jmp	(MarkObjGone2).l

;=============================================================================== 
; Object 0x7A - Chemical Plant - Platforms - Move horizontally
; [ Begin ]		         
;===============================================================================		     
Obj_0x7A_Platform_Horizontal: ; loc_1d594:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1d5A2(pc,d0),d1
		jmp     loc_1d5A2(pc,d1)
loc_1d5A2:
		dc.w    loc_1d5BA-loc_1d5A2
		dc.w    loc_1d660-loc_1d5A2
		dc.w    loc_1d6B2-loc_1d5A2
loc_1d5A8:		
		dc.b	$00,$70,$FF,$90,$00,$00,$01,$B0,$FF,$50,$00,$40,$01,$F0,$FF,$80
		dc.b	$00,$80
loc_1d5BA:
		addq.b	#$02,$0024(a0)
		move.w	#$E418,$0002(a0)
		bsr.w	JmpTo31_Adjust2PArtPointer
		moveq	#0,d1
		move.b	$0028(a0),d1
		lea	loc_1d5A8(pc,d1),A2
		move.b	(a2)+,d1
		move.l	A0,A1
		bra.s	loc_1d5F6
loc_1d5D8:		
		bsr.w	JmpTo11_SingleObjLoad2
		bne.s	loc_1d61C
		_move.b	0(a0),0(a1)
		move.b	#$04,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
loc_1d5F6:
		move.l	#Obj7A_MapUnc_1d72C,$0004(a1) ; loc_1d72C
		move.w	$0002(a0),$0002(a1)
		move.b	#$04,$0001(a1)
		move.b	#$04,$0018(a1)
		move.b	#$10,$0019(a1)
		move.w	8(a1),$0030(a1)
loc_1d61C:
		dbf	d1,loc_1d5D8
		move.l	A0,$003C(a1)
		move.l	A1,$003C(a0)
		cmpi.b	#$0C,$0028(a0)
		bne.s	loc_1d636
		move.b	#1,$0036(a0)
loc_1d636:
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$0030(a0),d0
		sub.w   d1,d0
		move.w	d0,$0032(a0)
		move.w	d0,$0032(a1)
		add.w   d1,d0
		add.w   d1,d0
		move.w	d0,$0034(a0)
		move.w	d0,$0034(a1)
		move.w	(a2)+,d0
		add.w   d0,8(a0)
		move.w	(a2)+,d0
		add.w   d0,8(a1)
loc_1d660:
		bsr.s	loc_1d6BC
		move.w	$0032(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bls.s   loc_1d686
		move.w	$0034(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.s	loc_1d68C
loc_1d686:
		jmp     DisplaySprite           ; (loc_d3C2)
loc_1d68C:
		move.l	$003C(a0),A1
		cmpa.l  A0,A1
		beq.s	loc_1d69A
		jsr	 (DeleteObject2)
loc_1d69A:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	J_DeleteObject_20       ; loc_1d6AC
		bclr	#$07,$02(A2,d0)
J_DeleteObject_20: ; loc_1d6AC:
		jmp     DeleteObject            ; (loc_d3B4)
loc_1d6B2:
		bsr.s	loc_1d6BC
		bsr.s	loc_1d706
		jmp     DisplaySprite           ; (loc_d3C2)
loc_1d6BC:
		move.w	8(a0),-(sp)
		tst.b	$0036(a0)
		beq.s	loc_1d6DE
		move.w	8(a0),d0
		subq.w	#1,d0
		cmp.w	$0032(a0),d0
		bne.s	loc_1d6D8
		move.b	#$00,$0036(a0)
loc_1d6D8:
		move.w	d0,8(a0)
		bra.s	loc_1d6F4
loc_1d6DE:
		move.w	8(a0),d0
		addq.w	#1,d0
		cmp.w	$0034(a0),d0
		bne.s	loc_1d6F0
		move.b	#1,$0036(a0)
loc_1d6F0:
		move.w	d0,8(a0)
loc_1d6F4:
		moveq	#0,d1
		move.b	$0019(a0),d1
		move.w	#8,d3
		move.w	(sp)+,d4
		bsr.w	JmpTo2_PlatformObject
		rts
loc_1d706:
		move.l	$003C(a0),A1
		move.w	8(a0),d0
		subi.w	#$0010,d0
		move.w	8(a1),d2
		addi.w	#$0010,d2
		cmp.w	d0,d2
		bne.s	loc_1d72A
		eori.b  #1,$0036(a0)
		eori.b  #1,$0036(a1)
loc_1d72A:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj7A_MapUnc_1d72C:	binclude	"mappings/sprite/obj7A.bin"
; ===========================================================================
; loc_1d738:
JmpTo11_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1d73E:
JmpTo31_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1d744:
JmpTo2_PlatformObject:
		jmp	(PlatformObject).l

		align 4

;=============================================================================== 
; Object 0x7B - Chemical Plant - Spring Over Tubes 
; [ Begin ]		         
;===============================================================================		 
Obj_0x7B_Spring_Tubes: ; loc_1d74C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1d77C(pc,d0),d1
		jsr	 loc_1d77C(pc,d1)
		tst.w	(Two_player_mode).w
		beq.s	loc_1d764
		bra.w	JmpTo14_DisplaySprite
loc_1d764:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 JmpTo34_DeleteObject
		bra.w	JmpTo14_DisplaySprite
loc_1d77C:
		dc.w    loc_1d784-loc_1d77C
		dc.w    loc_1d7BA-loc_1d77C
loc_1d780:
		dc.w	$F000,$F600
loc_1d784:
		addq.b	#$02,$0024(a0)
		move.l	#Obj7B_MapUnc_1D920,$0004(a0) ; loc_1D920
		move.w	#$03E0,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$10,$0019(a0)
		move.b	#1,$0018(a0)
		move.b	$0028(a0),d0
		andi.w	#$0002,d0
		move.w	loc_1d780(pc,d0),$0030(a0)
		bsr.w	JmpTo32_Adjust2PArtPointer
loc_1d7BA:
		cmpi.b	#1,$001A(a0)
		beq.s	loc_1D802
		move.w	#$001B,d1
		move.w	#8,d2
		move.w	#$0010,d3
		move.w	8(a0),d4
		lea	(MainCharacter).w,A1
		moveq	#$03,d6
		movem.l d1-d4,-(sp)
		bsr.w	JmpTo4_SolidObject_Always_SingleCharacter
		btst	#$03,$0022(a0)
		beq.s	loc_1d7EA
		bsr.s	loc_1D862
loc_1d7EA:
		movem.l (sp)+,d1-d4
		lea	(Sidekick).w,A1
		moveq	#$04,d6
		bsr.w	JmpTo4_SolidObject_Always_SingleCharacter
		btst	#$04,$0022(a0)
		beq.s	loc_1D802
		bsr.s	loc_1D862
loc_1D802:
		move.w	8(a0),d4
		move.w	d4,d5
		subi.w	#$0010,d4
		addi.w	#$0010,d5
		move.w	$000C(a0),d2
		move.w	d2,d3
		addi.w	#$0030,d3
		move.w	(MainCharacter+8).w,d0
		cmp.w	d4,d0
		bcs.s	loc_1D838
		cmp.w	d5,d0
		bcc.s	loc_1D838
		move.w	(MainCharacter+$C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_1D838
		cmp.w	d3,d0
		bcc.s	loc_1D838
		move.b	#$02,$001C(a0)
loc_1D838:
		move.w	(Sidekick+8).w,d0
		cmp.w	d4,d0
		bcs.s	loc_1D856
		cmp.w	d5,d0
		bcc.s	loc_1D856
		move.w	(Sidekick+$C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_1D856
		cmp.w	d3,d0
		bcc.s	loc_1D856
		move.b	#$03,$001C(a0)
loc_1D856:
		lea	(loc_1D908).l,A1
		bra.w	JmpTo5_AnimateSprite
		rts
loc_1D862:
		move.w	#$0100,$001C(a0)
		addq.w	#$04,$000C(a1)
		move.w	$0030(a0),$0012(a1)
		bset	#1,$0022(a1)
		bclr	#$03,$0022(a1)
		move.b	#$10,$001C(a1)
		move.b	#$02,$0024(a1)
		move.b	$0028(a0),d0
		bpl.s	loc_1D896
		move.w	#0,$0010(a1)
loc_1D896:
		btst	#$00,d0
		beq.s	loc_1D8d6
		move.w	#$0001,$0014(a1)
		move.b	#1,$0027(a1)
		move.b	#$00,$001C(a1)
		move.b	#$00,$002C(a1)
		move.b	#$04,$002D(a1)
		btst	#1,d0
		bne.s	loc_1D8C6
		move.b	#1,$002C(a1)
loc_1D8C6:
		btst	#$00,$0022(a1)
		beq.s	loc_1D8d6
		neg.b   $0027(a1)
		neg.w	$0014(a1)
loc_1D8d6:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	loc_1D8EC
		move.b	#$0C,$003E(a1)
		move.b	#$0D,$003F(a1)
loc_1D8EC:
		cmpi.b	#$08,d0
		bne.s	loc_1D8FE
		move.b	#$0E,$003E(a1)
		move.b	#$0F,$003F(a1)
loc_1D8FE:
		move.w	#SndID_Spring,d0
		jmp	(PlaySound).l             ; loc_14C6    
loc_1D908:
		dc.w    loc_1D910-loc_1D908
		dc.w    loc_1D913-loc_1D908
		dc.w    loc_1D917-loc_1D908
		dc.w    loc_1D917-loc_1D908
loc_1D910:
		dc.b	$0F,$00,$FF
loc_1D913:
		dc.b	$00,$03,$FD,$00
loc_1D917:
		dc.b	$05,$01,$02,$02,$02,$04,$FD,$00,$00  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj7B_MapUnc_1D920:	binclude	"mappings/sprite/obj7B.bin"
; ===========================================================================
		nop
; loc_1D964:
JmpTo14_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1D96A:
JmpTo34_DeleteObject:
		jmp	(DeleteObject).l
; loc_1D970:
JmpTo5_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1D976:
JmpTo32_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1D97C:
JmpTo4_SolidObject_Always_SingleCharacter:
		jmp	(SolidObject_Always_SingleCharacter).l

		align 4

;=============================================================================== 
; Object 0x4D - Hidden Palace - Rhinobot 
; [ Begin ]		         
;===============================================================================		      
Obj_0x4D_Rhinobot: ; loc_1D984:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1D992(pc,d0),d1
		jmp     loc_1D992(pc,d1)
loc_1D992:
		dc.w    loc_1D996-loc_1D992
		dc.w    loc_1D9E6-loc_1D992
loc_1D996:
		move.l	#Rhinobot_Mappings,$0004(a0) ; loc_1DAEE
		move.w	#$23C4,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$18,$0019(a0)
		move.b	#$10,$0016(a0)
		move.b	#$18,$0017(a0)
		bsr.w	JmpTo2_ObjectMoveAndFall
		jsr	 ObjHitFloor             ; (loc_13898)
		tst.w	d1
		bpl.s	loc_1D9E4
		add.w   d1,$000C(a0)
		move.w	#0,$0012(a0)
		addq.b	#$02,$0024(a0)
loc_1D9E4:
		rts
loc_1D9E6:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1DA02(pc,d0),d1
		jsr	 loc_1DA02(pc,d1)
		lea	(loc_1DAd2).l,A1
		bsr.w	JmpTo6_AnimateSprite
		bra.w	JmpTo20_MarkObjGone
loc_1DA02:
		dc.w    loc_1DA06-loc_1DA02
		dc.w    loc_1DA2A-loc_1DA02
loc_1DA06:
		subq.w	#1,$0030(a0)
		bpl.s	loc_1DA28
		addq.b	#$02,$0025(a0)
		move.w	#$FF80,$0010(a0)
		move.b	#$00,$001C(a0)
		bchg    #0,$0022(a0)
		bne.s	loc_1DA28
		neg.w	$0010(a0)
loc_1DA28:
		rts
loc_1DA2A:
		bsr.w	loc_1DA74
		bsr.w	JmpTo2_ObjectMoveAndFall
		jsr	 ObjHitFloor             ; (loc_13898)
		cmpi.w	#$FFF8,d1
		blt.s   loc_1DA50
		cmpi.w	#$000C,d1
		bge.s   loc_1DA4E
		move.w	#0,$0012(a0)
		add.w   d1,$000C(a0)
loc_1DA4E:
		rts
loc_1DA50:
		subq.b	#$02,$0025(a0)
		move.w	#$003B,$0030(a0)
		move.w	$0010(a0),d0
		ext.l   d0
		asl.l   #$08,d0
		sub.l   d0,8(a0)
		move.w	#0,$0010(a0)
		move.b	#1,$001C(a0)
		rts
loc_1DA74:
		move.w	8(a0),d0
		sub.w   (MainCharacter+8).w,d0
		bmi.s	loc_1DAA8
		cmpi.w	#$0060,d0
		bgt.s   loc_1DA98
		btst	#$00,$0022(a0)
		bne.s	loc_1DA9A
		move.b	#$02,$001C(a0)
		move.w	#$FE00,$0010(a0)
loc_1DA98:
		rts
loc_1DA9A:
		move.b	#$00,$001C(a0)
		move.w	#$0080,$0010(a0)
		rts
loc_1DAA8:
		cmpi.w	#$FFA0,d0
		blt.s   loc_1DA98
		btst	#$00,$0022(a0)
		beq.s	loc_1DAC4
		move.b	#$02,$001C(a0)
		move.w	#$0200,$0010(a0)
		rts
loc_1DAC4:
		move.b	#$00,$001C(a0)
		move.w	#$FF80,$0010(a0)
		rts
loc_1DAd2:
		dc.w    loc_1DAD8-loc_1DAd2
		dc.w    loc_1DAE6-loc_1DAd2
		dc.w    loc_1DAE9-loc_1DAd2
loc_1DAD8:
		dc.b	$02,$00,$00,$00,$03,$03,$04,$01,$01,$02,$05,$05,$05,$FF
loc_1DAE6:
		dc.b	$0F,$00,$FF
loc_1DAE9:
		dc.b	$02,$06,$07,$FF,$00
Rhinobot_Mappings:		
loc_1DAEE:
		dc.w    loc_1DAFE-loc_1DAEE
		dc.w    loc_1DB28-loc_1DAEE
		dc.w    loc_1DB52-loc_1DAEE
		dc.w    loc_1DB7C-loc_1DAEE
		dc.w    loc_1DBA6-loc_1DAEE
		dc.w    loc_1DBd0-loc_1DAEE
		dc.w    loc_1DBFA-loc_1DAEE
		dc.w    loc_1DC1C-loc_1DAEE
loc_1DAFE:
		dc.w	$0005
		dc.l	$F0050000,$0000FFF0,$F0050004,$00020000
		dc.l	$F8010008,$0004FFE8,$0005000A,$0005FFF0
		dc.l	$00090022,$00110000
loc_1DB28:
		dc.w	$0005
		dc.l	$F0050000,$0000FFF0,$F0050004,$00020000
		dc.l	$F8010008,$0004FFE8,$0005000E,$0007FFF0
		dc.l	$00090022,$00110000
loc_1DB52:
		dc.w	$0005
		dc.l	$F0050000,$0000FFF0,$F0050004,$00020000
		dc.l	$F8010008,$0004FFE8,$00050012,$0009FFF0
		dc.l	$00090022,$00110000
loc_1DB7C:
		dc.w	$0005
		dc.l	$F0050000,$0000FFF0,$F0050004,$00020000
		dc.l	$F8010008,$0004FFE8,$0005000A,$0005FFF0
		dc.l	$00090028,$00140000
loc_1DBA6:
		dc.w	$0005
		dc.l	$F0050000,$0000FFF0,$F0050004,$00020000
		dc.l	$F8010008,$0004FFE8,$0005000E,$0007FFF0
		dc.l	$00090028,$00140000
loc_1DBd0:
		dc.w	$0005
		dc.l	$F0050000,$0000FFF0,$F0050004,$00020000
		dc.l	$F8010008,$0004FFE8,$00050012,$0009FFF0
		dc.l	$00090028,$00140000
loc_1DBFA:
		dc.w	$0004
		dc.l	$F00B0016,$000BFFE8,$F0050004,$00020000
		dc.l	$00090022,$00110000,$FB01002E,$0017001A
loc_1DC1C:
		dc.w	$0004
		dc.l	$F00B0016,$000BFFE8,$F0050004,$00020000
		dc.l	$00090028,$00140000,$FB010030,$0018001A		
;=============================================================================== 
; Object 0x4D - Hidden Palace - Rhinobot 
; [ End ]		         
;===============================================================================  
		align 4
; loc_1DC40:
JmpTo20_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1DC46:
JmpTo6_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1DC4C:
JmpTo2_ObjectMoveAndFall:
		jmp	(ObjectMoveAndFall).l

		align 4

;=============================================================================== 
; Object 0x52 - Piranha 
; [ Begin ]		         
;===============================================================================		  
Obj_0x52_Piranha: ; loc_1DC54:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1DC62(pc,d0),d1
		jmp     loc_1DC62(pc,d1)
loc_1DC62:
		dc.w    loc_1DC68-loc_1DC62
		dc.w    loc_1DCE0-loc_1DC62
		dc.w    loc_1Dd50-loc_1DC62
loc_1DC68:
		addq.b	#$02,$0024(a0)
		move.l	#Piranha_Mappings,$0004(a0) ; loc_1DE66
		move.w	#$2530,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		moveq	#0,d0
		move.b	$0028(a0),d0
		move.b	d0,d1
		andi.w	#$00F0,d1
		add.w   d1,d1
		add.w   d1,d1
		move.w	d1,$003A(a0)
		move.w	d1,$003C(a0)
		andi.w	#$000F,d0
		lsl.w	#$06,d0
		subq.w	#1,d0
		move.w	d0,$0030(a0)
		move.w	d0,$0032(a0)
		move.w	#$FF80,$0010(a0)
		move.l	#$FFFB8000,$0036(a0)
		move.w	$000C(a0),$0034(a0)
		bset	#$06,$0022(a0)
		btst	#$00,$0022(a0)
		beq.s	loc_1DCE0
		neg.w	$0010(a0)
loc_1DCE0:
		cmpi.w	#$FFFF,$003A(a0)
		beq.s	loc_1DCEC
		subq.w	#1,$003A(a0)
loc_1DCEC:
		subq.w	#1,$0030(a0)
		bpl.s	loc_1Dd0E
		move.w	$0032(a0),$0030(a0)
		neg.w	$0010(a0)
		bchg    #0,$0022(a0)
		move.b	#1,$001D(a0)
		move.w	$003C(a0),$003A(a0)
loc_1Dd0E:
		lea	(loc_1DE4E).l,A1
		bsr.w	JmpTo7_AnimateSprite
		bsr.w	JmpTo12_ObjectMove
		tst.w	$003A(a0)
		bgt.w    JmpTo21_MarkObjGone
		cmpi.w	#$FFFF,$003A(a0)
		beq.w	 JmpTo21_MarkObjGone
		move.l	#$FFFB8000,$0036(a0)
		addq.b	#$02,$0024(a0)
		move.w	#$FFFF,$003A(a0)
		move.b	#$02,$001C(a0)
		move.w	#$0001,$003E(a0)
		bra.w	JmpTo21_MarkObjGone
loc_1Dd50:
		move.w	#$0390,(Water_Level_1).w
		lea	(loc_1DE4E).l,A1
		bsr.w	JmpTo7_AnimateSprite
		move.w	$003E(a0),d0
		sub.w   d0,$0030(a0)
		bsr.w	loc_1DE00
		tst.l	$0036(a0)
		bpl.s	loc_1DDA8
		move.w	$000C(a0),d0
		cmp.w	(Water_Level_1).w,d0
		bgt.w    JmpTo21_MarkObjGone
		move.b	#$03,$001C(a0)
		bclr	#$06,$0022(a0)
		tst.b	$002A(a0)
		bne.w	 JmpTo21_MarkObjGone
		move.w	$0010(a0),d0
		asl.w   #1,d0
		move.w	d0,$0010(a0)
		addq.w	#1,$003E(a0)
		st      $002A(a0)
		bra.w	JmpTo21_MarkObjGone
loc_1DDA8:
		move.w	$000C(a0),d0
		cmp.w	(Water_Level_1).w,d0
		bgt.s   loc_1DDBC
		move.b	#1,$001C(a0)
		bra.w	JmpTo21_MarkObjGone
loc_1DDBC:
		move.b	#$00,$001C(a0)
		bset	#$06,$0022(a0)
		bne.s	loc_1DDd6
		move.l	$0036(a0),d0
		asr.l   #1,d0
		move.l	d0,$0036(a0)
		nop
loc_1DDd6:
		move.w	$0034(a0),d0
		cmp.w	$000C(a0),d0
		bgt.w    JmpTo21_MarkObjGone
		subq.b	#$02,$0024(a0)
		tst.b	$002A(a0)
		beq.w	 JmpTo21_MarkObjGone
		move.w	$0010(a0),d0
		asr.w   #1,d0
		move.w	d0,$0010(a0)
		sf      $002A(a0)
		bra.w	JmpTo21_MarkObjGone
loc_1DE00:
		move.l	8(a0),d2
		move.l	$000C(a0),d3
		move.w	$0010(a0),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d2
		add.l   $0036(a0),d3
		btst	#$06,$0022(a0)
		beq.s	loc_1DE3C
		tst.l	$0036(a0)
		bpl.s	loc_1DE34
		addi.l	#$00001000,$0036(a0)
		addi.l	#$00001000,$0036(a0)
loc_1DE34:
		subi.l	#$00001000,$0036(a0)
loc_1DE3C:
		addi.l	#$00001800,$0036(a0)
		move.l	d2,8(a0)
		move.l	d3,$000C(a0)
		rts    
loc_1DE4E:		 
		dc.w    loc_1DE56-loc_1DE4E
		dc.w    loc_1DE5A-loc_1DE4E
		dc.w    loc_1DE5E-loc_1DE4E
		dc.w    loc_1DE62-loc_1DE4E
loc_1DE56:
		dc.b	$0E,$00,$01,$FF
loc_1DE5A:
		dc.b	$03,$00,$01,$FF
loc_1DE5E:
		dc.b	$0E,$02,$03,$FF
loc_1DE62:
		dc.b	$03,$02,$03,$FF  
Piranha_Mappings: ; loc_1DE66:
		dc.w    loc_1DE6E-Piranha_Mappings
		dc.w    loc_1DE78-Piranha_Mappings
		dc.w    loc_1DE82-Piranha_Mappings
		dc.w    loc_1DE8C-Piranha_Mappings               
loc_1DE6E:
		dc.w	$0001
		dc.l	$F00F0000,$0000FFF0
loc_1DE78:
		dc.w	$0001
		dc.l	$F00F0010,$0008FFF0
loc_1DE82:
		dc.w	$0001
		dc.l	$F00F0020,$0010FFF0
loc_1DE8C:
		dc.w	$0001
		dc.l	$F00F0030,$0018FFF0				  
;=============================================================================== 
; Object 0x52 - Piranha 
; [ End ]		         
;===============================================================================   
		align 4
; loc_1DE98:
JmpTo21_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1DE9E:
JmpTo7_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1DEA4:
JmpTo12_ObjectMove:
		jmp	(ObjectMove).l

		align 4

;=============================================================================== 
; Object 0x4F - Hidden Palace - Dinobot 
; [ Begin ]		         
;===============================================================================		 
Obj_0x4F_Dinobot: ; loc_1DEAC:               
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1DEBA(pc,d0),d1
		jmp     loc_1DEBA(pc,d1)
loc_1DEBA:		
		dc.w    loc_1DEC0-loc_1DEBA
		dc.w    loc_1DF16-loc_1DEBA
		dc.w    loc_1DFB8-loc_1DEBA
loc_1DEC0:
		move.l	#Obj4F_MapUnc_1DFCA,$0004(a0) ; loc_1DFCA
		move.w	#$0500,$0002(a0)
		move.b	#$04,$0001(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		move.b	#$10,$0016(a0)
		move.b	#$06,$0017(a0)
		move.b	#$0C,$0020(a0)
		bsr.w	JmpTo3_ObjectMoveAndFall
		jsr	 ObjHitFloor             ; loc_13898
		tst.w	d1
		bpl.s	loc_1DF14
		add.w   d1,$000C(a0)
		move.w	#0,$0012(a0)
		addq.b	#$02,$0024(a0)
		bchg    #0,$0022(a0)
loc_1DF14:
		rts
loc_1DF16:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1DF5C(pc,d0),d1
		jsr	 loc_1DF5C(pc,d1)
		lea	(loc_1DFBC).l,A1
		bsr.w	JmpTo8_AnimateSprite
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w   (Camera_X_pos_coarse).w,d0
		cmpi.w	#$0280,d0
		bhi.w	 loc_1DF46
		bra.w	JmpTo15_DisplaySprite
loc_1DF46:
		lea	(Object_Respawn_Table).w,A2
		moveq	#0,d0
		move.b	$0023(a0),d0
		beq.s	loc_1DF58
		bclr	#$07,$02(A2,d0)
loc_1DF58:
		bra.w	JmpTo35_DeleteObject
loc_1DF5C:               
		ori.b   #$28,d4
		subq.w	#1,$0030(a0)
		bpl.s	loc_1DF82
		addq.b	#$02,$0025(a0)
		move.w	#$FF80,$0010(a0)
		move.b	#1,$001C(a0)
		bchg    #0,$0022(a0)
		bne.s	loc_1DF82
		neg.w	$0010(a0)
loc_1DF82:
		rts
		bsr.w	JmpTo13_ObjectMove
		jsr	 ObjHitFloor             ; loc_13898
		cmpi.w	#$FFF8,d1
		blt.s   loc_1DFA0
		cmpi.w	#$000C,d1
		bge.s   loc_1DFA0
		add.w   d1,$000C(a0)
		rts
loc_1DFA0:
		subq.b	#$02,$0025(a0)
		move.w	#$003B,$0030(a0)
		move.w	#0,$0010(a0)
		move.b	#$00,$001C(a0)
		rts
loc_1DFB8:
		bra.w	JmpTo35_DeleteObject
loc_1DFBC:
		dc.w    loc_1DFC0-loc_1DFBC
		dc.w    loc_1DFC3-loc_1DFBC
loc_1DFC0:				 
		dc.b	$09,$01,$FF 
loc_1DFC3:
		dc.b	$09,$00,$01,$02,$01,$FF,$00  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj4F_MapUnc_1DFCA:	binclude	"mappings/sprite/obj4F.bin"

; ===========================================================================
		align 4
; loc_1DFF0:
JmpTo15_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1DFF6:
JmpTo35_DeleteObject:
		jmp	(DeleteObject).l
; loc_1DFFC:
JmpTo8_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1E002:
JmpTo3_ObjectMoveAndFall:
		jmp	(ObjectMoveAndFall).l
; loc_1E008:
JmpTo13_ObjectMove:
		jmp	(ObjectMove).l

		align 4

;=============================================================================== 
; Object 0x50 - Oil Ocean - Aquis (Seahorse)  
; [ Begin ]		         
;===============================================================================  
Obj_0x50_Aquis: ; loc_1E010:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1E01E(pc,d0),d1
		jmp     loc_1E01E(pc,d1)
loc_1E01E:
		dc.w    loc_1E02A-loc_1E01E
		dc.w    loc_1E0E2-loc_1E01E
		dc.w    loc_1E10E-loc_1E01E
		dc.w    loc_1E138-loc_1E01E
		dc.w    loc_1E31A-loc_1E01E
		dc.w    loc_1E356-loc_1E01E
loc_1E02A:
		addq.b	#$02,$0024(a0)
		move.l	#Aquis_Mappings,$0004(a0) ; loc_1E4E0
		move.w	#$2570,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		move.w	#$FF00,$0010(a0)
		move.b	$0028(a0),d0
		move.b	d0,d1
		andi.w	#$00F0,d1
		lsl.w	#$04,d1
		move.w	d1,$002E(a0)
		move.w	d1,$0030(a0)
		andi.w	#$000F,d0
		lsl.w	#$04,d0
		subq.w	#1,d0
		move.w	d0,$0032(a0)
		move.w	d0,$0034(a0)
		move.w	$000C(a0),$002A(a0)
		bsr.w	JmpTo8_SingleObjLoad
		bne.s	loc_1E0E2
		_move.b	#$50,0(a1)
		move.b	#$04,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		addi.w	#$000A,8(a1)
		addi.w	#$FFFA,$000C(a1)
		move.l	#Aquis_Mappings,$0004(a1) ; loc_1E4E0
		move.w	#$24E0,$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$03,$0018(a1)
		move.b	$0022(a0),$0022(a1)
		move.b	#$03,$001C(a1)
		move.l	A1,$0036(a0)
		move.l	A0,$0036(a1)
		bset	#$06,$0022(a0)
loc_1E0E2:
		lea	(loc_1E4A8).l,A1
		bsr.w	JmpTo9_AnimateSprite
		move.w	#$039C,(Water_Level_1).w
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1E108(pc,d0),d1
		jsr	 loc_1E108(pc,d1)
		bsr.w	loc_1E2E0
		bra.w	JmpTo22_MarkObjGone
loc_1E108:
		dc.w    loc_1E14E-loc_1E108
		dc.w    loc_1E160-loc_1E108
		dc.w    loc_1E16E-loc_1E108
loc_1E10E:
		move.l	$0036(a0),A1
		tst.b	(a1)
		beq.w	 JmpTo36_DeleteObject
		cmpi.b	#$50,(a1)
		bne.w	 JmpTo36_DeleteObject
		btst	#$07,$0022(a1)
		bne.w	 JmpTo36_DeleteObject
		lea	(loc_1E4A8).l,A1
		bsr.w	JmpTo9_AnimateSprite
		bra.w	JmpTo16_DisplaySprite
loc_1E138:
		bsr.w	loc_1E404
		bsr.w	JmpTo14_ObjectMove
		lea	(loc_1E4A8).l,A1
		bsr.w	JmpTo9_AnimateSprite
		bra.w	JmpTo22_MarkObjGone
loc_1E14E:
		bsr.w	JmpTo14_ObjectMove
		bsr.w	loc_1E3E6
		bsr.w	loc_1E28C
		bsr.w	loc_1E224
		rts
loc_1E160:
		bsr.w	JmpTo14_ObjectMove
		bsr.w	loc_1E3E6
		bsr.w	loc_1E2AE
		rts
loc_1E16E:
		bsr.w	JmpTo4_ObjectMoveAndFall
		bsr.w	loc_1E3E6
		bsr.w	loc_1E180
		bsr.w	loc_1E1FC
		rts
loc_1E180:
		tst.b	$002D(a0)
		bne.s	loc_1E18C
		tst.w	$0012(a0)
		bpl.s	loc_1E18E
loc_1E18C:
		rts
loc_1E18E:
		st      $002D(a0)
		bsr.w	JmpTo8_SingleObjLoad
		bne.s	loc_1E1FA
		_move.b	#$50,0(a1)
		move.b	#$06,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.l	#Aquis_Mappings,$0004(a1) ; loc_1E4E0
		move.w	#$24E0,$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$03,$0018(a1)
		move.b	#$E5,$0020(a1)
		move.b	#$02,$001C(a1)
		move.w	#$000C,d0
		move.w	#$0010,d1
		move.w	#$Fd00,d2
		btst	#$00,$0022(a0)
		beq.s	loc_1E1EE
		neg.w	d1
		neg.w	d2
loc_1E1EE:
		sub.w   d0,$000C(a1)
		sub.w   d1,8(a1)
		move.w	d2,$0010(a1)
loc_1E1FA:
		rts
loc_1E1FC:
		move.w	$000C(a0),d0
		cmp.w	(Water_Level_1).w,d0
		blt.s   loc_1E222
		move.b	#$02,$0025(a0)
		move.b	#$00,$001C(a0)
		move.w	$0030(a0),$002E(a0)
		move.w	#$0040,$0012(a0)
		sf      $002D(a0)
loc_1E222:
		rts
loc_1E224:
		tst.b	$002C(a0)
		beq.s	loc_1E28A
		move.w	(MainCharacter+8).w,d0
		move.w	(MainCharacter+$C).w,d1
		sub.w   $000C(a0),d1
		bpl.s	loc_1E28A
		cmpi.w	#$FFd0,d1
		blt.s   loc_1E28A
		sub.w   8(a0),d0
		cmpi.w	#$0048,d0
		bgt.s   loc_1E28A
		cmpi.w	#$FFB8,d0
		blt.s   loc_1E28A
		tst.w	d0
		bpl.s	loc_1E262
		cmpi.w	#$FFD8,d0
		bgt.s   loc_1E28A
		btst	#$00,$0022(a0)
		bne.s	loc_1E28A
		bra.s	loc_1E270
loc_1E262:
		cmpi.w	#$0028,d0
		blt.s   loc_1E28A
		btst	#$00,$0022(a0)
		beq.s	loc_1E28A
loc_1E270:
		moveq	#$20,d0
		cmp.w	$0032(a0),d0
		bgt.s   loc_1E28A
		move.b	#$04,$0025(a0)
		move.b	#1,$001C(a0)
		move.w	#$FC00,$0012(a0)
loc_1E28A:
		rts
loc_1E28C:
		subq.w	#1,$002E(a0)
		bne.s	loc_1E2AC
		move.w	$0030(a0),$002E(a0)
		addq.b	#$02,$0025(a0)
		move.w	#$FFC0,d0
		tst.b	$002C(a0)
		beq.s	loc_1E2A8
		neg.w	d0
loc_1E2A8:
		move.w	d0,$0012(a0)
loc_1E2AC:
		rts
loc_1E2AE:
		move.w	$000C(a0),d0
		tst.b	$002C(a0)
		bne.s	loc_1E2CC
		cmp.w	(Water_Level_1).w,d0
		bgt.s   loc_1E2CA
		subq.b	#$02,$0025(a0)
		st      $002C(a0)
		clr.w	$0012(a0)
loc_1E2CA:
		rts
loc_1E2CC:
		cmp.w	$002A(a0),d0
		blt.s   loc_1E2CA
		subq.b	#$02,$0025(a0)
		sf      $002C(a0)
		clr.w	$0012(a0)
		rts
loc_1E2E0:
		moveq	#$0A,d0
		moveq	#Debug_mode_flag,d1
		move.l	$0036(a0),A1
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.b	$0022(a0),$0022(a1)
		move.b	$0023(a0),$0023(a1)
		move.b	$0001(a0),$0001(a1)
		btst	#$00,$0022(a1)
		beq.s	loc_1E310
		neg.w	d0
loc_1E310:
		add.w   d0,8(a1)
		add.w   d1,$000C(a1)
		rts
loc_1E31A:
		bsr.w	JmpTo4_ObjectMoveAndFall
		bsr.w	loc_1E330
		lea	(loc_1E4A8).l,A1
		bsr.w	JmpTo9_AnimateSprite
		bra.w	JmpTo22_MarkObjGone
loc_1E330:
		jsr	 ObjHitFloor             ; (loc_13898)
		tst.w	d1
		bpl.s	loc_1E34A
		add.w   d1,$000C(a0)
		move.w	$0012(a0),d0
		asr.w   #1,d0
		neg.w	d0
		move.w	d0,$0012(a0)
loc_1E34A:
		subi.b	#1,$0021(a0)
		beq.w	 JmpTo36_DeleteObject
		rts
loc_1E356:
		bsr.w	loc_1E3A6
		tst.b	$0025(a0)
		beq.s	loc_1E396
		subi.w	#$0001,$002C(a0)
		beq.w	 JmpTo36_DeleteObject
		move.w	(MainCharacter+8).w,8(a0)
		move.w	(MainCharacter+$C).w,$000C(a0)
		addi.w	#$000C,$000C(a0)
		subi.b	#1,$002A(a0)
		bne.s	loc_1E398
		move.b	#$03,$002A(a0)
		bchg    #0,$0022(a0)
		bchg    #0,$0001(a0)
loc_1E396:
		rts
loc_1E398:
		lea	(loc_1E4A8).l,A1
		bsr.w	JmpTo9_AnimateSprite
		bra.w	JmpTo16_DisplaySprite
loc_1E3A6:
		tst.b	$0025(a0)
		bne.s	loc_1E3E4
		move.b	(MainCharacter+routine).w,d0
		cmpi.b	#$02,d0
		bne.s	loc_1E3E4
		move.w	(MainCharacter+8).w,8(a0)
		move.w	(MainCharacter+$C).w,$000C(a0)
		ori.b   #$04,$0001(a0)
		move.b	#1,$0018(a0)
		move.b	#$05,$001C(a0)
		st      $0025(a0)
		move.w	#$012C,$002C(a0)
		move.b	#$03,$002A(a0)
loc_1E3E4:
		rts
loc_1E3E6:
		subq.w	#1,$0032(a0)
		bpl.s	loc_1E402
		move.w	$0034(a0),$0032(a0)
		neg.w	$0010(a0)
		bchg    #0,$0022(a0)
		move.b	#1,$001D(a0)
loc_1E402:
		rts
loc_1E404:
		tst.b	$0021(a0)
		beq.w	 loc_1E4A6
		moveq	#$02,d3
loc_1E40E:		
		bsr.w	JmpTo8_SingleObjLoad
		bne.s	loc_1E480
		_move.b	0(a0),0(a1)
		move.b	#$08,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.l	$0004(a0),$0004(a1)
		move.w	#$24E0,$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$03,$0018(a1)
		move.w	#$FF00,$0012(a1)
		move.b	#$04,$001C(a1)
		move.b	#$78,$0021(a1)
		cmpi.w	#$0001,d3
		beq.s	loc_1E47A
		blt.s   loc_1E46C
		move.w	#$00C0,$0010(a1)
		addi.w	#$FF40,$0012(a1)
		bra.s	loc_1E480
loc_1E46C:
		move.w	#$FF00,$0010(a1)
		addi.w	#$FFC0,$0012(a1)
		bra.s	loc_1E480
loc_1E47A:
		move.w	#$0040,$0010(a1)
loc_1E480:
		dbf	d3,loc_1E40E
		bsr.w	JmpTo8_SingleObjLoad
		bne.s	loc_1E4A2
		_move.b	0(a0),0(a1)
		move.b	#$0A,$0024(a1)
		move.l	$0004(a0),$0004(a1)
		move.w	#$24E0,$0002(a1)
loc_1E4A2:
		bra.w	JmpTo36_DeleteObject
loc_1E4A6:
		rts  
loc_1E4A8:
		dc.w    loc_1E4B8-loc_1E4A8
		dc.w    loc_1E4BB-loc_1E4A8
		dc.w    loc_1E4C3-loc_1E4A8
		dc.w    loc_1E4C9-loc_1E4A8
		dc.w    loc_1E4CD-loc_1E4A8
		dc.w    loc_1E4d0-loc_1E4A8
		dc.w    loc_1E4d3-loc_1E4A8
		dc.w    loc_1E4d7-loc_1E4A8
loc_1E4B8:
		dc.b	$0E,$00,$FF
loc_1E4BB:
		dc.b	$05,$03,$04,$03,$04,$03,$04,$FF
loc_1E4C3:
		dc.b	$03,$05,$06,$07,$06,$FF
loc_1E4C9:
		dc.b	$03,$01,$02,$FF
loc_1E4CD:
		dc.b	$01,$05,$FF
loc_1E4d0:
		dc.b	$0E,$08,$FF
loc_1E4d3:
		dc.b	$01,$09,$0A,$FF
loc_1E4d7:
		dc.b	$05,$0B,$0C,$0B,$0C,$0B,$0C,$FF,$00
Aquis_Mappings:		
loc_1E4E0:
		dc.w    loc_1E4FA-loc_1E4E0
		dc.w    loc_1E514-loc_1E4E0
		dc.w    loc_1E51E-loc_1E4E0
		dc.w    loc_1E528-loc_1E4E0
		dc.w    loc_1E54A-loc_1E4E0
		dc.w    loc_1E56C-loc_1E4E0
		dc.w    loc_1E576-loc_1E4E0
		dc.w    loc_1E580-loc_1E4E0
		dc.w    loc_1E58A-loc_1E4E0
		dc.w    loc_1E594-loc_1E4E0
		dc.w    loc_1E5B6-loc_1E4E0
		dc.w    loc_1E5D8-loc_1E4E0
		dc.w    loc_1E602-loc_1E4E0
loc_1E4FA:
		dc.w	$0003
		dc.l	$E80d0000,$0000FFF0,$F8090016,$000BFFF8
		dc.l	$08050024,$0012FFF8
loc_1E514:
		dc.w	$0001
		dc.l	$F8050028,$0014FFF8
loc_1E51E:
		dc.w	$0001
		dc.l	$F805002C,$0016FFF8
loc_1E528:
		dc.w	$0004
		dc.l	$E8090008,$0004FFF0,$E801000E,$00070008
		dc.l	$F8090016,$000BFFF8,$08050024,$0012FFF8
loc_1E54A:
		dc.w	$0004
		dc.l	$E8090010,$0008FFF0,$E801000E,$00070008
		dc.l	$F8090016,$000BFFF8,$08050024,$0012FFF8
loc_1E56C:
		dc.w	$0001
		dc.l	$F8010030,$0018FFFC
loc_1E576:
		dc.w	$0001
		dc.l	$F8010032,$0019FFFC
loc_1E580:
		dc.w	$0001
		dc.l	$F8010034,$001AFFFC
loc_1E58A:
		dc.w	$0001
		dc.l	$F80d0036,$001BFFF0
loc_1E594:
		dc.w	$0004
		dc.l	$E80d0000,$0000FFF0,$F805001C,$000EFFF8
		dc.l	$F8010020,$00100008,$08050024,$0012FFF8
loc_1E5B6:
		dc.w	$0004
		dc.l	$E80d0000,$0000FFF0,$F805001C,$000EFFF8
		dc.l	$F8010022,$00110008,$08050024,$0012FFF8
loc_1E5D8:
		dc.w	$0005
		dc.l	$E8090008,$0004FFF0,$E801000E,$00070008
		dc.l	$F805001C,$000EFFF8,$F8010020,$00100008
		dc.l	$08050024,$0012FFF8
loc_1E602:
		dc.w	$0005
		dc.l	$E8090010,$0008FFF0,$E801000E,$00070008
		dc.l	$F805001C,$000EFFF8,$F8010022,$00110008
		dc.l	$08050024,$0012FFF8		           
;=============================================================================== 
; Object 0x50 - Oil Ocean - Aquis (Seahorse)  
; [ End ]		         
;===============================================================================  
;=============================================================================== 
; Object 0x51 - Oil Ocean - Aquis (Seahorse)  
; [ Begin ]		         
;===============================================================================  
Obj_0x51_Aquis: ; loc_1E62C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1E63A(pc,d0),d1
		jmp     loc_1E63A(pc,d1)
loc_1E63A:
		dc.w    loc_1E646-loc_1E63A
		dc.w    loc_1E6A4-loc_1E63A
		dc.w    loc_1E6C8-loc_1E63A
loc_1E640:
		dc.w	$0000,$FCE0,$Fd1C
loc_1E646:
		addq.b	#$02,$0024(a0)
		move.l	#Aquis_Mappings,$0004(a0) ; loc_1E4E0
		move.w	#$2570,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		move.b	#$06,$001C(a0)
		move.b	$0028(a0),d0
		andi.w	#$000F,d0
		move.w	d0,d1
		lsl.w	#$05,d1
		subq.w	#1,d1
		move.w	d1,$0032(a0)
		move.w	d1,$0034(a0)
		move.w	$000C(a0),$002A(a0)
		move.w	$000C(a0),$002E(a0)
		addi.w	#$0060,$002E(a0)
		move.w	#$FF00,$0010(a0)
loc_1E6A4:
		lea	loc_1E4A8(pc),A1
		bsr.w	JmpTo9_AnimateSprite
		move.w	#$039C,(Water_Level_1).w
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1E6C4(pc,d0),d1
		jsr	 loc_1E6C4(pc,d1)
		bra.w	JmpTo22_MarkObjGone
loc_1E6C4:
		dc.w    loc_1E6DC-loc_1E6C4
		dc.w    loc_1E6F2-loc_1E6C4
loc_1E6C8:
		bsr.w	loc_1E404
		bsr.w	JmpTo14_ObjectMove
		lea	loc_1E4A8(pc),A1
		bsr.w	JmpTo9_AnimateSprite
		bra.w	JmpTo22_MarkObjGone
loc_1E6DC:
		bsr.w	JmpTo14_ObjectMove
		bsr.w	loc_1E3E6
		bsr.w	loc_1E72E
		bsr.w	loc_1E810
		bsr.w	loc_1E780
		rts
loc_1E6F2:
		bsr.w	JmpTo14_ObjectMove
		bsr.w	loc_1E3E6
		bsr.w	loc_1E72E
		bsr.w	loc_1E810
		bsr.w	loc_1E708
		rts
loc_1E708:
		subq.w	#1,$0030(a0)
		beq.s	loc_1E71C
		move.w	$0030(a0),d0
		cmpi.w	#$0012,d0
		beq.w	 loc_1E7A6
		rts
loc_1E71C:
		subq.b	#$02,$0025(a0)
		move.b	#$06,$001C(a0)
		move.w	#$00B4,$0030(a0)
		rts
loc_1E72E:
		sf      $002D(a0)
		sf      $002C(a0)
		sf      $0036(a0)
		move.w	(MainCharacter+8).w,d0
		sub.w   8(a0),d0
		bpl.s	loc_1E74E
		btst	#$00,$0022(a0)
		bne.s	loc_1E756
		bra.s	loc_1E75A
loc_1E74E:
		btst	#$00,$0022(a0)
		bne.s	loc_1E75A
loc_1E756:
		st      $002C(a0)
loc_1E75A:
		move.w	(MainCharacter+$C).w,d0
		sub.w   $000C(a0),d0
		cmpi.w	#$FFFC,d0
		blt.s   loc_1E77E
		cmpi.w	#$0004,d0
		bgt.s   loc_1E77A
		st      $002D(a0)
		move.w	#0,$0012(a0)
		rts
loc_1E77A:
		st      $0036(a0)
loc_1E77E:
		rts
loc_1E780:
		tst.b	$002C(a0)
		bne.s	loc_1E7A4
		subq.w	#1,$0030(a0)
		bgt.s   loc_1E7A4
		tst.b	$002D(a0)
		beq.s	loc_1E7A4
		move.b	#$07,$001C(a0)
		move.w	#$0024,$0030(a0)
		addi.b	#$02,$0025(a0)
loc_1E7A4:
		rts
loc_1E7A6:
		bsr.w	JmpTo8_SingleObjLoad
		bne.s	loc_1E80E
		_move.b	#$51,0(a1)
		move.b	#$04,$0024(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.l	#Aquis_Mappings,$0004(a1) ; loc_1E4E0
		move.w	#$24E0,$0002(a1)
		ori.b   #$04,$0001(a1)
		move.b	#$03,$0018(a1)
		move.b	#$02,$001C(a1)
		move.b	#$E5,$0020(a1)
		move.w	#$000C,d0
		move.w	#$0010,d1
		move.w	#$Fd00,d2
		btst	#$00,$0022(a0)
		beq.s	loc_1E802
		neg.w	d1
		neg.w	d2
loc_1E802:
		sub.w   d0,$000C(a1)
		sub.w   d1,8(a1)
		move.w	d2,$0010(a1)
loc_1E80E:
		rts
loc_1E810:
		tst.b	$002D(a0)
		bne.s	loc_1E86E
		tst.b	$0036(a0)
		beq.s	loc_1E840
		move.w	$002E(a0),d0
		cmp.w	$000C(a0),d0
		ble.s   loc_1E864
		tst.b	$002C(a0)
		beq.s	loc_1E838
		move.w	$002A(a0),d0
		cmp.w	$000C(a0),d0
		bge.s   loc_1E864
		rts
loc_1E838:
		move.w	#$0180,$0012(a0)
		rts
loc_1E840:
		move.w	$002A(a0),d0
		cmp.w	$000C(a0),d0
		bge.s   loc_1E864
		tst.b	$002C(a0)
		beq.s	loc_1E85C
		move.w	$002E(a0),d0
		cmp.w	$000C(a0),d0
		ble.s   loc_1E864
		rts
loc_1E85C:
		move.w	#$FE80,$0012(a0)
		rts
loc_1E864:
		move.w	d0,$000C(a0)
		move.w	#0,$0012(a0)
loc_1E86E:
		rts
;=============================================================================== 
; Object 0x51 - Oil Ocean - Aquis (Seahorse)  
; [ End ]		         
;===============================================================================  
; loc_1E870:
JmpTo16_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1E876:
JmpTo36_DeleteObject:
		jmp	(DeleteObject).l
; loc_1E87C:
JmpTo8_SingleObjLoad:
		jmp	(SingleObjLoad).l
; loc_1E882:
JmpTo22_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1E888:
JmpTo9_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1E88E:
JmpTo4_ObjectMoveAndFall:
		jmp	(ObjectMoveAndFall).l
; loc_1E894:
JmpTo14_ObjectMove:
		jmp	(ObjectMove).l

		align 4

;=============================================================================== 
; Object 0x4B - Green Hill - Buzz Bomber  
; [ Begin ]		         
;===============================================================================		  
Obj_0x4B_Buzz_Bomber: ; loc_1E89C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1E8AA(pc,d0),d1
		jmp     loc_1E8AA(pc,d1)
loc_1E8AA:
		dc.w    loc_1E8FC-loc_1E8AA
		dc.w    loc_1E9A8-loc_1E8AA
		dc.w    loc_1E8C4-loc_1E8AA
		dc.w    loc_1E8B2-loc_1E8AA
loc_1E8B2:
		bsr.w	JmpTo15_ObjectMove
		lea	(loc_1EAF2).l,A1
		bsr.w	JmpTo10_AnimateSprite
		bra.w	JmpTo_MarkObjGone_P1
loc_1E8C4:
		move.l	$002A(a0),A1
		tst.b	(a1)
		beq.w	 JmpTo37_DeleteObject
		tst.w	$0030(a1)
		bmi.s	loc_1E8d6
		rts
loc_1E8d6:
		move.w	8(a1),8(a0)
		move.w	$000C(a1),$000C(a0)
		move.b	$0022(a1),$0022(a0)
		move.b	$0001(a1),$0001(a0)
		lea	(loc_1EAF2).l,A1
		bsr.w	JmpTo10_AnimateSprite
		bra.w	JmpTo_MarkObjGone_P1
loc_1E8FC:
		move.l	#Obj4B_MapUnc_1EB0E,$0004(a0) ; Obj4B_MapUnc_1EB0E
		move.w	#$03E6,$0002(a0)
		bsr.w	JmpTo33_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		move.b	#$10,$0016(a0)
		move.b	#$18,$0017(a0)
		move.b	#$03,$0018(a0)
		addq.b	#$02,$0024(a0)
		bsr.w	JmpTo12_SingleObjLoad2
		bne.s	loc_1E9A6
		_move.b	#$4B,0(a1)
		move.b	#$04,$0024(a1)
		move.l	#Obj4B_MapUnc_1EB0E,$0004(a1) ; Obj4B_MapUnc_1EB0E
		move.w	#$03E6,$0002(a1)
		bsr.w	JmpTo4_Adjust2PArtPointer2
		move.b	#$04,$0018(a1)
		move.b	#$10,$0019(a1)
		move.b	$0022(a0),$0022(a1)
		move.b	$0001(a0),$0001(a1)
		move.b	#1,$001C(a1)
		move.l	A0,$002A(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	#$0100,$002E(a0)
		move.w	#$FF00,$0010(a0)
		btst	#$00,$0001(a0)
		beq.s	loc_1E9A6
		neg.w	$0010(a0)
loc_1E9A6:
		rts
loc_1E9A8:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1E9C4(pc,d0),d1
		jsr	 loc_1E9C4(pc,d1)
		lea	(loc_1EAF2).l,A1
		bsr.w	JmpTo10_AnimateSprite
		bra.w	JmpTo_MarkObjGone_P1
loc_1E9C4:
		dc.w    loc_1E9C8-loc_1E9C4
		dc.w    loc_1EA58-loc_1E9C4
loc_1E9C8:
		bsr.w	loc_1EA0A
		subq.w	#1,$0030(a0)
		move.w	$0030(a0),d0
		cmpi.w	#$000F,d0
		beq.s	loc_1E9EE
		tst.w	d0
		bpl.s	loc_1E9EC
		subq.w	#1,$002E(a0)
		bgt.w    JmpTo15_ObjectMove
		move.w	#$001E,$0030(a0)
loc_1E9EC:
		rts
loc_1E9EE:
		sf      $0032(a0)
		neg.w	$0010(a0)
		bchg    #0,$0001(a0)
		bchg    #0,$0022(a0)
		move.w	#$0100,$002E(a0)
		rts
loc_1EA0A:
		tst.b	$0032(a0)
		bne.w	 loc_1EA56
		move.w	8(a0),d0
		sub.w   (MainCharacter+8).w,d0
		move.w	d0,d1
		bpl.s	loc_1EA20
		neg.w	d0
loc_1EA20:
		cmpi.w	#$0028,d0
		blt.s   loc_1EA56
		cmpi.w	#$0030,d0
		bgt.s   loc_1EA56
		tst.w	d1
		bpl.s	loc_1EA3A
		btst	#$00,$0001(a0)
		beq.s	loc_1EA56
		bra.s	loc_1EA42
loc_1EA3A:
		btst	#$00,$0001(a0)
		bne.s	loc_1EA56
loc_1EA42:
		st      $0032(a0)
		addq.b	#$02,$0025(a0)
		move.b	#$03,$001C(a0)
		move.w	#$0032,$0034(a0)
loc_1EA56:
		rts
loc_1EA58:
		move.w	$0034(a0),d0
		subq.w	#1,d0
		blt.s   loc_1EA6C
		move.w	d0,$0034(a0)
		cmpi.w	#$0014,d0
		beq.s	loc_1EA72
		rts
loc_1EA6C:
		subq.b	#$02,$0025(a0)
		rts
loc_1EA72:
		jsr	 SingleObjLoad2      ; loc_E788
		bne.s	loc_1EAEC
		_move.b	#$4B,0(a1)
		move.b	#$06,$0024(a1)
		move.l	#Obj4B_MapUnc_1EB0E,$0004(a1) ; Obj4B_MapUnc_1EB0E
		move.w	#$03E6,$0002(a1)
		bsr.w	JmpTo4_Adjust2PArtPointer2
		move.b	#$04,$0018(a1)
		move.b	#$98,$0020(a1)
		move.b	#$10,$0019(a1)
		move.b	$0022(a0),$0022(a1)
		move.b	$0001(a0),$0001(a1)
		move.b	#$02,$001C(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		addi.w	#$0018,$000C(a1)
		move.w	#$000D,d0
		move.w	#$0180,$0012(a1)
		move.w	#$FE80,$0010(a1)
		btst	#$00,$0001(a1)
		beq.s	loc_1EAEC
		neg.w	$0010(a1)
		neg.w	d0
loc_1EAEC:
		add.w   d0,8(a1)
		rts		
loc_1EAF2:
		dc.w    loc_1EAFA-loc_1EAF2
		dc.w    loc_1EAFD-loc_1EAF2
		dc.w    loc_1EB01-loc_1EAF2
		dc.w    loc_1EB05-loc_1EAF2
loc_1EAFA:		
		dc.b	$0F,$00,$FF		         
loc_1EAFD:
		dc.b	$02,$03,$04,$FF
loc_1EB01:		
		dc.b	$03,$05,$06,$FF
loc_1EB05:		
		dc.b	$09,$01,$01,$01,$01,$01,$FD,$00,$00 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj4B_MapUnc_1EB0E:	binclude	"mappings/sprite/obj4B.bin"

;=============================================================================== 
; Object 0x4B - Green Hill - Buzz Bomber  
; [ End ]		         
;===============================================================================  
		align 4
; loc_1EB8C:
JmpTo37_DeleteObject:
		jmp	(DeleteObject).l
; loc_1EB92:
JmpTo12_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1EB98:
JmpTo10_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1EB9E:
JmpTo4_Adjust2PArtPointer2:
		jmp	(Adjust2PArtPointer2).l
; loc_1EBA4:
JmpTo_MarkObjGone_P1:
		jmp	(MarkObjGone_P1).l
; loc_1EBAA:
JmpTo33_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1EBB0:
JmpTo15_ObjectMove:
		jmp	(ObjectMove).l

		align 4

;=============================================================================== 
; Object 0x4A - Oil Ocean - Octus
; [ Begin ]		         
;===============================================================================		 
Obj_0x4A_Octus: ; loc_1EBB8:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1EBC6(pc,d0),d1
		jmp     loc_1EBC6(pc,d1)
loc_1EBC6:          
		dc.w    loc_1EBF6-loc_1EBC6
		dc.w    loc_1EC5C-loc_1EBC6
		dc.w    loc_1EBEA-loc_1EBC6
		dc.w    loc_1EBCE-loc_1EBC6
loc_1EBCE:
		subi.w	#$0001,$002C(a0)
		bmi.s	loc_1EBD8
		rts
loc_1EBD8:
		bsr.w	JmpTo5_ObjectMoveAndFall
loc_1EBDC:
		lea	(loc_1EDAA).l,A1
		bsr.w	JmpTo11_AnimateSprite
		bra.w	JmpTo23_MarkObjGone
loc_1EBEA:
		subq.w	#1,$002C(a0)
		beq.w	 JmpTo38_DeleteObject
		bra.w	JmpTo17_DisplaySprite
loc_1EBF6:
		move.l	#Octus_Mappings,$0004(a0) ; loc_1EDBC
		move.w	#$238A,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		move.b	#$10,$0016(a0)
		move.b	#$08,$0017(a0)
		bsr.w	JmpTo5_ObjectMoveAndFall
		jsr	 ObjHitFloor             ; (loc_13898)
		tst.w	d1
		bpl.s	loc_1EC54
		add.w   d1,$000C(a0)
		move.w	#0,$0012(a0)
		addq.b	#$02,$0024(a0)
		move.w	8(a0),d0
		sub.w   (MainCharacter+8).w,d0
		bpl.s	loc_1EC54
loc_1EC4E:
		bchg    #0,$0022(a0)
loc_1EC54:
		move.w	$000C(a0),$002A(a0)
		rts
loc_1EC5C:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1EC78(pc,d0),d1
		jsr	 loc_1EC78(pc,d1)
		lea	(loc_1EDAA).l,A1
		bsr.w	JmpTo11_AnimateSprite
		bra.w	JmpTo23_MarkObjGone
loc_1EC78:
		dc.w    loc_1EC80-loc_1EC78
		dc.w    loc_1ECA0-loc_1EC78
		dc.w    loc_1ECC2-loc_1EC78
		dc.w    loc_1ED94-loc_1EC78
loc_1EC80:
		move.w	8(a0),d0
		sub.w   (MainCharacter+8).w,d0
		cmpi.w	#$0080,d0
		bgt.s   loc_1EC9E
		cmpi.w	#$FF80,d0
		blt.s   loc_1EC9E
		addq.b	#$02,$0025(a0)
		move.b	#1,$001C(a0)
loc_1EC9E:
		rts
loc_1ECA0:
		subi.l	#$00018000,$000C(a0)
		move.w	$002A(a0),d0
		sub.w   $000C(a0),d0
		cmpi.w	#$0020,d0
		ble.s   loc_1ECC0
		addq.b	#$02,$0025(a0)
		move.w	#0,$002C(a0)
loc_1ECC0:
		rts
loc_1ECC2:
		subi.w	#$0001,$002C(a0)
		beq.w	 loc_1ED8E
		bpl.w	 loc_1ED8C
		move.w	#$001E,$002C(a0)
		jsr	 SingleObjLoad        ; (loc_E772)
		bne.s	loc_1Ed28
		_move.b	#$4A,0(a1)
		move.b	#$04,$0024(a1)
		move.l	#Octus_Mappings,$0004(a1) ; loc_1EDBC
		move.b	#$04,$001A(a1)
		move.w	#$24C6,$0002(a1)
		move.b	#$03,$0018(a1)
		move.b	#$10,$0019(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	#$001E,$002C(a1)
		move.b	$0001(a0),$0001(a1)
		move.b	$0022(a0),$0022(a1)
loc_1Ed28:
		jsr	 SingleObjLoad        ; (loc_E772)
		bne.s	loc_1ED8C
		_move.b	#$4A,0(a1)
		move.b	#$06,$0024(a1)
		move.l	#Octus_Mappings,$0004(a1) ; loc_1EDBC
		move.w	#$24C6,$0002(a1)
		move.b	#$04,$0018(a1)
		move.b	#$10,$0019(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.w	#$000F,$002C(a1)
		move.b	$0001(a0),$0001(a1)
		move.b	$0022(a0),$0022(a1)
		move.b	#$02,$001C(a1)
		move.w	#$FA80,$0010(a1)
		btst	#$00,$0001(a1)
		beq.s	loc_1ED8C
		neg.w	$0010(a1)
loc_1ED8C:
		rts
loc_1ED8E:
		addq.b	#$02,$0025(a0)
		rts
loc_1ED94:
		move.w	#$FFFA,d0
		btst	#$00,$0001(a0)
		beq.s	loc_1EDA2
		neg.w	d0
loc_1EDA2:
		add.w   d0,8(a0)
		bra.w	JmpTo23_MarkObjGone
loc_1EDAA:
		dc.w    loc_1EDB0-loc_1EDAA
		dc.w    loc_1EDB3-loc_1EDAA
		dc.w    loc_1EDB8-loc_1EDAA
loc_1EDB0:
		dc.b	$0F,$00,$FF
loc_1EDB3:
		dc.b	$03,$01,$02,$03,$FF
loc_1EDB8:
		dc.b	$02,$05,$06,$FF
Octus_Mappings:		
loc_1EDBC:
		dc.w    loc_1EDCA-loc_1EDBC
		dc.w    loc_1EDDC-loc_1EDBC
		dc.w    loc_1EDF6-loc_1EDBC
		dc.w    loc_1EE10-loc_1EDBC
		dc.w    loc_1EE2A-loc_1EDBC
		dc.w    loc_1EE34-loc_1EDBC
		dc.w    loc_1EE3E-loc_1EDBC
loc_1EDCA:
		dc.w	$0002
		dc.l	$F00d0000,$0000FFF0,$000d0008,$0004FFF0
loc_1EDDC:
		dc.w	$0003
		dc.l	$F00d0000,$0000FFF0,$00090010,$0008FFE8
		dc.l	$00090016,$000B0000
loc_1EDF6:
		dc.w	$0003
		dc.l	$F00d0000,$0000FFF0,$0009001C,$000EFFE8
		dc.l	$00090022,$00110000
loc_1EE10:
		dc.w	$0003
		dc.l	$F00d0000,$0000FFF0,$00090028,$0014FFE8
		dc.l	$0009002E,$00170000
loc_1EE2A:
		dc.w	$0001
		dc.l	$F0010034,$001AFFF7
loc_1EE34:
		dc.w	$0001
		dc.l	$F2010036,$001BFFF0
loc_1EE3E:
		dc.w	$0001
		dc.l	$F2010038,$001CFFF0				         
;=============================================================================== 
; Object 0x4A - Oil Ocean - Octus
; [ End ]		         
;===============================================================================    
; loc_1EE48:
JmpTo17_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_1EE4E:
JmpTo38_DeleteObject:
		jmp	(DeleteObject).l
; loc_1EE54:
JmpTo23_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1EE5A:
JmpTo11_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1EE60:
JmpTo5_ObjectMoveAndFall:
		jmp	(ObjectMoveAndFall).l

		align 4

;=============================================================================== 
; Object 0x4C - Hidden Palace - Batbot
; [ Begin ]		         
;=============================================================================== 
Obj_0x4C_Batbot: ; loc_1EE68:  
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1EE76(pc,d0),d1
		jmp     loc_1EE76(pc,d1)
loc_1EE76:
		dc.w    loc_1EE7C-loc_1EE76
		dc.w    loc_1EEBA-loc_1EE76
		dc.w    loc_1EF28-loc_1EE76
loc_1EE7C:		
		move.l	#Obj4C_MapUnc_1F106,$0004(a0)  ; loc_1F106
		move.w	#$2530,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		move.b	#$10,$0016(a0)
		move.b	#$08,$0017(a0)
		addq.b	#$02,$0024(a0)
		move.w	$000C(a0),$002E(a0)
		rts
loc_1EEBA:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1EEDA(pc,d0),d1
		jsr	 loc_1EEDA(pc,d1)
		bsr.w	loc_1EEE0
		lea	(loc_1F0d2).l,A1
		bsr.w	JmpTo12_AnimateSprite
		bra.w	JmpTo24_MarkObjGone
loc_1EEDA:
		dc.w    loc_1F046-loc_1EEDA
		dc.w    loc_1F07E-loc_1EEDA
		dc.w    loc_1F08A-loc_1EEDA		
loc_1EEE0:
		move.b	$003F(a0),d0
		jsr	(CalcSine).l		; loc_320A
		asr.w   #$06,d0
		add.w   $002E(a0),d0
		move.w	d0,$000C(a0)
		addq.b	#$04,$003F(a0)
		rts
loc_1EEFA:		
		move.w	8(a0),d0
		sub.w   (MainCharacter+8).w,d0
		cmpi.w	#$0080,d0
		bgt.s   loc_1EF26
		cmpi.w	#$FF80,d0
		blt.s   loc_1EF26
		move.b	#$04,$0025(a0)
		move.b	#$02,$001C(a0)
		move.w	#8,$002A(a0)
		move.b	#$00,$003E(a0)
loc_1EF26:
		rts
loc_1EF28:
		bsr.w	loc_1F026
		bsr.w	loc_1EFC8
		bsr.w	loc_1EF48
		bsr.w	JmpTo16_ObjectMove
		lea	(loc_1F0d2).l,A1
		bsr.w	JmpTo12_AnimateSprite
		bra.w	JmpTo24_MarkObjGone
		rts
loc_1EF48:
		tst.b	$003D(a0)
		beq.s	loc_1EF5A
		bset	#$00,$0001(a0)
		bset	#$00,$0022(a0)
loc_1EF5A:
		rts
loc_1EF5C:		
		subi.w	#$0001,$002C(a0)
		bpl.s	loc_1EFA6
		move.w	8(a0),d0
		sub.w   (MainCharacter+8).w,d0
		cmpi.w	#$0060,d0
		bgt.s   loc_1EFA8
		cmpi.w	#$FFA0,d0
		blt.s   loc_1EFA8
		tst.w	d0
		bpl.s	loc_1EF80
		st      $003D(a0)
loc_1EF80:
		move.b	#$40,$003F(a0)
		move.w	#$0400,$0014(a0)
		move.b	#$04,$0024(a0)
		move.b	#$03,$001C(a0)
		move.w	#$000C,$002A(a0)
		move.b	#1,$003E(a0)
		moveq	#0,d0
loc_1EFA6:
		rts
loc_1EFA8:
		cmpi.w	#$0080,d0
		bgt.s   loc_1EFB4
		cmpi.w	#$FF80,d0
		bgt.s   loc_1EFA6
loc_1EFB4:
		move.b	#1,$001C(a0)
		move.b	#$00,$0025(a0)
		move.w	#$0018,$002A(a0)
		rts
loc_1EFC8:
		tst.b	$003D(a0)
		bne.s	loc_1EFE2
		moveq	#0,d0
		move.b	$003F(a0),d0
		cmpi.w	#$00C0,d0
		bge.s   loc_1EFF6
		addq.b	#$02,d0
		move.b	d0,$003F(a0)
		rts
loc_1EFE2:
		moveq	#0,d0
		move.b	$003F(a0),d0
		cmpi.w	#$00C0,d0
		beq.s	loc_1EFF6
		subq.b	#$02,d0
		move.b	d0,$003F(a0)
		rts
loc_1EFF6:
		sf      $003D(a0)
		move.b	#$00,$001C(a0)
		move.b	#$02,$0024(a0)
		move.b	#$00,$0025(a0)
		move.w	#$0018,$002A(a0)
		move.b	#1,$001C(a0)
		bclr	#$00,$0001(a0)
		bclr	#$00,$0022(a0)
		rts
loc_1F026:
		move.b	$003F(a0),d0
		jsr	(CalcSine).l		; loc_320A
		muls.w  $0014(a0),d1
		asr.l   #$08,d1
		move.w	d1,$0010(a0)
		muls.w  $0014(a0),d0
		asr.l   #$08,d0
		move.w	d0,$0012(a0)
		rts
loc_1F046:
		subi.w	#$0001,$002A(a0)
		bpl.s	loc_1F07C
		bsr.w	loc_1EEFA
		beq.s	loc_1F07C
		jsr	 (PseudoRandomNumber).l      ; loc_31E4
		andi.b	#$FF,d0
		bne.s	loc_1F07C
		move.w	#$0018,$002A(a0)
		move.w	#$001E,$002C(a0)
		addq.b	#$02,$0025(a0)
		move.b	#1,$001C(a0)
		move.b	#$00,$003E(a0)
loc_1F07C:
		rts
loc_1F07E:
		subq.b	#1,$002A(a0)
		bpl.s	loc_1F088
		subq.b	#$02,$0025(a0)
loc_1F088:
		rts
loc_1F08A:
		bsr.w	loc_1EF5C
		beq.s	loc_1F0d0
		subi.w	#$0001,$002A(a0)
		bne.s	loc_1F0d0
		move.b	$003E(a0),d0
		beq.s	loc_1F0B8
		move.b	#$00,$003E(a0)
		move.w	#8,$002A(a0)
		bset	#$00,$0001(a0)
		bset	#$00,$0022(a0)
		rts
loc_1F0B8:
		move.b	#1,$003E(a0)
		move.w	#$000C,$002A(a0)
		bclr	#$00,$0001(a0)
		bclr	#$00,$0022(a0)
loc_1F0d0:
		rts
loc_1F0d2:
		dc.w    loc_1F0DA-loc_1F0d2
		dc.w    loc_1F0DE-loc_1F0d2
		dc.w    loc_1F0ED-loc_1F0d2
		dc.w    loc_1F0FE-loc_1F0d2
loc_1F0DA:  
		dc.b	$01,$00,$05,$FF
loc_1F0DE:
		dc.b	$01,$01,$06,$01,$06,$02,$07,$02,$07,$01,$06,$01,$06,$FD,$00
loc_1F0ED:
		dc.b	$01,$01,$06,$01,$06,$02,$07,$03,$08,$04,$09,$04,$09,$03,$08,$FE
		dc.b	$0A
loc_1F0FE:
		dc.b	$03,$0A,$0B,$0C,$0D,$0E,$FF,$00
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj4C_MapUnc_1F106:	binclude	"mappings/sprite/obj4C.bin"
; ===========================================================================
		align 4
; loc_1F2DC:
JmpTo24_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1F2E2:
JmpTo12_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1F2E8:
JmpTo16_ObjectMove:
		jmp	(ObjectMove).l

		align 4

;=============================================================================== 
; Object 0x4E - (Desert Level) - Crocobot 
; [ Begin ]		         
;===============================================================================		   
Obj_0x4E_Crocobot: ; loc_1F2F0:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1F2FE(pc,d0),d1
		jmp     loc_1F2FE(pc,d1)
loc_1F2FE:
		dc.w    loc_1F302-loc_1F2FE
		dc.w    loc_1F352-loc_1F2FE
loc_1F302:
		move.l	#Crocobot_Mappings,$0004(a0) ; loc_1F420
		move.w	#$2300,$0002(a0)
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		move.b	#$10,$0016(a0)
		move.b	#$08,$0017(a0)
		bsr.w	JmpTo6_ObjectMoveAndFall
		jsr	 ObjHitFloor             ; (loc_13898)
		tst.w	d1
		bpl.s	loc_1F350
		add.w   d1,$000C(a0)
		move.w	#0,$0012(a0)
		addq.b	#$02,$0024(a0)
loc_1F350:
		rts
loc_1F352:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1F36E(pc,d0),d1
		jsr	 loc_1F36E(pc,d1)
		lea	(loc_1F406).l,A1
		bsr.w	JmpTo13_AnimateSprite
		bra.w	JmpTo25_MarkObjGone
loc_1F36E:
		dc.w    loc_1F372-loc_1F36E
		dc.w    loc_1F396-loc_1F36E
loc_1F372:
		subq.w	#1,$0030(a0)
		bpl.s	loc_1F394
		addq.b	#$02,$0025(a0)
		move.w	#$FF40,$0010(a0)
		move.b	#$00,$001C(a0)
		bchg    #0,$0022(a0)
		bne.s	loc_1F394
		neg.w	$0010(a0)
loc_1F394:
		rts
loc_1F396:
		bsr.w	loc_1F3CE
		bsr.w	JmpTo17_ObjectMove
		jsr	 ObjHitFloor             ; (loc_13898)
		cmpi.w	#$FFF8,d1
		blt.s   loc_1F3B6
		cmpi.w	#$000C,d1
		bge.s   loc_1F3B6
		add.w   d1,$000C(a0)
		rts
loc_1F3B6:
		subq.b	#$02,$0025(a0)
		move.w	#$003B,$0030(a0)
		move.w	#0,$0010(a0)
		move.b	#1,$001C(a0)
		rts
loc_1F3CE:
		move.w	8(a0),d0
		sub.w   (MainCharacter+8).w,d0
		bmi.s	loc_1F3E8
		cmpi.w	#$0040,d0
		bgt.s   loc_1F3FE
		btst	#$00,$0022(a0)
		beq.s	loc_1F3F6
		rts
loc_1F3E8:
		cmpi.w	#$FFC0,d0
		blt.s   loc_1F3FE
		btst	#$00,$0022(a0)
		beq.s	loc_1F3FE
loc_1F3F6:
		move.b	#$02,$001C(a0)
		rts
loc_1F3FE:
		move.b	#$00,$001C(a0)
		rts      

loc_1F406:
		dc.w    loc_1F40C-loc_1F406
		dc.w    loc_1F414-loc_1F406
		dc.w    loc_1F417-loc_1F406
loc_1F40C:
		dc.b	$03,$00,$04,$02,$03,$01,$05,$FF
loc_1F414:
		dc.b	$0F,$00,$FF
loc_1F417:
		dc.b	$03,$06,$0A,$08,$09,$07,$0B,$FF,$00
Crocobot_Mappings:		
loc_1F420:
		dc.w    loc_1F438-loc_1F420
		dc.w    loc_1F45A-loc_1F420
		dc.w    loc_1F47C-loc_1F420
		dc.w    loc_1F49E-loc_1F420
		dc.w    loc_1F4C0-loc_1F420
		dc.w    loc_1F4E2-loc_1F420
		dc.w    loc_1F504-loc_1F420
		dc.w    loc_1F526-loc_1F420
		dc.w    loc_1F548-loc_1F420
		dc.w    loc_1F56A-loc_1F420
		dc.w    loc_1F58C-loc_1F420
		dc.w    loc_1F5AE-loc_1F420
loc_1F438:
		dc.w	$0004
		dc.l	$F80E0000,$0000FFE4,$F8050018,$000C0004
		dc.l	$0001001C,$000E0004,$00050020,$0010000C
loc_1F45A:
		dc.w	$0004
		dc.l	$F80E0000,$0000FFE4,$F8050018,$000C0004
		dc.l	$0001001C,$000E0004,$00050024,$0012000C
loc_1F47C:
		dc.w	$0004
		dc.l	$F80E0000,$0000FFE4,$F8050018,$000C0004
		dc.l	$0001001C,$000E0004,$00050028,$0014000C
loc_1F49E:
		dc.w	$0004
		dc.l	$F80E0000,$0000FFE4,$F8050018,$000C0004
		dc.l	$0001001E,$000F0004,$00050020,$0010000C
loc_1F4C0:
		dc.w	$0004
		dc.l	$F80E0000,$0000FFE4,$F8050018,$000C0004
		dc.l	$0001001E,$000F0004,$00050024,$0012000C
loc_1F4E2:
		dc.w	$0004
		dc.l	$F80E0000,$0000FFE4,$F8050018,$000C0004
		dc.l	$0001001E,$000F0004,$00050028,$0014000C
loc_1F504:
		dc.w	$0004
		dc.l	$F00B000C,$0006FFEC,$F8050018,$000C0004
		dc.l	$0001001C,$000E0004,$00050020,$0010000C
loc_1F526:
		dc.w	$0004
		dc.l	$F00B000C,$0006FFEC,$F8050018,$000C0004
		dc.l	$0001001C,$000E0004,$00050024,$0012000C
loc_1F548:
		dc.w	$0004
		dc.l	$F00B000C,$0006FFEC,$F8050018,$000C0004
		dc.l	$0001001C,$000E0004,$00050028,$0014000C
loc_1F56A:
		dc.w	$0004
		dc.l	$F00B000C,$0006FFEC,$F8050018,$000C0004
		dc.l	$0001001E,$000F0004,$00050020,$0010000C
loc_1F58C:
		dc.w	$0004
		dc.l	$F00B000C,$0006FFEC,$F8050018,$000C0004
		dc.l	$0001001E,$000F0004,$00050024,$0012000C
loc_1F5AE:
		dc.w	$0004
		dc.l	$F00B000C,$0006FFEC,$F8050018,$000C0004
		dc.l	$0001001E,$000F0004,$00050028,$0014000C		
;=============================================================================== 
; Object 0x4E - (Desert Level) - Crocobot 
; [ End ]		         
;===============================================================================		 
; loc_1F5d0:
JmpTo25_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1F5d6:
JmpTo13_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1F5DC:
JmpTo6_ObjectMoveAndFall:
		jmp	(ObjectMoveAndFall).l
; loc_1F5E2:
JmpTo17_ObjectMove:
		jmp	(ObjectMove).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 53 - Masher (jumping piranha fish badnik) from GHZ
; ---------------------------------------------------------------------------
; Sprite_1F5E8: Obj_0x53_Masher:
Obj53:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj53_Index(pc,d0.w),d1
		jsr	Obj53_Index(pc,d1.w)
		bra.w	JmpTo26_MarkObjGone
; ===========================================================================
; off_1F5FA:
Obj53_Index:
		dc.w    Obj53_Init-Obj53_Index
		dc.w    Obj53_Main-Obj53_Index
; ===========================================================================
; loc_1F5FE:
Obj53_Init:
		addq.b	#2,routine(a0)
		move.l	#Obj53_MapUnc_1F696,4(a0)
		move.w	#$41C,2(a0)
		bsr.w	JmpTo34_Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#9,$20(a0)
		move.b	#$10,$19(a0)
		move.w	#-$400,$12(a0)
		move.w	$C(a0),$30(a0)
; loc_1F638:
Obj53_Main:
		lea	(Ani_obj5C).l,a1
		bsr.w	JmpTo14_AnimateSprite
		bsr.w	JmpTo18_ObjectMove
		addi.w	#$18,$12(a0)
		move.w	$30(a0),d0
		cmp.w	$C(a0),d0
		bcc.s	+
		move.w	d0,$C(a0)
		move.w	#-$500,$12(a0)
+
		move.b	#1,$1C(a0)
		subi.w	#$C0,d0
		cmp.w	$C(a0),d0
		bcc.s	return_1F682
		move.b	#0,$1C(a0)
		tst.w	$12(a0)
		bmi.s	return_1F682
		move.b	#2,$1C(a0)

return_1F682:
		rts
; ===========================================================================
; animation script
; off_1F684:
Ani_obj5C:	dc.w	byte_1F68A-Ani_obj5C
		dc.w	byte_1F68E-Ani_obj5C
		dc.w	byte_1F692-Ani_obj5C
byte_1F68A:	dc.b	7, 0, 1,$FF
byte_1F68E:	dc.b	3, 0, 1,$FF
byte_1F692:	dc.b	7, 0,$FF
		even
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj53_MapUnc_1F696:	binclude	"mappings/sprite/obj53.bin"

; ===========================================================================
		align 4
; loc_1F6d0:
JmpTo26_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1F6d6:
JmpTo14_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1F6DC:
JmpTo34_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1F6E2:
JmpTo18_ObjectMove:
		jmp	(ObjectMove).l
;=============================================================================== 
; Object 0x54 - Green Hill - Motobug
; [ Begin ]		         
;===============================================================================  
Obj_0x54_Motobug: ; loc_1F6E8:		 
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1F6F6(pc,d0),d1
		jmp     loc_1F6F6(pc,d1)
loc_1F6F6:		
		dc.w    loc_1F700-loc_1F6F6
		dc.w    loc_1F7A0-loc_1F6F6
		dc.w    loc_1F8CC-loc_1F6F6
		dc.w    loc_1F904-loc_1F6F6
		dc.w    loc_1F88A-loc_1F6F6
loc_1F700:
		move.l	#Obj54_MapUnc_1F938,$0004(a0) ; loc_1F938
		move.w	#$0402,$0002(a0)
		bsr.w	JmpTo35_Adjust2PArtPointer
		ori.b   #$04,$0001(a0)
		move.b	#$0A,$0020(a0)
		move.b	#$04,$0018(a0)
		move.b	#$10,$0019(a0)
		move.b	#$10,$0016(a0)
		move.b	#$0E,$0017(a0)
		bsr.w	JmpTo13_SingleObjLoad2
		bne.s	loc_1F788
		_move.b	#$54,0(a1)
		move.b	#$06,$0024(a1)
		move.l	#Obj54_MapUnc_1F938,$0004(a1) ; loc_1F938
		move.w	#$2402,$0002(a1)
		bsr.w	JmpTo5_Adjust2PArtPointer2
		move.b	#$03,$0018(a1)
		move.b	#$10,$0019(a1)
		move.b	$0022(a0),$0022(a1)
		move.b	$0001(a0),$0001(a1)
		move.l	A0,$002A(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		move.b	#$02,$001A(a1)
loc_1F788:
		addq.b	#$02,$0024(a0)
		move.w	#$FF80,d0
		btst	#$00,$0022(a0)
		beq.s	loc_1F79A
		neg.w	d0
loc_1F79A:
		move.w	d0,$0010(a0)
		rts
loc_1F7A0:
		bsr.w	loc_1F7E8
		bsr.w	JmpTo19_ObjectMove
		jsr	 ObjHitFloor             ; loc_13898
		cmpi.w	#$FFF8,d1
		blt.s   loc_1F7CC
		cmpi.w	#$000C,d1
		bge.s   loc_1F7CC
		add.w   d1,$000C(a0)
		lea	(loc_1F92C).l,A1
		bsr.w	JmpTo15_AnimateSprite
		bra.w	JmpTo2_MarkObjGone_P1
loc_1F7CC:
		addq.b	#$02,$0024(a0)
		move.w	#$0014,$0030(a0)
		st      $0034(a0)
		lea	(loc_1F92C).l,A1
		bsr.w	JmpTo15_AnimateSprite
		bra.w	JmpTo2_MarkObjGone_P1
loc_1F7E8:
		tst.b	$0035(a0)
		bne.s	loc_1F82A
		move.w	(MainCharacter+8).w,d0
		sub.w   8(a0),d0
		cmpi.w	#$0064,d0
		bgt.s   loc_1F82A
		cmpi.w	#$FF9C,d0
		blt.s   loc_1F82A
		tst.w	d0
		bmi.s	loc_1F810
		btst	#$00,$0022(a0)
		beq.s	loc_1F82A
		bra.s	loc_1F818
loc_1F810:
		btst	#$00,$0022(a0)
		bne.s	loc_1F82A
loc_1F818:
		move.w	$0010(a0),d0
		asl.w   #$02,d0
		move.w	d0,$0010(a0)
		st      $0035(a0)
		bsr.w	loc_1F82C
loc_1F82A:
		rts
loc_1F82C:
		bsr.w	JmpTo13_SingleObjLoad2
		bne.s	loc_1F888
		_move.b	#$54,0(a1)
		move.b	#$08,$0024(a1)
		move.l	#Obj4B_MapUnc_1EB0E,$0004(a1) ; Obj4B_MapUnc_1EB0E
		move.w	#$03E6,$0002(a1)
		bsr.w	JmpTo5_Adjust2PArtPointer2
		move.b	#$04,$0018(a1)
		move.b	#$10,$0019(a1)
		move.b	$0022(a0),$0022(a1)
		move.b	$0001(a0),$0001(a1)
		move.l	A0,$002A(a1)
		move.w	8(a0),8(a1)
		move.w	$000C(a0),$000C(a1)
		addq.w	#$07,$000C(a1)
		addi.w	#$000D,8(a1)
		move.b	#1,$001C(a1)
loc_1F888:
		rts
loc_1F88A:
		move.l	$002A(a0),A1
		cmpi.b	#$54,(a1)
		bne.w	 JmpTo39_DeleteObject
		tst.b	$0034(a1)
		bne.w	 JmpTo39_DeleteObject
		move.w	8(a1),8(a0)
		move.w	$000C(a1),$000C(a0)
		addq.w	#$07,$000C(a0)
		moveq	#$0D,d0
		btst	#$00,$0022(a0)
		beq.s	loc_1F8BA
		neg.w	d0
loc_1F8BA:
		add.w   d0,8(a0)
		lea	(loc_1EAF2).l,A1
		bsr.w	JmpTo15_AnimateSprite
		bra.w	JmpTo2_MarkObjGone_P1
loc_1F8CC:
		subi.w	#$0001,$0030(a0)
		bpl.w	 JmpTo2_MarkObjGone_P1
		neg.w	$0010(a0)
		bsr.w	JmpTo7_ObjectMoveAndFall
		move.w	$0010(a0),d0
		asr.w   #$02,d0
		move.w	d0,$0010(a0)
		bchg    #0,$0022(a0)
		bchg    #0,$0001(a0)
		subq.b	#$02,$0024(a0)
		sf      $0034(a0)
		sf      $0035(a0)
		bra.w	JmpTo2_MarkObjGone_P1
loc_1F904:
		move.l	$002A(a0),A1
		cmpi.b	#$54,(a1)
		bne.w	 JmpTo39_DeleteObject
		move.w	8(a1),8(a0)
		move.w	$000C(a1),$000C(a0)
		move.b	$0022(a1),$0022(a0)
		move.b	$0001(a1),$0001(a0)
		bra.w	JmpTo2_MarkObjGone_P1
loc_1F92C:
		dc.w    loc_1F930-loc_1F92C
		dc.w    loc_1F934-loc_1F92C
loc_1F930:
		dc.b	$05,$00,$01,$FF
loc_1F934:
		dc.b	$01,$00,$01,$FF
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj54_MapUnc_1F938:	binclude	"mappings/sprite/obj54.bin"

;=============================================================================== 
; Object 0x54 - Green Hill - Motobug
; [ End ]		         
;=============================================================================== 
; loc_1F96C:
JmpTo39_DeleteObject:
		jmp	(DeleteObject).l
; loc_1F972:
JmpTo13_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_1F978:
JmpTo15_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1F97E:
JmpTo5_Adjust2PArtPointer2:
		jmp	(Adjust2PArtPointer2).l
; loc_1F984:
JmpTo2_MarkObjGone_P1:
		jmp	(MarkObjGone_P1).l
; loc_1F98A:
JmpTo35_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1F990:
JmpTo7_ObjectMoveAndFall:
		jmp	(ObjectMoveAndFall).l
; loc_1F996:
JmpTo19_ObjectMove:
		jmp	(ObjectMove).l

;=============================================================================== 
; Object 0x57 - 
; [ Begin ]		         
;===============================================================================		    
Obj_0x57: ; loc_1F99C:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1F9AA(pc,d0),d1
		jmp     loc_1F9AA(pc,d1)
loc_1F9AA:
		dc.w    loc_1F9B6-loc_1F9AA
		dc.w    loc_1F9DC-loc_1F9AA
		dc.w    loc_1FA38-loc_1F9AA
		dc.w    loc_1FA6A-loc_1F9AA
		dc.w    loc_1FA94-loc_1F9AA
		dc.w    loc_1FAAE-loc_1F9AA
loc_1F9B6:
		move.b	#$00,$0020(a0)
		cmpi.w	#$29d0,8(a0)
		ble.s   loc_1F9CE
		subi.w	#$0001,8(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1F9CE:
		move.w	#$29d0,8(a0)
		addq.b	#$02,$0025(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1F9DC:
		moveq	#0,d0
		move.b	$002C(a0),d0
		move.w	loc_1F9EA(pc,d0),d1
		jmp     loc_1F9EA(pc,d1)
loc_1F9EA:
		dc.w    loc_1F9EE-loc_1F9EA
		dc.w    loc_1FA14-loc_1F9EA
loc_1F9EE:
		cmpi.w	#$041E,$000C(a0)
		bge.s   loc_1FA00
		addi.w	#$0001,$000C(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1FA00:
		addq.b	#$02,$002C(a0)
		bset	#$00,$002D(a0)
		move.w	#$003C,$002A(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1FA14:
		subi.w	#$0001,$002A(a0)
		bpl.w	 JmpTo18_DisplaySprite
		move.w	#$FE00,$0010(a0)
		addq.b	#$02,$0025(a0)
		move.b	#$0F,$0020(a0)
		bset	#1,$002D(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1FA38:
		bsr.w	loc_1FBA8
		bsr.w	loc_1FB86
		move.w	$002E(a0),d0
		lsr.w	#1,d0
		subi.w	#$0014,d0
		move.w	d0,$000C(a0)
		move.w	#0,$002E(a0)
		move.l	8(a0),d2
		move.w	$0010(a0),d0
		ext.l   d0
		asl.l   #$08,d0
		add.l   d0,d2
		move.l	d2,8(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1FA6A:
		subq.w	#1,$003C(a0)
		dc.w	$6A00,$0000
		bset	#$00,$0022(a0)
		bclr	#$07,$0022(a0)
		clr.w	$0010(a0)
		addq.b	#$02,$0025(a0)
		move.w	#$FFDA,$003C(a0)
		move.w	#$000C,$002A(a0)
		rts
loc_1FA94:
		addq.w	#1,$000C(a0)
		subq.w	#1,$002A(a0)
		bpl.w	 JmpTo18_DisplaySprite
		addq.b	#$02,$0025(a0)
		move.b	#$00,$002C(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1FAAE:
		moveq	#0,d0
		move.b	$002C(a0),d0
		move.w	loc_1FAC0(pc,d0),d1
		jsr	 loc_1FAC0(pc,d1)
		bra.w	JmpTo18_DisplaySprite
loc_1FAC0:
		dc.w    loc_1FAC6-loc_1FAC0
		dc.w    loc_1FB3E-loc_1FAC0
		dc.w    loc_1FB58-loc_1FAC0
loc_1FAC6:
		bclr	#$00,$002D(a0)
		bsr.w	JmpTo14_SingleObjLoad2
		bne.w	 JmpTo18_DisplaySprite
		_move.b	#$58,0(a1)
		move.l	A0,$0034(a1)
		move.l	#Obj_0x57_Mappings,$0004(a1) ; loc_20168
		move.w	#$2540,$0002(a1)
		bsr.w	JmpTo6_Adjust2PArtPointer2
		move.b	#$04,$0001(a1)
		move.b	#$20,$0019(a1)
		move.b	#$04,$0018(a1)
		move.l	8(a0),8(a1)
		move.l	$000C(a0),$000C(a1)
		addi.w	#$000C,$000C(a1)
		move.b	$0022(a0),$0022(a1)
		move.b	$0001(a0),$0001(a1)
		move.b	#$08,$0024(a1)
		move.b	#$02,$001C(a1)
		move.w	#$0010,$002A(a1)
		move.w	#$0032,$002A(a0)
		addq.b	#$02,$002C(a0)
		rts
loc_1FB3E:
		subi.w	#$0001,$002A(a0)
		bpl.s	loc_1FB56
		bset	#$02,$002D(a0)
		move.w	#$0060,$002A(a0)
		addq.b	#$02,$002C(a0)
loc_1FB56:
		rts
loc_1FB58:
		subq.w	#1,$000C(a0)
		subi.w	#$0001,$002A(a0)
		bpl.s	loc_1FB84
		addq.w	#1,$000C(a0)
		addq.w	#$02,8(a0)
		cmpi.w	#$2B08,8(a0)
		bcs.s	loc_1FB84
		tst.b	(Boss_defeated_flag).w
		bne.s	loc_1FB84
		move.b	#1,(Boss_defeated_flag).w
		bra.w	JmpTo40_DeleteObject
loc_1FB84:
		rts
loc_1FB86:
		move.w	8(a0),d0
		cmpi.w	#$2720,d0
		ble.s   loc_1FB96
		cmpi.w	#$2B08,d0
		blt.s   loc_1FBA6
loc_1FB96:
		bchg    #0,$0022(a0)
		bchg    #0,$0001(a0)
		neg.w	$0010(a0)
loc_1FBA6:
		rts
loc_1FBA8:
		cmpi.b	#$06,$0025(a0)
		bcc.s	loc_1FBEE
		tst.b	$0022(a0)
		bmi.s	loc_1FBF0
		tst.b	$0020(a0)
		bne.s	loc_1FBEE
		tst.b	$003E(a0)
		bne.s	loc_1FBd2
		move.b	#$20,$003E(a0)
		move.w	#SndID_BossHit,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_1FBd2:
		lea	(Normal_palette_line2+2).w,A1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_1FBE0
		move.w	#$0EEE,d0
loc_1FBE0:
		move.w	d0,(a1)
		subq.b	#1,$003E(a0)
		bne.s	loc_1FBEE
		move.b	#$0F,$0020(a0)
loc_1FBEE:
		rts
loc_1FBF0:
		moveq	#$64,d0
		bsr.w	AddPoints               ; loc_22Fd0
		move.b	#$06,$0025(a0)
		move.w	#$00B3,$003C(a0)
		bset	#$03,$002D(a0)
		rts		       
;=============================================================================== 
; Object 0x57 - 
; [ End ]		         
;===============================================================================   

;=============================================================================== 
; Object 0x58 - 
; [ Begin ]		         
;===============================================================================  
Obj_0x58: ; loc_1FC0A:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_1FC18(pc,d0),d1
		jmp     loc_1FC18(pc,d1)
loc_1FC18:
		dc.w    loc_1FC46-loc_1FC18
		dc.w    loc_1FCCC-loc_1FC18
		dc.w    loc_1Fd1E-loc_1FC18
		dc.w    loc_1FE00-loc_1FC18
		dc.w    loc_1FC22-loc_1FC18
loc_1FC22:
		subi.w	#$0001,$000C(a0)
		subi.w	#$0001,$002A(a0)
		bpl.w	 JmpTo18_DisplaySprite
		move.b	#$00,$0024(a0)
		lea	(loc_2012E).l,A1
		bsr.w	JmpTo16_AnimateSprite
		bra.w	JmpTo18_DisplaySprite
loc_1FC46:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1FC54(pc,d0),d1
		jmp     loc_1FC54(pc,d1)
loc_1FC54:
		dc.w    loc_1FC58-loc_1FC54
		dc.w    loc_1FCA2-loc_1FC54
loc_1FC58:
		move.l	$0034(a0),A1
		cmpi.b	#$55,(a1)
		bne.w	 JmpTo40_DeleteObject
		btst	#$00,$002D(a1)
		beq.s	loc_1FC7C
		move.b	#1,$001C(a0)
		move.w	#$0018,$002A(a0)
		addq.b	#$02,$0025(a0)
loc_1FC7C:
		move.w	8(a1),8(a0)
		move.w	$000C(a1),$000C(a0)
		move.b	$0022(a1),$0022(a0)
		move.b	$0001(a1),$0001(a0)
		lea	(loc_2012E).l,A1
		bsr.w	JmpTo16_AnimateSprite
		bra.w	JmpTo18_DisplaySprite
loc_1FCA2:
		subi.w	#$0001,$002A(a0)
		bpl.s	loc_1FCBE
		cmpi.w	#$FFF0,$002A(a0)
		ble.w    JmpTo40_DeleteObject
		addi.w	#$0001,$000C(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1FCBE:
		lea	(loc_2012E).l,A1
		bsr.w	JmpTo16_AnimateSprite
		bra.w	JmpTo18_DisplaySprite
loc_1FCCC:
		move.l	$0034(a0),A1
		cmpi.b	#$55,(a1)
		bne.w	 JmpTo40_DeleteObject
		btst	#1,$002D(a1)
		beq.w	 JmpTo18_DisplaySprite
		btst	#$02,$002D(a1)
		bne.w	 loc_1Fd0E
		move.w	8(a1),8(a0)
		move.w	$000C(a1),$000C(a0)
		addi.w	#8,$000C(a0)
		move.b	$0022(a1),$0022(a0)
		move.b	$0001(a1),$0001(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1Fd0E:
		move.b	#$08,$001A(a0)
		move.b	#$00,$0018(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1Fd1E:
		moveq	#0,d0
		move.b	$0025(a0),d0
		move.w	loc_1Fd2C(pc,d0),d1
		jmp     loc_1Fd2C(pc,d1)
loc_1Fd2C:
		dc.w    loc_1Fd34-loc_1Fd2C
		dc.w    loc_1Fd52-loc_1Fd2C
		dc.w    loc_1FDB2-loc_1Fd2C
		dc.w    loc_1FDDE-loc_1Fd2C
loc_1Fd34:
		move.l	$0034(a0),A1
		cmpi.b	#$55,(a1)
		bne.w	 JmpTo40_DeleteObject
		btst	#1,$002D(a1)
		beq.w	 JmpTo18_DisplaySprite
		addq.b	#$02,$0025(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1Fd52:
		move.l	$0034(a0),A1
		cmpi.b	#$55,(a1)
		bne.w	 JmpTo40_DeleteObject
		move.b	$0022(a1),$0022(a0)
		move.b	$0001(a1),$0001(a0)
		tst.b	$0022(a0)
		bpl.s	loc_1Fd74
		addq.b	#$02,$0025(a0)
loc_1Fd74:
		bsr.w	loc_1FB86
		bsr.w	JmpTo8_ObjectMoveAndFall
		jsr	(ObjHitFloor).l	; (loc_13898)
		tst.w	d1
		bpl.s	loc_1FD8A
		add.w   d1,$C(a0)
loc_1FD8A:
		move.w	#$100,$12(a0)
		cmpi.b	#1,$18(a0)
		bne.s	loc_1FDA4
		move.w	$C(a0),d0
		move.l	$34(a0),A1
		add.w   d0,$2E(a1)
loc_1FDA4:
		lea	(loc_2023C).l,A1
		bsr.w	JmpTo16_AnimateSprite
		bra.w	JmpTo18_DisplaySprite
loc_1FDB2:
		subi.w	#1,$2A(a0)
		bpl.w	JmpTo18_DisplaySprite
		addq.b	#2,$25(a0)
		move.w	#$A,$2A(a0)
		move.w	#$FD00,$12(a0)
		cmpi.b	#1,$18(a0)
		beq.w	JmpTo18_DisplaySprite
		neg.w	$10(a0)
		bra.w	JmpTo18_DisplaySprite
loc_1FDDE:
		subq.w	#1,$2A(a0)
		bpl.w	JmpTo18_DisplaySprite
		bsr.w	JmpTo8_ObjectMoveAndFall
		bsr.w	JmpTo2_ObjHitFloor
		tst.w	d1
		bpl.s	loc_1FDFC
		move.w	#-$200,$12(a0)
		add.w   d1,$C(a0)
loc_1FDFC:
		bra.w	JmpTo27_MarkObjGone
loc_1FE00:
		move.l	$34(a0),A1
		cmpi.b	#$55,(a1)
		bne.w	JmpTo40_DeleteObject
		btst	#3,$2D(a1)
		bne.s	loc_1FE66
		bsr.w	loc_1FE86
		btst	#1,$2D(a1)
		beq.w	JmpTo18_DisplaySprite
		move.b	#$8B,$20(a0)
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		addi.w	#$10,$C(a0)
		move.w	#$FFCA,d0
		btst	#0,$22(a0)
		beq.s	loc_1FE54
		neg.w	d0
loc_1FE54:
		add.w   d0,8(a0)
		lea	(loc_2023C).l,A1
		bsr.w	JmpTo16_AnimateSprite
		bra.w	JmpTo18_DisplaySprite
loc_1FE66:
		move.w	#$FFFD,d0
		btst	#0,$22(a0)
		beq.s	loc_1FE74
		neg.w	d0
loc_1FE74:
		add.w   d0,8(a0)
		lea	(loc_2023C).l,A1
		bsr.w	JmpTo16_AnimateSprite
		bra.w	JmpTo18_DisplaySprite
loc_1FE86:
		cmpi.b	#1,$21(a1)
		beq.s	loc_1FE90
		rts
loc_1FE90:
		move.w	8(a0),d0
		sub.w   (MainCharacter+8).w,d0
		bpl.s	loc_1FEA4
		btst	#0,$22(a1)
		bne.s	loc_1FEAE
		rts
loc_1FEA4:
		btst	#0,$22(a1)
		beq.s	loc_1FEAE
		rts
loc_1FEAE:
		bset	#3,$2D(a1)
		rts
loc_1FEB6:
		jsr	(SingleObjLoad2).l	; (loc_E788)
		bne.s	loc_1FF2E
		_move.b	#$58,0(a1)
		move.l	A0,$34(a1)
		move.l	#loc_20250,4(a1)
		move.w	#$24C0,2(a1)
		bsr.w	JmpTo6_Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#1,$18(a1)
		move.b	#$10,$16(a1)
		move.b	#$10,$17(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#$1C,8(a1)
		addi.w	#$C,$C(a1)
		move.w	#-$200,$10(a1)
		move.b	#4,$24(a1)
		move.b	#4,$1A(a1)
		move.b	#1,$1C(a1)
		move.w	#$16,$2A(a1)
loc_1FF2E:
		jsr	(SingleObjLoad2).l	; (loc_E788)
		bne.s	loc_1FFA6
		_move.b	#$58,0(a1)
		move.l	A0,$34(a1)
		move.l	#loc_20250,4(a1)
		move.w	#$24C0,2(a1)
		bsr.w	JmpTo6_Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#1,$18(a1)
		move.b	#$10,$16(a1)
		move.b	#$10,$17(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#$FFF4,8(a1)
		addi.w	#$C,$C(a1)
		move.w	#-$200,$10(a1)
		move.b	#4,$24(a1)
		move.b	#4,$1A(a1)
		move.b	#1,$1C(a1)
		move.w	#$4B,$2A(a1)
loc_1FFA6:
		jsr	(SingleObjLoad2).l	; (loc_E788)
		bne.s	loc_2001E
		_move.b	#$58,0(a1)
		move.l	A0,$34(a1)
		move.l	#loc_20250,4(a1)
		move.w	#$24C0,2(a1)
		bsr.w	JmpTo6_Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#2,$18(a1)
		move.b	#$10,$16(a1)
		move.b	#$10,$17(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#$FFD4,8(a1)
		addi.w	#$C,$C(a1)
		move.w	#-$200,$10(a1)
		move.b	#4,$24(a1)
		move.b	#6,$1A(a1)
		move.b	#2,$1C(a1)
		move.w	#$30,$2A(a1)
loc_2001E:
		jsr	(SingleObjLoad2).l	; (loc_E788)
		bne.s	loc_2007E
		_move.b	#$58,0(a1)
		move.l	A0,$34(a1)
		move.l	#loc_20250,4(a1)
		move.w	#$24C0,2(a1)
		bsr.w	JmpTo6_Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#1,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#$FFCA,8(a1)
		addi.w	#8,$C(a1)
		move.b	#6,$24(a1)
		move.b	#1,$1A(a1)
		move.b	#0,$1C(a1)
loc_2007E:
		rts		
loc_20080:
		jsr	(SingleObjLoad2).l	; (loc_E788)
		bne.s	loc_200C8
		_move.b	#$58,0(a1)
		move.l	A0,$34(a1)
		move.l	#loc_20250,4(a1)
		move.w	#$4C0,2(a1)
		bsr.w	JmpTo6_Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#$20,$19(a1)
		move.b	#2,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#2,$24(a1)
loc_200C8:
		bsr.w	loc_1FEB6
		subi.w	#8,$38(a0)
		move.w	#$2A00,8(a0)
		move.w	#$2C0,$C(a0)
		jsr	(SingleObjLoad2).l	; (loc_E788)
		bne.s	loc_2012C
		_move.b	#$58,0(a1)
		move.l	A0,$34(a1)
		move.l	#loc_20168,4(a1)
		move.w	#$2540,2(a1)
		bsr.w	JmpTo6_Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#$20,$19(a1)
		move.b	#4,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$1E,$2A(a1)
		move.b	#0,$24(a1)
loc_2012C:
		rts		
loc_2012E:
		dc.w    loc_20134-loc_2012E
		dc.w    loc_20138-loc_2012E
		dc.w    loc_2014E-loc_2012E
loc_20134:
		dc.b	$01,$05,$06,$FF
loc_20138:
		dc.b	$01,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$00,$00,$00
		dc.b	$00,$00,$00,$00,$00,$FF
loc_2014E:
		dc.b	$01,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$03,$03,$03,$02
		dc.b	$02,$02,$01,$01,$01,$05,$06,$FE,$02,$00               
Obj_0x57_Mappings:
loc_20168:
		dc.w    loc_20176-loc_20168
		dc.w    loc_20180-loc_20168
		dc.w    loc_201AA-loc_20168
		dc.w    loc_201d4-loc_20168
		dc.w    loc_201EE-loc_20168
		dc.w    loc_20208-loc_20168
		dc.w    loc_20222-loc_20168
loc_20176:
		dc.w	$0001
		dc.l	$D8050000,$00000002
loc_20180:
		dc.w	$0005
		dc.l	$D8050004,$00020002,$D80d000C,$00060012
		dc.l	$D80d000C,$00060032,$D80d000C,$0006FFE2
		dc.l	$D80d000C,$0006FFC2
loc_201AA:
		dc.w	$0005
		dc.l	$D8050004,$00020002,$D80d000C,$00060012
		dc.l	$D8050008,$00040032,$D80d000C,$0006FFE2
		dc.l	$D8050008,$0004FFd2
loc_201d4:
		dc.w	$0003
		dc.l	$D8050004,$00020002,$D80d000C,$00060012
		dc.l	$D80d000C,$0006FFE2
loc_201EE:
		dc.w	$0003
		dc.l	$D8050004,$00020002,$D8050008,$00040012
		dc.l	$D8050008,$0004FFF2
loc_20208:
		dc.w	$0003
		dc.l	$D8050000,$00000002,$D80d000C,$00060012
		dc.l	$D80d000C,$00060032
loc_20222:
		dc.w	$0003
		dc.l	$D8050004,$00020002,$D80d000C,$0006FFE2
		dc.l	$D80d000C,$0006FFC2     
loc_2023C:
		dc.w    loc_20242-loc_2023C
		dc.w    loc_20247-loc_2023C
		dc.w    loc_2024B-loc_2023C
loc_20242:
		dc.b	$05,$01,$02,$03,$FF
loc_20247:
		dc.b	$01,$04,$05,$FF
loc_2024B:
		dc.b	$01,$06,$07,$FF,$00 

loc_20250:
		dc.w    loc_20262-loc_20250
		dc.w    loc_2027C-loc_20250
		dc.w    loc_20286-loc_20250
		dc.w    loc_20290-loc_20250
		dc.w    loc_2029A-loc_20250
		dc.w    loc_202A4-loc_20250
		dc.w    loc_202AE-loc_20250
		dc.w    loc_202B8-loc_20250
		dc.w    loc_202C2-loc_20250
loc_20262:
		dc.w	$0003
		dc.l	$F00F0000,$0000FFd0,$F00F0010,$0008FFF0
		dc.l	$F00F0020,$00100010
loc_2027C:
		dc.w	$0001
		dc.l	$F00F0030,$0018FFF0
loc_20286:
		dc.w	$0001
		dc.l	$F00F0040,$0020FFF0
loc_20290:
		dc.w	$0001
		dc.l	$F00F0050,$0028FFF0
loc_2029A:
		dc.w	$0001
		dc.l	$F00F0060,$0030FFF0
loc_202A4:
		dc.w	$0001
		dc.l	$F00F1060,$1030FFF0
loc_202AE:
		dc.w	$0001
		dc.l	$F00F0070,$0038FFF0
loc_202B8:
		dc.w	$0001
		dc.l	$F00F1070,$1038FFF0
loc_202C2:
		dc.w	$0003
		dc.l	$F00F8000,$8000FFd0,$F00F8010,$8008FFF0
		dc.l	$F00F8020,$80100010				       
;=============================================================================== 
; Object 0x58 - 
; [ End ]		         
;===============================================================================    
; loc_202DC:
JmpTo18_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_202E2:
JmpTo40_DeleteObject:
		jmp	(DeleteObject).l
; loc_202E8:
JmpTo27_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_202EE:
JmpTo14_SingleObjLoad2:
		jmp	(SingleObjLoad2).l
; loc_202F4:
JmpTo16_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_202FA:
JmpTo6_Adjust2PArtPointer2:
		jmp	(Adjust2PArtPointer2).l
; loc_20300:
JmpTo2_ObjHitFloor:
		jmp	(ObjHitFloor).l
; loc_20306:
JmpTo8_ObjectMoveAndFall:
		jmp	(ObjectMoveAndFall).l

;=============================================================================== 
; Object 0x55 - Ghz Boss
; [ Begin ]		         
;===============================================================================		 
Obj_0x55_Ghz_Boss: ; loc_2030C:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_2031A(pc,d0),d1
		jmp	loc_2031A(pc,d1)
loc_2031A:
		dc.w    loc_20324-loc_2031A
		dc.w    loc_2044E-loc_2031A
		dc.w    loc_2048C-loc_2031A
		dc.w    loc_204BE-loc_2031A
		dc.w    loc_20560-loc_2031A
loc_20324:
		move.l	#Ghz_Boss_Mappings,4(a0) ; loc_206BA
		move.w	#$2400,2(a0)
		ori.b   #4,1(a0)
		move.b	#$20,$19(a0)
		move.b	#3,$18(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$21(a0)
		addq.b	#2,$24(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$38(a0)
		move.b	$28(a0),d0
		cmpi.b	#$81,d0
		bne.s	loc_20370
		addi.w	#$60,2(a0)
loc_20370:
		bsr.w	JmpTo36_Adjust2PArtPointer
		jsr	(SingleObjLoad2).l	; (loc_E788)
		bne.w	loc_20434
		_move.b	#$55,0(a1)
		move.l	A0,$34(a1)
		move.l	A1,$34(a0)
		move.l	#Ghz_Boss_Mappings,4(a1) ; loc_206BA
		move.w	#$400,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1)
		move.b	#3,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		addq.b	#4,$24(a1)
		move.b	#1,$1C(a1)
		move.b	1(a0),1(a1)
		move.b	$28(a0),d0
		cmpi.b	#$81,d0
		bne.s	loc_203D8
		addi.w	#$60,2(a1)
loc_203D8:
		bsr.w	JmpTo7_Adjust2PArtPointer2
		tst.b	$28(a0)
		bmi.s	loc_20434
		jsr	(SingleObjLoad2).l	; (loc_E788)
		bne.s	loc_20434
		_move.b	#$55,0(a1)
		move.l	A0,$34(a1)
		move.l	#Ghz_Boss_Mappings_1,4(a1)	; loc_20612
		move.w	#$4D0,2(a1)
		bsr.w	JmpTo7_Adjust2PArtPointer2
		move.b	#1,$1E(a0)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1)
		move.b	#3,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		addq.b	#6,$24(a1)
		move.b	1(a0),1(a1)
loc_20434:
		move.b	$28(a0),d0
		andi.w	#$7F,d0
		add.w   d0,d0
		add.w   d0,d0
		move.l	loc_20446(pc,d0),A1
		jmp	(a1)
loc_20446:
		dc.l	0
		dc.l    loc_20080 
loc_2044E:
		move.b	$28(a0),d0
		andi.w	#$7F,d0
		add.w   d0,d0
		add.w   d0,d0
		move.l	loc_20484(pc,d0),A1
		jsr	(a1)
		lea	(loc_206AE).l,A1
		jsr	AnimateSprite	; (loc_d412)
		move.b	$22(a0),d0
		andi.b	#3,d0
		andi.b	#$FC,1(a0)
		or.b	d0,1(a0)
		jmp	(DisplaySprite).l	; (loc_d3C2)
loc_20484:
		dc.l	0
		dc.l    Obj_0x57  ; loc_1F99C
loc_2048C:
		move.l	$34(a0),A1
		move.l	8(a1),8(a0)
		move.l	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		move.l	#loc_206AE,A1
		jsr	(AnimateSprite).l	; (loc_d412)
		jmp	(DisplaySprite).l	; (loc_d3C2)		   
loc_204BA:
		dc.b	$00,$FF,$01,$00
loc_204BE:
		btst	#7,$22(a0)
		bne.s	loc_20512
		move.l	$34(a0),A1
		move.l	8(a1),8(a0)
		move.l	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		subq.b	#1,$1E(a0)
		bpl.s	loc_20506
		move.b	#1,$1E(a0)
		move.b	$2A(a0),d0
		addq.b	#1,d0
		cmpi.b	#2,d0
		ble.s   loc_204FC
		moveq	#0,d0
loc_204FC:
		move.b	loc_204BA(pc,d0),$1A(a0)
		move.b	d0,$2A(a0)
loc_20506:
		cmpi.b	#$FF,$1A(a0)
		bne.w	JmpTo19_DisplaySprite
		rts
loc_20512:
		move.l	$34(a0),A1
		btst	#6,$2E(a1)
		bne.s	loc_20520
		rts
loc_20520:
		addq.b	#2,$24(a0)
		move.l	#Ghz_Boss_Mappings_2,4(a0) ; loc_2062A
		move.w	#$4D8,2(a0)
		bsr.w	JmpTo36_Adjust2PArtPointer
		move.b	#0,$1A(a0)
		move.b	#5,$1E(a0)
		move.l	$34(a0),A1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addi.w	#4,$C(a0)
		subi.w	#$28,8(a0)
		rts
loc_20560:
		subq.b	#1,$1E(a0)
		bpl.s	loc_205A2
		move.b	#5,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#4,$1A(a0)
		bne.w	loc_205A2
		move.b	#0,$1A(a0)
		move.l	$34(a0),A1
		move.b	(a1),d0
		beq.w	JmpTo41_DeleteObject
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addi.w	#4,$C(a0)
		subi.w	#$28,8(a0)
loc_205A2:
		bra.w	JmpTo19_DisplaySprite
;=============================================================================== 
; Object 0x55 - Ghz Boss
; [ End ]		         
;===============================================================================				        
;=============================================================================== 
; Object 0x56 - Ghz Boss
; [ Begin ]		         
;===============================================================================  
Obj_0x56: ; loc_205A6:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_205B4(pc,d0),d1
		jmp     loc_205B4(pc,d1)
loc_205B4:
		dc.w    loc_205B8-loc_205B4
		dc.w    loc_205F4-loc_205B4
loc_205B8:
		addq.b	#2,$24(a0)
		move.l	#Obj_0x56_Mappings,4(a0) ; loc_2065A
		move.w	#$5A0,2(a0)
		bsr.w	JmpTo36_Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#0,$20(a0)
		move.b	#$C,$19(a0)
		move.b	#7,$1E(a0)
		move.b	#0,$1A(a0)
		rts
loc_205F4:
		subq.b	#1,$1E(a0)
		bpl.s	loc_2060E
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#7,$1A(a0)
		beq.w	JmpTo41_DeleteObject
loc_2060E:
		bra.w	JmpTo19_DisplaySprite
Ghz_Boss_Mappings_1: 
loc_20612:
		dc.w    loc_20616-loc_20612
		dc.w    loc_20620-loc_20612
loc_20616:
		dc.w	$0001
		dc.l	$00050000,$0000001C
loc_20620:
		dc.w	$0001
		dc.l	$00050004,$0002001C
Ghz_Boss_Mappings_2: 
loc_2062A:
		dc.w    loc_20632-loc_2062A
		dc.w    loc_2063C-loc_2062A
		dc.w    loc_20646-loc_2062A
		dc.w    loc_20650-loc_2062A
loc_20632:
		dc.w	$0001
		dc.l	$F8050000,$0000FFF8
loc_2063C:
		dc.w	$0001
		dc.l	$F8050004,$0002FFF8
loc_20646:
		dc.w	$0001
		dc.l	$F8050008,$0004FFF8
loc_20650:
		dc.w	$0001
		dc.l	$F805000C,$0006FFF8    
Obj_0x56_Mappings:
loc_2065A:
		dc.w    loc_20668-loc_2065A
		dc.w    loc_20672-loc_2065A
		dc.w    loc_2067C-loc_2065A
		dc.w    loc_20686-loc_2065A
		dc.w    loc_20690-loc_2065A
		dc.w    loc_2069A-loc_2065A
		dc.w    loc_206A4-loc_2065A
loc_20668:
		dc.w	$0001
		dc.l	$F8050000,$0000FFF8
loc_20672:
		dc.w	$0001
		dc.l	$F00F0004,$0002FFF0
loc_2067C:
		dc.w	$0001
		dc.l	$F00F0014,$000AFFF0
loc_20686:
		dc.w	$0001
		dc.l	$F00F0024,$0012FFF0
loc_20690:
		dc.w	$0001
		dc.l	$F00F0034,$001AFFF0
loc_2069A:
		dc.w	$0001
		dc.l	$F00F0044,$0022FFF0
loc_206A4:
		dc.w	$0001
		dc.l	$F00F0054,$002AFFF0		           
loc_206AE:
		dc.w    loc_206B2-loc_206AE
		dc.w    loc_206B5-loc_206AE
loc_206B2:
		dc.b	$0F,$00,$FF
loc_206B5:
		dc.b	$07,$01,$02,$FF,$00 
Ghz_Boss_Mappings:		 
loc_206BA:
		dc.w    loc_206C0-loc_206BA
		dc.w    loc_206E2-loc_206BA
		dc.w    loc_20704-loc_206BA
loc_206C0:
		dc.w	$0004
		dc.l	$F8050000,$0000FFE0,$08050004,$0002FFE0
		dc.l	$F80F0008,$0004FFF0,$F8070018,$000C0010
loc_206E2:
		dc.w	$0004
		dc.l	$E8050028,$0014FFE0,$E80d0030,$0018FFF0
		dc.l	$E8050024,$00120010,$D8050020,$00100002
loc_20704:
		dc.w	$0004
		dc.l	$E8050028,$0014FFE0,$E80d0038,$001CFFF0
		dc.l	$E8050024,$00120010,$D8050020,$00100002		              
;=============================================================================== 
; Object 0x56 - Ghz Boss
; [ End ]		         
;===============================================================================		  
		nop
; loc_20728:
JmpTo19_DisplaySprite:
		jmp	(DisplaySprite).l
; loc_2072E:
JmpTo41_DeleteObject:
		jmp	(DeleteObject).l
; loc_20734:
JmpTo7_Adjust2PArtPointer2:
		jmp	(Adjust2PArtPointer2).l
; loc_2073A:
JmpTo36_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 8A - "SONIC TEAM PRESENTS"/Credits (leftover from S1)
; ---------------------------------------------------------------------------
; Sprite_20740: Obj_0x8A_Credits:
Obj8A:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj8A_Index(pc,d0.w),d1
		jmp	Obj8A_Index(pc,d1.w)
; ===========================================================================
; off_2074E:
Obj8A_Index:	offsetTable
		offsetTableEntry.w Obj8A_Init
		offsetTableEntry.w Obj8A_Display
; ===========================================================================
; loc_20752:
Obj8A_Init:
		addq.b	#2,routine(a0)
		move.w	#$120,8(a0)
		move.w	#$F0,$A(a0)
		move.l	#Obj8A_MapUnc_207C6,4(a0)
		move.w	#$5A0,2(a0)
		bsr.w	JmpTo37_Adjust2PArtPointer
		move.w	(Ending_demo_number).w,d0
		move.b	d0,$1A(a0)
		move.b	#0,1(a0)
		move.b	#0,$18(a0)
		cmpi.b	#GameModeID_TitleScreen,(Game_Mode).w
		bne.s	Obj8A_Display
		move.w	#$300,2(a0)
		bsr.w	JmpTo37_Adjust2PArtPointer
		move.b	#$A,$1A(a0)
		tst.b	(Hidden_credits_flag).w
		beq.s	Obj8A_Display
		cmpi.b	#$72,(Ctrl_1_Held).w
		bne.s	Obj8A_Display
		move.w	#$EEE,(Target_palette_line3).w
		move.w	#$880,(Target_palette_line3+2).w
		jmp	(DeleteObject).l

; loc_207C0:
Obj8A_Display:
		jmp	(DisplaySprite).l
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj8A_MapUnc_207C6:	binclude	"mappings/sprite/obj8A.bin"
; ===========================================================================
		nop
; loc_20E54:
JmpTo37_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 3E - Egg prison
; Code is more or less unaltered from Sonic 1
; ---------------------------------------------------------------------------
; Sprite_20E5C: Obj_0x3E_Egg_Prison:
Obj3E:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj3E_Index(pc,d0.w),d1
		jsr	Obj3E_Index(pc,d1.w)
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	JmpTo42_DeleteObject
		jmp	(DisplaySprite).l

JmpTo42_DeleteObject:
		jmp	(DeleteObject).l
; ===========================================================================
; off_20E88:
Obj3E_Index:	offsetTable
		offsetTableEntry.w Obj3E_Init
		offsetTableEntry.w Obj3E_Main
		offsetTableEntry.w Obj3E_Switched
		offsetTableEntry.w Obj3E_Explosion
		offsetTableEntry.w Obj3E_Explosion
		offsetTableEntry.w Obj3E_Explosion
		offsetTableEntry.w Obj3E_Animals
		offsetTableEntry.w Obj3E_EndAct
; ===========================================================================
; byte_20E98:
Obj3E_Var:	dc.b   2,$20, 4, 0	; routine,width,priority,frame
		dc.b   4,$C, 5, 1
		dc.b   6,$10, 4, 3
		dc.b   8,$10, 3, 5
; ===========================================================================
; loc_20EA8:
Obj3E_Init:
		move.l	#loc_210AC,4(a0)
		move.w	#$49D,2(a0)
		bsr.w	JmpTo38_Adjust2PArtPointer
		move.b	#4,1(a0)
		move.w	$C(a0),$30(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#2,d0
		lea	Obj3E_Var(pc,d0.w),a1
		move.b	(a1)+,routine(a0)
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$18(a0)
		move.b	(a1)+,$1A(a0)
		cmpi.w	#8,d0			; is it object type 2?
		bne.s	return_20EF4		; if not,branch
		move.b	#6,$20(a0)
		move.b	#8,$21(a0)

return_20EF4:
		rts
; ===========================================================================
; loc_20EF6:
Obj3E_Main:
		cmpi.b	#2,(Boss_defeated_flag).w
		beq.s	Obj3E_ChkOpened
		move.w	#$2B,d1
		move.w	#$18,d2
		move.w	#$18,d3
		move.w	8(a0),d4
		jmp	(SolidObject).l
; ---------------------------------------------------------------------------
; loc_20F14:
Obj3E_ChkOpened:
		tst.b	$25(a0)			; has the capsule been opened
		beq.s	Obj3E_Open		; if yes,branch
		clr.b	$25(a0)
		bclr	#3,(MainCharacter+$22).w
		bset	#1,(MainCharacter+$22).w
; loc_20F2A:
Obj3E_Open:
		move.b	#2,$1A(a0)		; set to "destroyed" frame
		rts
; ===========================================================================
; loc_20F32:
Obj3E_Switched:
		move.w	#$17,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	8(a0),d4
		jsr	(SolidObject).l
		lea	(loc_210A4).l,a1
		jsr	(AnimateSprite).l
		move.w	$30(a0),$C(a0)
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	return_20F98
		addq.w	#8,$C(a0)
		move.b	#$A,routine(a0)
		move.w	#$3C,$1E(a0)
		clr.b	(Update_HUD_timer).w		; stop the timer
		clr.b	(Current_Boss_ID).w		; lock screen position
		move.b	#1,(Control_Locked).w		; lock controls
		move.w	#$800,(Ctrl_1_Logical).w	; move Sonic to the right
		clr.b	$25(a0)
		bclr	#3,(MainCharacter+$22).w
		bset	#1,(MainCharacter+$22).w

return_20F98:
		rts
; ===========================================================================
; loc_20F9A:
Obj3E_Explosion:
		moveq	#7,d0
		and.b	(Vint_runcount+3).w,d0
		bne.s	loc_20FD8
		jsr	(SingleObjLoad).l
		bne.s	loc_20FD8
		_move.b	#$3F,0(a1)		; load obj3F (boss explosion)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		jsr	(PseudoRandomNumber).l
		moveq	#0,d1
		move.b	d0,d1
		lsr.b	#2,d1
		subi.w	#$20,d1
		add.w	d1,8(a1)
		lsr.w	#8,d0
		lsr.b	#3,d0
		add.w	d0,$C(a1)

loc_20FD8:
		subq.w	#1,$1E(a0)
		beq.s	Obj3E_MakeAnimal
		rts
; ---------------------------------------------------------------------------
; loc_20FE0:
Obj3E_MakeAnimal:
		move.b	#2,(Boss_defeated_flag).w
		move.b	#$C,routine(a0)		; replace explosions with animals
		move.b	#6,$1A(a0)
		move.w	#$96,$1E(a0)
		addi.w	#$20,$C(a0)
		moveq	#7,d6
		move.w	#$9A,d5
		moveq	#-$1C,d4
; loc_21006:
Obj3E_Loop:
		jsr	(SingleObjLoad).l
		bne.s	return_21030
		_move.b	#$28,0(a1)		; load obj28 (animals)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		add.w	d4,8(a1)
		addq.w	#7,d4
		move.w	d5,$36(a1)
		subq.w	#8,d5
		dbf	d6,Obj3E_Loop		; repeat d6 times

return_21030:
		rts
; ===========================================================================
; loc_21032:
Obj3E_Animals:
		moveq	#7,d0
		and.b	(Vint_runcount+3).w,d0
		bne.s	loc_21070
		jsr	(SingleObjLoad).l
		bne.s	loc_21070
		_move.b	#$28,0(a1)		; load obj28 (animals)
		move.w	$8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		jsr	(PseudoRandomNumber).l
		andi.w	#$1F,d0
		subq.w	#6,d0
		tst.w	d1
		bpl.s	loc_21066
		neg.w	d0

loc_21066:
		add.w	d0,8(a1)
		move.w	#$C,$36(a1)

loc_21070:
		subq.w	#1,$1E(a0)
		bne.s	return_21080
		addq.b	#2,routine(a0)
		move.w	#$B4,$1E(a0)

return_21080:
		rts
; ===========================================================================
; loc_21082:
Obj3E_EndAct:
		; this is rather inefficient,it should only need to check the dynamic region
		; (not to mention it's bugged as it only checks the first half of the object RAM)
		moveq	#$3E,d0
		moveq	#$28,d1
		moveq	#$40,d2
		lea	(Sidekick).w,a1
; loc_2108C:
Obj3E_FindObj28:
		cmp.b	(a1),d1			; is obj28 (animals) still loaded?
		beq.s	return_210A2		; if yes,branch
		adda.w	d2,a1
		dbf	d0,Obj3E_FindObj28	; check the next few objects,skip if they're all empty

		jsr	(Load_EndOfAct).l
		jmp	(DeleteObject).l

return_210A2:
		rts
; ===========================================================================

loc_210A4:		
		dc.w    loc_210A8-loc_210A4
		dc.w    loc_210A8-loc_210A4
loc_210A8:
		dc.b	$02,$01,$03,$FF

loc_210AC:
		dc.w    loc_210BA-loc_210AC
		dc.w    loc_210F4-loc_210AC
		dc.w    loc_210FE-loc_210AC
		dc.w    loc_21130-loc_210AC
		dc.w    loc_2113A-loc_210AC
		dc.w    loc_2114C-loc_210AC
		dc.w    loc_21156-loc_210AC
loc_210BA:
		dc.w	$0007
		dc.l	$E00C2000,$2000FFF0,$E80d2004,$2002FFE0
		dc.l	$E80d200C,$20060000,$F80E2014,$200AFFE0
		dc.l	$F80E2020,$20100000,$100d202C,$2016FFE0
		dc.l	$100d2034,$201A0000
loc_210F4:
		dc.w	$0001
		dc.l	$F809003C,$001EFFF4
loc_210FE:
		dc.w	$0006
		dc.l	$00082042,$2021FFE0,$080C2045,$2022FFE0
		dc.l	$00042049,$20240010,$080C204B,$20250000
		dc.l	$100d202C,$2016FFE0,$100d2034,$201A0000
loc_21130:
		dc.w	$0001
		dc.l	$F809004F,$0027FFF4
loc_2113A:
		dc.w	$0002
		dc.l	$E80E2055,$202AFFF0,$000E2061,$2030FFF0
loc_2114C:
		dc.w	$0001
		dc.l	$F007206D,$2036FFF8
loc_21156:
		dc.w	$0000
; ===========================================================================
; loc_21158:
JmpTo38_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l

		align 4

;=============================================================================== 
; Sub Routine TouchResponse
; [ Begin ]		         
;===============================================================================  
TouchResponse: ; loc_21160:   
		nop
		bsr.w	loc_21502
		move.w	8(a0),d2
		move.w	$C(a0),d3
		subi.w	#8,d2
		moveq	#0,d5
		move.b	$16(a0),d5
		subq.b	#3,d5
		sub.w   d5,d3
		cmpi.b	#$39,$1A(a0)
		bne.s	loc_2118A
		addi.w	#$C,d3
		moveq	#$A,d5
loc_2118A:
		move.w	#$10,d4
		add.w   d5,d5
		lea	($FFFFB800).w,A1
		move.w	#$5F,d6
loc_21198:
		move.b	$20(a1),d0
		bne.s	Touch_Height	; loc_211F8
loc_2119E:		
		lea	$40(a1),A1
		dbf	d6,loc_21198  
		moveq	#0,d0
Touch_Sizes: ; loc_211A8:		
		rts
		dc.b	$14,$14,$0C,$14,$14,$0C,$04,$10,$0C,$12,$10,$10,$06,$06,$18,$0C
		dc.b	$0C,$10,$10,$0C,$08,$08,$14,$10,$14,$08,$0E,$0E,$18,$18,$28,$10
		dc.b	$10,$18,$08,$10,$20,$70,$40,$20,$80,$20,$20,$20,$08,$08,$04,$04
		dc.b	$20,$08,$0C,$0C,$08,$04,$18,$04,$28,$04,$04,$08,$04,$18,$04,$28
		dc.b	$04,$20,$18,$18,$0C,$18,$48,$08,$18,$28,$10,$04,$20,$02
;===============================================================================
Touch_Height: ; loc_211F8:
		andi.w	#$3F,d0
		add.w   d0,d0
		lea	Touch_Sizes(pc,d0),A2 ; loc_211A8
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	8(a1),d0
		sub.w   d1,d0
		sub.w   d2,d0
		bcc.s	loc_2121A
		add.w   d1,d1
		add.w   d1,d0
		bcs.s	loc_21220
		bra.w	loc_2119E
loc_2121A:		
		cmp.w	d4,d0
		bhi.w	loc_2119E
loc_21220:		
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$C(a1),d0
		sub.w   d1,d0
		sub.w   d3,d0
		bcc.s	loc_21238
		add.w   d1,d1
		add.w   d1,d0
		bcs.s	loc_2123E
		bra.w	loc_2119E		
loc_21238:
		cmp.w	d5,d0
		bhi.w	loc_2119E
loc_2123E:
		move.b	$20(a1),d1
		andi.b	#$C0,d1
		beq.w	loc_212B8
		cmpi.b	#$C0,d1
		beq.w	Touch_Special	; loc_2147A
		tst.b	d1
		bmi.w	Touch_ChkHurt
		move.b	$20(a1),d0
		andi.b	#$3F,d0
		cmpi.b	#6,d0
		beq.s	loc_21278
		cmpi.w	#$5A,$30(a0)
		bcc.w	loc_21276
		move.b	#4,$24(a1)
loc_21276:		
		rts
loc_21278:		
		tst.w	$12(a0)
		bpl.s	loc_212A4
		move.w	$C(a0),d0
		subi.w	#$10,d0
		cmp.w	$C(a1),d0  
		bcs.s	loc_212B6
		neg.w	$12(a0)
		move.w	#$FE80,$12(a1)
		tst.b	$25(a1)
		bne.s	loc_212B6
		move.b	#4,$25(a1)
		rts
loc_212A4:
		cmpi.b	#2,$1C(a0)
		bne.s	loc_212B6
		neg.w	$12(a0)
		move.b	#4,$24(a1)
loc_212B6:
		rts
loc_212B8:
		tst.b	(Invincibility_flag).w
		bne.s	loc_212d0
		cmpi.b	#9,$1C(a0)
		beq.s	loc_212d0
		cmpi.b	#2,$1C(a0)
		bne.w	Touch_ChkHurt
loc_212d0:
		tst.b	$21(a1)
		beq.s	Touch_KillEnemy	; loc_212FA
		neg.w	$10(a0)
		neg.w	$12(a0)
		asr.w   $10(a0)
		asr.w   $12(a0)
		move.b	#0,$20(a1)
		subq.b	#1,$21(a1)
		bne.s	loc_212F8
		bset	#7,$22(a1)
loc_212F8:
		rts
;===============================================================================		
Touch_KillEnemy: ; loc_212FA:
		bset	#7,$22(a1)
		moveq	#0,d0
		move.w	(Chain_Bonus_counter).w,d0
		addq.w	#2,(Chain_Bonus_counter).w
		cmpi.w	#6,d0
		bcs.s	loc_21312
		moveq	#6,d0
loc_21312:
		move.w	d0,$3E(a1)
		move.w	Enemy_Points(pc,d0),d0	; loc_21362
		cmpi.w	#$20,(Chain_Bonus_counter).w
		bcs.s	loc_2132C
		move.w	#1000,d0
		move.w	#$A,$3E(a1)
loc_2132C:
		bsr.w	AddPoints	; loc_22Fd0		
		_move.b	#$27,0(a1)
		move.b	#$00,$24(a1)
		tst.w	$12(a0)
		bmi.s	loc_21352
		move.w	$C(a0),d0
		cmp.w	$C(a1),d0
		bcc.s	loc_2135A
		neg.w	$12(a0)
		rts
loc_21352:
		addi.w	#$100,$12(a0)
		rts
loc_2135A:
		subi.w	#$100,$12(a0)
		rts				
Enemy_Points: ; loc_21362:
		dc.w	10,20,50,100
loc_2136A:
		bset	#7,$22(a1)				
; loc_21370:
Touch_ChkHurt:
		tst.b	(Invincibility_flag).w
		beq.s	Touch_Hurt	; loc_2137A
loc_21376:		
		moveq	#-1,d0
		rts
;===============================================================================		
Touch_Hurt: ; loc_2137A:
		nop
		tst.w	$30(a0)
		bne.s	loc_21376
		move.l	A1,A2  

;=============================================================================== 
; Sub Routine HurtSonic
; [ Begin ]		         
;===============================================================================		 
HurtSonic: ; loc_21384:
		tst.b	(Shield_flag).w
		bne.s	HurtShield	; loc_213AC
		tst.w	(Ring_count).w
		beq.w	Hurt_NoRings	; loc_2141A
		jsr	(SingleObjLoad).l	; loc_E772
		bne.s	HurtShield	; loc_213AC
		_move.b	#$37,0(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
HurtShield: ; loc_213AC:
		move.b	#0,(Shield_flag).w
		move.b	#4,$24(a0)
		bsr.w	J_Sonic_ResetOnFloor_00	; loc_214FC
		bset	#1,$22(a0)
		move.w	#-$400,$12(a0)
		move.w	#-$200,$10(a0)
		btst	#6,$22(a0)
		beq.s	Hurt_Reverse	; loc_213E2
		move.w	#-$200,$12(a0)
		move.w	#-$100,$10(a0)
Hurt_Reverse: ; loc_213E2:
		move.w	8(a0),d0
		cmp.w	8(a2),d0
		bcs.s	Hurt_ChkSpikes	; loc_213F0 
		neg.w	$10(a0)
Hurt_ChkSpikes: ; loc_213F0:
		move.w	#0,$14(a0)
		move.b	#$1A,$1C(a0)
		move.w	#$78,$30(a0)
		move.w	#SndID_Hurt,d0
		cmpi.b	#$36,(a2)
		bne.s	loc_21410
		move.w	#SndID_HurtBySpikes,d0
loc_21410:
		jsr	(PlaySound).l	; loc_14C6
		moveq	#-1,d0
		rts
Hurt_NoRings: ; loc_2141A:
		tst.w	(Debug_mode_flag).w
		bne.w	HurtShield	; loc_213AC 
;=============================================================================== 
; Sub Routine HurtSonic
; [ End ]		         
;===============================================================================  
		       
;=============================================================================== 
; Sub Routine KillSonic
; [ Begin ]		         
;===============================================================================		  
KillSonic: ; loc_21422:
		tst.w	(Debug_placement_mode).w
		bne.s	Kill_NoDeath	; loc_21476
		move.b	#0,(Invincibility_flag).w
		move.b	#6,$24(a0)
		bsr.w	J_Sonic_ResetOnFloor_00	; loc_214FC
		bset	#1,$22(a0)
		move.w	#$F900,$12(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		move.w	$C(a0),$38(a0)
		move.b	#$18,$1C(a0)
		bset	#7,2(a0)
		move.w	#SndID_Hurt,d0
		cmpi.b	#$36,(a2)
		bne.s	loc_21470
		move.w	#SndID_HurtBySpikes,d0
loc_21470:
		jsr	(PlaySound).l	; loc_14C6
Kill_NoDeath ; loc_21476:		
		moveq	#-1,d0
		rts
;=============================================================================== 
; Sub Routine KillSonic
; [ End ]		         
;===============================================================================
		   
Touch_Special: ; loc_2147A:
		move.b	$20(a1),d1
		andi.b	#$3F,d1
		cmpi.b	#$B,d1
		beq.s	Touch_Caterkiller	; loc_214AE
		cmpi.b	#$C,d1
		beq.s	Touch_Yadrin	; loc_214B2
		cmpi.b	#$14,d1
		beq.s	Touch_d7	; loc_214E4
		cmpi.b	#$15,d1
		beq.s	Touch_d7	; loc_214E4
		cmpi.b	#$16,d1
		beq.s	Touch_d7	; loc_214E4
		cmpi.b	#$17,d1
		beq.s	Touch_d7	; loc_214E4
		cmpi.b	#$21,d1
		beq.s	Touch_E1	; loc_214F6
		rts
Touch_Caterkiller: ; loc_214AE:
		bra.w	loc_2136A
Touch_Yadrin: ; loc_214B2:
		sub.w   d0,d5
		cmpi.w	#8,d5
		bcc.s	loc_214E0
		move.w	8(a1),d0
		subq.w	#4,d0
		btst	#0,$22(a1)
		beq.s	loc_214CC
		subi.w	#$10,d0
loc_214CC:
		sub.w   d2,d0
		bcc.s	loc_214D8
		addi.w	#$18,d0
		bcs.s	loc_214DC
		bra.s	loc_214E0
loc_214D8:
		cmp.w	d4,d0
		bhi.s	loc_214E0
loc_214DC:
		bra.w	Touch_ChkHurt
loc_214E0:
		bra.w	loc_212B8
Touch_d7: ; loc_214E4:
		move.w	A0,d1
		subi.w	#MainCharacter,d1
		beq.s	loc_214F0
		addq.b	#1,$21(a1)
loc_214F0:
		addq.b	#1,$21(a1)
		rts
Touch_E1: ; loc_214F6:		
		addq.b	#1,$21(a1)
		rts            
J_Sonic_ResetOnFloor_00: ; loc_214FC:
		jmp	(Sonic_ResetOnFloor).l	; loc_1090C
loc_21502:
		jmp	(Touch_Rings).l	; loc_DF6C 
;=============================================================================== 
; Sub Routine TouchResponse
; [ End ]		         
;=============================================================================== 
		
;===============================================================================
; Special Stage - Sub-routine
; [ Begin ]              
;===============================================================================
S1_SS_Show_Layout: ; loc_21508:
		bsr.w	loc_2164A
		bsr.w	loc_2188A
		move.w	d5,-(sp)
		lea	(Level_Layout).w,A1
		move.b	(SpecialStage_angle).w,d0
		andi.b	#$FC,d0
		jsr	(CalcSine).l		; loc_320A
		move.w	d0,d4
		move.w	d1,d5
		muls.w  #$18,d4
		muls.w  #$18,d5
		moveq	#0,d2
		move.w	(Camera_X_pos).w,d2
		divu.w  #$18,d2
		swap	d2
		neg.w	d2
		addi.w	#$FF4C,d2
		moveq	#0,d3
		move.w	(Camera_Y_pos).w,d3
		divu.w  #$18,d3
		swap	d3
		neg.w	d3
		addi.w	#$FF4C,d3
		move.w	#$F,d7
loc_21558:		
		movem.w d0-d2,-(sp)
		movem.w d0/d1,-(sp)
		neg.w	d0
		muls.w  d2,d1
		muls.w  d3,d0
		move.l	d0,d6
		add.l   d1,d6
		movem.w (sp)+,d0/d1
		muls.w  d2,d0
		muls.w  d3,d1
		add.l   d0,d1
		move.l	d6,d2
		move.w	#$F,d6
loc_2157A:		
		move.l	d2,d0
		asr.l   #8,d0
		move.w	d0,(a1)+
		move.l	d1,d0
		asr.l   #8,d0
		move.w	d0,(a1)+
		add.l   d5,d2
		add.l   d4,d1
		dbf	d6,loc_2157A
		movem.w (sp)+,d0-d2
		addi.w	#$18,d3
		dbf	d7,loc_21558
		move.w	(sp)+,d5
		lea	(Chunk_Table),A0
		moveq	#0,d0
		move.w	(Camera_Y_pos).w,d0
		divu.w  #$18,d0
		mulu.w  #$80,d0
		adda.l  d0,A0
		moveq	#0,d0
		move.w	(Camera_X_pos).w,d0
		divu.w  #$18,d0
		adda.w	d0,A0
		lea	(Level_Layout).w,A4
		move.w	#$F,d7
loc_215C6:		
		move.w	#$F,d6
loc_215CA:		
		moveq	#0,d0
		move.b	(a0)+,d0
		beq.s	loc_21622
		cmpi.b	#$4E,d0
		bhi.s	loc_21622
		move.w	(a4),d3
		addi.w	#$120,d3
		cmpi.w	#$70,d3
		bcs.s	loc_21622
		cmpi.w	#$1D0,d3
		bcc.s	loc_21622
		move.w	2(a4),d2
		addi.w	#$F0,d2
		cmpi.w	#$70,d2
		bcs.s	loc_21622
		cmpi.w	#$170,d2
		bcc.s	loc_21622
		lea	(Chunk_Table+$4000),A5
		lsl.w	#3,d0
		lea	(A5,d0),A5
		move.l	(a5)+,A1
		move.w	(a5)+,d1
		add.w   d1,d1
		adda.w	(A1,d1),A1
		move.w	(a5)+,A3
		moveq	#0,d1
		move.b	(a1)+,d1
		subq.b	#1,d1
		bmi.s	loc_21622
		jsr	 (DrawSprite_Loop)
loc_21622:
		addq.w	#4,A4
		dbf	d6,loc_215CA
		lea	$70(a0),A0
		dbf	d7,loc_215C6
		move.b	d5,(Sprite_count).w
		cmpi.b	#$50,d5
		beq.s	loc_21642
		move.l	#0,(a2)
		rts
loc_21642:
		move.b	#0,-5(a2)
		rts
loc_2164A:
		lea	(Chunk_Table+$400C),A1
		moveq	#0,d0
		move.b	(SpecialStage_angle).w,d0
		lsr.b	#2,d0
		andi.w	#$F,d0
		moveq	#$23,d1
loc_2165E:		
		move.w	d0,(a1)
		addq.w	#8,A1
		dbf	d1,loc_2165E
		lea	(Chunk_Table+$4005),A1
		subq.b	#1,(SpecialStage2_anim_counter).w
		bpl.s	loc_21682
		move.b	#7,(SpecialStage2_anim_counter).w
		addq.b	#1,(SpecialStage2_anim_frame).w
		andi.b	#3,(SpecialStage2_anim_frame).w
loc_21682:
		move.b	(SpecialStage2_anim_frame).w,$01d0(a1)
		subq.b	#1,(SpecialStage3_anim_counter).w
		bpl.s	loc_2169E
		move.b	#7,(SpecialStage3_anim_counter).w
		addq.b	#1,(SpecialStage3_anim_frame).w
		andi.b	#1,(SpecialStage3_anim_frame).w
loc_2169E:
		move.b	(SpecialStage3_anim_frame).w,d0
		move.b	d0,$138(a1)
		move.b	d0,$160(a1)
		move.b	d0,$148(a1)
		move.b	d0,$150(a1)
		move.b	d0,$1D8(a1)
		move.b	d0,$1E0(a1)
		move.b	d0,$1E8(a1)
		move.b	d0,$1F0(a1)
		move.b	d0,$1F8(a1)
		move.b	d0,$200(a1)
		subq.b	#1,(SpecialStage4_anim_counter).w
		bpl.s	loc_216E0
		move.b	#4,(SpecialStage4_anim_counter).w
		addq.b	#1,(SpecialStage4_anim_frame).w
		andi.b	#3,(SpecialStage4_anim_frame).w
loc_216E0:
		move.b	(SpecialStage4_anim_frame).w,d0
		move.b	d0,$168(a1)
		move.b	d0,$170(a1)
		move.b	d0,$178(a1)
		move.b	d0,$180(a1)
		subq.b	#1,(SpecialStage_anim_counter).w
		bpl.s	loc_2170A
		move.b	#7,(SpecialStage_anim_counter).w
		subq.b	#1,(SpecialStage_anim_frame).w
		andi.b	#7,(SpecialStage_anim_frame).w
loc_2170A:
		lea	(Chunk_Table+$4016),A1
		lea	(S1SS_WaRiVramSet).l,A0  ; loc_217F4
		moveq	#0,d0
		move.b	(SpecialStage_anim_frame).w,d0
		add.w   d0,d0
		lea	(A0,d0),A0
		move.w	(a0),(a1)
		move.w	2(a0),8(a1)
		move.w	4(a0),$10(a1)
		move.w	6(a0),$18(a1)
		move.w	8(a0),$20(a1)
		move.w	$A(a0),$28(a1)
		move.w	$C(a0),$30(a1)
		move.w	$E(a0),$38(a1)
		adda.w	#$20,A0
		adda.w	#$48,A1
		move.w	(a0),(a1)
		move.w	2(a0),8(a1)
		move.w	4(a0),$10(a1)
		move.w	6(a0),$18(a1)
		move.w	8(a0),$20(a1)
		move.w	$A(a0),$28(a1)
		move.w	$C(a0),$30(a1)
		move.w	$E(a0),$38(a1)
		adda.w	#$20,A0
		adda.w	#$48,A1
		move.w	(a0),(a1)
		move.w	2(a0),8(a1)
		move.w	4(a0),$10(a1)
		move.w	6(a0),$18(a1)
		move.w	8(a0),$20(a1)
		move.w	$A(a0),$28(a1)
		move.w	$C(a0),$30(a1)
		move.w	$E(a0),$38(a1)
		adda.w	#$20,A0
		adda.w	#$48,A1
		move.w	(a0),(a1)
		move.w	2(a0),8(a1)
		move.w	4(a0),$10(a1)
		move.w	6(a0),$18(a1)
		move.w	8(a0),$20(a1)
		move.w	$A(a0),$28(a1)
		move.w	$C(a0),$30(a1)
		move.w	$E(a0),$38(a1)
		adda.w	#$20,A0
		adda.w	#$48,A1
		rts 
S1SS_WaRiVramSet: ; loc_217F4:
		dc.w	$142,$6142,$142,$142,$142,$142,$142,$6142
		dc.w	$142,$6142,$142,$142,$142,$142,$142,$6142
		dc.w	$2142,$0142,$2142,$2142,$2142,$2142,$2142,$0142
		dc.w	$2142,$0142,$2142,$2142,$2142,$2142,$2142,$0142
		dc.w	$4142,$2142,$4142,$4142,$4142,$4142,$4142,$2142
		dc.w	$4142,$2142,$4142,$4142,$4142,$4142,$4142,$2142
		dc.w	$6142,$4142,$6142,$6142,$6142,$6142,$6142,$4142
		dc.w	$6142,$4142,$6142,$6142,$6142,$6142,$6142,$4142		
loc_21874:
		lea	(Chunk_Table+$4400),A2
		move.w	#$1F,d0
loc_2187E:		
		tst.b	(a2)
		beq.s	loc_21888
		addq.w	#8,A2
		dbf	d0,loc_2187E
loc_21888:
		rts
loc_2188A:               
		lea	(Chunk_Table+$4400),A0
		move.w	#$1F,d7
loc_21894:		
		moveq	#0,d0
		move.b	(a0),d0
		beq.s	loc_218A2
		lsl.w	#2,d0
		move.l	S1SS_AniIndex-4(pc,d0),A1 ; loc_218AA
		jsr	(a1)
loc_218A2:
		addq.w	#8,A0
		dbf	d7,loc_21894
		rts 
;===============================================================================		
S1SS_AniIndex: ; loc_218AA: 
		dc.l    loc_218C2
		dc.l    loc_218F2
		dc.l    loc_21928
		dc.l    loc_21958
		dc.l    loc_2198E
		dc.l    loc_219CE
loc_218C2:
		subq.b	#1,2(a0)
		bpl.s	loc_218EA
		move.b	#5,2(a0)
		moveq	#0,d0
		move.b	3(a0),d0
		addq.b	#1,3(a0)
		move.l	4(a0),A1
		move.b	loc_218EC(pc,d0),d0
		move.b	d0,(a1)
		bne.s	loc_218EA
		clr.l   (a0)
		clr.l   4(a0)		
loc_218EA:
		rts
loc_218EC:
		dc.b	$42,$43,$44,$45,$00,$00
loc_218F2:
		subq.b	#1,2(a0)
		bpl.s	loc_21920
		move.b	#7,2(a0)
		moveq	#0,d0
		move.b	3(a0),d0
		addq.b	#1,3(a0)
		move.l	4(a0),A1
		move.b	loc_21922(pc,d0),d0
		bne.s	loc_2191E
		clr.l   (a0)
		clr.l   4(a0)
		move.b	#$25,(a1)
		rts
loc_2191E:
		move.b	d0,(a1)
loc_21920:
		rts
loc_21922:
		dc.b	$32,$33,$32,$33,$00,$00
loc_21928:
		subq.b	#1,2(a0)
		bpl.s	loc_21950
		move.b	#5,2(a0)
		moveq	#0,d0
		move.b	3(a0),d0
		addq.b	#1,3(a0)
		move.l	4(a0),A1
		move.b	loc_21952(pc,d0),d0
		move.b	d0,(a1)
		bne.s	loc_21950
		clr.l   (a0)
		clr.l   4(a0)
loc_21950:
		rts
loc_21952:
		dc.b	$46,$47,$48,$49,$00,$00
loc_21958:
		subq.b	#1,2(a0)
		bpl.s	loc_21986
		move.b	#7,2(a0)
		moveq	#0,d0
		move.b	3(a0),d0
		addq.b	#1,3(a0)
		move.l	4(a0),A1
		move.b	loc_21988(pc,d0),d0
		bne.s	loc_21984
		clr.l   (a0)
		clr.l   4(a0)
		move.b	#$2B,(a1)
		rts
loc_21984:
		move.b	d0,(a1)
loc_21986:
		rts
loc_21988:
		dc.b	$2B,$31,$2B,$31,$00,$00
loc_2198E:
		subq.b	#1,2(a0)
		bpl.s	loc_219C6
		move.b	#5,2(a0)
		moveq	#0,d0
		move.b	3(a0),d0
		addq.b	#1,3(a0)
		move.l	4(a0),A1
		move.b	loc_219C8(pc,d0),d0
		move.b	d0,(a1)
		bne.s	loc_219C6
		clr.l   (a0)
		clr.l   4(a0)
		move.b	#4,(MainCharacter+routine).w
		move.w	#SndID_SSGoal,d0
		jsr	(PlaySound).l             ; loc_14C6
loc_219C6:
		rts
loc_219C8:
		dc.b	$46,$47,$48,$49,$00,$00
loc_219CE:
		subq.b	#1,2(a0)
		bpl.s	loc_219FA
		move.b	#1,2(a0)
		moveq	#0,d0
		move.b	3(a0),d0
		addq.b	#1,3(a0)
		move.l	4(a0),A1
		move.b	loc_219FC(pc,d0),d0
		move.b	d0,(a1)
		bne.s	loc_219FA
		move.b	4(a0),(a1)
		clr.l   (a0)
		clr.l   4(a0)
loc_219FA:
		rts  
loc_219FC:		           
		dc.b	$4B,$4C,$4D,$4E,$4B,$4C,$4D,$4E,$00,$00		
S1SS_LayoutIndex: ; loc_21A06:		
		dc.l    Special_Stage_1   ; loc_31CEA		             
		dc.l    Special_Stage_2   ; loc_31F64
		dc.l    Special_Stage_3   ; loc_32376        
		dc.l    Special_Stage_4   ; loc_326d2
		dc.l    Special_Stage_5   ; loc_32BAC
		dc.l    Special_Stage_6   ; loc_3305C
S1SS_StartLoc: ; loc_21A1E:
		dc.l	$03d002E0   ; Sonic Start Position in Special Stage 1
		dc.l	$03280574   ; Sonic Start Position in Special Stage 2
		dc.l	$04E402E0   ; Sonic Start Position in Special Stage 3
		dc.l	$03Ad02E0   ; Sonic Start Position in Special Stage 4
		dc.l	$034006B8   ; Sonic Start Position in Special Stage 5
		dc.l	$049B0358   ; Sonic Start Position in Special Stage 6
S1_Special_Stage_Load: ; loc_21A36:
		moveq	#0,d0
		move.b	(Current_Special_Stage).w,d0
		addq.b	#1,(Current_Special_Stage).w
		cmpi.b	#6,(Current_Special_Stage).w
		bcs.s	loc_21A4E
		move.b	#0,(Current_Special_Stage).w
loc_21A4E:
		cmpi.b	#6,(Emerald_count).w
		beq.s	loc_21A70
		moveq	#0,d1
		move.b	(Emerald_count).w,d1
		subq.b	#1,d1
		bcs.s	loc_21A70
		lea	(Got_Emeralds_array).w,A3
loc_21A64:		
		cmp.b	(A3,d1),d0
		bne.s	loc_21A6C
		bra.s	S1_Special_Stage_Load   ; loc_21A36
loc_21A6C:
		dbf	d1,loc_21A64
loc_21A70:
		lsl.w	#2,d0
		lea	S1SS_StartLoc(pc,d0),A1 ; loc_21A1E
		move.w	(a1)+,(MainCharacter+8).w
		move.w	(a1)+,(MainCharacter+$C).w
		move.l	S1SS_LayoutIndex(pc,d0),A0 ; loc_21A06
		lea	(Chunk_Table+$4000),A1
		move.w	#0,d0
		jsr	 (EniDec).l               ; loc_18DA
		lea	(Chunk_Table),A1
		move.w	#$FFF,d0
loc_21A9C:		
		clr.l   (a1)+
		dbf	d0,loc_21A9C
		lea	(Chunk_Table+$1020),A1
		lea	(Chunk_Table+$4000),A0
		moveq	#$3F,d1
loc_21AB0:		
		moveq	#$3F,d2
loc_21AB2:		
		move.b	(a0)+,(a1)+
		dbf	d2,loc_21AB2
		lea	$40(a1),A1
		dbf	d1,loc_21AB0
		lea	(Chunk_Table+$4008),A1
		lea	(loc_21AF2).l,A0
		moveq	#$4D,d1
loc_21ACE:		
		move.l	(a0)+,(a1)+
		move.w	#0,(a1)+
		move.b	-4(a0),-1(a1)
		move.w	(a0)+,(a1)+
		dbf	d1,loc_21ACE
		lea	(Chunk_Table+$4400),A1
		move.w	#$3F,d1
loc_21AEA:		
		clr.l   (a1)+
		dbf	d1,loc_21AEA
		rts
loc_21AF2:
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6		 
		dc.w	$0142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142		      
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$4142   
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142   
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142   
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142   
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$6142  
		dc.l    S1_Obj_0x47_Mappings ; loc_1401E
		dc.w	$023B
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0570
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0251
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0370
		dc.l    SS_Up_Mappings          ; loc_21CFA
		dc.w	$0263
		dc.l    SS_Down_Mappings        ; loc_21d0A
		dc.w	$0263
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6		
		dc.w	$22F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w	$0470
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w	$05F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w	$65F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w	$25F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w	$45F0
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$02F0
		dc.l    (($01<<$18)|S1_Obj_0x47_Mappings) ; loc_1401E
		dc.w	$023B
		dc.l    (($02<<$18)|S1_Obj_0x47_Mappings) ; loc_1401E
		dc.w	$023B 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0797
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$07A0
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$07A9
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$0797
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$07A0
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$07A9
		dc.l    Obj25_MapUnc_B036          ; loc_B036
		dc.w	$27B2
		dc.l    SS_Emerald_Mappings     ; loc_21d22
		dc.w	$0770
		dc.l    SS_Emerald_Mappings     ; loc_21d22
		dc.w	$2770
		dc.l    SS_Emerald_Mappings     ; loc_21d22
		dc.w	$4770
		dc.l    SS_Emerald_Mappings     ; loc_21d22		   
		dc.w	$6770
		dc.l    SS_Red_Emerald_Mappings ; loc_21d1A
		dc.w	$0770
		dc.l    SS_Gray_Emerald_Mappings ; loc_21d1E
		dc.w	$0770
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w	$04F0
		dc.l    (($04<<$18)|Obj25_MapUnc_B036) ; loc_B036
		dc.w	$27B2
		dc.l    (($05<<$18)|Obj25_MapUnc_B036) ; loc_B036		   
		dc.w	$27B2
		dc.l    (($06<<$18)|Obj25_MapUnc_B036) ; loc_B036  
		dc.w	$27B2
		dc.l    (($07<<$18)|Obj25_MapUnc_B036) ; loc_B036 
		dc.w	$27B2
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w	$23F0
		dc.l    (($01<<$18)|SS_Red_White_Ball_Mappings) ; loc_21CDA
		dc.w	$23F0
		dc.l    (($02<<$18)|SS_Red_White_Ball_Mappings) ; loc_21CDA
		dc.w	$23F0
		dc.l    (($03<<$18)|SS_Red_White_Ball_Mappings) ; loc_21CDA
		dc.w	$23F0  
		dc.l    (($02<<$18)|SS_Reverse_Goal_Mappings) ; loc_21CC6
		dc.w	$04F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA		  
		dc.w	$05F0		   
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA 
		dc.w	$65F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA 
		dc.w	$25F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA 
		dc.w	$45F0     
SS_Reverse_Goal_Mappings: ; loc_21CC6:   
		dc.w    loc_21CCC-SS_Reverse_Goal_Mappings
		dc.w    loc_21Cd2-SS_Reverse_Goal_Mappings
		dc.w    loc_21CD8-SS_Reverse_Goal_Mappings
loc_21CCC:
		dc.b	$01
		dc.b	$F4,$0A,$00,$00,$F4        ; Sonic 1 Mappings Format
loc_21Cd2:
		dc.b	$01
		dc.b	$F4,$0A,$00,$09,$F4        ; Sonic 1 Mappings Format
loc_21CD8:
		dc.b	$00
		dc.b	$00		     ; Filler     
SS_Red_White_Ball_Mappings: ; loc_21CDA:
		dc.w    loc_21CE2-SS_Red_White_Ball_Mappings
		dc.w    loc_21CE8-SS_Red_White_Ball_Mappings
		dc.w    loc_21CEE-SS_Red_White_Ball_Mappings
		dc.w    loc_21CF4-SS_Red_White_Ball_Mappings
loc_21CE2:
		dc.b	$01
		dc.b	$F4,$0A,$00,$00,$F4        ; Sonic 1 Mappings Format
loc_21CE8:
		dc.b	$01
		dc.b	$F4,$0A,$08,$00,$F4        ; Sonic 1 Mappings Format
loc_21CEE:
		dc.b	$01
		dc.b	$F4,$0A,$18,$00,$F4        ; Sonic 1 Mappings Format
loc_21CF4:
		dc.b	$01
		dc.b	$F4,$0A,$10,$00,$F4        ; Sonic 1 Mappings Format   
SS_Up_Mappings: ; loc_21CFA:
		dc.w    loc_21CFE-SS_Up_Mappings
		dc.w    loc_21d04-SS_Up_Mappings
loc_21CFE:
		dc.b	$01
		dc.b	$F4,$0A,$00,$00,$F4        ; Sonic 1 Mappings Format
loc_21d04:
		dc.b	$01
		dc.b	$F4,$0A,$00,$12,$F4        ; Sonic 1 Mappings Format 
SS_Down_Mappings: ; loc_21d0A:
		dc.w    loc_21d0E-SS_Down_Mappings
		dc.w    loc_21d14-SS_Down_Mappings
loc_21d0E:
		dc.b	$01
		dc.b	$F4,$0A,$00,$09,$F4        ; Sonic 1 Mappings Format 
loc_21d14:
		dc.b	$01
		dc.b	$F4,$0A,$00,$12,$F4        ; Sonic 1 Mappings Format
SS_Red_Emerald_Mappings: ; loc_21d1A:
		dc.w    loc_21d26-SS_Red_Emerald_Mappings
		dc.w    loc_21d38-SS_Red_Emerald_Mappings
SS_Gray_Emerald_Mappings: ; loc_21d1E:
		dc.w    loc_21d2C-SS_Gray_Emerald_Mappings
		dc.w    loc_21d38-SS_Gray_Emerald_Mappings		
SS_Emerald_Mappings: ; loc_21d22:  {Blue / Yellow / Purple / Green}  
		dc.w    loc_21d32-SS_Emerald_Mappings
		dc.w    loc_21d38-SS_Emerald_Mappings
loc_21d26:
		dc.b	$01
		dc.b	$F8,$05,$00,$00,$F8        ; Sonic 1 Mappings Format   
loc_21d2C:
		dc.b	$01
		dc.b	$F8,$05,$00,$04,$F8        ; Sonic 1 Mappings Format		
loc_21d32:
		dc.b	$01
		dc.b	$F8,$05,$00,$08,$F8        ; Sonic 1 Mappings Format
loc_21d38:
		dc.b	$01
		dc.b	$F8,$05,$00,$0C,$F8        ; Sonic 1 Mappings Format						       
;===============================================================================
; Special Stage - Sub-routine
; [ End ]              
;===============================================================================  
		nop
;=============================================================================== 
; Object 0x09 - Sonic In Special Stage
; [ Begin ]		         
;===============================================================================		 
Obj_0x09_Sonic_In_Special_Stage: ; loc_21d40:
		tst.w	(Debug_placement_mode).w
		beq.s	Sonic_In_SS_Normal	; loc_21d4E
		bsr.w	S1SS_FixCamera	; loc_21F76
		bra.w	DebugMode	; loc_23B70
Sonic_In_SS_Normal: ; loc_21d4E:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	loc_21d5C(pc,d0),d1
		jmp	loc_21d5C(pc,d1)
loc_21d5C:		
		dc.w	loc_21d64-loc_21d5C
		dc.w	loc_21DA4-loc_21d5C
		dc.w	loc_21FA0-loc_21d5C
		dc.w	loc_21FF4-loc_21d5C
loc_21d64:
		addq.b	#2,$24(a0)    
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.l	#MapUnc_Sonic,$4(a0)	; loc_614C0
		move.w	#$780,2(a0)
		bsr.w	JmpTo39_Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#0,$18(a0)
		move.b	#2,$1C(a0)
		bset	#2,$22(a0)
		bset	#1,$22(a0)
loc_21DA4:
		tst.w	(Debug_mode_flag).w
		beq.s	loc_21DB8
		btst	#4,(Ctrl_1_Press).w
		beq.s	loc_21DB8
		move.w	#1,(Debug_placement_mode).w
loc_21DB8:
		move.b	#0,$30(a0)
		moveq	#0,d0
		move.b	$22(a0),d0
		andi.w	#2,d0
		move.w	SonicInSS_Modes(pc,d0),d1	; loc_21DDC
		jsr	SonicInSS_Modes(pc,d1)	; loc_21DDC
		jsr	(LoadSonicDynPLC).l	; (loc_10DDC)
		jmp	(DisplaySprite).l	; (loc_d3C2)
SonicInSS_Modes: ; loc_21DDC:
		dc.w	SonicInSS_OnWall-SonicInSS_Modes	; loc_21DE0
		dc.w	SonicInSS_InAir-SonicInSS_Modes	; loc_21DEE
SonicInSS_OnWall: ; loc_21DE0:
		bsr.w	SonicInSS_Jump	; loc_21F16
		bsr.w	SonicInSS_Move	; loc_21E20
		bsr.w	SonicInSS_Fall	; loc_22016
		bra.s	SonicInSS_Display	; loc_21DFA
SonicInSS_InAir: ; loc_21DEE:
		bsr.w	SonicInSS_Null	; loc_21F5A
		bsr.w	SonicInSS_Move	; loc_21E20
		bsr.w	SonicInSS_Fall	; loc_22016
SonicInSS_Display: ; loc_21DFA:
		bsr.w	SonicInSS_ChkItems	; loc_22112
		bsr.w	SonicInSS_ChkItems2	; loc_2224E
		jsr	(ObjectMove).l	; (loc_d27A)
		bsr.w	S1SS_FixCamera	; loc_21F76
		move.w	(SpecialStage_angle).w,d0
		add.w   (SpecialStage_speed).w,d0
		move.w	d0,(SpecialStage_angle).w
		jsr	(Sonic_Animate).l	; (loc_10AB2)
		rts
SonicInSS_Move: ; loc_21E20:
		btst	#2,(Ctrl_1_Held_Logical).w
		beq.s	loc_21E2C
		bsr.w	SonicInSS_MoveLeft	; loc_21EB8
loc_21E2C:
		btst	#3,(Ctrl_1_Held_Logical).w
		beq.s	loc_21E38
		bsr.w	SonicInSS_MoveRight	; loc_21EE8
loc_21E38:
		move.b	(Ctrl_1_Held_Logical).w,d0
		andi.b	#$C,d0
		bne.s	loc_21E68
		move.w	$14(a0),d0
		beq.s	loc_21E68
		bmi.s	loc_21E5A
		subi.w	#$C,d0
		bcc.s	loc_21E54
		move.w	#0,d0
loc_21E54:
		move.w	d0,$14(a0)
		bra.s	loc_21E68
loc_21E5A:
		addi.w	#$C,d0
		bcc.s	loc_21E64
		move.w	#0,d0
loc_21E64:
		move.w	d0,$14(a0)
loc_21E68:
		move.b	(SpecialStage_angle).w,d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		neg.b   d0
		jsr	(CalcSine).l	; loc_320A
		muls.w  $14(a0),d1
		add.l   d1,8(a0)
		muls.w  $14(a0),d0
		add.l   d0,$C(a0)
		movem.l d0/d1,-(sp)
		move.l	$C(a0),d2
		move.l	8(a0),d3
		bsr.w	loc_220A8
		beq.s	loc_21EB2
		movem.l (sp)+,d0/d1
		sub.l   d1,8(a0)
		sub.l   d0,$C(a0)
		move.w	#0,$14(a0)
		rts
loc_21EB2:
		movem.l (sp)+,d0/d1
		rts
		
;=============================================================================== 
; Sub Routine SonicInSS_MoveLeft
; [ Begin ]		         
;===============================================================================		 
SonicInSS_MoveLeft: ; loc_21EB8:
		bset	#0,$22(a0)
		move.w	$14(a0),d0
		beq.s	loc_21EC6
		bpl.s	loc_21EDA
loc_21EC6:
		subi.w	#$C,d0
		cmpi.w	#-$800,d0
		bgt.s   loc_21Ed4
		move.w	#-$800,d0
loc_21Ed4:
		move.w	d0,$14(a0)
		rts
loc_21EDA:
		subi.w	#$40,d0
		bcc.s	loc_21EE2
		nop
loc_21EE2:
		move.w	d0,$14(a0)
		rts
;=============================================================================== 
; Sub Routine SonicInSS_MoveLeft
; [ End ]		         
;===============================================================================		 

;=============================================================================== 
; Sub Routine SonicInSS_MoveRight
; [ Begin ]		         
;===============================================================================		 
SonicInSS_MoveRight: ; loc_21EE8:
		bclr	#0,$22(a0)
		move.w	$14(a0),d0
		bmi.s	loc_21F08
		addi.w	#$C,d0
		cmpi.w	#$800,d0
		blt.s   loc_21F02
		move.w	#$800,d0
loc_21F02:
		move.w	d0,$14(a0)
		bra.s	loc_21F14
loc_21F08:
		addi.w	#$40,d0
		bcc.s	loc_21F10
		nop
loc_21F10:
		move.w	d0,$14(a0)
loc_21F14:
		rts
;=============================================================================== 
; Sub Routine SonicInSS_MoveRight
; [ End ]		         
;===============================================================================
		 
;=============================================================================== 
; Sub Routine SonicInSS_Jump
; [ Begin ]		         
;===============================================================================		 
SonicInSS_Jump: ; loc_21F16:
		move.b	(Ctrl_1_Press_Logical).w,d0
		andi.b	#$70,d0
		beq.s	loc_21F58
		move.b	(SpecialStage_angle).w,d0
		andi.b	#$FC,d0
		neg.b   d0
		subi.b	#$40,d0
		jsr	(CalcSine).l	; loc_320A
		muls.w  #$680,d1
		asr.l   #8,d1
		move.w	d1,$10(a0)
		muls.w  #$680,d0
		asr.l   #8,d0
		move.w	d0,$12(a0)
		bset	#1,$22(a0)
		move.w	#SndID_Jump,d0
		jsr	(PlaySound).l	; loc_14C6
loc_21F58:
		rts
;=============================================================================== 
; Sub Routine SonicInSS_Jump
; [ End ]		         
;===============================================================================		 

;=============================================================================== 
; Sub Routine SonicInSS_Null
; [ Begin ]		         
;===============================================================================		 
SonicInSS_Null: ; loc_21F5A:   
		rts
;=============================================================================== 
; Sub Routine SonicInSS_Null
; [ End ]		         
;===============================================================================		 
		move.w	#-$400,d1
		cmp.w	$12(a0),d1
		ble.s   loc_21F74
		move.b	(Ctrl_1_Held_Logical).w,d0
		andi.b	#$70,d0
		bne.s	loc_21F74
		move.w	d1,$12(a0)
loc_21F74:
		rts
;=============================================================================== 
; Sub Routine S1SS_FixCamera
; [ Begin ]		         
;===============================================================================  
S1SS_FixCamera: ; loc_21F76:
		move.w	$C(a0),d2
		move.w	8(a0),d3
		move.w	(Camera_X_pos).w,d0
		subi.w	#$A0,d3
		bcs.s	loc_21F8E
		sub.w   d3,d0
		sub.w   d0,(Camera_X_pos).w
loc_21F8E:
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$70,d2
		bcs.s	loc_21F9E
		sub.w   d2,d0
		sub.w   d0,(Camera_Y_pos).w
loc_21F9E:
		rts
;=============================================================================== 
; Sub Routine S1SS_FixCamera
; [ End ]		         
;===============================================================================		  
loc_21FA0:
		addi.w	#$40,(SpecialStage_speed).w
		cmpi.w	#$1800,(SpecialStage_speed).w
		bne.s	loc_21FB4
		move.b	#GameModeID_Level,(Game_Mode).w
loc_21FB4:
		cmpi.w	#$3000,(SpecialStage_speed).w
		blt.s   loc_21Fd2
		move.w	#0,(SpecialStage_speed).w
		move.w	#$4000,(SpecialStage_angle).w
		addq.b	#2,$24(a0)
		move.w	#$3C,$38(a0)
loc_21Fd2:
		move.w	(SpecialStage_angle).w,d0
		add.w   (SpecialStage_speed).w,d0
		move.w	d0,(SpecialStage_angle).w
		jsr	(Sonic_Animate).l	; (loc_10AB2)
		jsr	(LoadSonicDynPLC).l	; (loc_10DDC)
		bsr.w	S1SS_FixCamera	; loc_21F76
		jmp	(DisplaySprite).l	; (loc_d3C2)
loc_21FF4:
		subq.w	#1,$38(a0)
		bne.s	loc_22000
		move.b	#GameModeID_Level,(Game_Mode).w
loc_22000:
		jsr	(Sonic_Animate).l	; (loc_10AB2)
		jsr	(LoadSonicDynPLC).l	; (loc_10DDC)
		bsr.w	S1SS_FixCamera	; loc_21F76
		jmp	(DisplaySprite).l	; (loc_d3C2)
		
;=============================================================================== 
; Sub Routine SonicInSS_Fall
; [ Begin ]		         
;===============================================================================		  
SonicInSS_Fall: ; loc_22016:
		move.l	$C(a0),d2
		move.l	8(a0),d3
		move.b	(SpecialStage_angle).w,d0
		andi.b	#$FC,d0
		jsr	(CalcSine).l	; loc_320A
		move.w	$10(a0),d4
		ext.l   d4
		asl.l   #8,d4
		muls.w  #$2A,d0
		add.l   d4,d0
		move.w	$12(a0),d4
		ext.l   d4
		asl.l   #8,d4
		muls.w  #$2A,d1
		add.l   d4,d1
		add.l   d0,d3
		bsr.w	loc_220A8
		beq.s	loc_22070
		sub.l   d0,d3
		moveq	#0,d0
		move.w	d0,$10(a0)
		bclr	#1,$22(a0)
		add.l   d1,d2
		bsr.w	loc_220A8
		beq.s	loc_22086
		sub.l   d1,d2
		moveq	#0,d1
		move.w	d1,$12(a0)
		rts
loc_22070:
		add.l   d1,d2
		bsr.w	loc_220A8
		beq.s	loc_22094
		sub.l   d1,d2
		moveq	#0,d1
		move.w	d1,$12(a0)
		bclr	#1,$22(a0)
loc_22086:
		asr.l   #8,d0
		asr.l   #8,d1
		move.w	d0,$10(a0)
		move.w	d1,$12(a0)
		rts
loc_22094:
		asr.l   #8,d0
		asr.l   #8,d1
		move.w	d0,$10(a0)
		move.w	d1,$12(a0)
		bset	#1,$22(a0)
		rts
;=============================================================================== 
; Sub Routine SonicInSS_Fall
; [ End ]		         
;===============================================================================  
		
loc_220A8:
		lea	(Chunk_Table),A1
		moveq	#0,d4
		swap	d2
		move.w	d2,d4
		swap	d2
		addi.w	#$44,d4
		divu.w  #$18,d4
		mulu.w  #$80,d4
		adda.l  d4,A1
		moveq	#0,d4
		swap	d3
		move.w	d3,d4
		swap	d3
		addi.w	#$14,d4
		divu.w  #$18,d4
		adda.w	d4,A1
		moveq	#0,d5
		move.b	(a1)+,d4
		bsr.s	loc_220F0
		move.b	(a1)+,d4
		bsr.s	loc_220F0
		adda.w	#$7E,A1
		move.b	(a1)+,d4
		bsr.s	loc_220F0
		move.b	(a1)+,d4
		bsr.s	loc_220F0
		tst.b	d5
		rts
loc_220F0:
		beq.s	loc_22104
		cmpi.b	#$28,d4
		beq.s	loc_22104
		cmpi.b	#$3A,d4
		bcs.s	loc_22106
		cmpi.b	#$4B,d4
		bcc.s	loc_22106
loc_22104:
		rts
loc_22106:
		move.b	d4,$30(a0)
		move.l	A1,$32(a0)		
		moveq	#-1,d5
		rts
		
;=============================================================================== 
; Sub Routine SonicInSS_ChkItems
; [ Begin ]		         
;===============================================================================		  
SonicInSS_ChkItems: ; loc_22112:
		lea	(Chunk_Table),A1
		moveq	#0,d4
		move.w	$C(a0),d4
		addi.w	#$50,d4
		divu.w  #$18,d4
		mulu.w  #$80,d4
		adda.l  d4,A1
		moveq	#0,d4
		move.w	8(a0),d4
		addi.w	#$20,d4
		divu.w  #$18,d4
		adda.w	d4,A1
		move.b	(a1),d4
		bne.s	loc_2214C
		tst.b	$3A(a0)
		bne.w	loc_2221C
		moveq	#0,d4
		rts
loc_2214C:
		cmpi.b	#$3A,d4
		bne.s	loc_22188
		bsr.w	loc_21874
		bne.s	loc_22160
		move.b	#1,(a2)
		move.l	A1,4(a2)
loc_22160:
		jsr	(CollectRing).l
		cmpi.w	#50,(Ring_count).w
		bcs.s	loc_22184
		bset	#0,(Extra_life_flags).w
		bne.s	loc_22184
		addq.b	#1,(Continue_count).w
		move.w	#SndID_ContinueJingle,d0
		jsr	(PlayMusic).l	; loc_14C0
loc_22184:
		moveq	#0,d4
		rts
loc_22188:
		cmpi.b	#$28,d4
		bne.s	loc_221B2
		bsr.w	loc_21874
		bne.s	loc_2219C
		move.b	#3,(a2)
		move.l	A1,4(a2)
loc_2219C:
		addq.b	#1,(Life_count).w
		addq.b	#1,(Update_HUD_lives).w
		move.w	#S1MusID_ExtraLife,d0
		jsr	(PlayMusic).l	; loc_14C0
		moveq	#0,d4
		rts
loc_221B2:
		cmpi.b	#$3B,d4
		bcs.s	loc_221F8
		cmpi.b	#$40,d4
		bhi.s	loc_221F8
		bsr.w	loc_21874
		bne.s	loc_221CC
		move.b	#5,(a2)
		move.l	A1,4(a2)
loc_221CC:
		cmpi.b	#6,(Emerald_count).w
		beq.s	loc_221EA
		subi.b	#$3B,d4
		moveq	#0,d0
		move.b	(Emerald_count).w,d0
		lea	(Got_Emeralds_array).w,A2
		move.b	d4,(A2,d0)
		addq.b	#1,(Emerald_count).w
loc_221EA:
		move.w	#S1MusID_Emerald,d0
		jsr	(PlaySound).l	; loc_14C6
		moveq	#0,d4
		rts
loc_221F8:
		cmpi.b	#$41,d4
		bne.s	loc_22204
		move.b	#1,$3A(a0)
loc_22204:
		cmpi.b	#$4A,d4
		bne.s	loc_22218
		cmpi.b	#1,$3A(a0)
		bne.s	loc_22218
		move.b	#2,$3A(a0)
loc_22218:		  
		moveq	#-1,d4
		rts
loc_2221C:
		cmpi.b	#2,$3A(a0)
		bne.s	loc_22246
		lea	(Chunk_Table+$1020),A1
		moveq	#$3F,d1
loc_2222C:		
		moveq	#$3F,d2
loc_2222E:		
		cmpi.b	#$41,(a1)
		bne.s	loc_22238
		move.b	#$2C,(a1)
loc_22238:
		addq.w	#1,A1
		dbf	d2,loc_2222E
		lea	$40(a1),A1
		dbf	d1,loc_2222C
loc_22246:
		clr.b   $3A(a0)
		moveq	#0,d4
		rts
;=============================================================================== 
; Sub Routine SonicInSS_ChkItems
; [ End ]		         
;===============================================================================		  

;=============================================================================== 
; Sub Routine SonicInSS_ChkItems2
; [ Begin ]		         
;===============================================================================		  
SonicInSS_ChkItems2: ; loc_2224E:
		move.b	$30(a0),d0
		bne.s	loc_2226E
		subq.b	#1,$36(a0)
		bpl.s	loc_22260
		move.b	#0,$36(a0)
loc_22260:
		subq.b	#1,$37(a0)
		bpl.s	loc_2226C
		move.b	#0,$37(a0)
loc_2226C:
		rts
loc_2226E:
		cmpi.b	#$25,d0
		bne.s	loc_222E6
		move.l	$32(a0),d1
		subi.l	#$FFFF0001,d1
		move.w	d1,d2
		andi.w	#$7F,d1
		mulu.w  #$18,d1
		subi.w	#$14,d1
		lsr.w	#7,d2
		andi.w	#$7F,d2
		mulu.w  #$18,d2
		subi.w	#$44,d2
		sub.w   8(a0),d1
		sub.w   $C(a0),d2
		jsr	(CalcAngle).l	; loc_34A2
		jsr	(CalcSine).l	; loc_320A
		muls.w  #$F900,d1
		asr.l   #8,d1
		move.w	d1,$10(a0)
		muls.w  #$F900,d0
		asr.l   #8,d0
		move.w	d0,$12(a0)
		bset	#1,$22(a0)
		bsr.w	loc_21874
		bne.s	loc_222DC
		move.b	#2,(a2)
		move.l	$32(a0),d0
		subq.l	#1,d0
		move.l	d0,4(a2)
loc_222DC:
		move.w	#SndID_Bumper,d0
		jmp	(PlaySound).l	; loc_14C6
loc_222E6:
		cmpi.b	#$27,d0
		bne.s	loc_222FC
		addq.b	#2,$24(a0)
		move.w	#SndID_SSGoal,d0
		jsr	(PlaySound).l	; loc_14C6
		rts
loc_222FC:
		cmpi.b	#$29,d0
		bne.s	loc_22330
		tst.b	$36(a0)
		bne.w	loc_223E0
		move.b	#$1E,$36(a0)
		btst	#6,(SpecialStage_direction).w
		beq.s	loc_22326
		asl.w   (SpecialStage_speed).w
		move.l	$32(a0),A1
		subq.l	#1,A1
		move.b	#$2A,(a1)
loc_22326:
		move.w	#SndID_Bwoop,d0
		jmp	(PlaySound).l	; loc_14C6
loc_22330:
		cmpi.b	#$2A,d0
		bne.s	loc_22364
		tst.b	$36(a0)
		bne.w	loc_223E0
		move.b	#$1E,$36(a0)
		btst	#6,(SpecialStage_direction).w
		bne.s	loc_2235A
		asr.w   (SpecialStage_speed).w
		move.l	$32(a0),A1
		subq.l	#1,A1
		move.b	#$29,(a1)
loc_2235A:
		move.w	#SndID_Bwoop,d0
		jmp	(PlaySound).l	; loc_14C6
loc_22364:
		cmpi.b	#$2B,d0
		bne.s	loc_2239A
		tst.b	$37(a0)
		bne.w	loc_223E0
		move.b	#$1E,$37(a0)
		bsr.w	loc_21874
		bne.s	loc_2238C
		move.b	#4,(a2)
		move.l	$32(a0),d0
		subq.l	#1,d0
		move.l	d0,4(a2)
loc_2238C:
		neg.w	(SpecialStage_speed).w
		move.w	#SndID_Bwoop,d0
		jmp	(PlaySound).l	; loc_14C6
loc_2239A:
		cmpi.b	#$2D,d0
		beq.s	loc_223B2
		cmpi.b	#$2E,d0
		beq.s	loc_223B2
		cmpi.b	#$2F,d0
		beq.s	loc_223B2
		cmpi.b	#$30,d0
		bne.s	loc_223E0
loc_223B2:
		bsr.w	loc_21874
		bne.s	loc_223d6
		move.b	#6,(a2)
		move.l	$32(a0),A1
		subq.l	#1,A1
		move.l	A1,4(a2)
		move.b	(a1),d0
		addq.b	#1,d0
		cmpi.b	#$30,d0
		bls.s   loc_223d2
		clr.b   d0
loc_223d2:
		move.b	d0,4(a2)
loc_223d6:
		move.w	#SndID_SSGlass,d0
		jmp	(PlaySound).l	; loc_14C6
loc_223E0:
		rts
;===============================================================================
; Sub Routine SonicInSS_ChkItems2
; [ Begin ]
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 10 - Blank
; This is a *really* old leftover from the Sonic 1 prototype,where it was
; used to test Sonic's animations before using them in-game
; ---------------------------------------------------------------------------
; Sprite_223E2: Obj_0x10:
Obj10:
		rts
; ===========================================================================
; loc_223E4:
JmpTo39_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; loc_223EC: Dynamic_Art_Cues:
AniArt_Load:
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	PLC_DYNANM+2(pc,d0.w),d1
		lea	PLC_DYNANM(pc,d1.w),a2
		move.w	PLC_DYNANM(pc,d0.w),d0
		jmp	PLC_DYNANM(pc,d0.w)
; ---------------------------------------------------------------------------
		rts
; ---------------------------------------------------------------------------
; ZONE ANIMATION PROCEDURES AND SCRIPTS
;
; Each zone gets two entries in this jump table. The first entry points to the
; zone's animation procedure (usually Dynamic_Normal,but some zones have special
; procedures for complicated animations). The second points to the zone's animation
; script.
;
; Note that Animated_Null is not a valid animation script,so don't pair it up
; with anything except Dynamic_Null,or bad things will happen (for example,a bus error exception).
; ---------------------------------------------------------------------------
; off_22408:
PLC_DYNANM: zoneOrderedOffsetTable 2,2
	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_22698

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_226FC

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_226FC

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w loc_2244E
	zoneOffsetTableEntry.w loc_22754

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_227B8

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_227E4

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w CPz_Animate

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_2283C

	zoneOffsetTableEntry.w Dynamic_Null
	zoneOffsetTableEntry.w loc_22866
    zoneTableEnd
; ===========================================================================
; return_2244C:
Dynamic_Null:
		rts
; ===========================================================================

loc_2244E:
		tst.w	(Two_player_mode).w
		bne.w	 Dynamic_Normal          ; loc_22630
		lea	(Anim_Counters).w,A3
		moveq	#0,d0
		move.w	(Camera_X_pos).w,d1
		neg.w	d1
		asr.w   #3,d1
		move.w	(Camera_X_pos).w,d0
		lsr.w	#4,d0
		add.w   d1,d0
		subi.w	#$10,d0
		divu.w  #$30,d0
		swap	d0
		cmp.b	1(a3),d0
		beq.s	loc_224C0
		move.b	d0,1(a3)
		move.w	d0,d2
		andi.w	#7,d0
		add.w   d0,d0
		add.w   d0,d0
		add.w   d0,d0
		move.w	d0,d1
		add.w   d0,d0
		add.w   d1,d0
		andi.w	#$38,d2
		lsr.w	#2,d2
		add.w   d2,d0
		lea	loc_224C4(pc,d0.w),a4
		moveq	#5,d5
		move.w	#$A000,d4
loc_224A4:
		moveq	#-1,d1
		move.w	(a4)+,d1
		andi.l	#$FFFFFF,d1
		move.w	d4,d2
		moveq	#$40,d3
		jsr	(QueueDMATransfer).l	; loc_156C
		addi.w	#$80,d4
		dbf	d5,loc_224A4
loc_224C0:
		bra.w	loc_22584
loc_224C4:
		dc.w	$0080,$0280,$0380,$0580,$0600,$0880,$0080,$0280
		dc.w	$0380,$0580,$0600,$0880,$0980,$0A80,$0B80,$0C80
		dc.w	$0E80,$0F00,$0980,$0A80,$0B80,$0C80,$0E80,$0F00
		dc.w	$1080,$1180,$1200,$1280,$1300,$1380,$1080,$1180
		dc.w	$1200,$1280,$1300,$1380,$1400,$1480,$1500,$1600
		dc.w	$1900,$1d00,$1400,$1480,$1500,$1600,$1900,$1d00
		dc.w	$1D80,$1E00,$2280,$2400,$2580,$2600,$1D80,$1E00
		dc.w	$2280,$2400,$2580,$2600,$2680,$2780,$2B00,$3280
		dc.w	$3600,$3680,$2680,$2780,$2B00,$3280,$3600,$3680
		dc.w	$3C80,$3d00,$3F00,$3F80,$4080,$4480,$3C80,$3d00
		dc.w	$3F00,$3F80,$4080,$4480,$4580,$4880,$4900,$4B80
		dc.w	$4C80,$4D80,$4580,$4880,$4900,$4B80,$4C80,$4D80
loc_22584:
		lea	(TempArray_LayerDef).w,a1
		move.w	(Camera_X_pos).w,d2
		neg.w	d2
		asr.w   #3,d2
		move.l	a2,-(sp)
		lea	(Hill_Top_Background_Unc).l,a0 ; loc_28C2A
		lea	(Chunk_Table+$7C00),a2
		moveq	#$F,d1
loc_225A0:
		move.w	(a1)+,d0
		neg.w	d0
		add.w   d2,d0
		andi.w	#$1F,d0
		lsr.w	#1,d0
		bcc.s	loc_225B2
		addi.w	#$200,d0
loc_225B2:
		lea	(a0,d0.w),a4
		lsr.w	#1,d0
		bcs.s	loc_225DC
		move.l	(a4)+,(a2)+
		adda.w	#$3C,a2
		move.l	(a4)+,(a2)+
		adda.w	#$3C,a2
		move.l	(a4)+,(a2)+
		adda.w	#$3C,a2
		move.l	(a4)+,(a2)+
		suba.w  #$C0,a2
		adda.w	#$20,a0
		dbf	d1,loc_225A0
		bra.s	loc_22614
loc_225DC:
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		adda.w	#$3C,a2
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		adda.w	#$3C,a2
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		adda.w	#$3C,a2
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		suba.w  #$C0,a2
		adda.w	#$20,a0
		dbf	d1,loc_225A0
loc_22614:
		move.l	#Chunk_Table&$FFFFFF+$7C00,d1
		move.w	#$A300,d2
		move.w	#$80,d3
		jsr	(QueueDMATransfer).l	; loc_156C
		move.l	(sp)+,A2
		addq.w	#2,A3
		bra.w	loc_22634
; ===========================================================================
; loc_22630:
Dynamic_Normal:
		lea	(Anim_Counters).w,a3

loc_22634:
		move.w	(a2)+,d6		; get the number of scripts in the list

loc_22636:
		subq.b	#1,(a3)			; tick down animation frame
		bpl.s	loc_2267C		; if frame isn't over,move onto the next script
		moveq	#0,d0
		move.b	1(a3),d0		; get current frame
		cmp.b	6(a2),d0		; have we processed the last frame in the script?
		bcs.s	loc_2264C		; if not,branch
		moveq	#0,d0
		move.b	d0,1(a3)

loc_2264C:
		addq.b	#1,1(a3)
		move.b	(a2),(a3)
		bpl.s	loc_2265A
		add.w	d0,d0
		move.b	9(a2,d0.w),(a3)

loc_2265A:
		move.b	8(a2,d0.w),d0
		lsl.w	#5,d0
		move.w	4(a2),d2
		move.l	(a2),d1
		andi.l	#$FFFFFF,d1
		add.l	d0,d1
		moveq	#0,d3
		move.b	7(a2),d3
		lsl.w	#4,d3
		jsr	(QueueDMATransfer).l

loc_2267C:
		move.b	6(a2),d0
		tst.b	(a2)
		bpl.s	loc_22686
		add.b	d0,d0

loc_22686:
		addq.b	#1,d0
		andi.w	#$FE,d0
		lea	8(a2,d0.w),a2
		addq.w	#2,a3
		dbf	d6,loc_22636
		rts

loc_22698: ; Green Hill Dynamic Reload Sprites
		dc.w	$0004		   ; Total of Animations
		dc.l    ($FF<<$18)|ArtUnc_Flowers1 ; loc_28000
		dc.w	$7280		   ; VRam
		dc.w	$0602		   ; Frames/Tiles
		dc.w	$007F,$0213,$0007,$0207,$0007,$0207 ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_Flowers2 ; loc_28080
		dc.w	$72C0		   ; VRam
		dc.w	$0802		   ; Frames/Tiles
		dc.w	$027F,$000B,$020B,$000B,$0205,$0005,$0205,$0005 ; Frame Load/Frame Time
		dc.l    ($07<<$18)|ArtUnc_Flowers3 ; loc_28100
		dc.w	$7300		   ; VRam
		dc.w	$0202		   ; Frames/Tiles
		dc.w	$0002		   ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_Flowers4 ; loc_28180
		dc.w	$7340		   ; VRam
		dc.w	$0802		   ; Frames/Tiles
		dc.w	$007F,$0207,$0007,$0207,$0007,$020B,$000B,$020B ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_GHZPulseBall ; loc_28200
		dc.w	$7380		   ; VRam
		dc.w	$0602		   ; Frames/Tiles
		dc.w	$0017,$0209,$040B,$0617,$040B,$0209 ; Frame Load/Frame Time
loc_226FC: ; Metropolis Dynamic Reload Sprites
		dc.w	$0005		   ; Total of Animations
		dc.l    ArtUnc_MTZCylinder     ; loc_2902A
		dc.w	$6980		   ; VRam
		dc.w	$0810		   ; Frames/Tiles
		dc.w	$0010,$2030,$4050,$6070 ; Frame Load/Frame Time
		dc.l    ($0D<<$18)|ArtUnc_Lava      ; loc_2A02A:
		dc.w	$6800		   ; VRam
		dc.w	$060C		   ; Frames/Tiles
		dc.w	$000C,$1824,$180C     ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_MTZAnimBack   ; loc_2A06A:
		dc.w	$6B80		   ; VRam
		dc.w	$0406		   ; Frames/Tiles
		dc.w	$0013,$0607,$0C13,$0607 ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_MTZAnimBack   ; loc_2A06A:
		dc.w	$6C40		   ; VRam
		dc.w	$0406		   ; Frames/Tiles
		dc.w	$0C13,$0607,$0013,$0607 ; Frame Load/Frame Time
		dc.l    ($05<<$18)|ArtUnc_Drills    ; loc_2A86A:
		dc.w	$6d00		   ; VRam
		dc.w	$0408		   ; Frames/Tiles
		dc.w	$0008,$1018            ; Frame Load/Frame Time
		dc.l    ($05<<$18)|ArtUnc_Drills    ; loc_2A86A:
		dc.w	$6E00		   ; VRam
		dc.w	$0408		   ; Frames/Tiles
		dc.w	$0008,$1018            ; Frame Load/Frame Time
loc_22754: ; Hill Top Dynamic Reload Sprites
		dc.w	$0004		   ; Total of Animations
		dc.l    ($FF<<$18)|ArtUnc_Flowers1 ; loc_28000
		dc.w	$7280		   ; VRam
		dc.w	$0602		   ; Frames/Tiles
		dc.w	$007F,$0213,$0007,$0207,$0007,$0207 ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_Flowers2 ; loc_28080
		dc.w	$72C0		   ; VRam
		dc.w	$0802		   ; Frames/Tiles
		dc.w	$027F,$000B,$020B,$000B,$0205,$0005,$0205,$0005 ; Frame Load/Frame Time
		dc.l    ($07<<$18)|ArtUnc_Flowers3 ; loc_28100
		dc.w	$7300		   ; VRam
		dc.w	$0202		   ; Frames/Tiles
		dc.w	$0002		   ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_Flowers4 ; loc_28180
		dc.w	$7340		   ; VRam
		dc.w	$0802		   ; Frames/Tiles
		dc.w	$007F,$0207,$0007,$0207,$0007,$020B,$000B,$020B ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_GHZPulseBall ; loc_28200
		dc.w	$7380		   ; VRam
		dc.w	$0602		   ; Frames/Tiles
		dc.w	$0017,$0209,$040B,$0617,$040B,$0209 ; Frame Load/Frame Time
loc_227B8: ; Hidden Palace Dynamic Reload Sprites
		dc.w	$0002		   ; Total of Animations
		dc.l    ($08<<$18)|ArtUnc_HPZPulseOrb     ; loc_2B46A
		dc.w	$5d00		   ; VRam
		dc.w	$0608		   ; Frames/Tiles
		dc.w	$0000,$0810,$1008     ; Frame Load/Frame Time
		dc.l    ($08<<$18)|ArtUnc_HPZPulseOrb     ; loc_2B46A
		dc.w	$5E00		   ; VRam
		dc.w	$0608		   ; Frames/Tiles
		dc.w	$0810,$1008,$0000     ; Frame Load/Frame Time
		dc.l    ($08<<$18)|ArtUnc_HPZPulseOrb     ; loc_2B46A
		dc.w	$5F00		   ; VRam
		dc.w	$0608		   ; Frames/Tiles
		dc.w	$1008,$0000,$0810     ; Frame Load/Frame Time
loc_227E4: ; Oil Ocean Dynamic Reload Sprites
		dc.w	$0004		   ; Total of Animations
		dc.l    ($FF<<$18)|ArtUnc_OOZPulseBall ; loc_2B76A
		dc.w	$5A00		   ; VRam
		dc.w	$0404		   ; Frames/Tiles
		dc.w	$000B,$0405,$0809,$0403 ; Frame Load/Frame Time
		dc.l    ($06<<$18)|ArtUnc_OOZSquareBall1 ; loc_2B8EA
		dc.w	$5A80		   ; VRam
		dc.w	$0404		   ; Frames/Tiles
		dc.w	$0004,$080C            ; Frame Load/Frame Time
		dc.l    ($06<<$18)|ArtUnc_OOZSquareBall2 ; loc_2BAEA
		dc.w	$5B00		   ; VRam
		dc.w	$0404		   ; Frames/Tiles
		dc.w	$0004,$080C            ; Frame Load/Frame Time
		dc.l    ($11<<$18)|ArtUnc_Oil1    ; loc_2BCEA
		dc.w	$5B80		   ; VRam
		dc.w	$0610		   ; Frames/Tiles
		dc.w	$0010,$2030,$2010     ; Frame Load/Frame Time
		dc.l    ($11<<$18)|ArtUnc_Oil2 ; loc_2C4EA
		dc.w	$5D80		   ; VRam
		dc.w	$0610		   ; Frames/Tiles
		dc.w	$0010,$2030,$2010     ; Frame Load/Frame Time
CPz_Animate: ; loc_2282A: ; Chemical Plant Dynamic Reload Sprites
		dc.w	$0000		   ; Total of Animations
		dc.l    ($04<<$18)|CPz_Dyn_Background ; loc_2CCEA:
		dc.w	$6E00		   ; VRam
		dc.w	$0802		   ; Frames/Tiles
		dc.w	$0002,$0406,$080A,$0C0E ; Frame Load/Frame Time
loc_2283C: ; Neo Green Hill Dynamic Reload Sprites
		dc.w	$0003		   ; Total of Animations
		dc.l    ($05<<$18)|NGHz_Water_Falls_1 ; loc_2CEEA
		dc.w	$7F80		   ; VRam
		dc.w	$0204		   ; Frames/Tiles
		dc.w	$0004		   ; Frame Load/Frame Time
		dc.l    ($05<<$18)|NGHz_Water_Falls_1 ; loc_2CEEA
		dc.w	$7F00		   ; VRam
		dc.w	$0204		   ; Frames/Tiles
		dc.w	$0400		   ; Frame Load/Frame Time
		dc.l    ($05<<$18)|NGHz_Water_Falls_2 ; loc_2CFEA
		dc.w	$7E80		   ; VRam
		dc.w	$0204		   ; Frames/Tiles
		dc.w	$0004		   ; Frame Load/Frame Time
		dc.l    ($05<<$18)|NGHz_Water_Falls_3 ; loc_2d0EA
		dc.w	$7E00		   ; VRam
		dc.w	$0204		   ; Frames/Tiles
		dc.w	$0004		   ; Frame Load/Frame Time
loc_22866:
		cmpi.b	#chemical_plant_zone,(Current_Zone).w
		beq.s	loc_22870
loc_2286E:
		rts
loc_22870:
		move.w	(Camera_X_pos).w,d0
		cmpi.w	#$1940,d0
		bcs.s	loc_2286E
		cmpi.w	#$1F80,d0
		bcc.s	loc_2286E
		subq.b	#1,(CPZ_UnkScroll_Timer).w
		bpl.s	loc_2286E
		move.b	#7,(CPZ_UnkScroll_Timer).w
		move.b	#1,(Screen_redraw_flag).w
		lea	(Chunk_Table+$7500),a1
		bsr.s	loc_228A0
		lea	(Chunk_Table+$7D00),a1
loc_228A0:
		move.w	#7,d1
loc_228A4:
		move.w	(a1),d0
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	$72(a1),(a1)+
		adda.w	#$70,a1
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	$72(a1),(a1)+
		adda.w	#$70,a1
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	$72(a1),(a1)+
		adda.w	#$70,a1
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	d0,(a1)+
		suba.w  #$180,a1
		dbf	d1,loc_228A4
		rts
Load_16x16_Mappings_For_Dyn_Sprites: ; loc_2293A: ; Load 16x16 mappings used by dynamic reload sprites...
		cmpi.b	#hill_top_zone,(Current_Zone).w
		bne.s	loc_22952
		bsr.w	loc_22d62
		move.b	#-1,(Anim_Counters+1).w
		move.w	#-1,(TempArray_LayerDef+$20).w
loc_22952:
		cmpi.b	#chemical_plant_zone,(Current_Zone).w
		bne.s	loc_22960
		move.b	#-1,(Anim_Counters+1).w
loc_22960:
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		add.w   d0,d0
		move.w	Map16Delta_Index(pc,d0),d0 ; loc_229A2
		lea	Map16Delta_Index(pc,d0),a0 ; loc_229A2
		tst.w	(a0)
		beq.s	loc_22988
		lea	(Block_Table).w,a1
		adda.w	(a0)+,a1
		move.w	(a0)+,d1
		tst.w	(Two_player_mode).w
		bne.s	loc_2298A
loc_22982:
		move.w	(a0)+,(a1)+
		dbf	d1,loc_22982
loc_22988:
		rts
loc_2298A:
		move.w	(a0)+,d0
		move.w	d0,d1
		andi.w	#$F800,d0
		andi.w	#$7FF,d1
		lsr.w	#1,d1
		or.w    d1,d0
		move.w	d0,(a1)+
		dbf	d1,loc_2298A
		rts
; off_229A2:
Map16Delta_Index: zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w Map16Delta_GHz  ; loc_229C4 - Green Hill 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22d60 - Null
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22d60 - Wood (Null)
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22d60 - Null
	zoneOffsetTableEntry.w Map16Delta_Mz   ; loc_22A40 - Metropolis 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Mz   ; loc_22A40 - Metropolis 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22d60 - Null
	zoneOffsetTableEntry.w Map16Delta_GHz  ; loc_229C4 - Hill Top 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_HPz  ; loc_22B14 - Hidden Palace 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22d60 - Null
	zoneOffsetTableEntry.w Map16Delta_OOz  ; loc_22C08 - Oil Ocean 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22d60 - Dust Hill (Null)
	zoneOffsetTableEntry.w Map16Delta_CNz  ; loc_22C6C - Casino Night 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_CPz  ; loc_22d10 - Chemical Plant 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22d60 - Genocide City (Null)
	zoneOffsetTableEntry.w Map16Delta_NGHz ; loc_22d1C - Neo Green Hill 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22d60 - Death Egg (Null)
    zoneTableEnd
;===============================================================================
; Green Hill Mappings 16x16 Delta
; [ Begin ]
;===============================================================================
Map16Delta_GHz: ; loc_229C4: ; Green Hill / Hill Top 16x16 mappings used by dynamic reload sprites...
		dc.w	$1788 ; Ram Address to start loading ($1788+$FFFF9000)      -> adda.w	(a0)+,A1
		dc.w	$003B ; Number of words to load in Ram Array ($0000..$003B) -> move.w	(a0)+,d1
		dc.w	$4500,$4504,$4501,$4505,$4508,$450C,$4509,$450D
		dc.w	$4510,$4514,$4511,$4515,$4502,$4506,$4503,$4507
		dc.w	$450A,$450E,$450B,$450F,$4512,$4516,$4513,$4517
		dc.w	$6518,$651A,$6519,$651B,$651C,$651E,$651D,$651F
		dc.w	$439C,$4B9C,$439D,$4B9D,$4158,$439C,$4159,$439D
		dc.w	$4B9C,$4958,$4B9D,$4959,$6394,$6B94,$6395,$6B95
		dc.w	$E396,$EB96,$E397,$EB97,$6398,$6B98,$6399,$6B99
		dc.w	$E39A,$EB9A,$E39B,$EB9B
;===============================================================================
; Green Hill Mappings 16x16 Delta
; [ End ]
;===============================================================================

;===============================================================================
; Metropolis Mappings 16x16 Delta
; [ Begin ]
;===============================================================================
Map16Delta_Mz: ; loc_22A40: ; Metropolis 16x16 mappings used by dynamic reload sprites...
		dc.w	$1730 ; Ram Address to start loading ($1730+$FFFF9000)      -> adda.w	(a0)+,A1
		dc.w	$0067 ; Number of words to load in Ram Array ($0000..$0067) -> move.w	(a0)+,d1
		dc.w	$235C,$2B5C,$235D,$2B5D,$235E,$2B5E,$235F,$2B5F
		dc.w	$635A,$635A,$635B,$635B,$6358,$6358,$6359,$6359
		dc.w	$6356,$6356,$6357,$6357,$6354,$6354,$6355,$6355
		dc.w	$6352,$6352,$6353,$6353,$6350,$6350,$6351,$6351
		dc.w	$634E,$634E,$634F,$634F,$634C,$634C,$634D,$634D
		dc.w	$2360,$2B60,$2361,$2B61,$2362,$2B62,$2363,$2B63
		dc.w	$2364,$2B64,$2365,$2B65,$2366,$2B66,$2367,$2B67
		dc.w	$0000,$0000,$4340,$4341,$0000,$0000,$4342,$4343
		dc.w	$4344,$4345,$4348,$4349,$4346,$4347,$434A,$434B
		dc.w	$E35A,$E35A,$E35B,$E35B,$E358,$E358,$E359,$E359
		dc.w	$E356,$E356,$E357,$E357,$E354,$E354,$E355,$E355
		dc.w	$E352,$E352,$E353,$E353,$E350,$E350,$E351,$E351
		dc.w	$E34E,$E34E,$E34F,$E34F,$E34C,$E34C,$E34D,$E34D
;===============================================================================
; Metropolis Mappings 16x16 Delta
; [ End ]
;===============================================================================

;===============================================================================
; Hidden Palace Mappings 16x16 Delta
; [ Begin ]
;===============================================================================
Map16Delta_HPz: ; loc_22B14: ; Hidden Palace 16x16 mappings used by dynamic reload sprites...
		dc.w	$1710 ; Ram Address to start loading ($1710+$FFFF9000)      -> adda.w	(a0)+,A1
		dc.w	$0077 ; Number of words to load in Ram Array ($0000..$0077) -> move.w	(a0)+,d1
		dc.w	$62E8,$62E9,$62EA,$62EB,$62EC,$62ED,$62EE,$62EF
		dc.w	$62F0,$62F1,$62F2,$62F3,$62F4,$62F5,$62F6,$62F7
		dc.w	$62F8,$62F9,$62FA,$62FB,$62FC,$62FD,$62FE,$62FF
		dc.w	$42E8,$42E9,$42EA,$42EB,$42EC,$42ED,$42EE,$42EF
		dc.w	$42F0,$42F1,$42F2,$42F3,$42F4,$42F5,$42F6,$42F7
		dc.w	$42F8,$42F9,$42FA,$42FB,$42FC,$42FD,$42FE,$42FF
		dc.w	$0000,$62E8,$0000,$62EA,$62E9,$62EC,$62EB,$62EE
		dc.w	$62ED,$0000,$62EF,$0000,$0000,$62F0,$0000,$62F2
		dc.w	$62F1,$62F4,$62F3,$62F6,$62F5,$0000,$62F7,$0000
		dc.w	$0000,$62F8,$0000,$62FA,$62F9,$62FC,$62FB,$62FE
		dc.w	$62FD,$0000,$62FF,$0000,$0000,$42E8,$0000,$42EA
		dc.w	$42E9,$42EC,$42EB,$42EE,$42ED,$0000,$42EF,$0000
		dc.w	$0000,$42F0,$0000,$42F2,$42F1,$42F4,$42F3,$42F6
		dc.w	$42F5,$0000,$42F7,$0000,$0000,$42F8,$0000,$42FA
		dc.w	$42F9,$42FC,$42FB,$42FE,$42FD,$0000,$42FF,$0000
;===============================================================================
; Hidden Palace Mappings 16x16 Delta
; [ End ]
;===============================================================================

;===============================================================================
; Oil Ocean Mappings 16x16 Delta
; [ Begin ]
;===============================================================================
Map16Delta_OOz: ; loc_22C08: ; Oil Ocean 16x16 mappings used by dynamic reload sprites...
		dc.w	$17A0 ; Ram Address to start loading ($17A0+$FFFF9000)      -> adda.w	(a0)+,A1
		dc.w	$002F ; Number of words to load in Ram Array ($0000..$002F) -> move.w	(a0)+,d1
		dc.w	$82d0,$82d2,$82d1,$82d3,$E2d4,$E2d5,$E2d6,$E2d7
		dc.w	$0000,$62D8,$0000,$62DA,$62D9,$0000,$62DB,$0000
		dc.w	$C2DC,$C2DD,$C2E4,$C2E5,$C2DE,$C2DF,$C2E6,$C2E7
		dc.w	$C2E0,$C2E1,$C2E8,$C2E9,$C2E2,$C2E3,$C2EA,$C2EB
		dc.w	$C2EC,$C2ED,$C2F4,$C2F5,$C2EE,$C2EF,$C2F6,$C2F7
		dc.w	$C2F0,$C2F1,$C2F8,$C2F9,$C2F2,$C2F3,$C2FA,$C2FB
;===============================================================================
; Oil Ocean Mappings 16x16 Delta
; [ End ]
;===============================================================================

;===============================================================================
; Casino Night Mappings 16x16 Delta
; [ Begin ]
;===============================================================================
Map16Delta_CNz: ; loc_22C6C: ; Casino Night 16x16 mappings used by dynamic reload sprites...
		dc.w	$1760 ; Ram Address to start loading ($1760+$FFFF9000)      -> adda.w	(a0)+,A1
		dc.w	$004F ; Number of words to load in Ram Array ($0000..$004F) -> move.w	(a0)+,d1
		dc.w	$43d2,$43d4,$43d3,$43d5,$4Bd4,$43d6,$4Bd5,$43d7
		dc.w	$53d3,$53d5,$53d2,$53d4,$5Bd5,$5Bd3,$5Bd4,$5Bd2
		dc.w	$43D8,$43DA,$43D9,$43DB,$4BDA,$4BD8,$4BDB,$4BD9
		dc.w	$43DC,$43DE,$43DD,$43DF,$4BDE,$4BDC,$4BDF,$4BDD
		dc.w	$43E0,$43E2,$43E1,$43E3,$4BE2,$4BE0,$4BE3,$4BE1
		dc.w	$43E4,$43E6,$43E5,$43E7,$4BE6,$4BE4,$4BE7,$4BE5
		dc.w	$63E8,$63EA,$63E9,$63EB,$63EC,$63EE,$63ED,$63EF
		dc.w	$63F0,$63F2,$63F1,$63F3,$63F4,$63F6,$63F5,$63F7
		dc.w	$7BF7,$7BF5,$7BF6,$7BF4,$63F8,$63FA,$63F9,$63FB
		dc.w	$6BF6,$6BF4,$6BF7,$6BF5,$7BEB,$7BE9,$7BEA,$7BE8
;===============================================================================
; Casino Night Mappings 16x16 Delta
; [ End ]
;===============================================================================

;===============================================================================
; Chemical Plant Mappings 16x16 Delta
; [ Begin ]
;===============================================================================
Map16Delta_CPz: ; loc_22d10: ; Chemical Plant 16x16 mappings used by dynamic reload sprites...
		dc.w	$17F8 ; Ram Address to start loading ($17F8+$FFFF9000)      -> adda.w	(a0)+,A1
		dc.w	$0003 ; Number of words to load in Ram Array ($0000..$0003) -> move.w	(a0)+,d1
		dc.w	$4370,$4371,$4370,$4371
;===============================================================================
; Chemical Plant Mappings 16x16 Delta
; [ End ]
;===============================================================================

;===============================================================================
; Neo Green Hill Mappings 16x16 Delta
; [ Begin ]
;===============================================================================
Map16Delta_NGHz: ; loc_22d1C: ; Neo Green Hill 16x16 mappings used by dynamic reload sprites...
		dc.w	$17C0 ; Ram Address to start loading ($17C0+$FFFF9000)      -> adda.w	(a0)+,A1
		dc.w	$001F ; Number of words to load in Ram Array ($0000..$001F) -> move.w	(a0)+,d1
		dc.w	$C3F0,$C3F1,$C3F2,$C3F3,$C3F4,$C3F5,$C3F6,$C3F7
		dc.w	$C3F8,$C3F9,$C3FA,$C3FB,$C3FC,$C3FD,$C3FE,$C3FF
		dc.w	$43F0,$43F1,$43F2,$43F3,$43F4,$43F5,$43F6,$43F7
		dc.w	$43F8,$43F9,$43FA,$43FB,$43FC,$43FD,$43FE,$43FF
;===============================================================================
; Neo Green Hill Mappings 16x16 Delta
; [ End ]
;===============================================================================

;===============================================================================
; Null Mappings 16x16 Delta
; [ Begin ]
;===============================================================================
Map16Delta_Null: ; loc_22d60:
		dc.w	$0000 ; Null
;===============================================================================
; Null Mappings 16x16 Delta
; [ End ]
;===============================================================================

loc_22d62: ; Load Hill Top 8x8 Extra Background Tiles In To Ram
		lea	(Hill_Top_Background).l,a0 ; loc_28300
		lea	($FFFFB800).w,a4
		bsr.w	JmpTo_NemDecToRAM
		lea	($FFFFB800).w,a1
		lea	(loc_22D94).l,a4
		moveq	#0,d2
		moveq	#$2F,d3
loc_22d7E:
		moveq	#-1,d0
		move.w	(a4)+,d0
		move.l	d0,A2
		moveq	#$1F,d1
loc_22D86:
		move.l	(a1),(a2)+
		move.l	d2,(a1)+
		dbf	d1,loc_22D86
		dbf	d3,loc_22d7E
		rts
loc_22D94:
		dc.w	$0080,$0280,$0380,$0580,$0600,$0880,$0980,$0A80
		dc.w	$0B80,$0C80,$0E80,$0F00,$1080,$1180,$1200,$1280
		dc.w	$1300,$1380,$1400,$1480,$1500,$1600,$1900,$1d00
		dc.w	$1D80,$1E00,$2280,$2400,$2580,$2600,$2680,$2780
		dc.w	$2B00,$3280,$3600,$3680,$3C80,$3d00,$3F00,$3F80
		dc.w	$4080,$4480,$4580,$4880,$4900,$4B80,$4C80,$4D80
; ===========================================================================
; loc_22DF4:
JmpTo_NemDecToRAM:
		jmp     (NemDecToRAM).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 21 - Score/Rings/Time display
; ---------------------------------------------------------------------------
; Sprite_22DFC: Obj_0x21_Head_Up_Display:
Obj21:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Obj21_Index(pc,d0.w),d1
		jmp	Obj21_Index(pc,d1.w)
; ===========================================================================
; off_22E0A:
Obj21_Index:	offsetTable
		offsetTableEntry.w Obj21_Init
		offsetTableEntry.w Obj21_Main
; ===========================================================================
; loc_22E0E:
Obj21_Init:
		addq.b	#2,routine(a0)
		move.w	#$90,x_pos(a0)
		move.w	#$108,x_sub(a0)
		move.l	#Obj21_MapUnc_22E80,mappings(a0)
		move.w	#$6CA,art_tile(a0)
		bsr.w	JmpTo40_Adjust2PArtPointer
		move.b	#0,render_flags(a0)
		move.b	#0,priority(a0)
; loc_22E3C:
Obj21_Main:
		tst.w	(Ring_count).w
		beq.s	Obj21_Flash
		moveq	#0,d0
		btst	#3,(Timer_frames+1).w
		bne.s	Obj21_Display
		cmpi.b	#9,(Timer_minute).w
		bne.s	Obj21_Display
		addq.w	#2,d0
; loc_22E56:
Obj21_Display:
		move.b	d0,mapping_frame(a0)
		jmp	(DisplaySprite).l
; ---------------------------------------------------------------------------
; loc_22E60:
Obj21_Flash:
		moveq	#0,d0
		btst	#3,(Timer_frames+1).w
		bne.s	Obj21_Display2
		addq.w	#1,d0
		cmpi.b	#9,(Timer_minute).w
		bne.s	Obj21_Display2
		addq.w	#2,d0
; loc_22E76:
Obj21_Display2:
		move.b	d0,mapping_frame(a0)
		jmp	(DisplaySprite).l
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj21_MapUnc_22E80:	binclude	"mappings/sprite/obj21.bin"

;===============================================================================
; AddPoints - Sub-routine
; [ Begin ]
;===============================================================================
AddPoints: ; loc_22Fd0:
		move.b	#1,(Update_HUD_score).w
		lea	(Score).w,A3
		add.l   d0,(a3)
		move.l	#$F423F,d1
		cmp.l	(a3),d1
		bhi.s	loc_22FE8
		move.l	d1,(a3)
loc_22FE8:
		move.l	(a3),d0
		cmp.l	(Next_Extra_life_score).w,d0
		bcs.s	loc_23010
		addi.l	#5000,(Next_Extra_life_score).w
		tst.b	(Graphics_Flags).w
		bmi.s	loc_23010
		addq.b	#1,(Life_count).w
		addq.b	#1,(Update_HUD_lives).w
		move.w	#S1MusID_ExtraLife,d0
		jmp     (PlayMusic).l            ; loc_14C0
loc_23010:
		rts
HudUpdate: ; loc_23012:
		nop
		lea	(VDP_data_port),A6
		tst.w	(Debug_mode_flag).w
		bne.w	 loc_23104
		tst.b	(Update_HUD_score).w
		beq.s	loc_2303A
		clr.b   (Update_HUD_score).w
		move.l	#$5C800003,d0
		move.l	(Score).w,d1
		bsr.w	loc_23250
loc_2303A:
		tst.b	(Update_HUD_rings).w
		beq.s	loc_2305A
		bpl.s	loc_23046
		bsr.w	loc_23170
loc_23046:
		clr.b   (Update_HUD_rings).w
		move.l	#$5F400003,d0
loc_23050:
		moveq	#0,d1
		move.w	(Ring_count).w,d1
		bsr.w	loc_23246
loc_2305A:
		tst.b	(Update_HUD_timer).w
		beq.s	loc_230B6
		tst.w	(Game_paused).w
		bne.s	loc_230B6
		lea	(Timer).w,A1
		cmpi.l	#$93B3B,(a1)+
		nop
		addq.b	#1,-(a1)
		cmpi.b	#60,(a1)
		bcs.s	loc_230B6
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#60,(a1)
		bcs.s	loc_23096
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	loc_23096
		move.b	#9,(a1)
loc_23096:
		move.l	#$5E400003,d0
		moveq	#0,d1
		move.b	(Timer_minute).w,d1
		bsr.w	loc_2331E
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	(Timer_second).w,d1
		bsr.w	loc_23326
loc_230B6:
		tst.b	(Update_HUD_lives).w
		beq.s	loc_230C4
		clr.b   (Update_HUD_lives).w
		bsr.w	loc_233DE
loc_230C4:
		tst.b	(Update_Bonus_score).w
		beq.s	loc_230EC
		clr.b   (Update_Bonus_score).w
		move.l	#$6E000002,(VDP_control_port)
		moveq	#0,d1
		move.w	(Bonus_Countdown_1).w,d1
		bsr.w	loc_2337E
		moveq	#0,d1
		move.w	(Bonus_Countdown_2).w,d1
		bsr.w	loc_2337E
loc_230EC:
		rts
Sub_Time_Over: ; loc_230EE:
		clr.b   (Update_HUD_timer).w
		lea	(MainCharacter).w,A0
		move.l	A0,A2
		bsr.w	KillSonic               ; loc_21422
		move.b	#1,(Time_Over_flag).w
		rts
loc_23104:
		bsr.w	loc_231DC
		tst.b	(Update_HUD_rings).w
		beq.s	loc_23128
		bpl.s	loc_23114
		bsr.w	loc_23170
loc_23114:
		clr.b   (Update_HUD_rings).w
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	(Ring_count).w,d1
		bsr.w	loc_23246
loc_23128:
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	(Sprite_count).w,d1
		bsr.w	loc_23326
		tst.b	(Update_HUD_lives).w
		beq.s	loc_23146
		clr.b   (Update_HUD_lives).w
		bsr.w	loc_233DE
loc_23146:
		tst.b	(Update_Bonus_score).w
		beq.s	loc_2316E
		clr.b   (Update_Bonus_score).w
		move.l	#$6E000002,(VDP_control_port)
		moveq	#0,d1
		move.w	(Bonus_Countdown_1).w,d1
		bsr.w	loc_2337E
		moveq	#0,d1
		move.w	(Bonus_Countdown_2).w,d1
		bsr.w	loc_2337E
loc_2316E:
		rts
loc_23170:
		move.l	#$5F400003,(VDP_control_port)
		lea	loc_231D8(pc),A2
		move.w	#2,d2
		bra.s	loc_231A0
Head_Up_Display_Base: ; loc_23184: ; HUD routine
		lea	(VDP_data_port),A6
		bsr.w	loc_233DE
		move.l	#$5C400003,(VDP_control_port)
		lea	loc_231CC(pc),A2
		move.w	#$E,d2
loc_231A0:
		lea	loc_23448(pc),A1
loc_231A4:
		move.w	#$F,d1
		move.b	(a2)+,d0
		bmi.s	loc_231C0
		ext.w   d0
		lsl.w	#5,d0
		lea	(A1,d0),A3
loc_231B4:
		move.l	(a3)+,(a6)
		dbf	d1,loc_231B4
loc_231BA:
		dbf	d2,loc_231A4
		rts
loc_231C0:
		move.l	#0,(a6)
		dbf	d1,loc_231C0
		bra.s	loc_231BA
loc_231CC:
		dc.l	$16FFFFFF,$FFFFFF00,$00140000
loc_231D8:
		dc.l	$FFFF0000
loc_231DC:
		move.l	#$5C400003,(VDP_control_port)
		move.w	(Camera_X_pos).w,d1
		lsr.w	#7,d1
		move.w	(Timer_frames).w,d1
		lsr.w	#6,d1
		swap	d1
		move.w	(MainCharacter+x_pos).w,d1
		bsr.s	loc_2320E
		move.w	(Camera_Y_pos).w,d1
		move.w	(Camera_BG_X_pos).w,d1
		lsr.w	#7,d1
		move.b	(Oscillating_Data+$18).w,d1
		swap	d1
		move.w	(MainCharacter+y_pos).w,d1
loc_2320E:
		moveq	#7,d6
		lea	(loc_23888).l,A1
loc_23216:
		rol.w   #4,d1
		move.w	d1,d2
		andi.w	#$F,d2
		cmpi.w	#$A,d2
		bcs.s	loc_23228
		addi.w	#7,d2
loc_23228:
		lsl.w	#5,d2
		lea	(A1,d2),A3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		swap	d1
		dbf	d6,loc_23216
		rts
loc_23246:
		lea	(loc_23312).l,A2
		moveq	#2,d6
		bra.s	loc_23258
loc_23250:
		lea	(loc_23306).l,A2
		moveq	#5,d6
loc_23258:
		moveq	#0,d4
		lea	loc_23448(pc),A1
loc_2325E:
		moveq	#0,d2
		move.l	(a2)+,d3
loc_23262:
		sub.l   d3,d1
		bcs.s	loc_2326A
		addq.w	#1,d2
		bra.s	loc_23262
loc_2326A:
		add.l   d3,d1
		tst.w	d2
		beq.s	loc_23274
		move.w	#1,d4
loc_23274:
		tst.w	d4
		beq.s	loc_232A2
		lsl.w	#6,d2
		move.l	d0,4(a6)
		lea	(A1,d2),A3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
loc_232A2:
		addi.l	#$400000,d0
		dbf	d6,loc_2325E
		rts
; loc_232AE:
		move.l	#$5F800003,(VDP_control_port)
		lea	(VDP_data_port),A6
		lea	(loc_23316).l,A2
		moveq	#1,d6
		moveq	#0,d4
		lea	loc_23448(pc),A1
loc_232CC:
		moveq	#0,d2
		move.l	(a2)+,d3
loc_232d0:
		sub.l   d3,d1
		bcs.s	loc_232D8
		addq.w	#1,d2
		bra.s	loc_232d0
loc_232D8:
		add.l   d3,d1
		lsl.w	#6,d2
		lea	(A1,d2),A3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		dbf	d6,loc_232CC
		rts
loc_23306:
		dc.l	$000186A0
;loc_2330A:
		dc.l	$00002710
loc_2330E:
		dc.l	$000003E8
loc_23312:
		dc.l	$00000064
loc_23316:
		dc.l	$0000000A
loc_2331A:
		dc.l	$00000001
loc_2331E:
		lea	loc_2331A(pc),A2
		moveq	#0,d6
		bra.s	loc_2332C
loc_23326:
		lea	loc_23316(pc),A2
		moveq	#1,d6
loc_2332C:
		moveq	#0,d4
		lea	loc_23448(pc),A1
loc_23332:
		moveq	#0,d2
		move.l	(a2)+,d3
loc_23336:
		sub.l   d3,d1
		bcs.s	loc_2333E
		addq.w	#1,d2
		bra.s	loc_23336
loc_2333E:
		add.l   d3,d1
		tst.w	d2
		beq.s	loc_23348
		move.w	#1,d4
loc_23348:
		lsl.w	#6,d2
		move.l	d0,4(a6)
		lea	(A1,d2),A3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		addi.l	#$400000,d0
		dbf	d6,loc_23332
		rts
loc_2337E:
		lea	loc_2330E(pc),A2
		moveq	#3,d6
		moveq	#0,d4
		lea	loc_23448(pc),A1
loc_2338A:
		moveq	#0,d2
		move.l	(a2)+,d3
loc_2338E:
		sub.l   d3,d1
		bcs.s	loc_23396
		addq.w	#1,d2
		bra.s	loc_2338E
loc_23396:
		add.l   d3,d1
		tst.w	d2
		beq.s	loc_233A0
		move.w	#1,d4
loc_233A0:
		tst.w	d4
		beq.s	loc_233d0
		lsl.w	#6,d2
		lea	(A1,d2),A3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
loc_233CA:
		dbf	d6,loc_2338A
		rts
loc_233d0:
		moveq	#$F,d5
loc_233d2:
		move.l	#0,(a6)
		dbf	d5,loc_233d2
		bra.s	loc_233CA
loc_233DE:
		move.l	#$7BA00003,d0
		moveq	#0,d1
		move.b	(Life_count).w,d1
		lea	loc_23316(pc),A2
		moveq	#1,d6
		moveq	#0,d4
		lea	loc_23748(pc),A1
loc_233F6:
		move.l	d0,4(a6)
		moveq	#0,d2
		move.l	(a2)+,d3
loc_233FE:
		sub.l   d3,d1
		bcs.s	loc_23406
		addq.w	#1,d2
		bra.s	loc_233FE
loc_23406:
		add.l   d3,d1
		tst.w	d2
		beq.s	loc_23410
		move.w	#1,d4
loc_23410:
		tst.w	d4
		beq.s	loc_23436
loc_23414:
		lsl.w	#5,d2
		lea	(A1,d2),A3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
loc_2342A:
		addi.l	#$400000,d0
		dbf	d6,loc_233F6
		rts
loc_23436:
		tst.w	d6
		beq.s	loc_23414
		moveq	#7,d5
loc_2343C:
		move.l	#0,(a6)
		dbf	d5,loc_2343C
		bra.s	loc_2342A
loc_23448:
		binclude	"data\sprites\bignumbr.dat"
loc_23748:
		binclude	"data\sprites\smallnum.dat"
loc_23888:
		binclude	"data\sprites\debugnum.dat"
; loc_23B68:
JmpTo40_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; When debug mode is currently in use
; ---------------------------------------------------------------------------
; loc_23B70:
DebugMode:
		moveq	#0,d0
		move.b	(Debug_placement_mode).w,d0
		move.w	Debug_Index(pc,d0.w),d1
		jmp	Debug_Index(pc,d1.w)
; ===========================================================================
; off_23B7E:
Debug_Index:	offsetTable
		offsetTableEntry.w Debug_Init
		offsetTableEntry.w Debug_Main
; ===========================================================================
; loc_23B82:
Debug_Init:
		addq.b	#2,(Debug_placement_mode).w
		move.w	(Camera_Min_Y_pos).w,(Camera_Min_Y_pos_Debug_Copy).w
		move.w	(Camera_Max_Y_pos).w,(Camera_Max_Y_pos_Debug_Copy).w
		andi.w	#$7FF,(MainCharacter+y_pos).w
		andi.w	#$7FF,(Camera_Y_pos).w
		andi.w	#$7FF,(Camera_BG_Y_pos).w
		move.b	#0,mapping_frame(a0)
		move.b	#0,anim(a0)
		; S1 leftover
		cmpi.b	#GameModeID_SpecialStage,(Game_Mode).w
		bne.s	.islevel
		moveq	#6,d0
		bra.s	.selectlist
; ===========================================================================
; loc_23BBC:
.islevel:
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
; loc_23BC2:
.selectlist:
		lea	(JmpTbl_DbgObjLists).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d6
		cmp.b	(Debug_object).w,d6
		bhi.s	+
		move.b	#0,(Debug_object).w
+
		bsr.w	LoadDebugObjectSprite
		move.b	#$C,(Debug_Accel_Timer).w
		move.b	#1,(Debug_Speed).w
; loc_23BEC:
Debug_Main:
		; another S1 leftover
		moveq	#6,d0
		cmpi.b	#GameModeID_SpecialStage,(Game_Mode).w
		beq.s	.isntlevel

		moveq	#0,d0
		move.b	(Current_Zone).w,d0
; loc_23BFC:
.isntlevel:
		lea	(JmpTbl_DbgObjLists).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d6
		bsr.w	Debug_Control
		jmp	(DisplaySprite).l

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_23C14:
Debug_Control:
		moveq	#0,d4
		move.w	#1,d1
		move.b	(Ctrl_1_Press).w,d4
		andi.w	#$F,d4
		bne.s	Debug_Move
		move.b	(Ctrl_1_Held).w,d0
		andi.w	#$F,d0
		bne.s	Debug_ContinueMoving
		move.b	#$C,(Debug_Accel_Timer).w
		move.b	#$F,(Debug_Speed).w
		bra.w	Debug_ControlObjects
; ===========================================================================
; loc_23C3E:
Debug_ContinueMoving:
		subq.b	#1,(Debug_Accel_Timer).w
		bne.s	Debug_TimerNotOver
		move.b	#1,(Debug_Accel_Timer).w
		addq.b	#1,(Debug_Speed).w
		bne.s	Debug_Move
		move.b	#$FF,(Debug_Speed).w
; loc_23C56:
Debug_Move:
		move.b	(Ctrl_1_Held).w,d4
; loc_23C5A:
Debug_TimerNotOver:
		moveq	#0,d1
		move.b	(Debug_Speed).w,d1
		addq.w	#1,d1
		swap	d1
		asr.l	#4,d1
		move.l	y_pos(a0),d2
		move.l	x_pos(a0),d3
; .moveUp:
		btst	#0,d4
		beq.s	.moveDown
		sub.l	d1,d2
		moveq	#0,d0
		move.w	(Camera_Min_Y_pos).w,d0
		swap	d0
		cmp.l	d0,d2
		bge.s	.moveDown
		move.l	d0,d2
; loc_23C84:
.moveDown:
		btst	#1,d4
		beq.s	.moveLeft
		add.l	d1,d2
		moveq	#0,d0
		move.w	(Camera_Max_Y_pos).w,d0
		addi.w	#$DF,d0
		swap	d0
		cmp.l	d0,d2
		blt.s	.moveLeft
		move.l	d0,d2
; loc_23C9E:
.moveLeft:
		btst	#2,d4
		beq.s	.moveRight
		sub.l	d1,d3
		bcc.s	.moveRight
		moveq	#0,d3
; loc_23CAA:
.moveRight:
		btst	#3,d4
		beq.s	+
		add.l	d1,d3
+
		move.l	d2,y_pos(a0)
		move.l	d3,x_pos(a0)

; loc_23CBA:
Debug_ControlObjects:
		btst	#6,(Ctrl_1_Held).w
		beq.s	Debug_SpawnObject
		btst	#5,(Ctrl_1_Press).w
		beq.s	Debug_CycleObjects
		subq.b	#1,(Debug_object).w
		bcc.s	BranchTo_LoadDebugObjectSprite
		add.b	d6,(Debug_object).w
		bra.s	BranchTo_LoadDebugObjectSprite
; ===========================================================================
; loc_23Cd6:
Debug_CycleObjects:
		btst	#6,(Ctrl_1_Press).w
		beq.s	Debug_SpawnObject
		; cycle forward in the object list
		addq.b	#1,(Debug_object).w
		cmp.b	(Debug_object).w,d6
		bhi.s	BranchTo_LoadDebugObjectSprite
		move.b	#0,(Debug_object).w
; loc_23CEE: BranchTo
BranchTo_LoadDebugObjectSprite:
		bra.w	LoadDebugObjectSprite
; ===========================================================================
; loc_23CF2:
Debug_SpawnObject:
		btst	#5,(Ctrl_1_Press).w
		beq.s	Debug_ExitDebugMode
		; spawn object
		jsr	(SingleObjLoad).l
		bne.s	Debug_ExitDebugMode
		move.w	x_pos(a0),x_pos(a1)
		move.w	y_pos(a0),y_pos(a1)
		_move.b	mappings(a0),id(a1)	; load obj
		move.b	render_flags(a0),render_flags(a1)
		move.b	render_flags(a0),status(a1)
		andi.b	#$7F,status(a1)
		moveq	#0,d0
		move.b	(Debug_object).w,d0
		lsl.w	#3,d0
		move.b	4(a2,d0.w),subtype(a1)
		rts
; ===========================================================================
; loc_23d36:
Debug_ExitDebugMode:
		btst	#4,(Ctrl_1_Press).w
		beq.s	return_23D9C
		; exit debug mode
		moveq	#0,d0
		move.w	d0,(Debug_placement_mode).w
		move.l	#MapUnc_Sonic,(MainCharacter+mappings).w
		move.w	#$780,(MainCharacter+art_tile).w
		tst.w	(Two_player_mode).w
		beq.s	.notTwoPlayerMode
		move.w	#$3C0,(MainCharacter+art_tile).w
; loc_23d5E:
.notTwoPlayerMode:
		move.b	d0,(MainCharacter+anim).w
		move.w	d0,x_sub(a0)
		move.w	d0,y_sub(a0)
		move.w	x_pos(a0),(Sidekick+x_pos).w
		move.w	y_pos(a0),(Sidekick+y_pos).w
		move.w	(Camera_Min_Y_pos_Debug_Copy).w,(Camera_Min_Y_pos).w
		move.w	(Camera_Max_Y_pos_Debug_Copy).w,(Camera_Max_Y_pos).w
		; final S1 leftover
		cmpi.b	#GameModeID_SpecialStage,(Game_Mode).w
		bne.s	return_23D9C
		move.b	#2,(MainCharacter+anim).w
		bset	#2,(MainCharacter+status).w
		bset	#1,(MainCharacter+status).w

return_23D9C:
		rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_23D9E:
LoadDebugObjectSprite:
		moveq	#0,d0
		move.b	(Debug_object).w,d0
		lsl.w	#3,d0
		move.l	(a2,d0.w),mappings(a0)
		move.w	6(a2,d0.w),art_tile(a0)
		move.b	5(a2,d0.w),mapping_frame(a0)
		bsr.w	JmpTo41_Adjust2PArtPointer
		rts
; End of function LoadDebugObjectSprite

; ===========================================================================
; ---------------------------------------------------------------------------
; OBJECT DEBUG LISTS
; ---------------------------------------------------------------------------
; off_23DBE: Debug_Index:
JmpTbl_DbgObjLists: zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w Debug_GHZ	; Green Hill
	zoneOffsetTableEntry.w Debug_Null	; Null
	zoneOffsetTableEntry.w Debug_Null	; Wood
	zoneOffsetTableEntry.w Debug_Null	; Null
	zoneOffsetTableEntry.w Debug_MTZ	; Metropolis
	zoneOffsetTableEntry.w Debug_MTZ	; Metropolis 2
	zoneOffsetTableEntry.w Debug_Null	; Null
	zoneOffsetTableEntry.w Debug_HTZ	; Hill Top
	zoneOffsetTableEntry.w Debug_HPZ	; Hidden Palace
	zoneOffsetTableEntry.w Debug_Null	; Null
	zoneOffsetTableEntry.w Debug_OOZ	; Oil Ocean
	zoneOffsetTableEntry.w Debug_DHZ	; Dust Hill
	zoneOffsetTableEntry.w Debug_CNZ	; Casino Night
	zoneOffsetTableEntry.w Debug_CPZ	; Chemical Plant
	zoneOffsetTableEntry.w Debug_Null	; Genocide City
	zoneOffsetTableEntry.w Debug_NGHZ	; Neo Green Hill
	zoneOffsetTableEntry.w Debug_Null	; Death Egg
    zoneTableEnd

; macro for a debug object list header
; must be on the same line as a label that has a corresponding _End label later
dbglistheader macro {INTLABEL}
__LABEL__ label *
	dc.w ((__LABEL___End - __LABEL__ - 2) >> 3)
    endm

; macro to define debug list object data
dbglistobj macro   obj,mapaddr,subtype,frame,vram
	dc.l obj<<24|mapaddr
	dc.b subtype,frame
	dc.w vram
    endm

Debug_Null: dbglistheader
	dbglistobj $25,Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,Obj26_MapUnc_B6d2,  0,0,$680
Debug_Null_End:

Debug_GHZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  7,0,$680
	dbglistobj $79,	Obj79_MapUnc_13D8E, 1,0,$47C
	dbglistobj $03,	Obj03_MapUnc_147d0, 9,1,$26BC
	dbglistobj $49,	Obj49_MapUnc_15404, 0,0,$23AE
	dbglistobj $49,	Obj49_MapUnc_15404, 2,3,$23AE
	dbglistobj $49,	Obj49_MapUnc_15404, 4,5,$23AE
	dbglistobj $18,	Obj18_MapUnc_9078,  1,0,$4000
	dbglistobj $18,	Obj18_MapUnc_9078,$9A,1,$4000
	dbglistobj $36,	Obj36_MapUnc_CAB0,  0,0,$2434
	dbglistobj $41,Spring_Mappings,  $81,0,$45C
	dbglistobj $41,Spring_Mappings,  $90,3,$470
	dbglistobj $41,Spring_Mappings,  $A0,6,$45C
	dbglistobj $41,Spring_Mappings,  $30,7,$43C
	dbglistobj $41,Spring_Mappings,  $40,$A,$43C
	dbglistobj $4B,Obj4B_MapUnc_1EB0E, 0,0,$3E6
	dbglistobj $54,Obj54_MapUnc_1F938, 0,0,$402
	dbglistobj $53,Obj53_MapUnc_1F696, 0,0,$41C
Debug_GHZ_End:
	; unused entries for GHZ
	dbglistobj $4F,	Obj4F_MapUnc_1DFCA, 0,0,$500
	dbglistobj $52,	Piranha_Mappings,   0,0,$2530
	dbglistobj $50,	Aquis_Mappings,     0,0,$2570
	dbglistobj $51,	Aquis_Mappings,     0,0,$2570
	dbglistobj $4D,	Rhinobot_Mappings,  0,0,$23C4
	dbglistobj $4B,	Obj4B_MapUnc_1EB0E, 0,0,$32C
	dbglistobj $4E,	Crocobot_Mappings,  0,0,$2300
	dbglistobj $4C,	Obj4C_MapUnc_1F106, 0,0,$2350
	dbglistobj $4A,	Octus_Mappings,     0,0,$238A

Debug_MTZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  7,0,$680
	dbglistobj $79,	Obj79_MapUnc_13D8E, 1,0,$47C
	dbglistobj $03,	Obj03_MapUnc_147d0, 9,1,$26BC
	dbglistobj $42,	Obj42_MapUnc_1A7FE, 1,7,$6000
	dbglistobj $64,	Obj64_MapUnc_1A9F0, 1,0,$2000
	dbglistobj $64,	Obj64_MapUnc_1A9F0,$11,1,$2000
	dbglistobj $65,	Obj65_MapUnc_1AE2C,$80,0,$6000
	dbglistobj $65,	Obj65_MapUnc_1AE2C,$13,1,$6000
	dbglistobj $47,	Obj47_MapUnc_18E3E, 0,2,$424
	dbglistobj $2D,	Obj2D_MapUnc_9E1E,  1,1,$6000
	dbglistobj $66,	Obj66_MapUnc_1B084, 1,0,$8680
	dbglistobj $66,	Obj66_MapUnc_1B084,$11,1,$8680
	dbglistobj $68,	Obj68_MapUnc_1B6DC, 0,4,$6414
	dbglistobj $69,	Obj69_MapUnc_1B9A6, 4,0,$2500
	dbglistobj $6A,	Obj65_MapUnc_1AE2C, 0,1,$6000
	dbglistobj $6B,	Obj65_MapUnc_1AE2C, 1,1,$6000
	dbglistobj $6D,	Obj68_MapUnc_1B6DC, 0,0,$241C
	dbglistobj $6E,	Obj6E_MapUnc_1C464, 0,0,$6000
	dbglistobj $6E,	Obj6E_MapUnc_1C464,$10,1,$6000
	dbglistobj $6E,	Obj6E_MapUnc_1C464,$20,2,$6000
	dbglistobj $6F,	Obj6F_MapUnc_1C7BE, 0,0,$653F
	dbglistobj $70,	Obj70_MapUnc_1CA16,$10,0,$E378
	dbglistobj $71,	Obj71_MapUnc_9BBE,$22,5,$4536
	dbglistobj $1C,	Obj1C_MapUnc_9B9A,  0,0,$43FD
	dbglistobj $1C,	Obj1C_MapUnc_9B9A,  1,1,$43FD
	dbglistobj $1C,	Obj1C_MapUnc_9B9A,  3,2,$23FD
	dbglistobj $65,	Obj65_MapUnc_1AE2C,$B0,0,$6000
Debug_MTZ_End:

Debug_HTZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  7,0,$680
	dbglistobj $79,	Obj79_MapUnc_13D8E, 1,0,$47C
	dbglistobj $03,	Obj03_MapUnc_147d0, 9,1,$26BC
	dbglistobj $18,	Obj18_MapUnc_9078,  1,0,$4000
	dbglistobj $18,	Obj18_MapUnc_9078,$9A,1,$4000
	dbglistobj $36,	Obj36_MapUnc_CAB0,  0,0,$2434
	dbglistobj $14,	Obj14_MapUnc_15F54, 0,0,$3C6
	dbglistobj $2D,	Obj2D_MapUnc_9E1E,  0,0,$2426
	dbglistobj $2F,	Obj2F_MapUnc_1786A, 0,0,$C000
	dbglistobj $20,	Fireball_Mappings,$44,2,$8416
	dbglistobj $41,	Spring_Mappings,  $81,0,$45C
	dbglistobj $41,	Spring_Mappings,  $90,3,$470
	dbglistobj $41,	Spring_Mappings,  $A0,6,$45C
	dbglistobj $41,	Spring_Mappings,  $30,7,$43C
	dbglistobj $41,	Spring_Mappings,  $40,$A,$43C
	dbglistobj $16,	Obj16_MapUnc_1611E, 0,0,$43E6
	dbglistobj $1C,	Obj16_MapUnc_1611E, 4,3,$43E6
	dbglistobj $1C,	Obj16_MapUnc_1611E, 5,4,$43E6
	dbglistobj $1C,	Obj1C_MapUnc_9B3A,  7,0,$4000
	dbglistobj $1C,	Obj1C_MapUnc_9B3A,  8,1,$4000
	dbglistobj $32,	Obj32_MapUnc_179C2, 0,0,$43B2
	dbglistobj $31,	Obj31_MapUnc_15612, 0,0,$8680
	dbglistobj $31,	Obj31_MapUnc_15612, 1,1,$8680
	dbglistobj $31,	Obj31_MapUnc_15612, 2,2,$8680
Debug_HTZ_End:

Debug_HPZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  7,0,$680
	dbglistobj $71,	Obj71_MapUnc_9AFA,$11,3,$E35A
	dbglistobj $13,	Obj13_MapUnc_14CF4, 4,4,$E315
	dbglistobj $1A,	Obj1A_MapUnc_9858,  0,0,$434A
	dbglistobj $03,	Obj03_MapUnc_147d0, 9,1,$26BC
	dbglistobj $4F,	Obj4F_MapUnc_1DFCA, 0,0,$500
	dbglistobj $4C,	Obj4C_MapUnc_1F106, 0,0,$2530
Debug_HPZ_End:
	; unused entries for HPZ
	dbglistobj $52,	Piranha_Mappings,   0,0,$2530
	dbglistobj $50,	Aquis_Mappings,     0,0,$2570
	dbglistobj $51,	Aquis_Mappings,     0,0,$2570
	dbglistobj $4D,	Rhinobot_Mappings,  0,0,$23C4
	dbglistobj $4B,	Obj4B_MapUnc_1EB0E, 0,0,$32C
	dbglistobj $4E,	Crocobot_Mappings,  0,0,$2300
	dbglistobj $4A,	Octus_Mappings,     0,0,$238A

Debug_OOZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  7,0,$680
	dbglistobj $33,	Obj33_MapUnc_17EE2, 1,0,$632C
	dbglistobj $43,	Obj43_MapUnc_1808E, 0,0,$C30C
	dbglistobj $19,	Obj19_MapUnc_16412,$23,2,$6300
	dbglistobj $45,	Obj45_MapUnc_185C2, 2,0,$43C5
	dbglistobj $45,	Obj45_MapUnc_185C2,$12,$A,$43C5
	dbglistobj $46,	Obj46_MapUnc_18CFA, 0,1,$6354
	dbglistobj $47,	Obj47_MapUnc_18E3E, 0,2,$424
	dbglistobj $15,	Obj15_MapUnc_8AD8,$88,1,$43E3
	dbglistobj $3D,	Obj3D_MapUnc_1916E, 0,0,$6332
	dbglistobj $48,	Obj48_MapUnc_194CA,$80,0,$6368
	dbglistobj $48,	Obj48_MapUnc_194CA,$81,1,$6368
	dbglistobj $48,	Obj48_MapUnc_194CA,$82,2,$6368
	dbglistobj $48,	Obj48_MapUnc_194CA,$83,3,$6368
	dbglistobj $1F,	Obj1A_MapUnc_9902,  0,0,$639D
Debug_OOZ_End:
	; unused entries for OOZ
	dbglistobj $1C,	Obj1C_MapUnc_9B6A, $A,0,$4346
	dbglistobj $1C,	Obj1C_MapUnc_9B6A, $B,1,$4346
	dbglistobj $1C,	Obj1C_MapUnc_9B6A, $C,2,$4346
	dbglistobj $1C,	Obj1C_MapUnc_9B6A, $D,3,$4346

Debug_DHZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  0,0,$680
	dbglistobj $15,	Obj15_MapUnc_8B46,$48,2,0
	dbglistobj $1F,	Obj1A_MapUnc_9942,  0,0,$63F4
	dbglistobj $73,	Obj73_MapUnc_1CE1C,$F5,0,$26BC
	dbglistobj $6A,	Obj6A_MapUnc_1BCB0,$18,0,$63d4
	dbglistobj $2A,	Obj2A_MapUnc_9CAE,  0,0,$4000
	dbglistobj $36,	Obj36_MapUnc_CAB0,  0,0,$2434
	dbglistobj $36,	Obj36_MapUnc_CAB0,$40,4,$2434
	dbglistobj $41,	Spring_Mappings,  $81,0,$45C
	dbglistobj $41,	Spring_Mappings,  $90,3,$470
	dbglistobj $40,	Obj40_MapUnc_1A58A, 1,0,$440
	dbglistobj $74,	Obj74_MapUnc_156B2,$11,0,$8680
	dbglistobj $75,	Obj75_MapUnc_1d00A,$18,2,$2000
	dbglistobj $76,	Obj76_MapUnc_1d1BA, 0,0,0
	dbglistobj $77,	Obj77_MapUnc_1d2E0, 1,0,$643C
Debug_DHZ_End:

Debug_CNZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  0,0,$680
Debug_CNZ_End:

Debug_CPZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  7,0,$680
	dbglistobj $0B,	Obj0B_MapUnc_14996,$70,0,$E3B0
	dbglistobj $1B,	Obj1B_MapUnc_1658A, 0,0,$E39C
	dbglistobj $1D,	Obj1D_MapUnc_16702,$15,0,$E43C
	dbglistobj $19,	Obj19_MapUnc_16412, 6,0,$63A0
	dbglistobj $2D,	Obj2D_MapUnc_9E1E,  2,2,$2394
	dbglistobj $32,	Obj32_MapUnc_179F6, 0,0,$6430
	dbglistobj $6B,	Obj6B_MapUnc_1BF4A,$10,0,$6418
	dbglistobj $78,	Obj6B_MapUnc_1BF4A, 0,0,$6418
	dbglistobj $7A,	Obj7A_MapUnc_1d72C, 0,0,$E418
	dbglistobj $7B,	Obj7B_MapUnc_1D920, 2,0,$3E0
	dbglistobj $03,	Obj03_MapUnc_147d0, 9,1,$26BC
	dbglistobj $03,	Obj03_MapUnc_147d0,$D,5,$26BC
	dbglistobj $36,	Obj36_MapUnc_CAB0,  0,0,$2434
	dbglistobj $41,	Spring_Mappings,  $81,0,$45C
	dbglistobj $41,	Spring_Mappings,  $90,3,$470
	dbglistobj $41,	Spring_Mappings,  $A0,6,$45C
	dbglistobj $40,	Obj40_MapUnc_1A58A, 1,0,$440
Debug_CPZ_End:

Debug_NGHZ: dbglistheader
	dbglistobj $25,	Obj25_MapUnc_B036,  0,0,$26BC
	dbglistobj $26,	Obj26_MapUnc_B6d2,  0,0,$680
	dbglistobj $15,	Obj15_MapUnc_8B0E,$88,2,0
	dbglistobj $18,	Obj18_MapUnc_90d0,  1,0,$4000
	dbglistobj $18,	Obj18_MapUnc_90d0,$9A,1,$4000
	dbglistobj $22,	Obj22_MapUnc_197C6, 0,1,$417
	dbglistobj $23,	Pillar_Mappings,    0,0,$2000
	dbglistobj $2B,	Breakable_Pillar_Mappings, 0,0,$2000
	dbglistobj $2C,Obj31_MapUnc_15612, 0,0,$8680
	dbglistobj $2C,Obj31_MapUnc_15612, 1,1,$8680
	dbglistobj $2C,Obj31_MapUnc_15612, 2,2,$8680
	dbglistobj $40,Obj40_MapUnc_1A58A, 1,0,$440
	dbglistobj $41,Spring_Mappings,  $81,0,$45C
	dbglistobj $41,Spring_Mappings,  $90,3,$470
	dbglistobj $41,Spring_Mappings,  $A0,6,$45C
	dbglistobj $03,Obj03_MapUnc_147d0, 9,1,$26BC
	dbglistobj $36,Obj36_MapUnc_CAB0,  0,0,$2434
Debug_NGHZ_End:

; loc_2434C:
JmpTo41_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
		align 4

; ---------------------------------------------------------------------------
; "MAIN LEVEL LOAD BLOCK" (after Nemesis)
;
; This struct array tells the engine where to find all the art associated with
; a particular zone. Each zone gets three longwords,in which it stores three
; pointers (in the lower 24 bits) and three jump table indeces (in the upper eight
; bits). The assembled data looks something like this:
;
; aaBBBBBB
; ccDDDDDD
; eeFFFFFF
;
; aa = index for primary pattern load request list
; BBBBBB = pointer to level art
; cc = index for secondary pattern load request list
; DDDDDD = pointer to 16x16 block mappings
; ee = index for palette
; FFFFFF = pointer to 128x128 block mappings
;
; Nemesis refers to this as the "main level load block". However,that name implies
; that this is code (obviously,it isn't),or at least that it points to the level's
; collision,object and ring placement arrays (it only points to art...
; although the 128x128 mappings do affect the actual level layout and collision)
; ---------------------------------------------------------------------------

; declare some global variables to be used by the levartptrs macro
cur_zone_id := 0
cur_zone_str := "0"

; macro for declaring a "main level load block" (MLLB)
levartptrs macro plc1,plc2,palette,art,map16x16,map128x128
	!org LevelArtPointers+zone_id_{cur_zone_str}*12
	dc.l (plc1<<24)|art
	dc.l (plc2<<24)|map16x16
	dc.l (palette<<24)|map128x128
cur_zone_id := cur_zone_id+1
cur_zone_str := "\{cur_zone_id}"
    endm

; dword_24354: MainLoadBlocks: saArtPtrs: TilesMainTable:
LevelArtPointers:
	levartptrs PLCID_Ghz1,PLCID_Ghz2,PalID_GHZ, ArtNem_GHZ,BM16_GHZ,BM128_GHZ	;   0 ; GHZ  ; GREEN HILL ZONE
	levartptrs PLCID_Owz1,PLCID_Owz2,PalID_OWZ, ArtNem_GHZ,BM16_GHZ,BM128_GHZ	;   1 ; OWZ  ; OCEAN WIND ZONE (UNUSED)
	levartptrs PLCID_Wz1, PLCID_Wz2, PalID_WZ,  ArtNem_WZ, BM16_WZ, BM128_WZ	;   2 ; WZ   ; WOOD ZONE
	levartptrs PLCID_Ssz1,PLCID_Ssz2,PalID_SSZ, ArtNem_GHZ,BM16_GHZ,BM128_GHZ	;   3 ; SSZ  ; SAND SHOWER ZONE (UNUSED)
	levartptrs PLCID_Mtz1,PLCID_Mtz2,PalID_MTZ, ArtNem_MTZ,BM16_MTZ,BM128_MTZ	;   4 ; MTZ  ; METROPOLIS ZONE
	levartptrs PLCID_Mtz1,PLCID_Mtz2,PalID_MTZ, ArtNem_MTZ,BM16_MTZ,BM128_MTZ	;   5 ; MTZ  ; METROPOLIS ZONE 2
	levartptrs PLCID_Blz1,PLCID_Blz2,PalID_BLZ, ArtNem_GHZ,BM16_GHZ,BM128_GHZ	;   6 ; BLZ  ; BLUE LAKE ZONE (UNUSED,LATER REPLACED WITH WING FORTRESS)
	levartptrs PLCID_Htz1,PLCID_Htz2,PalID_HTZ, ArtNem_GHZ,BM16_GHZ,BM128_GHZ	;   7 ; HTZ  ; HILL TOP ZONE
	levartptrs PLCID_Hpz1,PLCID_Hpz2,PalID_HPZ, ArtNem_HPZ,BM16_HPZ,BM128_HPZ	;   8 ; HPZ  ; HIDDEN PALACE ZONE
	levartptrs PLCID_Rwz1,PLCID_Rwz2,PalID_RWZ, ArtNem_GHZ,BM16_GHZ,BM128_GHZ	;   9 ; RWZ  ; ROCK WORLD ZONE (UNUSED)
	levartptrs PLCID_Ooz1,PLCID_Ooz2,PalID_OOZ, ArtNem_OOZ,BM16_OOZ,BM128_OOZ	;   A ; OOZ  ; OIL OCEAN ZONE
	levartptrs PLCID_Dhz1,PLCID_Dhz2,PalID_DHZ, ArtNem_DHZ,BM16_DHZ,BM128_DHZ	;   B ; DHZ  ; DUST HILL ZONE
	levartptrs PLCID_Cnz1,PLCID_Cnz2,PalID_CNZ, ArtNem_CNZ,BM16_CNZ,BM128_CNZ	;   C ; CNZ  ; CASINO NIGHT ZONE
	levartptrs PLCID_Cpz1,PLCID_Cpz2,PalID_CPZ, ArtNem_CPZ,BM16_CPZ,BM128_CPZ	;   D ; CPZ  ; CHEMICAL PLANT ZONE
	levartptrs PLCID_Gcz1,PLCID_Gcz2,PalID_GCZ, ArtNem_GHZ,BM16_GHZ,BM128_GHZ	;   E ; GCZ  ; GENOCIDE CITY ZONE (BLANK,LATER REPLACED WITH DEATH EGG)
	levartptrs PLCID_Nghz1,PLCID_Nghz2,PalID_NGHZ,ArtNem_NGHZ,BM16_NGHZ,BM128_NGHZ	;   F ; NGHZ ; NEO GREEN HILL ZONE
	levartptrs PLCID_Dez1,PLCID_Dez2,PalID_DEZ, ArtNem_GHZ,BM16_GHZ,BM128_GHZ	;  10 ; DEZ  ; DEATH EGG ZONE (BLANK,LATER REPLACED WITH SKY CHASE)

    if (cur_zone_id<>no_of_zones)&&(MOMPASS=1)
	message "Warning: Table LevelArtPointers has \{cur_zone_id/1.0} entries,but it should have \{no_of_zones/1.0} entries"
    endif
	!org LevelArtPointers+cur_zone_id*12

; ===========================================================================
; off_24420:
ArtLoadCues:		offsetTable
PLCptr_Std1:		offsetTableEntry.w PlrList_Std1
PLCptr_Std2:		offsetTableEntry.w PlrList_Std2
PLCptr_StdExp:		offsetTableEntry.w PlrList_StdExp
PLCptr_GameOver:	offsetTableEntry.w PlrList_GameOver
PLCptr_Ghz1:		offsetTableEntry.w Green_Hill_Sprites_1
PLCptr_Ghz2:		offsetTableEntry.w Green_Hill_Sprites_2
PLCptr_Owz1:		offsetTableEntry.w Wood_Sprites_1
PLCptr_Owz2:		offsetTableEntry.w Wood_Sprites_1
PLCptr_Wz1:		offsetTableEntry.w Wood_Sprites_1
PLCptr_Wz2:		offsetTableEntry.w Wood_Sprites_2
PLCptr_Ssz1:		offsetTableEntry.w Metropolis_Sprites_1
PLCptr_Ssz2:		offsetTableEntry.w Metropolis_Sprites_1
PLCptr_Mtz1:		offsetTableEntry.w Metropolis_Sprites_1
PLCptr_Mtz2:		offsetTableEntry.w Metropolis_Sprites_2
PLCptr_Mtz3:		offsetTableEntry.w Hill_Top_Sprites_1
PLCptr_Mtz4:		offsetTableEntry.w Hill_Top_Sprites_1
PLCptr_Blz1:		offsetTableEntry.w Hill_Top_Sprites_1
PLCptr_Blz2:		offsetTableEntry.w Hill_Top_Sprites_1
PLCptr_Htz1:		offsetTableEntry.w Hill_Top_Sprites_1
PLCptr_Htz2:		offsetTableEntry.w Hill_Top_Sprites_2
PLCptr_Hpz1:		offsetTableEntry.w Hidden_Palace_Sprites_1	; loaded by the Sonic 1 Special Stages
PLCptr_Hpz2:		offsetTableEntry.w Hidden_Palace_Sprites_2
PLCptr_Rwz1:		offsetTableEntry.w Oil_Ocean_Sprites_1
PLCptr_Rwz2:		offsetTableEntry.w Oil_Ocean_Sprites_1
PLCptr_Ooz1:		offsetTableEntry.w Oil_Ocean_Sprites_1
PLCptr_Ooz2:		offsetTableEntry.w Oil_Ocean_Sprites_2
PLCptr_Dhz1:		offsetTableEntry.w Dust_Hill_Sprites_1
PLCptr_Dhz2:		offsetTableEntry.w Dust_Hill_Sprites_2		; loaded by the Sonic 1 Special Stages
PLCptr_Cnz1:		offsetTableEntry.w Casino_Night_Sprites_1
PLCptr_Cnz2:		offsetTableEntry.w Casino_Night_Sprites_2
PLCptr_Cpz1:		offsetTableEntry.w Chemical_Plant_Sprites_1
PLCptr_Cpz2:		offsetTableEntry.w Chemical_Plant_Sprites_2
PLCptr_Gcz1:		offsetTableEntry.w Neo_Green_Hill_Sprites_1
PLCptr_Gcz2:		offsetTableEntry.w Neo_Green_Hill_Sprites_1
PLCptr_Nghz1:		offsetTableEntry.w Neo_Green_Hill_Sprites_1
PLCptr_Nghz2:		offsetTableEntry.w Neo_Green_Hill_Sprites_2
PLCptr_Dez1:		offsetTableEntry.w End_Level_Results_Sprites
PLCptr_Dez2:		offsetTableEntry.w End_Level_Results_Sprites
PLCptr_Results:		offsetTableEntry.w End_Level_Results_Sprites
PLCptr_Signpost:	offsetTableEntry.w End_Level_Sprites
PLCptr_GhzBoss:		offsetTableEntry.w Green_Hill_Boss
			; unused duplicate entries,probably for the other bosses which weren't implemented yet
			offsetTableEntry.w Green_Hill_Boss
			offsetTableEntry.w Green_Hill_Boss
			offsetTableEntry.w Green_Hill_Boss
			offsetTableEntry.w Green_Hill_Boss

; macro for a pattern load request list header
; must be on the same line as a label that has a corresponding _End label later
plrlistheader macro {INTLABEL}
__LABEL__ label *
	dc.w (((__LABEL___End - __LABEL__Plc) / 6) - 1)
__LABEL__Plc:
    endm

; macro for a pattern load request
plreq macro toVRAMaddr,fromROMaddr
	dc.l	fromROMaddr
	dc.w	tiles_to_bytes(toVRAMaddr)
    endm

;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Standard 1 - loaded for every level
;---------------------------------------------------------------------------------------
; PlrList_2447A: Standard_Sprites_1:
PlrList_Std1:	plrlistheader
		plreq $047C,ArtNem_Checkpoint
		plreq $06CA,Head_up_display_Sprites
		plreq $07d4,Head_up_display_Sonic
		plreq $06BC,ArtNem_Ring
		plreq $04AC,Enemy_Points_Spr
PlrList_Std1_End:
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Standard 2 - loaded for every level
;---------------------------------------------------------------------------------------
; PlrList_2449A: Standard_Sprites_2:
PlrList_Std2:	plrlistheader
		plreq $0680,ArtNem_Powerups
		plreq $04BE,ArtNem_Shield
		plreq $04DE,Invencibility_Stars
PlrList_Std2_End:
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Standard Explosion - loaded for every level
;---------------------------------------------------------------------------------------
; PlrList_244AE: Standard_Sprites_3:
PlrList_StdExp:	plrlistheader
		plreq $05A0,Explosion
		plreq $0580,Rabbit
		plreq $0592,White_Bird
PlrList_StdExp_End:
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Game/Time over
;---------------------------------------------------------------------------------------
; PlrList_244C2: Standard_Sprites_4:
PlrList_GameOver: plrlistheader
		plreq $055E,Game_Time_Over
PlrList_GameOver_End:

Green_Hill_Sprites_1:
loc_244CA:
		dc.w    (((loc_244FC-loc_244CA-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_GHZ    ; loc_81C00
		dc.w	$0000
		dc.l    ArtNem_GHZ_Waterfall           ; loc_73B3C
		dc.w	$75C0
		dc.l    ArtNem_GHZ_Bridge              ; loc_73D90
		dc.w	$78C0
		dc.l    FireBall		; loc_739C6
		dc.w	$79C0
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w	$8780
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Green_Hill_Sprites_2:
loc_244FC:
		dc.w    (((loc_24510-loc_244FC-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Buzzer       ; loc_7A4BC
		dc.w	$7CC0
		dc.l    ArtNem_Snail             ; loc_7C514
		dc.w	$8040
		dc.l    ArtNem_Masher             ; loc_7CA92
		dc.w	$8380
Wood_Sprites_1:
loc_24510:
		dc.w    (((loc_24518-loc_24510-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_WZ          ; loc_8AB2E
		dc.w	$0000
Wood_Sprites_2:
loc_24518:
		dc.w    (((loc_24532-loc_24518-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w	$8780
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Metropolis_Sprites_1:
loc_24532:
		dc.w    (((loc_2456A-loc_24532-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_MTZ    ; loc_91716
		dc.w	$0000
		dc.l    Mz_Teleport             ; loc_75382
		dc.w	$6780
		dc.l    ArtNem_MtzWheel        ; loc_7461C
		dc.w	$6F00
		dc.l    ArtNem_MtzWheelIndent         ; loc_74A74
		dc.w	$7E00
		dc.l    ArtNem_LavaCup
		dc.w	$7F20
		dc.l    ArtNem_BoltEnd_Rope
		dc.w	$7FA0
		dc.l    ArtNem_MtzSteam		; loc_74BEA
		dc.w	$80A0
		dc.l    ArtNem_MtzSpikeBlock		; loc_74B1C
		dc.w	$8280
		dc.l    ArtNem_MtzSpike              ; loc_74CF4
		dc.w	$8380
loc_2456A:
Metropolis_Sprites_2:
		dc.w    (((loc_245A2-loc_2456A-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Button		  ; loc_78580
		dc.w	$8480
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w	$8780
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
		dc.l    ArtNem_MtzAsstBlocks            ; loc_74DB6
		dc.w	$A000
		dc.l    ArtNem_MtzLavaBubble          ; loc_74E2C
		dc.w	$A6C0
		dc.l    ArtNem_MTZ_Platform  ; loc_74F52
		dc.w	$A7E0
		dc.l    ArtNem_MtzCog            ; loc_752A0
		dc.w	$ABE0
Hill_Top_Sprites_1:
loc_245A2:
		dc.w    (((loc_245E0-loc_245A2-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_GHZ    ; loc_81C00
		dc.w	$0000
		dc.l    ArtNem_HTZ      ; loc_85200
		dc.w	$3F80
		dc.l    FireBall		; loc_739C6
		dc.w	$73C0
		dc.l    ArtNem_HtzRock		; loc_7447A
		dc.w	$7640
		dc.l    ArtNem_HtzSeeSaw             ; loc_741d4
		dc.w	$78C0
		dc.l    Htz_See_saw_badnick     ; loc_745B0
		dc.w	$7BC0
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w	$8780
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Hill_Top_Sprites_2:
loc_245E0:
		dc.w    (((loc_245F4-loc_245E0-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_HtzZipline           ; loc_73E68
		dc.w	$7CC0
		dc.l    Htz_Lava_Bubble         ; loc_73C42
		dc.w	$82C0
		dc.l    ArtNem_HtzValveBarrier      ; loc_7415C
		dc.w	$84C0
Hidden_Palace_Sprites_1:
loc_245F4:
		dc.w    (((loc_24626-loc_245F4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_HPZ ; loc_98B76
		dc.w	$0000
		dc.l    ArtNem_HPZ_Bridge              ; loc_7538E
		dc.w	$6000
		dc.l    ArtNem_HPZ_Waterfall           ; loc_75506
		dc.w	$62A0
		dc.l    ArtNem_HPZPlatform            ; loc_75ADA
		dc.w	$6940
		dc.l    ArtNem_HPZOrb           ; loc_75B9A
		dc.w	$6B40
		dc.l    Hpz_Unknow_Platform     ; loc_75Dd6
		dc.w	$6F80
		dc.l    ArtNem_HPZ_Emerald             ; loc_75868
		dc.w	$7240
		dc.l    Water_Surface           ; loc_777d2
		dc.w	$8000
Hidden_Palace_Sprites_2:
loc_24626:
		dc.w   (((loc_2463A-loc_24626-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Redz             ; loc_7B114
		dc.w	$A000
		dc.l    ArtNem_Batbot              ; loc_7A6A2
		dc.w	$A600
loc_2463A: ; Not all sprites are loaded in to VRam
		dc.l    Hpz_Crocobot            ; loc_7A11A ; Left Over
		dc.w	$6000
		dc.l    ArtNem_Buzzer       ; loc_7A4BC
		dc.w	$6580
		dc.l    ArtNem_Batbot              ; loc_7A6A2
		dc.w	$6A00
		dc.l    Hpz_Rhinobot            ; loc_7Ad18 ; Left Over
		dc.w	$7880
		dc.l    ArtNem_Redz             ; loc_7B114
		dc.w	$A000
		dc.l    Hpz_Piranha             ; loc_7B4EA ; Left Over
		dc.w	$A600
Oil_Ocean_Sprites_1:
loc_24658:
		dc.w    (((loc_24684-loc_24658-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_OOZ     ; loc_9Ed58
		dc.w	$0000
		dc.l    ArtNem_OOZElevator            ; loc_75F70
		dc.w	$6000
		dc.l    ArtNem_SpikyThing     ; loc_76060
		dc.w	$6180
		dc.l    ArtNem_BurnerLid      ; loc_76258
		dc.w	$6580
		dc.l    ArtNem_StripedBlocksVert         ; loc_762EE
		dc.w	$6640
		dc.l    ArtNem_Oilfall		 ; loc_7635A
		dc.w	$66C0
		dc.l    ArtNem_Oilfall2           ; loc_764d6
		dc.w	$68C0
Oil_Ocean_Sprites_2:
loc_24684:
		dc.w    (((loc_246C2-loc_24684-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_OOZBall		; loc_76602
		dc.w	$6A80
		dc.l    ArtNem_LaunchBall              ; loc_76722
		dc.w	$6d00
		dc.l    ArtNem_OOZPlatform ; loc_76A12
		dc.w	$73A0
		dc.l    ArtNem_PushSpring   ; loc_76CA6
		dc.w	$78A0
		dc.l    ArtNem_OOZSwingPlat      ; loc_76E68
		dc.w	$7C60
		dc.l    ArtNem_Button		  ; loc_78580
		dc.w	$8480
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w	$8780
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Dust_Hill_Sprites_1:
loc_246C2:
		dc.w    (((loc_246E2-loc_246C2-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_DHZ     ; loc_A5248
		dc.w	$0000
		dc.l    ArtNem_Crate		 ; loc_7708A
		dc.w	$7A80
		dc.l    ArtNem_DHZCollapsePlat ; loc_772C8
		dc.w	$7E80
		dc.l    ArtNem_VineSwitch               ; loc_77472
		dc.w	$81C0
		dc.l    ArtNem_VinePulley             ; loc_7756A
		dc.w	$83C0
Dust_Hill_Sprites_2:
loc_246E2:
		dc.w    (((loc_24708-loc_246E2-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_HorizSpike   ; loc_79A44
		dc.w	$8580
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_DHZGateLog              ; loc_77614
		dc.w	$8780
		dc.l    ArtNem_LeverSpring       ; loc_798F4
		dc.w	$8800
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Casino_Night_Sprites_1:
loc_24708:
		dc.w    (((loc_24716-loc_24708-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_CNZ  ; loc_ABF2A
		dc.w	$0000
		dc.l    ArtNem_CNZCards               ; loc_AEF3C
		dc.w	$7A00
Casino_Night_Sprites_2:
loc_24716:
		dc.w    (((loc_24730-loc_24716-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w	$8780
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Chemical_Plant_Sprites_1:
loc_24730:
		dc.w    (((loc_2476E-loc_24730-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_CPZ ; loc_B2506
		dc.w	$0000
		dc.l    Cpz_Metal_Structure     ; loc_77A1C
		dc.w	$6E60
		dc.l    ArtNem_ConstructionStripes      ; loc_77C66
		dc.w	$7280
		dc.l    ArtNem_CPZBooster       ; loc_77942
		dc.w	$7380
		dc.l    ArtNem_CPZElevator            ; loc_77684
		dc.w	$7400
		dc.l    ArtNem_CPZAnimatedBits ; loc_77Cd2
		dc.w	$7600
		dc.l    ArtNem_CPZTubeSpring        ; loc_78074
		dc.w	$7C00
		dc.l    Water_Surface           ; loc_777d2
		dc.w	$8000
		dc.l    ArtNem_CPZStairBlock           ; loc_77EB4
		dc.w	$8300
		dc.l    ArtNem_CPZMetalBlock
		dc.w	$8600
Chemical_Plant_Sprites_2:
loc_2476E:
		dc.w    (((loc_24794-loc_2476E-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Air_Bubbles_Numbers     ; loc_79AC0
		dc.w	$A000
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_CPZDroplet               ; loc_779AA
		dc.w	$8780
		dc.l    ArtNem_LeverSpring       ; loc_798F4
		dc.w	$8800
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Neo_Green_Hill_Sprites_1:
loc_24794:
		dc.w    (((loc_247B4-loc_24794-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_NGHZ ; loc_B9E58
		dc.w	$0000
		dc.l    Nghz_Water_Surface      ; loc_78270
		dc.w	$8000
		dc.l    Nghz_Leaves             ; loc_78356
		dc.w	$8200
		dc.l    ArtNem_ArrowAndShooter      ; loc_783E2
		dc.w	$82E0
		dc.l    Nghz_Water_Splash       ; loc_78540
		dc.w	$8500
Neo_Green_Hill_Sprites_2:
loc_247B4:
		dc.w    (((loc_247d4-loc_247B4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Air_Bubbles_Numbers     ; loc_79AC0
		dc.w	$A000
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_LeverSpring       ; loc_798F4
		dc.w	$8800
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
End_Level_Results_Sprites:
loc_247d4:
		dc.w    (((loc_247DC-loc_247d4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Title_Cards             ; loc_7EA04
		dc.w	$B000
End_Level_Sprites:
loc_247DC:
		dc.w    (((loc_247E4-loc_247DC-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Signpost               ; loc_7931E
		dc.w	$8680
loc_247E4: ; Not all sprites are loaded in to VRam
		dc.l    Hidden_Points           ; loc_7FB5C
		dc.w	$96C0
		dc.l    Big_Ring_Flash          ; loc_7F9E8
		dc.w	$8C40
Green_Hill_Boss:
loc_247F0:
		dc.w    (((loc_24804-loc_247F0-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Robotnik_Ship           ; loc_7CC9E
		dc.w	$8C00
		dc.l    ArtNem_GHZBoss            ; loc_7E124
		dc.w	$9800
		dc.l    ArtNem_EggChoppers         ; loc_7E910
		dc.w	$A800
loc_24804: ; Not all sprites are loaded in to VRam
		dc.l    Robotnik_Ship           ; loc_7CC9E
		dc.w	$8000
		dc.l    Cpz_Boss		; loc_7d3DA
		dc.w	$8C00
		dc.l    Ship_Boost              ; loc_7DFC0
		dc.w	$9A00
		dc.l    Boss_Smoke              ; loc_7E03E
		dc.w	$9B00
		dc.l    ArtNem_GHZBoss            ; loc_7E124
		dc.w	$9d00
		dc.l    ArtNem_EggChoppers         ; loc_7E910
		dc.w	$Ad00
		dc.w    (ArtNem_LeverSpring&$FFFF) ; loc_798F4 ; Left over from previous build
		dc.w	$8800
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
loc_24838:
		dc.w    (((loc_24840-loc_24838-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Title_Cards             ; loc_7EA04
		dc.w	$B000
loc_24840:
		dc.w    (((loc_24848-loc_24840-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Signpost               ; loc_7931E
		dc.w	$8680
loc_24848:
		dc.l    Hidden_Points           ; loc_7FB5C
		dc.w	$96C0
		dc.l    Big_Ring_Flash          ; loc_7F9E8
		dc.w	$8C40
loc_24854:
		dc.w    (((loc_24868-loc_24854-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Robotnik_Ship           ; loc_7CC9E
		dc.w	$8C00
		dc.l    ArtNem_GHZBoss            ; loc_7E124
		dc.w	$9800
		dc.l    ArtNem_EggChoppers         ; loc_7E910
		dc.w	$A800
loc_24868:
		dc.l    Robotnik_Ship           ; loc_7CC9E
		dc.w	$8000
		dc.l    Cpz_Boss		; loc_7d3DA
		dc.w	$8C00
		dc.l    Ship_Boost              ; loc_7DFC0
		dc.w	$9A00
		dc.l    Boss_Smoke              ; loc_7E03E
		dc.w	$9B00
		dc.l    ArtNem_GHZBoss            ; loc_7E124
		dc.w	$9d00
		dc.l    ArtNem_EggChoppers         ; loc_7E910
		dc.w	$Ad00
		dc.w    (Boss_Smoke&$FFFF)      ; loc_7E03E ; Left over from previous build
		dc.w	$9B00
		dc.l    ArtNem_GHZBoss            ; loc_7E124
		dc.w	$9d00
		dc.l    ArtNem_EggChoppers         ; loc_7E910
		dc.w	$Ad00
		dc.l    ArtNem_DHZGateLog              ; loc_77614
		dc.w	$8780
		dc.l    (ArtNem_LeverSpring-$0188) ; loc_7976C ; Left over from previous build
		dc.w	$8800
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Casino_Night_Sprites_Previous_Build_1:
loc_248B4:
		dc.w    (((loc_248C2-loc_248B4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_CNZ-$07E2 ; loc_AB748 ; Left over from previous build
		dc.w	$0000
		dc.l    ArtNem_CNZCards-$07E2              ; loc_AE75A ; Left over from previous build
		dc.w	$7A00
Casino_Night_Sprites_Previous_Build_2:
loc_248C2:
		dc.w    (((loc_248DC-loc_248C2-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w	$8780
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Chemical_Plant_Sprites_Previous_Build_1:
loc_248DC:
		dc.w    (((loc_2491A-loc_248DC-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_CPZ-$07E2 ; loc_B1d24
		dc.w	$0000
		dc.l    Cpz_Metal_Structure     ; loc_77A1C
		dc.w	$6E60
		dc.l    ArtNem_ConstructionStripes      ; loc_77C66
		dc.w	$7280
		dc.l    ArtNem_CPZBooster       ; loc_77942
		dc.w	$7380
		dc.l    ArtNem_CPZElevator            ; loc_77684
		dc.w	$7400
		dc.l    ArtNem_CPZAnimatedBits ; loc_77Cd2
		dc.w	$7600
		dc.l    ArtNem_CPZTubeSpring        ; loc_78074
		dc.w	$7C00
		dc.l    Water_Surface           ; loc_777d2
		dc.w	$8000
		dc.l    ArtNem_CPZStairBlock           ; loc_77EB4
		dc.w	$8300
		dc.l    ArtNem_CPZMetalBlock
		dc.w	$8600
Chemical_Plant_Sprites_Previous_Build_2:
loc_2491A:
		dc.w    (((loc_2493A-loc_2491A-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    ArtNem_CPZDroplet               ; loc_779AA
		dc.w	$8780
		dc.l    (ArtNem_LeverSpring-$0188) ; loc_7976C
		dc.w	$8800
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
Neo_Green_Hill_Sprites_Previous_Build_1:
loc_2493A:
		dc.w    (((loc_2495A-loc_2493A-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_NGHZ-$07d2 ; loc_B9686
		dc.w	$0000
		dc.l    Nghz_Water_Surface      ; loc_78270
		dc.w	$8000
		dc.l    Nghz_Leaves             ; loc_78356
		dc.w	$8200
		dc.l    ArtNem_ArrowAndShooter      ; loc_783E2
		dc.w	$82E0
		dc.l    Nghz_Water_Splash       ; loc_78540
		dc.w	$8500
Neo_Green_Hill_Sprites_Previous_Build_2:
loc_2495A:
		dc.w    (((loc_24974-loc_2495A-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w	$8680
		dc.l    (ArtNem_LeverSpring-$0188) ; loc_7976C
		dc.w	$8800
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
End_Level_Results_Sprites_Previous_Build:
loc_24974:
		dc.w    (((loc_2497C-loc_24974-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Title_Cards-$07E2       ; loc_7E222
		dc.w	$B000
End_Level_Sprites_Previous_Build:
loc_2497C:
		dc.w    (((loc_24990-loc_2497C-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Signpost               ; loc_7931E
		dc.w	$d000
		dc.l    Hidden_Points-$07E2     ; loc_7F37A
		dc.w	$96C0
		dc.l    Big_Ring_Flash-$07E2    ; loc_7F206
		dc.w	$8C40
Green_Hill_Boss_Previous_Build:
loc_24990:
		dc.w    (((loc_249A4-loc_24990-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Robotnik_Ship-$07E2     ; loc_7C4BC
		dc.w	$8C00
		dc.l    ArtNem_GHZBoss-$07E2      ; loc_7D942
		dc.w	$9800
		dc.l    ArtNem_EggChoppers-$07E2   ; loc_7E12E
		dc.w	$A800
loc_249A4:
		dc.l    Robotnik_Ship-$07E2     ; loc_7C4BC
		dc.w	$8000
		dc.l    Cpz_Boss-$07E2          ; loc_7CBF8
		dc.w	$8C00
		dc.l    Ship_Boost-$07E2        ; loc_7d7DE
		dc.w	$9A00
		dc.l    Boss_Smoke-$07E2        ; loc_7D85C
		dc.w	$9B00
		dc.l    ArtNem_GHZBoss-$07E2      ; loc_7D942
		dc.w	$9d00
		dc.l    ArtNem_EggChoppers-$07E2   ; loc_7E12E
		dc.w	$Ad00
		dc.w	$8680
		dc.l    (ArtNem_LeverSpring-$0188) ; loc_7976C
		dc.w	$8800
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w	$8B80
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w	$8E00
loc_249DC:
		dc.w    (((loc_249E4-loc_249DC-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Title_Cards-$07E2       ; loc_7E222
		dc.w	$B000
loc_249E4:
		dc.w    (((loc_249F8-loc_249E4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Signpost               ; loc_7931E
		dc.w	$d000
		dc.l    Hidden_Points-$07E2     ; loc_7F37A
		dc.w	$96C0
		dc.l    Big_Ring_Flash-$07E2    ; loc_7F206
		dc.w	$8C40
loc_249F8:
		dc.w    (((loc_24A0C-loc_249F8-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Robotnik_Ship-$07E2     ; loc_7C4BC
		dc.w	$8C00
		dc.l    ArtNem_GHZBoss-$07E2      ; loc_7D942
		dc.w	$9800
		dc.l    ArtNem_EggChoppers-$07E2   ; loc_7E12E
		dc.w	$A800
loc_24A0C:
		dc.l    Robotnik_Ship-$07E2     ; loc_7C4BC
		dc.w	$8000
		dc.l    Cpz_Boss-$07E2          ; loc_7CBF8
		dc.w	$8C00
		dc.l    Ship_Boost-$07E2        ; loc_7d7DE
		dc.w	$9A00
		dc.l    Boss_Smoke-$07E2        ; loc_7D85C
		dc.w	$9B00
		dc.l    ArtNem_GHZBoss-$07E2      ; loc_7D942
		dc.w	$9d00
		dc.l    ArtNem_EggChoppers-$07E2   ; loc_7E12E
		dc.w	$Ad00
Unknow_Data_0x024A30:
loc_24A30:
		binclude	"misc/24A30.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated flowers in GHZ and HTZ ; ArtUnc_28000: ArtUnc_28080: ArtUnc_21800: ArtUnc_28180:
;---------------------------------------------------------------------------------------
ArtUnc_Flowers1:	binclude	"art/uncompressed/GHZ and HTZ flowers - 1.bin"
ArtUnc_Flowers2:	binclude	"art/uncompressed/GHZ and HTZ flowers - 2.bin"
ArtUnc_Flowers3:	binclude	"art/uncompressed/GHZ and HTZ flowers - 3.bin"
ArtUnc_Flowers4:	binclude	"art/uncompressed/GHZ and HTZ flowers - 4.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Pulsing thing against checkered backing from GHZ ; ArtUnc_28200: Ghz_Dyn_Wall:
ArtUnc_GHZPulseBall:	binclude	"art/uncompressed/Pulsing ball against checkered background (GHZ).bin"



Hill_Top_Background:     ; loc_28300:
		binclude	"data\htz\backgnd.nem"
Hill_Top_Background_Unc: ; loc_28C2A:
		binclude	"data\htz\backgnd.dat"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Spinning metal cylinder patterns in MTZ	; ArtUnc_2902A: Mz_Spinnig_Cylinder:
ArtUnc_MTZCylinder:	binclude	"art/uncompressed/Spinning metal cylinder (MTZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Lava patterns in MTZ and HTZ			; ArtUnc_2A02A: Mz_Lava:
ArtUnc_Lava:	binclude	"art/uncompressed/Lava.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated section of MTZ background		; ArtUnc_2A06A: Mz_Pistons:
ArtUnc_MTZAnimBack:	binclude	"art/uncompressed/Animated section of MTZ background.bin"
; --------------------------------------------------------------------------------------
; Uncompressed art
; Unused spinning drills in MTZ			; ArtUnc_2A86A: Mz_Drills:
ArtUnc_Drills:	binclude	"art/uncompressed/Spinning drills (MTZ).bin"

HPz_Dyn_Background:      ; loc_2B06A: Unused - Left over from previous build
		binclude	"data\hpz\backgnd.dat"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Pulsing orb in HPZ				; ArtUnc_2B46A: HPz_Orbs:
ArtUnc_HPZPulseOrb:	binclude	"art/uncompressed/Pulsing orb (HPZ).bin"
; --------------------------------------------------------------------------------------
; Uncompressed art
; Pulsing ball in OOZ 				; ArtUnc_2B76A: Ooz_Red_Balls:
ArtUnc_OOZPulseBall:	binclude	"art/uncompressed/Pulsing ball (OOZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Square rotating around ball in OOZ	 	; ArtUnc_2B8EA: ArtUnc_2BAEA:
ArtUnc_OOZSquareBall1:	binclude	"art/uncompressed/Square rotating around ball in OOZ - 1.bin"
ArtUnc_OOZSquareBall2:	binclude	"art/uncompressed/Square rotating around ball in OOZ - 2.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Oil in OOZ    				; ArtUnc_2BCEA: ArtUnc_2C4EA:
ArtUnc_Oil1:	binclude	"art/uncompressed/Oil - 1.bin"
ArtUnc_Oil2:	binclude	"art/uncompressed/Oil - 2.bin"

CPz_Dyn_Background:      ; loc_2CCEA:
		binclude	"data\cpz\backgnd.dat"
NGHz_Water_Falls_1:      ; loc_2CEEA:
		binclude	"data\nghz\water_f1.dat"
NGHz_Water_Falls_2:      ; loc_2CFEA:
		binclude	"data\nghz\water_f2.dat"
NGHz_Water_Falls_3:      ; loc_2d0EA:
		binclude	"data\nghz\water_f3.dat"
;===============================================================================
; Colision Array
; [ Begin ]
;===============================================================================
AngleMap: ; loc_2d1EA:
		binclude	"level/collision/Curve and resistance mappings.bin"
Colision_Array_1: ; loc_2d2EA:
		binclude	"level/collision/Collision array 1.bin"
Colision_Array_2: ; loc_2E2EA:
		binclude	"level/collision/Collision array 2.bin"
;===============================================================================
; Colision Array
; [ End ]
;===============================================================================
;===============================================================================
; 16x16 Colision Index
; [ Begin ]
;===============================================================================
Green_Hill_Colision_1:     ; loc_2F2EA:
		binclude	"level/collision/GHZ primary 16x16 collision index.bin"
Green_Hill_Colision_2:     ; loc_2F5EA:
		binclude	"level/collision/GHZ secondary 16x16 collision index.bin"
Wood_Colision:             ; loc_2F8EA:
		binclude	"level/collision/WZ 16x16 collision index.bin"
Metropolis_Colision:       ; loc_2FBEA:
		binclude	"level/collision/MTZ 16x16 collision index.bin"
Hidden_Palace_Colision_1:  ; loc_2FEEA:
		binclude	"level/collision/HPZ primary 16x16 collision index.bin"
Hidden_Palace_Colision_2:  ; loc_301EA:
		binclude	"level/collision/HPZ secondary 16x16 collision index.bin"
Oil_Ocean_Colision:        ; loc_304EA:
		binclude	"level/collision/OOZ 16x16 collision index.bin"
Dust_Hill_Colision:        ; loc_307EA:
		binclude	"level/collision/DHZ 16x16 collision index.bin"
Casino_Night_Colision_1:   ; loc_30AEA:
		binclude	"level/collision/CNZ primary 16x16 collision index.bin"
Casino_Night_Colision_2:   ; loc_30DEA:
		binclude	"level/collision/CNZ secondary 16x16 collision index.bin"
Chemical_Plant_Colision_1: ; loc_310EA:
		binclude	"level/collision/CPZ primary 16x16 collision index.bin"
Chemical_Plant_Colision_2: ; loc_313EA:
		binclude	"level/collision/CPZ secondary 16x16 collision index.bin"
Neo_Green_Hill_Colision_1: ; loc_316EA:
		binclude	"level/collision/NGHZ primary 16x16 collision index.bin"
Neo_Green_Hill_Colision_2: ; loc_319EA:
		binclude	"level/collision/NGHZ secondary 16x16 collision index.bin"
;===============================================================================
; 16x16 Colision Index
; [ End ]
;===============================================================================
;===============================================================================
; Special Stage Layout
; [ Begin ]
;===============================================================================
Special_Stage_1: ; loc_31CEA:
		binclude	"misc/Special Stage 1 layout.bin"
Special_Stage_2: ; loc_31F64:
		binclude	"misc/Special Stage 2 layout.bin"
Special_Stage_3: ; loc_32376:
		binclude	"misc/Special Stage 3 layout.bin"
Special_Stage_4: ; loc_326d2:
		binclude	"misc/Special Stage 4 layout.bin"
Special_Stage_5: ; loc_32BAC:
		binclude	"misc/Special Stage 5 layout.bin"
Special_Stage_6: ; loc_3305C:
		binclude	"misc/Special Stage 6 layout.bin"
;===============================================================================
; Special Stage Layout
; [ End ]
;===============================================================================
;===============================================================================
; Level Layout
; [ Begin ]
;===============================================================================
; off_3334E;
Off_Level: zoneOrderedOffsetTable 2,4
	zoneOffsetTableEntry.w Ghz_1_Foreground
	zoneOffsetTableEntry.w Ghz_Background ; $0000
	zoneOffsetTableEntry.w Ghz_2_Foreground
	zoneOffsetTableEntry.w Ghz_Background ; $0001
	zoneOffsetTableEntry.w Null_Layout_1
	zoneOffsetTableEntry.w Null_Layout_1 ; $0100
	zoneOffsetTableEntry.w Null_Layout_1
	zoneOffsetTableEntry.w Null_Layout_1 ; $0101
	zoneOffsetTableEntry.w Wz_1_Foreground
	zoneOffsetTableEntry.w Wz_1_Background ; $0200
	zoneOffsetTableEntry.w Wz_2_Foreground
	zoneOffsetTableEntry.w Wz_2_Background ; $0201
	zoneOffsetTableEntry.w Null_Layout_2
	zoneOffsetTableEntry.w Null_Layout_2 ; $0300
	zoneOffsetTableEntry.w Null_Layout_2
	zoneOffsetTableEntry.w Null_Layout_2 ; $0301
	zoneOffsetTableEntry.w Mz_1_Foreground
	zoneOffsetTableEntry.w Mz_Background ; $0400
	zoneOffsetTableEntry.w Mz_2_Foreground
	zoneOffsetTableEntry.w Mz_Background ; $0401
	zoneOffsetTableEntry.w Mz_3_Foreground
	zoneOffsetTableEntry.w Mz_Background ; $0500
	zoneOffsetTableEntry.w Mz_3_Foreground
	zoneOffsetTableEntry.w Mz_Background ; $0501
	zoneOffsetTableEntry.w Null_Layout_3
	zoneOffsetTableEntry.w Null_Layout_3 ; $0600
	zoneOffsetTableEntry.w Null_Layout_3
	zoneOffsetTableEntry.w Null_Layout_3 ; $0601
	zoneOffsetTableEntry.w Htz_1_Foreground
	zoneOffsetTableEntry.w Htz_1_Background ; $0700
	zoneOffsetTableEntry.w Htz_2_Foreground
	zoneOffsetTableEntry.w Htz_2_Background ; $0701
	zoneOffsetTableEntry.w Hpz_Foreground
	zoneOffsetTableEntry.w Hpz_Background ; $0800
	zoneOffsetTableEntry.w Hpz_Foreground
	zoneOffsetTableEntry.w Hpz_Background ; $0801
	zoneOffsetTableEntry.w Null_Layout_4
	zoneOffsetTableEntry.w Null_Layout_4 ; $0900
	zoneOffsetTableEntry.w Null_Layout_4
	zoneOffsetTableEntry.w Null_Layout_4 ; $0901
	zoneOffsetTableEntry.w OOz_1_Foreground
	zoneOffsetTableEntry.w OOz_Background ; $0A00
	zoneOffsetTableEntry.w OOz_2_Foreground
	zoneOffsetTableEntry.w OOz_Background ; $0A01
	zoneOffsetTableEntry.w Dhz_1_Foreground
	zoneOffsetTableEntry.w Dhz_Background ; $0B00
	zoneOffsetTableEntry.w Dhz_2_Foreground
	zoneOffsetTableEntry.w Dhz_Background ; $0B01
	zoneOffsetTableEntry.w Cnz_1_Foreground
	zoneOffsetTableEntry.w Cnz_1_Background ; $0C00
	zoneOffsetTableEntry.w Cnz_2_Foreground
	zoneOffsetTableEntry.w Cnz_2_Background ; $0C01
	zoneOffsetTableEntry.w Cpz_1_Foreground
	zoneOffsetTableEntry.w Cpz_Background ; $0d00
	zoneOffsetTableEntry.w Cpz_2_Foreground
	zoneOffsetTableEntry.w Cpz_Background ; $0d01
	zoneOffsetTableEntry.w Null_Layout_5
	zoneOffsetTableEntry.w Null_Layout_5 ; $0E00
	zoneOffsetTableEntry.w Null_Layout_5
	zoneOffsetTableEntry.w Null_Layout_5 ; $0E01
	zoneOffsetTableEntry.w Nghz_1_Foreground
	zoneOffsetTableEntry.w Nghz_1_Background ; $0F00
	zoneOffsetTableEntry.w Nghz_2_Foreground
	zoneOffsetTableEntry.w Nghz_2_Background ; $0F01
	zoneOffsetTableEntry.w Null_Layout_6
	zoneOffsetTableEntry.w Null_Layout_6 ; $1000
	zoneOffsetTableEntry.w Null_Layout_6
	zoneOffsetTableEntry.w Null_Layout_6 ; $1001
    zoneTableEnd

Ghz_1_Foreground:  ; loc_333d6:
		binclude	"level/layout/GHZ_1.bin"
Ghz_2_Foreground:  ; loc_33BD8:
		binclude	"level/layout/GHZ_2.bin"

Ghz_Background:    ; loc_343DA:
		binclude	"level/layout/GHZ_BG.bin"
Null_Layout_1:     ; loc_343E4:
		dc.l 0
Wz_1_Foreground:   ; loc_343E8:
		binclude	"level/layout/WZ_1.bin"
Wz_2_Foreground:   ; loc_34BEA:
		binclude	"level/layout/WZ_2.bin"
Wz_1_Background:   ; loc_353EC:
		binclude	"level/layout/WZ_1_BG.bin"
Wz_2_Background:   ; loc_35BEE:
		binclude	"level/layout/WZ_2_BG.bin"
Null_Layout_2:     ; loc_363F0:
		dc.l 0
Mz_1_Foreground:   ; loc_363F4:
		binclude	"level/layout/MTZ_1.bin"
Mz_2_Foreground:   ; loc_36BF6:
		binclude	"level/layout/MTZ_2.bin"
Mz_Background:     ; loc_373F8:
		binclude	"level/layout/MTZ_BG.bin"
Mz_3_Foreground:   ; loc_3741E:
		binclude	"level/layout/MTZ_3.bin"
Null_Layout_3:     ; loc_37C20:
		dc.l 0
Htz_1_Foreground:  ; loc_37C24:
		binclude	"level/layout/HTZ_1.bin"
Htz_2_Foreground:  ; loc_38426:
		binclude	"level/layout/HTZ_2.bin"
Htz_1_Background:  ; loc_38C28:
		binclude	"level/layout/HTZ_1_BG.bin"
Htz_2_Background:  ; loc_3942A:
		binclude	"level/layout/HTZ_2_BG.bin"
Hpz_Foreground:    ; loc_39C2C:
		binclude	"level/layout/HPZ_1.bin"
Hpz_Background:    ; loc_3942E:
		binclude	"level/layout/HPZ_BG.bin"
Null_Layout_4:     ; loc_3A478:
		dc.l 0
OOz_1_Foreground:  ; loc_3A47C:
		binclude	"level/layout/OOZ_1.bin"
OOz_2_Foreground:  ; loc_3AC7E:
		binclude	"level/layout/OOZ_2.bin"
OOz_Background:    ; loc_3B480:
		binclude	"level/layout/OOZ_BG.bin"
Dhz_1_Foreground:  ; loc_3B49A:
		binclude	"level/layout/DHZ_1.bin"
Dhz_2_Foreground:  ; loc_3BC9C:
		binclude	"level/layout/DHZ_2.bin"
Dhz_Background:    ; loc_3C49E:
		binclude	"level/layout/DHZ_BG.bin"
Cnz_1_Foreground:  ; loc_3C4B0:
		binclude	"level/layout/CNZ_1.bin"
Cnz_2_Foreground:  ; loc_3CCB2:
		binclude	"level/layout/CNZ_2.bin"
Cnz_1_Background:  ; loc_3d4B4:
		binclude	"level/layout/CNZ_1_BG.bin"
Cnz_2_Background:  ; loc_3DCB6:
		binclude	"level/layout/CNZ_2_BG.bin"
Cpz_1_Foreground:  ; loc_3DCC0:
		binclude	"level/layout/CPZ_1.bin"
Cpz_2_Foreground:  ; loc_3E4C2:
		binclude	"level/layout/CPZ_2.bin"
Cpz_Background:    ; loc_3ECC4:
		binclude	"level/layout/CPZ_BG.bin"
Null_Layout_5:     ; loc_3ECF0:
		dc.l 0
Nghz_1_Foreground: ; loc_3ECF4:
		binclude	"level/layout/NGHZ_1.bin"
Nghz_2_Foreground: ; loc_3F4F6:
		binclude	"level/layout/NGHZ_2.bin"
Nghz_1_Background: ; loc_3ECF8:
		binclude	"level/layout/NGHZ_1_BG.bin"
Nghz_2_Background: ; loc_404FA:
		binclude	"level/layout/NGHZ_2_BG.bin"
Null_Layout_6:     ; loc_40CFC:
		dc.l 0
;===============================================================================
; Level Object Layout
; [ End ]
;===============================================================================
loc_40d00: ; Big Ring - Left Over from Sonic 1
		binclude	"data\sprites\bigring.dat"
loc_41940: ; Neo Green Hill Foreground Act 2 overwrite by Big Ring- Left Over from previous build ???
		binclude	"data\nghz\fgunused.dat"
loc_41B72: ; Neo Green Hill Background Act 1 - Left Over from previous build ???
		binclude	"data\nghz\backact1.dat"
loc_42374: ; Neo Green Hill Background Act 2 - Left Over from previous build ???
		binclude	"data\nghz\bgunused.dat"
loc_42B76: ; Filler for Null Level Layout - Left Over from previous build ???
		dc.l 0
loc_42B7A: ; Another Big Ring - Left Over from Sonic 1
		binclude	"data\sprites\bigring.dat"
Unknow_Pallete_0x0437BA: ; loc_437BA:
		dc.w	$0000,$0262,$02A4,$04E8,$0000,$0EEE
Unknow_Data_0x0437C6: ; loc_437C6:
		binclude	"misc/437C6.bin"
;===============================================================================
; Level Object Layout
; [ Begin ]
;===============================================================================

; Macro for marking the boundaries of an object layout file
ObjectLayoutBoundary macro
	dc.w	$FFFF,$0000,$0000
    endm

; off_44000:
Objects_Layout: zoneOrderedOffsetTable 2,2
	zoneOffsetTableEntry.w  Ghz_1_Objects_Layout
	zoneOffsetTableEntry.w  Ghz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Mz_1_Objects_Layout
	zoneOffsetTableEntry.w  Mz_2_Objects_Layout
	zoneOffsetTableEntry.w  Mz_3_Objects_Layout
	zoneOffsetTableEntry.w  Mz_3_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Htz_1_Objects_Layout
	zoneOffsetTableEntry.w  Htz_2_Objects_Layout
	zoneOffsetTableEntry.w  Hpz_1_Objects_Layout
	zoneOffsetTableEntry.w  Hpz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  OOz_1_Objects_Layout
	zoneOffsetTableEntry.w  OOz_2_Objects_Layout
	zoneOffsetTableEntry.w  Dhz_1_Objects_Layout
	zoneOffsetTableEntry.w  Dhz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Cpz_1_Objects_Layout
	zoneOffsetTableEntry.w  Cpz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Nghz_1_Objects_Layout
	zoneOffsetTableEntry.w  Nghz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
    zoneTableEnd

	; These things act as boundaries for the object layout parser,so it doesn't read past the end/beginning of the file
	ObjectLayoutBoundary
Ghz_1_Objects_Layout:	binclude	"level/objects/GHZ_1.bin"
	ObjectLayoutBoundary
Ghz_2_Objects_Layout:	binclude	"level/objects/GHZ_2.bin"
	ObjectLayoutBoundary
Mz_1_Objects_Layout:	binclude	"level/objects/MTZ_1.bin"
	ObjectLayoutBoundary
Mz_2_Objects_Layout:	binclude	"level/objects/MTZ_2.bin"
	ObjectLayoutBoundary
Mz_3_Objects_Layout:	binclude	"level/objects/MTZ_3.bin"
	ObjectLayoutBoundary
Htz_1_Objects_Layout:	binclude	"level/objects/HTZ_1.bin"
	ObjectLayoutBoundary
Htz_2_Objects_Layout:	binclude	"level/objects/HTZ_2.bin"
	ObjectLayoutBoundary
Hpz_1_Objects_Layout:	binclude	"level/objects/HPZ_1.bin"
	ObjectLayoutBoundary
Hpz_2_Objects_Layout:
	ObjectLayoutBoundary
	ObjectLayoutBoundary		; yes,there are two here for some reason
OOz_1_Objects_Layout:	binclude	"level/objects/OOZ_1.bin"
	ObjectLayoutBoundary
OOz_2_Objects_Layout:	binclude	"level/objects/OOZ_2.bin"
	ObjectLayoutBoundary
Dhz_1_Objects_Layout:	binclude	"level/objects/DHZ_1.bin"
	ObjectLayoutBoundary
Dhz_2_Objects_Layout:
	ObjectLayoutBoundary
Cpz_1_Objects_Layout:	binclude	"level/objects/CPZ_1.bin"
	ObjectLayoutBoundary
Cpz_2_Objects_Layout:	binclude	"level/objects/CPZ_2.bin"
	ObjectLayoutBoundary
Nghz_1_Objects_Layout:	binclude	"level/objects/NGHZ_1.bin"
	ObjectLayoutBoundary
Nghz_2_Objects_Layout:	binclude	"level/objects/NGHZ_2.bin"
	ObjectLayoutBoundary
Null_Objects_Layout:
	ObjectLayoutBoundary
;===============================================================================
; Level Object Layout
; [ End ]
;===============================================================================
Unknow_Data_0x04634E: ; loc_4634E:
		binclude	"misc/4634E.bin"
Unknow_Pallete_0x0474AC:
loc_474AC:
		binclude	"misc/474AC.bin"
Unknow_Data_0x04760C:
loc_4760C:
		binclude	"misc/4760C.bin"
;===============================================================================
; Level Rings Layout
; [ Begin ]
;===============================================================================
; off_48000:
Rings_Layout: zoneOrderedOffsetTable 2,2
	zoneOffsetTableEntry.w  Ghz_1_Rings_Layout
	zoneOffsetTableEntry.w  Ghz_2_Rings_Layout
	zoneOffsetTableEntry.w  Id_0100_Rings_Layout
	zoneOffsetTableEntry.w  Id_0101_Rings_Layout
	zoneOffsetTableEntry.w  Wz_1_Rings_Layout
	zoneOffsetTableEntry.w  Wz_2_Rings_Layout
	zoneOffsetTableEntry.w  Id_0300_Rings_Layout
	zoneOffsetTableEntry.w  Id_0301_Rings_Layout
	zoneOffsetTableEntry.w  Mz_1_Rings_Layout
	zoneOffsetTableEntry.w  Mz_2_Rings_Layout
	zoneOffsetTableEntry.w  Mz_3_Rings_Layout
	zoneOffsetTableEntry.w  Mz_4_Rings_Layout
	zoneOffsetTableEntry.w  Id_0600_Rings_Layout
	zoneOffsetTableEntry.w  Id_0601_Rings_Layout
	zoneOffsetTableEntry.w  Htz_1_Rings_Layout
	zoneOffsetTableEntry.w  Htz_2_Rings_Layout
	zoneOffsetTableEntry.w  Hpz_1_Rings_Layout
	zoneOffsetTableEntry.w  Hpz_2_Rings_Layout
	zoneOffsetTableEntry.w  Id_0900_Rings_Layout
	zoneOffsetTableEntry.w  Id_0901_Rings_Layout
	zoneOffsetTableEntry.w  OOz_1_Rings_Layout
	zoneOffsetTableEntry.w  OOz_2_Rings_Layout
	zoneOffsetTableEntry.w  DHz_1_Rings_Layout
	zoneOffsetTableEntry.w  DHz_2_Rings_Layout
	zoneOffsetTableEntry.w  CNz_1_Rings_Layout
	zoneOffsetTableEntry.w  CNz_2_Rings_Layout
	zoneOffsetTableEntry.w  CPz_1_Rings_Layout
	zoneOffsetTableEntry.w  CPz_2_Rings_Layout
	zoneOffsetTableEntry.w  GCz_1_Rings_Layout
	zoneOffsetTableEntry.w  GCz_2_Rings_Layout
	zoneOffsetTableEntry.w  NGHz_1_Rings_Layout
	zoneOffsetTableEntry.w  NGHz_2_Rings_Layout
	zoneOffsetTableEntry.w  DEz_1_Rings_Layout
	zoneOffsetTableEntry.w  DEz_2_Rings_Layout
    zoneTableEnd

Ghz_1_Rings_Layout:	binclude	"level/rings/GHZ_1.bin"
Ghz_2_Rings_Layout:	binclude	"level/rings/GHZ_2.bin"
Id_0100_Rings_Layout: ; loc_483DC:
		dc.w	$FFFF
Id_0101_Rings_Layout: ; loc_483DE:
		dc.w	$FFFF
Wz_1_Rings_Layout:	binclude	"level/rings/WZ_1.bin"
Wz_2_Rings_Layout:	binclude	"level/rings/WZ_2.bin"
Id_0300_Rings_Layout: ; loc_483E4:
		dc.w	$FFFF
Id_0301_Rings_Layout: ; loc_483E6:
		dc.w	$FFFF
Mz_1_Rings_Layout:	binclude	"level/rings/MTZ_1.bin"
Mz_2_Rings_Layout:	binclude	"level/rings/MTZ_2.bin"
Mz_3_Rings_Layout:	binclude	"level/rings/MTZ_3.bin"
Mz_4_Rings_Layout:	binclude	"level/rings/MTZ_4.bin"
Id_0600_Rings_Layout: ; loc_483F0:
		dc.w	$FFFF
Id_0601_Rings_Layout: ; loc_483F2:
		dc.w	$FFFF
Htz_1_Rings_Layout:	binclude	"level/rings/HTZ_1.bin"
Htz_2_Rings_Layout:	binclude	"level/rings/HTZ_2.bin"
Hpz_1_Rings_Layout:	binclude	"level/rings/HPZ_1.bin"
Hpz_2_Rings_Layout:	binclude	"level/rings/HPZ_2.bin"
Id_0900_Rings_Layout: ; loc_487C8:
		dc.w	$FFFF
Id_0901_Rings_Layout: ; loc_487CA:
		dc.w	$FFFF
OOz_1_Rings_Layout:	binclude	"level/rings/OOZ_1.bin"
OOz_2_Rings_Layout:	binclude	"level/rings/OOZ_2.bin"
DHz_1_Rings_Layout:	binclude	"level/rings/DHZ_1.bin"
DHz_2_Rings_Layout:	binclude	"level/rings/DHZ_2.bin"
CNz_1_Rings_Layout:	binclude	"level/rings/CNZ_1.bin"
CNz_2_Rings_Layout:	binclude	"level/rings/CNZ_2.bin"
CPz_1_Rings_Layout:	binclude	"level/rings/CPZ_1.bin"
CPz_2_Rings_Layout:	binclude	"level/rings/CPZ_2.bin"
GCz_1_Rings_Layout:   ; loc_48B94:
		dc.w	$FFFF
GCz_2_Rings_Layout:   ; loc_48B96:
		dc.w	$FFFF
NGHz_1_Rings_Layout:	binclude	"level/rings/NGHZ_1.bin"
NGHz_2_Rings_Layout:	binclude	"level/rings/NGHZ_2.bin"
DEz_1_Rings_Layout:   ; loc_48DB0:
		dc.w	$FFFF
DEz_2_Rings_Layout:   ; loc_48DB2:
		dc.w	$FFFF
;===============================================================================
; Level Rings Layout
; [ End ]
;===============================================================================
Unknow_Data_0x048DB4: ; loc_48DB4:
		binclude	"misc/48DB4.bin"
Rock_Splashing: ; loc_4B76C:
		binclude	"data\sprites\rockspsh.dat"
Unknow_Palett_0x04BAAC: ; loc_4BAAC:
		binclude	"misc/4BAAC.bin"
Unknow_Data_0x04BC4C: ; loc_4BC4C:
		binclude	"misc/4BC4C.bin"
Fire_In_Bowl: ; loc_4E86C:
		binclude	"data\sprites\firebowl.dat"
; ---------------------------------------------------------------------------
; Filler (free space)
; ---------------------------------------------------------------------------
		rept $194
		dc.b	$FF
		endm

Unknow_Data_0x04EE00: ; loc_4EE00:
		binclude	"misc/4EE00.bin"
; ---------------------------------------------------------------------------
; Filler (free space)
; ---------------------------------------------------------------------------
		rept $468
		dc.b	$FF
		endm
;---------------------------------------------------------------------------------------
; Uncompressed art
; Patterns for Sonic  ; ArtUnc_50000:
;---------------------------------------------------------------------------------------
ArtUnc_Sonic:	binclude	"art/uncompressed/Sonic's art.bin"
;--------------------------------------------------------------------------------------
; Sprite Mappings
; Sonic			; MapUnc_614C0: Sonic_Mappings:
;--------------------------------------------------------------------------------------
MapUnc_Sonic:	binclude	"mappings/sprite/Sonic.bin"
Tails_Sprites: ; loc_6254C:
		binclude	"data\sprites\tails.dat"
;--------------------------------------------------------------------------------------
; Sprite Dynamic Pattern Reloading
; Sonic DPLCs   		; MapRUnc_6DA4C: Sonic_Dyn_Script:
;--------------------------------------------------------------------------------------
MapRUnc_Sonic:	binclude	"mappings/spriteDPLC/Sonic.bin"

ArtNem_Shield: ; loc_6DF8E:
		binclude	"data\sprites\shield.nem"
Invencibility_Stars: ; loc_6E114:
		binclude	"data\sprites\invstars.nem"
Unused_Dust: ; loc_6E1FC:
		binclude	"data\sprites\dust.dat"
Tails_Mappings: ; loc_6FB3C:
		dc.w    loc_6FC46-Tails_Mappings
		dc.w    loc_6FC48-Tails_Mappings
		dc.w    loc_6FC5A-Tails_Mappings
		dc.w    loc_6FC6C-Tails_Mappings
		dc.w    loc_6FC7E-Tails_Mappings
		dc.w    loc_6FC90-Tails_Mappings
		dc.w    loc_6FC9A-Tails_Mappings
		dc.w    loc_6FCA4-Tails_Mappings
		dc.w    loc_6FCB6-Tails_Mappings
		dc.w    loc_6FCC8-Tails_Mappings
		dc.w    loc_6FCd2-Tails_Mappings
		dc.w    loc_6FCDC-Tails_Mappings
		dc.w    loc_6FCE6-Tails_Mappings
		dc.w    loc_6FCF0-Tails_Mappings
		dc.w    loc_6FCFA-Tails_Mappings
		dc.w    loc_6Fd14-Tails_Mappings
		dc.w    loc_6Fd2E-Tails_Mappings
		dc.w    loc_6Fd48-Tails_Mappings
		dc.w    loc_6Fd62-Tails_Mappings
		dc.w    loc_6Fd7C-Tails_Mappings
		dc.w    loc_6FD96-Tails_Mappings
		dc.w    loc_6FDB0-Tails_Mappings
		dc.w    loc_6FDCA-Tails_Mappings
		dc.w    loc_6FDE4-Tails_Mappings
		dc.w    loc_6FDFE-Tails_Mappings
		dc.w    loc_6FE18-Tails_Mappings
		dc.w    loc_6FE32-Tails_Mappings
		dc.w    loc_6FE4C-Tails_Mappings
		dc.w    loc_6FE66-Tails_Mappings
		dc.w    loc_6FE80-Tails_Mappings
		dc.w    loc_6FE9A-Tails_Mappings
		dc.w    loc_6FEB4-Tails_Mappings
		dc.w    loc_6FECE-Tails_Mappings
		dc.w    loc_6FEE8-Tails_Mappings
		dc.w    loc_6FF02-Tails_Mappings
		dc.w    loc_6FF1C-Tails_Mappings
		dc.w    loc_6FF36-Tails_Mappings
		dc.w    loc_6FF50-Tails_Mappings
		dc.w    loc_6FF6A-Tails_Mappings
		dc.w    loc_6FF7C-Tails_Mappings
		dc.w    loc_6FF96-Tails_Mappings
		dc.w    loc_6FFA8-Tails_Mappings
		dc.w    loc_6FFC2-Tails_Mappings
		dc.w    loc_6FFd4-Tails_Mappings
		dc.w    loc_6FFEE-Tails_Mappings
		dc.w    loc_70000-Tails_Mappings
		dc.w    loc_7001A-Tails_Mappings
		dc.w    loc_7002C-Tails_Mappings
		dc.w    loc_7003E-Tails_Mappings
		dc.w    loc_70050-Tails_Mappings
		dc.w    loc_70062-Tails_Mappings
		dc.w    loc_70074-Tails_Mappings
		dc.w    loc_70086-Tails_Mappings
		dc.w    loc_700A0-Tails_Mappings
		dc.w    loc_700BA-Tails_Mappings
		dc.w    loc_700d4-Tails_Mappings
		dc.w    loc_700EE-Tails_Mappings
		dc.w    loc_70108-Tails_Mappings
		dc.w    loc_70122-Tails_Mappings
		dc.w    loc_7013C-Tails_Mappings
		dc.w    loc_70156-Tails_Mappings
		dc.w    loc_7013C-Tails_Mappings
		dc.w    loc_70170-Tails_Mappings
		dc.w    loc_7018A-Tails_Mappings
		dc.w    loc_701A4-Tails_Mappings
		dc.w    loc_701BE-Tails_Mappings
		dc.w    loc_701D8-Tails_Mappings
		dc.w    loc_701F2-Tails_Mappings
		dc.w    loc_7020C-Tails_Mappings
		dc.w    loc_70226-Tails_Mappings
		dc.w    loc_70240-Tails_Mappings
		dc.w    loc_7024A-Tails_Mappings
		dc.w    loc_70254-Tails_Mappings
		dc.w    loc_7025E-Tails_Mappings
		dc.w    loc_70268-Tails_Mappings
		dc.w    loc_70272-Tails_Mappings
		dc.w    loc_7027C-Tails_Mappings
		dc.w    loc_70286-Tails_Mappings
		dc.w    loc_70290-Tails_Mappings
		dc.w    loc_7029A-Tails_Mappings
		dc.w    loc_702A4-Tails_Mappings
		dc.w    loc_702AE-Tails_Mappings
		dc.w    loc_702B8-Tails_Mappings
		dc.w    loc_702C2-Tails_Mappings
		dc.w    loc_702CC-Tails_Mappings
		dc.w    loc_702d6-Tails_Mappings
		dc.w    loc_702E0-Tails_Mappings
		dc.w    loc_702EA-Tails_Mappings
		dc.w    loc_702F4-Tails_Mappings
		dc.w    loc_702FE-Tails_Mappings
		dc.w    loc_70310-Tails_Mappings
		dc.w    loc_70322-Tails_Mappings
		dc.w    loc_7032C-Tails_Mappings
		dc.w    loc_70336-Tails_Mappings
		dc.w    loc_70340-Tails_Mappings
		dc.w    loc_70352-Tails_Mappings
		dc.w    loc_70364-Tails_Mappings
		dc.w    loc_7036E-Tails_Mappings
		dc.w    loc_70378-Tails_Mappings
		dc.w    loc_70382-Tails_Mappings
		dc.w    loc_70394-Tails_Mappings
		dc.w    loc_703A6-Tails_Mappings
		dc.w    loc_703B8-Tails_Mappings
		dc.w    loc_703CA-Tails_Mappings
		dc.w    loc_703DC-Tails_Mappings
		dc.w    loc_703EE-Tails_Mappings
		dc.w    loc_70400-Tails_Mappings
		dc.w    loc_70412-Tails_Mappings
		dc.w    loc_7041C-Tails_Mappings
		dc.w    loc_7042E-Tails_Mappings
		dc.w    loc_70440-Tails_Mappings
		dc.w    loc_70452-Tails_Mappings
		dc.w    loc_70464-Tails_Mappings
		dc.w    loc_70476-Tails_Mappings
		dc.w    loc_70488-Tails_Mappings
		dc.w    loc_7049A-Tails_Mappings
		dc.w    loc_704AC-Tails_Mappings
		dc.w    loc_704B6-Tails_Mappings
		dc.w    loc_704C0-Tails_Mappings
		dc.w    loc_704d2-Tails_Mappings
		dc.w    loc_704DC-Tails_Mappings
		dc.w    loc_704E6-Tails_Mappings
		dc.w    loc_704F0-Tails_Mappings
		dc.w    loc_704FA-Tails_Mappings
		dc.w    loc_70504-Tails_Mappings
		dc.w    loc_7050E-Tails_Mappings
		dc.w    loc_70518-Tails_Mappings
		dc.w    loc_70522-Tails_Mappings
		dc.w    loc_70534-Tails_Mappings
		dc.w    loc_70546-Tails_Mappings
		dc.w    loc_70550-Tails_Mappings
		dc.w    loc_7055A-Tails_Mappings
		dc.w    loc_70564-Tails_Mappings
loc_6FC46:
		dc.w	$0000
loc_6FC48:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF4,$00090006,$0003FFF4
loc_6FC5A:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF4,$00090006,$0003FFF4
loc_6FC6C:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF4,$00090006,$0003FFF4
loc_6FC7E:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF4,$00090006,$0003FFF4
loc_6FC90:
		dc.w	$0001
		dc.l	$F00B0000,$0000FFF4
loc_6FC9A:
		dc.w	$0001
		dc.l	$F00B0000,$0000FFF4
loc_6FCA4:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF4,$00090006,$0003FFF4
loc_6FCB6:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF4,$00090006,$0003FFF4
loc_6FCC8:
		dc.w	$0001
		dc.l	$F0070000,$0000FFEC
loc_6FCd2:
		dc.w	$0001
		dc.l	$F00B0000,$0000FFE4
loc_6FCDC:
		dc.w	$0001
		dc.l	$F00B0000,$0000FFE4
loc_6FCE6:
		dc.w	$0001
		dc.l	$00090000,$0000FFE4
loc_6FCF0:
		dc.w	$0001
		dc.l	$F00B0000,$0000FFE4
loc_6FCFA:
		dc.w	$0003
		dc.l	$EC090000,$0000FFF0,$FC0d0006,$0003FFF0
		dc.l	$FC09000E,$0007FFE2
loc_6Fd14:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF3,$000d0006,$0003FFF0
		dc.l	$0009000E,$0007FFE4
loc_6Fd2E:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF8,$00090006,$0003FFF3
		dc.l	$Fd09000C,$0006FFE4
loc_6Fd48:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF2,$00090006,$0003FFF2
		dc.l	$Fd09000C,$0006FFE6
loc_6Fd62:
		dc.w	$0003
		dc.l	$EC090000,$0000FFF0,$FC0d0006,$0003FFF0
		dc.l	$FC09000E,$0007FFE2
loc_6Fd7C:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF3,$000d0006,$0003FFF0
		dc.l	$0009000E,$0007FFE4
loc_6FD96:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF8,$00090006,$0003FFF1
		dc.l	$Fd09000C,$0006FFE4
loc_6FDB0:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF2,$00090006,$0003FFF2
		dc.l	$Fd09000C,$0006FFE6
loc_6FDCA:
		dc.w	$0003
		dc.l	$E3010000,$0000FFF3,$F3030002,$0001FFEC
		dc.l	$F30B0006,$0003FFF4
loc_6FDE4:
		dc.w	$0003
		dc.l	$E7050000,$0000FFF6,$F70B0004,$0002FFEE
		dc.l	$FE050010,$00080006
loc_6FDFE:
		dc.w	$0003
		dc.l	$E6050000,$0000FFF8,$F6030004,$0002FFEF
		dc.l	$F60B0008,$0004FFF7
loc_6FE18:
		dc.w	$0003
		dc.l	$E3010000,$0000FFF7,$F30F0002,$0001FFEC
		dc.l	$FB010012,$0009000C
loc_6FE32:
		dc.w	$0003
		dc.l	$E3010000,$0000FFF3,$F3030002,$0001FFEC
		dc.l	$F30B0006,$0003FFF4
loc_6FE4C:
		dc.w	$0003
		dc.l	$E7050000,$0000FFF6,$F70B0004,$0002FFEE
		dc.l	$FF050010,$00080006
loc_6FE66:
		dc.w	$0003
		dc.l	$E6050000,$0000FFF8,$F6030004,$0002FFEF
		dc.l	$F60B0008,$0004FFF7
loc_6FE80:
		dc.w	$0003
		dc.l	$E3010000,$0000FFF7,$F30F0002,$0001FFEC
		dc.l	$03010012,$0009000C
loc_6FE9A:
		dc.w	$0003
		dc.l	$F0070000,$0000FFEC,$F0070008,$0004FFFC
		dc.l	$06070010,$0008FFFC
loc_6FEB4:
		dc.w	$0003
		dc.l	$F0070000,$0000FFF0,$F0070008,$00040000
		dc.l	$04070010,$00080000
loc_6FECE:
		dc.w	$0003
		dc.l	$F0070000,$0000FFF0,$F0070008,$00040000
		dc.l	$04070010,$0008FFFD
loc_6FEE8:
		dc.w	$0003
		dc.l	$F0070000,$0000FFF0,$F0070008,$00040000
		dc.l	$04070010,$0008FFFD
loc_6FF02:
		dc.w	$0003
		dc.l	$F0070000,$0000FFEC,$F0070008,$0004FFFC
		dc.l	$06070010,$0008FFFC
loc_6FF1C:
		dc.w	$0003
		dc.l	$F0070000,$0000FFF0,$F0070008,$00040000
		dc.l	$04070010,$00080000
loc_6FF36:
		dc.w	$0003
		dc.l	$F0070000,$0000FFF0,$F0070008,$00040000
		dc.l	$04070010,$0008FFFD
loc_6FF50:
		dc.w	$0003
		dc.l	$F0070000,$0000FFF0,$F0070008,$00040000
		dc.l	$04070010,$0008FFFD
loc_6FF6A:
		dc.w	$0002
		dc.l	$04010000,$0000FFEB,$F40F0002,$0001FFF3
loc_6FF7C:
		dc.w	$0003
		dc.l	$E2050000,$0000FFF8,$FA010004,$0002FFF0
		dc.l	$F20F0006,$0003FFF8
loc_6FF96:
		dc.w	$0002
		dc.l	$F9010000,$0000FFEC,$F10F0002,$0001FFF4
loc_6FFA8:
		dc.w	$0003
		dc.l	$FC010000,$0000FFEF,$E5010002,$0001FFFF
		dc.l	$F50F0004,$0002FFF7
loc_6FFC2:
		dc.w	$0002
		dc.l	$04010000,$0000FFEB,$F40F0002,$0001FFF3
loc_6FFd4:
		dc.w	$0003
		dc.l	$E2010000,$00000000,$FA010002,$0001FFF0
		dc.l	$F20F0004,$0002FFF8
loc_6FFEE:
		dc.w	$0002
		dc.l	$F9010000,$0000FFEC,$F10F0002,$0001FFF4
loc_70000:
		dc.w	$0003
		dc.l	$E4010000,$0000FFFF,$FC010002,$0001FFEF
		dc.l	$F40F0004,$0002FFF7
loc_7001A:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFF0,$F0070010,$0008FFEA
loc_7002C:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFF0,$F8050010,$0008FFEA
loc_7003E:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFF0,$F8050010,$0008FFEA
loc_70050:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFF0,$F8051010,$1008FFEA
loc_70062:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFF0,$F0070010,$0008FFEA
loc_70074:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFF0,$F0071810,$1808FFEA
loc_70086:
		dc.w	$0003
		dc.l	$E4010000,$0000FFFA,$F40B0002,$0001FFF0
		dc.l	$FE0B000E,$0007FFE8
loc_700A0:
		dc.w	$0003
		dc.l	$E4050000,$0000FFF8,$F40B0004,$0002FFF0
		dc.l	$04050010,$0008FFEF
loc_700BA:
		dc.w	$0003
		dc.l	$E4010000,$0000FFFA,$F40B0002,$0001FFF0
		dc.l	$0405000E,$0007FFEF
loc_700d4:
		dc.w	$0003
		dc.l	$E4050000,$0000FFF8,$F40B0004,$0002FFF0
		dc.l	$04050010,$0008FFEF
loc_700EE:
		dc.w	$0003
		dc.l	$E4010000,$0000FFFA,$F40B0002,$0001FFF0
		dc.l	$FC0B000E,$0007FFEA
loc_70108:
		dc.w	$0003
		dc.l	$E4050000,$0000FFF8,$F40B0004,$0002FFF0
		dc.l	$E90B1810,$1808FFF2
loc_70122:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF0,$000d0006,$0003FFF0
		dc.l	$060d000E,$0007FFF0
loc_7013C:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF0,$000d0006,$0003FFF0
		dc.l	$0605000E,$0007FFF8
loc_70156:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF0,$000d0006,$0003FFF0
		dc.l	$0605000E,$0007FFF8
loc_70170:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF0,$000d0006,$0003FFF0
		dc.l	$060d000E,$0007FFF0
loc_7018A:
		dc.w	$0003
		dc.l	$F0090000,$0000FFF0,$000d0006,$0003FFF0
		dc.l	$060d000E,$0007FFF0
loc_701A4:
		dc.w	$0003
		dc.l	$F80B0000,$0000FFEC,$F805000C,$00060004
		dc.l	$FE0B0810,$08080000
loc_701BE:
		dc.w	$0003
		dc.l	$F80B0000,$0000FFEC,$F805000C,$00060004
		dc.l	$01050810,$08080004
loc_701D8:
		dc.w	$0003
		dc.l	$F80B0000,$0000FFEC,$F805000C,$00060004
		dc.l	$01050810,$08080004
loc_701F2:
		dc.w	$0003
		dc.l	$F80B0000,$0000FFEC,$F805000C,$00060004
		dc.l	$01050810,$08080004
loc_7020C:
		dc.w	$0003
		dc.l	$F80B0000,$0000FFEC,$F805000C,$00060004
		dc.l	$FC0B0810,$0808FFFE
loc_70226:
		dc.w	$0003
		dc.l	$F80B0000,$0000FFEC,$F805000C,$00060004
		dc.l	$FC0B1010,$10080006
loc_70240:
		dc.w	$0001
		dc.l	$F00F0000,$0000FFF0
loc_7024A:
		dc.w	$0001
		dc.l	$F00F0000,$0000FFF0
loc_70254:
		dc.w	$0001
		dc.l	$F00F0000,$0000FFF0
loc_7025E:
		dc.w	$0001
		dc.l	$F8090000,$0000FFDC
loc_70268:
		dc.w	$0001
		dc.l	$F8090000,$0000FFDC
loc_70272:
		dc.w	$0001
		dc.l	$F8090000,$0000FFDC
loc_7027C:
		dc.w	$0001
		dc.l	$F8090000,$0000FFDC
loc_70286:
		dc.w	$0001
		dc.l	$07090000,$0000FFE1
loc_70290:
		dc.w	$0001
		dc.l	$07090000,$0000FFE1
loc_7029A:
		dc.w	$0001
		dc.l	$07090000,$0000FFE1
loc_702A4:
		dc.w	$0001
		dc.l	$07090000,$0000FFE1
loc_702AE:
		dc.w	$0001
		dc.l	$0C070000,$0000FFF8
loc_702B8:
		dc.w	$0001
		dc.l	$0C070000,$0000FFF8
loc_702C2:
		dc.w	$0001
		dc.l	$0C070000,$0000FFF8
loc_702CC:
		dc.w	$0001
		dc.l	$0C070000,$0000FFF8
loc_702d6:
		dc.w	$0001
		dc.l	$07070000,$00000007
loc_702E0:
		dc.w	$0001
		dc.l	$07070000,$00000007
loc_702EA:
		dc.w	$0001
		dc.l	$07070000,$00000007
loc_702F4:
		dc.w	$0001
		dc.l	$07070000,$00000007
loc_702FE:
		dc.w	$0002
		dc.l	$E8050000,$0000FFF8,$F80B0004,$0002FFF0
loc_70310:
		dc.w	$0002
		dc.l	$E8050000,$0000FFF8,$F80B0004,$0002FFF0
loc_70322:
		dc.w	$0001
		dc.l	$F00B0000,$0000FFF9
loc_7032C:
		dc.w	$0001
		dc.l	$F00F0000,$0000FFF0
loc_70336:
		dc.w	$0001
		dc.l	$F00F0000,$0000FFF0
loc_70340:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFF0,$E40d0010,$0008FFEA
loc_70352:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFF0,$E40d0810,$0808FFEA
loc_70364:
		dc.w	$0001
		dc.l	$F40F0000,$0000FFF0
loc_7036E:
		dc.w	$0001
		dc.l	$F40F0000,$0000FFF0
loc_70378:
		dc.w	$0001
		dc.l	$F40F0000,$0000FFF0
loc_70382:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF8,$000d0006,$0003FFF0
loc_70394:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF8,$00090006,$0003FFF8
loc_703A6:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF8,$00090006,$0003FFF8
loc_703B8:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF8,$00090006,$0003FFF8
loc_703CA:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF0,$000d0006,$0003FFF0
loc_703DC:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF0,$000d0006,$0003FFF0
loc_703EE:
		dc.w	$0002
		dc.l	$F8010000,$0000FFF0,$F00B0002,$0001FFF8
loc_70400:
		dc.w	$0002
		dc.l	$F0090000,$0000FFF8,$000d0006,$0003FFF0
loc_70412:
		dc.w	$0001
		dc.l	$F00F0000,$0000FFF0
loc_7041C:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFEC,$F0030010,$0008000C
loc_7042E:
		dc.w	$0002
		dc.l	$F00F0000,$0000FFEC,$F0030010,$0008000C
loc_70440:
		dc.w	$0002
		dc.l	$F8050000,$0000FFEC,$F00B0004,$0002FFFC
loc_70452:
		dc.w	$0002
		dc.l	$F0070000,$0000FFF0,$F0070800,$08000000
loc_70464:
		dc.w	$0002
		dc.l	$F8050800,$08000004,$F00B0804,$0802FFEC
loc_70476:
		dc.w	$0002
		dc.l	$F0070000,$0000FFF0,$F8050008,$00040000
loc_70488:
		dc.w	$0002
		dc.l	$F0070800,$08000000,$F8050808,$0804FFF0
loc_7049A:
		dc.w	$0002
		dc.l	$F8050000,$0000FFEC,$F00B0004,$0002FFFC
loc_704AC:
		dc.w	$0001
		dc.l	$F00F0000,$0000FFF0
loc_704B6:
		dc.w	$0001
		dc.l	$F00B0000,$0000FFF1
loc_704C0:
		dc.w	$0002
		dc.l	$E4050000,$0000FFF8,$F40B0004,$0002FFF1
loc_704d2:
		dc.w	$0001
		dc.l	$F20B0000,$0000FFF2
loc_704DC:
		dc.w	$0001
		dc.l	$F40B0000,$0000FFF0
loc_704E6:
		dc.w	$0001
		dc.l	$F30B0000,$0000FFF2
loc_704F0:
		dc.w	$0001
		dc.l	$F20B0000,$0000FFF2
loc_704FA:
		dc.w	$0001
		dc.l	$F20B0000,$0000FFF2
loc_70504:
		dc.w	$0001
		dc.l	$F00B0000,$0000FFF1
loc_7050E:
		dc.w	$0001
		dc.l	$Ed0B0000,$0000FFF0
loc_70518:
		dc.w	$0001
		dc.l	$EC0B0000,$0000FFF1
loc_70522:
		dc.w	$0002
		dc.l	$F4090000,$0000FFF3,$04050006,$0003FFF3
loc_70534:
		dc.w	$0002
		dc.l	$F2070000,$0000FFF0,$EC030008,$00040000
loc_70546:
		dc.w	$0001
		dc.l	$F8090000,$0000FFE0
loc_70550:
		dc.w	$0001
		dc.l	$F8090000,$0000FFE0
loc_7055A:
		dc.w	$0001
		dc.l	$F8090000,$0000FFE0
loc_70564:
		dc.w	$0001
		dc.l	$F8090000,$0000FFE0
Tails_Dyn_Script: ; loc_7056E:   
		dc.w    loc_70678-Tails_Dyn_Script
		dc.w    loc_7067A-Tails_Dyn_Script
		dc.w    loc_70680-Tails_Dyn_Script
		dc.w    loc_70686-Tails_Dyn_Script
		dc.w    loc_7068C-Tails_Dyn_Script
		dc.w    loc_70692-Tails_Dyn_Script
		dc.w    loc_70696-Tails_Dyn_Script
		dc.w    loc_7069A-Tails_Dyn_Script
		dc.w    loc_706A0-Tails_Dyn_Script
		dc.w    loc_706A6-Tails_Dyn_Script
		dc.w    loc_706AA-Tails_Dyn_Script
		dc.w    loc_706AE-Tails_Dyn_Script
		dc.w    loc_706B2-Tails_Dyn_Script
		dc.w    loc_706B6-Tails_Dyn_Script
		dc.w    loc_706BA-Tails_Dyn_Script
		dc.w    loc_706C2-Tails_Dyn_Script
		dc.w    loc_706CA-Tails_Dyn_Script
		dc.w    loc_706d2-Tails_Dyn_Script
		dc.w    loc_706DA-Tails_Dyn_Script
		dc.w    loc_706E2-Tails_Dyn_Script
		dc.w    loc_706EA-Tails_Dyn_Script
		dc.w    loc_706F2-Tails_Dyn_Script
		dc.w    loc_706FA-Tails_Dyn_Script
		dc.w    loc_70702-Tails_Dyn_Script
		dc.w    loc_7070A-Tails_Dyn_Script
		dc.w    loc_70712-Tails_Dyn_Script
		dc.w    loc_7071A-Tails_Dyn_Script
		dc.w    loc_70722-Tails_Dyn_Script
		dc.w    loc_7072A-Tails_Dyn_Script
		dc.w    loc_70732-Tails_Dyn_Script
		dc.w    loc_7073A-Tails_Dyn_Script
		dc.w    loc_70742-Tails_Dyn_Script
		dc.w    loc_7074A-Tails_Dyn_Script
		dc.w    loc_70752-Tails_Dyn_Script
		dc.w    loc_7075A-Tails_Dyn_Script
		dc.w    loc_70762-Tails_Dyn_Script
		dc.w    loc_7076A-Tails_Dyn_Script
		dc.w    loc_70772-Tails_Dyn_Script
		dc.w    loc_7077A-Tails_Dyn_Script
		dc.w    loc_70780-Tails_Dyn_Script
		dc.w    loc_70788-Tails_Dyn_Script
		dc.w    loc_7078E-Tails_Dyn_Script
		dc.w    loc_70796-Tails_Dyn_Script
		dc.w    loc_7079C-Tails_Dyn_Script
		dc.w    loc_707A4-Tails_Dyn_Script
		dc.w    loc_707AA-Tails_Dyn_Script
		dc.w    loc_707B2-Tails_Dyn_Script
		dc.w    loc_707B8-Tails_Dyn_Script
		dc.w    loc_707BE-Tails_Dyn_Script
		dc.w    loc_707B8-Tails_Dyn_Script
		dc.w    loc_707C4-Tails_Dyn_Script
		dc.w    loc_707CA-Tails_Dyn_Script
		dc.w    loc_707d0-Tails_Dyn_Script
		dc.w    loc_707D8-Tails_Dyn_Script
		dc.w    loc_707E0-Tails_Dyn_Script
		dc.w    loc_707E8-Tails_Dyn_Script
		dc.w    loc_707F0-Tails_Dyn_Script
		dc.w    loc_707F8-Tails_Dyn_Script
		dc.w    loc_70800-Tails_Dyn_Script
		dc.w    loc_70808-Tails_Dyn_Script
		dc.w    loc_70810-Tails_Dyn_Script
		dc.w    loc_70808-Tails_Dyn_Script
		dc.w    loc_70818-Tails_Dyn_Script
		dc.w    loc_70820-Tails_Dyn_Script
		dc.w    loc_70828-Tails_Dyn_Script
		dc.w    loc_70830-Tails_Dyn_Script
		dc.w    loc_70838-Tails_Dyn_Script
		dc.w    loc_70840-Tails_Dyn_Script
		dc.w    loc_70848-Tails_Dyn_Script
		dc.w    loc_70850-Tails_Dyn_Script
		dc.w    loc_70858-Tails_Dyn_Script
		dc.w    loc_7085C-Tails_Dyn_Script
		dc.w    loc_70860-Tails_Dyn_Script
		dc.w    loc_70864-Tails_Dyn_Script
		dc.w    loc_70868-Tails_Dyn_Script
		dc.w    loc_7086C-Tails_Dyn_Script
		dc.w    loc_70870-Tails_Dyn_Script
		dc.w    loc_70874-Tails_Dyn_Script
		dc.w    loc_70878-Tails_Dyn_Script
		dc.w    loc_7087C-Tails_Dyn_Script
		dc.w    loc_70880-Tails_Dyn_Script
		dc.w    loc_70884-Tails_Dyn_Script
		dc.w    loc_70888-Tails_Dyn_Script
		dc.w    loc_7088C-Tails_Dyn_Script
		dc.w    loc_70890-Tails_Dyn_Script
		dc.w    loc_70894-Tails_Dyn_Script
		dc.w    loc_70898-Tails_Dyn_Script
		dc.w    loc_7089C-Tails_Dyn_Script
		dc.w    loc_708A0-Tails_Dyn_Script
		dc.w    loc_708A4-Tails_Dyn_Script
		dc.w    loc_708AA-Tails_Dyn_Script
		dc.w    loc_708B0-Tails_Dyn_Script
		dc.w    loc_708B4-Tails_Dyn_Script
		dc.w    loc_708B8-Tails_Dyn_Script
		dc.w    loc_708BC-Tails_Dyn_Script
		dc.w    loc_708BC-Tails_Dyn_Script
		dc.w    loc_708C2-Tails_Dyn_Script
		dc.w    loc_708C6-Tails_Dyn_Script
		dc.w    loc_708CA-Tails_Dyn_Script
		dc.w    loc_708CE-Tails_Dyn_Script
		dc.w    loc_708d4-Tails_Dyn_Script
		dc.w    loc_708DA-Tails_Dyn_Script
		dc.w    loc_708E0-Tails_Dyn_Script
		dc.w    loc_708E6-Tails_Dyn_Script
		dc.w    loc_708EC-Tails_Dyn_Script
		dc.w    loc_708F2-Tails_Dyn_Script
		dc.w    loc_708F8-Tails_Dyn_Script
		dc.w    loc_708FE-Tails_Dyn_Script
		dc.w    loc_70902-Tails_Dyn_Script
		dc.w    loc_70908-Tails_Dyn_Script
		dc.w    loc_7090E-Tails_Dyn_Script
		dc.w    loc_70914-Tails_Dyn_Script
		dc.w    loc_7090E-Tails_Dyn_Script
		dc.w    loc_7091A-Tails_Dyn_Script
		dc.w    loc_7091A-Tails_Dyn_Script
		dc.w    loc_70920-Tails_Dyn_Script
		dc.w    loc_70926-Tails_Dyn_Script
		dc.w    loc_7092A-Tails_Dyn_Script
		dc.w    loc_7092E-Tails_Dyn_Script
		dc.w    loc_70934-Tails_Dyn_Script
		dc.w    loc_70938-Tails_Dyn_Script
		dc.w    loc_7093C-Tails_Dyn_Script
		dc.w    loc_70940-Tails_Dyn_Script
		dc.w    loc_70944-Tails_Dyn_Script
		dc.w    loc_70948-Tails_Dyn_Script
		dc.w    loc_7094C-Tails_Dyn_Script
		dc.w    loc_70950-Tails_Dyn_Script
		dc.w    loc_70954-Tails_Dyn_Script
		dc.w    loc_7095A-Tails_Dyn_Script
		dc.w    loc_70864-Tails_Dyn_Script
		dc.w    loc_70868-Tails_Dyn_Script
		dc.w    loc_7086C-Tails_Dyn_Script
		dc.w    loc_70870-Tails_Dyn_Script
loc_70678:
		dc.w	$0000
loc_7067A:
		dc.w	$0002
		dc.w	$5000,$5006
loc_70680:
		dc.w	$0002
		dc.w	$500C,$5006
loc_70686:
		dc.w	$0002
		dc.w	$5012,$5006
loc_7068C:
		dc.w	$0002
		dc.w	$5018,$5006
loc_70692:
		dc.w	$0001
		dc.w	$B01E
loc_70696:
		dc.w	$0001
		dc.w	$B02A
loc_7069A:
		dc.w	$0002
		dc.w	$5036,$503C
loc_706A0:
		dc.w	$0002
		dc.w	$5036,$5042
loc_706A6:
		dc.w	$0001
		dc.w	$7048
loc_706AA:
		dc.w	$0001
		dc.w	$B050
loc_706AE:
		dc.w	$0001
		dc.w	$B05C
loc_706B2:
		dc.w	$0001
		dc.w	$5068
loc_706B6:
		dc.w	$0001
		dc.w	$B06E
loc_706BA:
		dc.w	$0003
		dc.w	$507A,$7080,$50CA
loc_706C2:
		dc.w	$0003
		dc.w	$5088,$708E,$50d0
loc_706CA:
		dc.w	$0003
		dc.w	$5096,$509C,$50d6
loc_706d2:
		dc.w	$0003
		dc.w	$50A2,$50A8,$50DC
loc_706DA:
		dc.w	$0003
		dc.w	$507A,$70AE,$50CA
loc_706E2:
		dc.w	$0003
		dc.w	$5088,$70B6,$50d0
loc_706EA:
		dc.w	$0003
		dc.w	$5096,$50BE,$50d6
loc_706F2:
		dc.w	$0003
		dc.w	$50A2,$50C4,$50DC
loc_706FA:
		dc.w	$0003
		dc.w	$10E2,$30E4,$B0E8
loc_70702:
		dc.w	$0003
		dc.w	$30F4,$B0F8,$3104
loc_7070A:
		dc.w	$0003
		dc.w	$3108,$310C,$B110
loc_70712:
		dc.w	$0003
		dc.w	$111C,$F11E,$112E
loc_7071A:
		dc.w	$0003
		dc.w	$10E2,$30E4,$B130
loc_70722:
		dc.w	$0003
		dc.w	$30F4,$B13C,$3148
loc_7072A:
		dc.w	$0003
		dc.w	$3108,$310C,$B14C
loc_70732:
		dc.w	$0003
		dc.w	$111C,$F158,$1168
loc_7073A:
		dc.w	$0003
		dc.w	$716A,$7172,$71CA
loc_70742:
		dc.w	$0003
		dc.w	$717A,$7182,$71d2
loc_7074A:
		dc.w	$0003
		dc.w	$718A,$7192,$71DA
loc_70752:
		dc.w	$0003
		dc.w	$719A,$71A2,$71E2
loc_7075A:
		dc.w	$0003
		dc.w	$716A,$71AA,$71CA
loc_70762:
		dc.w	$0003
		dc.w	$717A,$71B2,$71d2
loc_7076A:
		dc.w	$0003
		dc.w	$718A,$71BA,$71DA
loc_70772:
		dc.w	$0003
		dc.w	$719A,$71C2,$71E2
loc_7077A:
		dc.w	$0002
		dc.w	$11EA,$F1EC
loc_70780:
		dc.w	$0003
		dc.w	$31FC,$1200,$F202
loc_70788:
		dc.w	$0002
		dc.w	$1212,$F214
loc_7078E:
		dc.w	$0003
		dc.w	$1224,$1226,$F228
loc_70796:
		dc.w	$0002
		dc.w	$11EA,$F238
loc_7079C:
		dc.w	$0003
		dc.w	$1248,$1200,$F24A
loc_707A4:
		dc.w	$0002
		dc.w	$1212,$F25A
loc_707AA:
		dc.w	$0003
		dc.w	$126A,$1224,$F26C
loc_707B2:
		dc.w	$0002
		dc.w	$F27C,$729C
loc_707B8:
		dc.w	$0002
		dc.w	$F28C,$32A4
loc_707BE:
		dc.w	$0002
		dc.w	$F27C,$32A8
loc_707C4:
		dc.w	$0002
		dc.w	$F27C,$72AC
loc_707CA:
		dc.w	$0002
		dc.w	$F28C,$72AC
loc_707d0:
		dc.w	$0003
		dc.w	$12B4,$B2B6,$B2d2
loc_707D8:
		dc.w	$0003
		dc.w	$32C2,$B2C6,$32DE
loc_707E0:
		dc.w	$0003
		dc.w	$12B4,$B2B6,$32E2
loc_707E8:
		dc.w	$0003
		dc.w	$32C2,$B2C6,$32E6
loc_707F0:
		dc.w	$0003
		dc.w	$12B4,$B2B6,$B2EA
loc_707F8:
		dc.w	$0003
		dc.w	$32C2,$B2C6,$B2EA
loc_70800:
		dc.w	$0003
		dc.w	$52F6,$72FC,$7312
loc_70808:
		dc.w	$0003
		dc.w	$5304,$730A,$331E
loc_70810:
		dc.w	$0003
		dc.w	$52F6,$72FC,$331A
loc_70818:
		dc.w	$0003
		dc.w	$52F6,$72FC,$7322
loc_70820:
		dc.w	$0003
		dc.w	$5304,$730A,$7322
loc_70828:
		dc.w	$0003
		dc.w	$B32A,$3336,$B2d2
loc_70830:
		dc.w	$0003
		dc.w	$B33A,$3346,$32DE
loc_70838:
		dc.w	$0003
		dc.w	$B32A,$3336,$32E2
loc_70840:
		dc.w	$0003
		dc.w	$B33A,$3346,$32E6
loc_70848:
		dc.w	$0003
		dc.w	$B32A,$3336,$B2EA
loc_70850:
		dc.w	$0003
		dc.w	$B33A,$3346,$B2EA
loc_70858:
		dc.w	$0001
		dc.w	$F34A
loc_7085C:
		dc.w	$0001
		dc.w	$F35A
loc_70860:
		dc.w	$0001
		dc.w	$F36A
loc_70864:
		dc.w	$0001
		dc.w	$50CA
loc_70868:
		dc.w	$0001
		dc.w	$50d0
loc_7086C:
		dc.w	$0001
		dc.w	$50d6
loc_70870:
		dc.w	$0001
		dc.w	$50DC
loc_70874:
		dc.w	$0001
		dc.w	$537A
loc_70878:
		dc.w	$0001
		dc.w	$5380
loc_7087C:
		dc.w	$0001
		dc.w	$5386
loc_70880:
		dc.w	$0001
		dc.w	$538C
loc_70884:
		dc.w	$0001
		dc.w	$71CA
loc_70888:
		dc.w	$0001
		dc.w	$71d2
loc_7088C:
		dc.w	$0001
		dc.w	$71DA
loc_70890:
		dc.w	$0001
		dc.w	$71E2
loc_70894:
		dc.w	$0001
		dc.w	$7392
loc_70898:
		dc.w	$0001
		dc.w	$739A
loc_7089C:
		dc.w	$0001
		dc.w	$73A2
loc_708A0:
		dc.w	$0001
		dc.w	$73AA
loc_708A4:
		dc.w	$0002
		dc.w	$33B2,$B3B6
loc_708AA:
		dc.w	$0002
		dc.w	$33B2,$B3C2
loc_708B0:
		dc.w	$0001
		dc.w	$B3CE
loc_708B4:
		dc.w	$0001
		dc.w	$F3DA
loc_708B8:
		dc.w	$0001
		dc.w	$F3EA
loc_708BC:
		dc.w	$0002
		dc.w	$F3FA,$740A
loc_708C2:
		dc.w	$0001
		dc.w	$F412
loc_708C6:
		dc.w	$0001
		dc.w	$F422
loc_708CA:
		dc.w	$0001
		dc.w	$F432
loc_708CE:
		dc.w	$0002
		dc.w	$5442,$7448
loc_708d4:
		dc.w	$0002
		dc.w	$5442,$5450
loc_708DA:
		dc.w	$0002
		dc.w	$5442,$5456
loc_708E0:
		dc.w	$0002
		dc.w	$5442,$545C
loc_708E6:
		dc.w	$0002
		dc.w	$5462,$7468
loc_708EC:
		dc.w	$0002
		dc.w	$5470,$7476
loc_708F2:
		dc.w	$0002
		dc.w	$147E,$B480
loc_708F8:
		dc.w	$0002
		dc.w	$548C,$7492
loc_708FE:
		dc.w	$0001
		dc.w	$F49A
loc_70902:
		dc.w	$0002
		dc.w	$F4AA,$34BA
loc_70908:
		dc.w	$0002
		dc.w	$F4BE,$34CE
loc_7090E:
		dc.w	$0002
		dc.w	$34d2,$B4d6
loc_70914:
		dc.w	$0002
		dc.w	$74E2,$74E2
loc_7091A:
		dc.w	$0002
		dc.w	$74EA,$34F2
loc_70920:
		dc.w	$0002
		dc.w	$34F6,$B4FA
loc_70926:
		dc.w	$0001
		dc.w	$F506
loc_7092A:
		dc.w	$0001
		dc.w	$B516
loc_7092E:
		dc.w	$0002
		dc.w	$3522,$B526
loc_70934:
		dc.w	$0001
		dc.w	$B532
loc_70938:
		dc.w	$0001
		dc.w	$B53E
loc_7093C:
		dc.w	$0001
		dc.w	$B54A
loc_70940:
		dc.w	$0001
		dc.w	$B556
loc_70944:
		dc.w	$0001
		dc.w	$B562
loc_70948:
		dc.w	$0001
		dc.w	$B56E
loc_7094C:
		dc.w	$0001
		dc.w	$B57A
loc_70950:
		dc.w	$0001
		dc.w	$B586
loc_70954:
		dc.w	$0002
		dc.w	$5592,$3598
loc_7095A:
		dc.w	$0002
		dc.w	$759C,$35A4
SegaLogo: ; loc_70960:
		binclude	"data\sprites\sega.nem"
SegaLogo_Mappings: ; loc_70Dd0:
		binclude	"data\all\sega.eni"
TS_Wings_MapUnc_Sonic: ; loc_70ECC:
		binclude	"data\all\titlescr.eni"
Title_Screen_Bg_Mappings: ; loc_71024:
		binclude	"data\all\titscrbg.eni"
Title_Screen_R_Bg_Mappings: ; loc_712D8:
		binclude	"data\all\titscrb2.eni"
Title_Screen_Bg_Wings: ; loc_71520:
		binclude	"data\sprites\titlescr.nem" ; Title Screen Wings and background
Title_Screen_Sonic_Tails: ; loc_72E82:
		binclude	"data\sprites\sontascr.nem" ; Sonic And Tails in Title Screen
FireBall: ; loc_739C6:
		binclude	"data\sprites\fireball.nem"
; --------------------------------------------------------------------
; Nemesis compressed art
; Waterfall in GHZ			; ArtNem_73B3C: Ghz_Waterfall:
		even
ArtNem_GHZ_Waterfall:	binclude	"art/nemesis/GHZ waterfall tiles.bin"

Htz_Lava_Bubble: ; loc_73C42:
		binclude	"data\htz\lvbubble.nem"
; --------------------------------------------------------------------
; Nemesis compressed art
; Bridge in GHZ				; ArtNem_73D90: Ghz_Bridge:
		even
ArtNem_GHZ_Bridge:	binclude	"art/nemesis/GHZ bridge.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Diagonally moving lift in HTZ		; ArtNem_73E68: Htz_Teleferic:
	even
ArtNem_HtzZipline:	binclude	"art/nemesis/HTZ zip-line platform.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; One way barrier from HTZ		; ArtNem_7415C: Htz_Automatic_Door:
	even
ArtNem_HtzValveBarrier:	binclude	"art/nemesis/One way barrier from HTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; See-saw in HTZ			; ArtNem_741d4: Htz_See_saw:
	even
ArtNem_HtzSeeSaw:	binclude	"art/nemesis/See-saw in HTZ.bin"

Fireball_1: ; loc_7436C:
		binclude	"data\sprites\firebal1.nem"
; --------------------------------------------------------------------
; Nemesis compressed art
; Rock from HTZ				; ArtNem_7447A: Htz_Rock:
	even
ArtNem_HtzRock:	binclude	"art/nemesis/Rock from HTZ.bin"

Htz_See_saw_badnick: ; loc_745B0:
		binclude	"data\htz\see-sawb.nem"
; --------------------------------------------------------------------
; Nemesis compressed art
; Large spinning wheel from MTZ		; ArtNem_7461C: Mz_Rotating_Gear:
	even
ArtNem_MtzWheel:	binclude	"art/nemesis/Large spinning wheel from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Indent in large spinning wheel from MTZ	; ArtNem_74A74: Mz_Machine_Ball:
	even
ArtNem_MtzWheelIndent:	binclude	"art/nemesis/Large spinning wheel from MTZ - indent.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Spike block from MTZ			; ArtNem_74B1C: Mz_Block:
	even
ArtNem_MtzSpikeBlock:	binclude	"art/nemesis/MTZ spike block.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Steam from MTZ			; ArtNem_74BEA: Mz_Steam:
	even
ArtNem_MtzSteam:	binclude	"art/nemesis/Steam from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Spike from MTZ			; ArtNem_74CF4: Mz_Harpoon:
	even
ArtNem_MtzSpike:	binclude	"art/nemesis/Spike from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Similarly shaded blocks from MTZ	; ArtNem_74DB6: Mz_Screw_Nut:
	even
ArtNem_MtzAsstBlocks:	binclude	"art/nemesis/Similarly shaded blocks from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Lava bubble from MTZ			; ArtNem_74E2C: Mz_Lava_Bubble:
	even
ArtNem_MtzLavaBubble:	binclude	"art/nemesis/Lava bubble from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Lava cup				; ArtNem_74EE2:
	even
ArtNem_LavaCup:	binclude	"art/nemesis/Lava cup from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Paralellogram platform from MTZ	; ArtNem_74F52: Mz_Parallelogram_Elevator:
	even
ArtNem_MTZ_Platform:	binclude	"art/nemesis/Paralellogram platform from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; End of a bolt and rope from MTZ	; ArtNem_751FE:
	even
ArtNem_BoltEnd_Rope:	binclude	"art/nemesis/Bolt end and rope from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Small cog from MTZ			; ArtNem_752A0: Mz_Mini_Gear:
	even
ArtNem_MtzCog:	binclude	"art/nemesis/Small cog from MTZ.bin"

Mz_Teleport: ; Mz_Four_Block: ; loc_75382:
		dc.b	$00,$04,$86,$71,$00,$FF,$00,$00,$00,$00,$00,$00
; ---------------------------------------------------------------------
; Nemesis compressed art
; Bridge in HPZ				; ArtNem_7538E: Hpz_Bridge:
	even
ArtNem_HPZ_Bridge:	binclude	"art/nemesis/HPZ bridge.bin"
; ---------------------------------------------------------------------
; Waterfall in HPZ			; Artnem_75506: Hpz_Waterfall:
	even
ArtNem_HPZ_Waterfall:	binclude	"art/nemesis/HPZ waterfall tiles.bin"
; ---------------------------------------------------------------------
; (meant to be breakable) emerald from HPZ	; Artnem_75868: Hpz_Emerald:
	even
ArtNem_HPZ_Emerald:	binclude	"art/nemesis/Emerald from HPZ.bin"
; ---------------------------------------------------------------------
; Collapsing platform from HPZ		; ArtNem_75ADA: Hpz_Platform:
	even
ArtNem_HPZPlatform:	binclude	"art/nemesis/Collapsing platform from HPZ.bin"
; ---------------------------------------------------------------------
; Nemesis compressed art
; Glowing orb from HPZ			; ArtNem_75B8A: Hpz_Orbs_Comp:
	even
ArtNem_HPZOrb:		binclude	"art/nemesis/Pulsing orb from HPZ.bin"

Hpz_Unknow_Platform: ; loc_75Dd6:
		binclude	"data\hpz\unkptfm.nem"
; ---------------------------------------------------------------------
; Nemesis compressed art
; Raising platform from OOZ		; ArtNem_75F70: OOz_Elevator:
	even
ArtNem_OOZElevator:	binclude	"art/nemesis/Rising platform from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Spiked thing from OOZ			; ArtNem_76060: OOz_Giant_Spikeball:
	even
ArtNem_SpikyThing:	binclude	"art/nemesis/Spiked ball from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Green platform over the burners in OOZ	; ArtNem_80274: OOz_Touch_Boost_Up:
	even
ArtNem_BurnerLid:	binclude	"art/nemesis/Burner platform from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Striped blocks from OOZ			; ArtNem_762EE: OOz_Break_Boost:
	even
ArtNem_StripedBlocksVert:	binclude	"art/nemesis/Striped blocks from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Oil splashing into oil in OOZ			; ArtNem_7635A: OOz_Oil:
	even
ArtNem_Oilfall:		binclude	"art/nemesis/Cascading oil hitting oil from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Cascading oil from OOZ			; ArtNem_764d6: OOz_Tube_Oil:
	even
ArtNem_Oilfall2:	binclude	"art/nemesis/Cascading oil from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Ball thing from OOZ				; ArtNem_76602: OOz_Ball:
	even
ArtNem_OOZBall:		binclude	"art/nemesis/Ball on spring from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Spinball from OOZ				; ArtNem_76722: OOz_Cannon:
	even
ArtNem_LaunchBall:	binclude	"art/nemesis/Transporter ball from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Collapsing platform from OOZ			; ArtNem_76A12: OOz_Collapsing_Platform:
	even
ArtNem_OOZPlatform:	binclude	"art/nemesis/OOZ collapsing platform.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Diagonal and vertical weird spring from OOZ	; ArtNem_76CA6: OOz_Spring_Push_Boost:
	even
ArtNem_PushSpring:	binclude	"art/nemesis/Push spring from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Swinging platform from OOZ			; ArtNem_76E68: OOz_Swing_Platform:
	even
ArtNem_OOZSwingPlat:	binclude	"art/nemesis/Swinging platform from OOZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Large wooden box from DHZ			; ArtNem_7708A: Dhz_Box:
	even
ArtNem_Crate:	binclude	"art/nemesis/Large wooden box from DHZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Collapsing platform from DHZ			; ArtNem_772C8: Dhz_Collapsing_Platform:
	even
ArtNem_DHZCollapsePlat:	binclude	"art/nemesis/Collapsing platform from DHZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Switch that you pull on from DHZ (not yet programmed)		; ArtNem_77472: Dhz_Vines:
	even
ArtNem_VineSwitch:	binclude	"art/nemesis/Pull switch from DHZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Vine that lowers in DHZ (not yet programmed)	; ArtNem_7756A: Dhz_Vines_1:
	even
ArtNem_VinePulley:	binclude	"art/nemesis/Vine that lowers from DHZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Log viewed from the end for folding gates in DHZ	; ArtNem_77614: Dhz_Bridge:
	even
ArtNem_DHZGateLog:	binclude	"art/nemesis/Drawbridge logs from DHZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Large moving platform from CPZ	; ArtNem_77684: Cpz_Elevator:
	even
ArtNem_CPZElevator:	binclude	"art/nemesis/Large moving platform from CNZ.bin"

Water_Surface: ; loc_777d2:
		binclude	"data\sprites\watrsurf.nem"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Booster things in CPZ			; ArtNem_77942: Cpz_Speed_Booster:
	even
ArtNem_CPZBooster:	binclude	"art/nemesis/Speed booster from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; CPZ droplet chain enemy		; ArtNem_779AA: Cpz_Worms:
	even
ArtNem_CPZDroplet:	binclude	"art/nemesis/CPZ worm enemy.bin"

Cpz_Metal_Structure: ; loc_77A1C:
		binclude	"data\cpz\metal_st.nem"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; CPZ metal block			; ArtNem_77C26:
	even
ArtNem_CPZMetalBlock:	binclude	"art/nemesis/CPZ large moving platform blocks.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Yellow and black stripy tiles from DEZ	; ArtNem_77C66: Cpz_Automatic_Door:
	even
ArtNem_ConstructionStripes:	binclude	"art/nemesis/Stripy blocks from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Yellow flipping platforms and stuff CPZ	; ArtNem_77Cd2: Cpz_Open_Close_Platform:
	even
ArtNem_CPZAnimatedBits:	binclude	"art/nemesis/Small yellow moving platform from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Moving block from CPZ			; ArtNem_77EB4: Cpz_Platforms:
	even
ArtNem_CPZStairBlock:	binclude	"art/nemesis/Moving block from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Spring that covers tube in CPZ	; ArtNem_78074: Cpz_Spring_Tubes:
	even
ArtNem_CPZTubeSpring:	binclude	"art/nemesis/CPZ spintube exit cover.bin"

Nghz_Water_Surface: ; loc_78270:
		binclude	"data\nghz\watrsurf.nem"
Nghz_Leaves: ; loc_78356:
		binclude	"data\nghz\leaves.nem"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Arrow shooter and arrow from ARZ	; ArtNem_783E2: Nghz_Arrow_Shooter:
	even
ArtNem_ArrowAndShooter:	binclude	"art/nemesis/Arrow shooter and arrow from NGHZ.bin"

Nghz_Water_Splash: ; loc_78540:
		binclude	"data\nghz\w_splash.nem"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Button				; ArtNem_78580: Switch:
	even
ArtNem_Button:	binclude	"art/nemesis/Button.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Vertical Spring			; ArtNem_78658: Vertical_Spring:
	even
ArtNem_VrtclSprng:	binclude	"art/nemesis/Vertical spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Horizontal Spring			; ArtNem_78774: Horizontal_Spring:
	even
ArtNem_HrzntlSprng:	binclude	"art/nemesis/Horizontal spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Diagonal Spring			; ArtNem_7883E: Diagonal_Spring:
	even
ArtNem_DignlSprng:	binclude	"art/nemesis/Diagonal spring.bin"

Head_up_display_Sprites: ; loc_78A12:
		binclude	"data\sprites\hud.nem" ; Head-up display
Head_up_display_Sonic: ; loc_78B1A:
		binclude	"art/nemesis/Sonic lives counter.bin"
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Ring					; ArtNem_78C30: Rings:
	even
ArtNem_Ring:	binclude	"art/nemesis/Ring.bin"
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Monitors and powerups			; ArtNem_78d24: Monitors:
	even
ArtNem_Powerups:	binclude	"art/nemesis/Monitor and contents.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Spikes				; ArtNem_7914E: Spikes:
	even
ArtNem_Spikes:	binclude	"art/nemesis/Spikes.bin"

Enemy_Points_Spr: ; loc_7919E:
		binclude	"data\sprites\points.nem"
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Checkpoint (unused)			; ArtNem_79278: Lamp_Post:
	even
ArtNem_Checkpoint:	binclude	"art/nemesis/Checkpoint.bin"
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Singpost				; ArtNem_7931E: Signpost:
	even
ArtNem_Signpost:	binclude	"art/nemesis/Signpost.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Lever spring				; ArtNem_798F4: Diagonal_Spring_1:
	even
ArtNem_LeverSpring:	binclude	"art/nemesis/Lever spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Long horizontal spike			; ArtNem_79A44: Dhz_Horizontal_Spikes:
	even
ArtNem_HorizSpike:	binclude	"art/nemesis/Long horizontal spike.bin"

Air_Bubbles_Numbers: ; loc_79AC0:
		binclude	"data\sprites\airbubls.nem"
Hpz_Crocobot: ; loc_7A11A:
		binclude	"data\hpz\Crocobot.nem"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Buzzer (not Bomber)			; ArtNem_7A4BC: Ghz_Buzzer_Bomber:
	even
ArtNem_Buzzer:	binclude	"art/nemesis/Buzzer enemy.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Batbot (bat badnik from HPZ)		; ArtNem_7A6A2: Hpz_Batbot:
	even
ArtNem_Batbot:	binclude	"art/nemesis/Batbot enemy.bin"
OOz_Octus: ; loc_7A9F8:
		binclude	"data\ooz\octus.nem"
Hpz_Rhinobot: ; loc_7Ad18:
		binclude	"data\hpz\rhinobot.nem"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Redz (red dinosaur badnik from HPZ)	; ArtNem_7A6A2: Hpz_Dinobot:
	even
ArtNem_Redz:	binclude	"art/nemesis/Redz enemy.bin"

Hpz_Piranha: ; loc_7B4EA:
		binclude	"data\hpz\piranha.nem"
OOz_Aquis: ; loc_7B9E2:
		binclude	"data\ooz\aquis.nem"
Spinning_Ball: ; loc_7BE30:
		binclude	"data\sprites\spinball.nem"
Blink: ; loc_7C0C6:
		binclude	"data\sprites\blink.nem"
Bubble_Monster: ; loc_7C2F2:
		binclude	"data\sprites\bmonster.nem"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Snail badnik from GHZ			; ArtNem_7C514: Ghz_Motobug:
	even
ArtNem_Snail:	binclude	"art/nemesis/Snail badnik from GHZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Bouncer badnik (unused at this point)	; ArtNem_7C710: Crawl:
	even
ArtNem_Crawl:	binclude	"art/nemesis/Crawl badnik.bin"
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Fish badnik from GHZ			; ArtNem_7CA92: Ghz_Chopper
		even
ArtNem_Masher:	binclude	"art/nemesis/GHZ Pirahna badnik.bin"

Robotnik_Ship: ; loc_7CC9E:
		binclude	"data\sprites\robotnik.nem"
Cpz_Boss: ; loc_7d3DA:
		binclude	"data\cpz\boss.nem"
Boss_Explosions: ; loc_7D938:
		binclude	"data\sprites\bossexpl.nem"
Ship_Boost: ; loc_7DFC0:
		binclude	"data\sprites\shpboost.nem"
Boss_Smoke: ; loc_7E03E:
		binclude	"data\sprites\b_smoke.nem"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; GHZ Boss				; ArtNem_7E124: Ghz_Boss_Car:
	even
ArtNem_GHZBoss:	binclude	"art/nemesis/GHZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Helicopter blades for GHZ boss	; ArtNem_7E910: Ghz_Boss_Blades:
	even
ArtNem_EggChoppers:	binclude	"art/nemesis/Chopper blades for GHZ boss.bin"

Title_Cards: ; loc_7EA04:
		binclude	"data\sprites\titlcard.nem" ; Title Cards
Explosion: ; loc_7F012:
		binclude	"data\sprites\explosn.nem"
Game_Time_Over: ; loc_7F678:
		binclude	"data\sprites\gt_over.nem"
Vertical_Springs_Sonic_1: ; loc_7F80A:
		binclude	"data\sprites\vspng_s1.nem"
Horizontal_Springs_Sonic_1: ; loc_7F90C:
		binclude	"data\sprites\hspng_s1.nem"
Big_Ring_Flash: ; loc_7F9E8:
		binclude	"data\sprites\rngflash.nem"
Hidden_Points: ; loc_7FB5C:
		binclude	"data\sprites\h_points.nem"
Sonic_Continue_Screen: ; loc_7FE5E:
		binclude	"data\sprites\sonicctn.nem"
Continue_Special_Stage_Results_Screen: ; loc_8010E:
		binclude	"data\sprites\cont_ss.nem"
Rabbit: ; loc_80348:
		binclude	"data\sprites\rabbit.nem"
White_Bird: ; loc_804A0:
		binclude	"data\sprites\wthebird.nem"
Black_Bird: ; loc_805FC:
		binclude	"data\sprites\blckbird.nem"
Seal: ; loc_80778:
		binclude	"data\sprites\seal.nem"
Pig: ; loc_80894:
		binclude	"data\sprites\pig.nem"
Blue_Bird: ; loc_809CA:
		binclude	"data\sprites\bluebird.nem"
Bear: ; loc_80B04:
		binclude	"data\sprites\bear.nem"
; ---------------------------------------------------------------------------------
; GHZ 16x16 block mappings (uncompressed)
; LevBlock_80C60: Green_Hill_16x16_Map:
BM16_GHZ:	binclude	"mappings/16x16/GHZ.bin"
; ----------------------------------------------------------------------------------
; GHZ/HTZ main level patterns (Nemesis compression)
; ArtNem_81C00: Green_Hill_8x8_Tiles:
ArtNem_GHZ:	binclude	"art/nemesis/GHZ and HTZ primary.bin"
; ---------------------------------------------------------------------------------
; HTZ 16x16 block mappings (uncompressed)
; LevBlock_84A50: Hill_Top_16x16_Map:
BM16_HTZ:	binclude	"mappings/16x16/HTZ.bin"
; ----------------------------------------------------------------------------------
; HTZ secondary level patterns (Nemesis compression)
; ArtNem_85200: Hill_Top_8x8_Tiles:
ArtNem_HTZ:	binclude	"art/nemesis/HTZ secondary.bin"


Htz_Init_Sprites_Dyn_Reload: ; loc_86626:
		binclude	"data\htz\init_spr.nem"
; ----------------------------------------------------------------------------------
; EHZ/HTZ 128x128 block mappings (Kosinski compression)
; LevChunk_8692E: Green_Hill_128x128_Map:
BM128_GHZ:	binclude	"mappings/128x128/GHZ and HTZ.bin"
; ----------------------------------------------------------------------------------
; WZ 16x16 block mappings (uncompressed)
; LevBlock_89B8E: Wood_16x16_Map:
BM16_WZ:	binclude	"mappings/16x16/WZ.bin"
; ----------------------------------------------------------------------------------
; WZ main level patterns (Nemesis compression)
; ArtNem_8AB2E: Wood_8x8_Tiles:
ArtNem_WZ:	binclude	"art/nemesis/WZ primary.bin"

Waterfall: ; loc_8E6C6:
		binclude	"data\sprites\watrfall.nem"
; ----------------------------------------------------------------------------------
; WZ 128x128 block mappings (Kosinski compression)
; LevChunk_8E826: Wood_128x128_Map:
BM128_WZ:	binclude	"mappings/128x128/WZ.bin"
;-----------------------------------------------------------------------------------
; MTZ 16x16 block mappings (uncompressed)
; LevBlock_90456: Metropolis_16x16_Map:
BM16_MTZ:	binclude	"mappings/16x16/MTZ.bin"
; ----------------------------------------------------------------------------------
; MTZ main level patterns (Nemesis compression)
; ArtNem_91160: Metropolis_8x8_Tiles:
ArtNem_MTZ:	binclude	"art/nemesis/MTZ primary.bin"
; ----------------------------------------------------------------------------------
; Initial animated tiles for MTZ (Nemesis compression)
; ArtNem_94994: Mz_Init_Sprites_Dyn_Reload:
ArtNem_MTZAnim:	binclude	"art/nemesis/Initial animated tiles for MTZ.bin"
; ----------------------------------------------------------------------------------
; MTZ 128x128 block mappings (Kosinski compression)
; LevChunk_94C56: Metropolis_128x128_Map:
BM128_MTZ:	binclude	"mappings/128x128/MTZ.bin"
;-----------------------------------------------------------------------------------
; HPZ 16x16 block mappings (uncompressed)
; LevBlock_97596: Hidden_Palace_16x16_Map:
BM16_HPZ:	binclude	"mappings/16x16/HPZ.bin"
; ----------------------------------------------------------------------------------
; HPZ main level patterns (Nemesis compression)
; ArtNem_98B76: Hidden_Palace_8x8_Tiles:
ArtNem_HPZ:	binclude	"art/nemesis/HPZ primary.bin"

Hpz_Init_Sprites_Dyn_Reload: ; loc_9B884: ;  Orbs
		binclude	"data\hpz\init_spr.nem"

; ----------------------------------------------------------------------------------
; HPZ 128x128 block mappings (Kosinski compression)
; LevChunk_9B9F8: Hidden_Palace_128x128_Map:
BM128_HPZ:	binclude	"mappings/128x128/HPZ.bin"
;-----------------------------------------------------------------------------------
; OOZ 16x16 block mappings (uncompressed)
; LevBlock_9d778: Oil_Ocean_16x16_Map:
BM16_OOZ:	binclude	"mappings/16x16/OOZ.bin"
; ----------------------------------------------------------------------------------
; OOZ main level patterns (Nemesis compression)
; ArtNem_9Ed58: Oil_Ocean_8x8_Tiles:
ArtNem_OOZ:	binclude	"art/nemesis/OOZ primary.bin"

OOz_Init_Sprites_Dyn_Reload: ; loc_A186A: ;  red ball,oil ...
		binclude	"data\ooz\init_spr.nem"

; ----------------------------------------------------------------------------------
; OOZ 128x128 block mappings (Kosinski compression)
; LevChunk_A1A58: Oil_Ocean_128x128_Map:
BM128_OOZ:	binclude	"mappings/128x128/OOZ.bin"
;-----------------------------------------------------------------------------------
; DHZ 16x16 block mappings (uncompressed)
; LevBlock_A3F88: Dust_Hill_16x16_Map:
BM16_DHZ:	binclude	"mappings/16x16/DHZ.bin"
; ----------------------------------------------------------------------------------
; OOZ main level patterns (Nemesis compression)
; ArtNem_A5248: Dust_Hill_8x8_Tiles:
ArtNem_DHZ:	binclude	"art/nemesis/DHZ primary.bin"
; ----------------------------------------------------------------------------------
; DHZ 128x128 block mappings (Kosinski compression)
; LevChunk_A8B6A: Dust_Hill_128x128_Map:
BM128_DHZ:	binclude	"mappings/128x128/DHZ.bin"
;-----------------------------------------------------------------------------------
; CNZ 16x16 block mappings (uncompressed)
; LevBlock_AB5CA: Casino_Night_16x16_Map:
BM16_CNZ:	binclude	"mappings/16x16/CNZ.bin"
; ----------------------------------------------------------------------------------
; CNZ main level patterns (Nemesis compression)
; ArtNem_ABF2A: Casino_Night_8x8_Tiles:
ArtNem_CNZ:	binclude	"art/nemesis/CNZ primary.bin"
; ----------------------------------------------------------------------------------
; Turning cards in CNZ (Nemesis compression)
; ArtNem_AEF3C: Cnz_Cards:
ArtNem_CNZCards:	binclude	"art/nemesis/Turning cards from CNZ.bin"
; ----------------------------------------------------------------------------------
; CNZ 128x128 block mappings (Kosinski compression)
; LevChunk_AF026: Casino_Night_128x128_Map:
BM128_CNZ:	binclude	"mappings/128x128/CNZ.bin"
;-----------------------------------------------------------------------------------
; CPZ 16x16 block mappings (uncompressed)
; LevBlock_B0F26: Chemical_Plant_16x16_Map:
BM16_CPZ:	binclude	"mappings/16x16/CPZ.bin"
; ----------------------------------------------------------------------------------
; CPZ main level patterns (Nemesis compression)
; ArtNem_B2506: Chemical_Plant_8x8_Tiles:
ArtNem_CPZ:	binclude	"art/nemesis/CPZ primary.bin"

Cpz_Init_Sprites_Dyn_Reload: ; loc_B602E:
		binclude	"data\cpz\init_spr.nem"

; ----------------------------------------------------------------------------------
; CPZ 128x128 block mappings (Kosinski compression)
; LevChunk_B6058: Chemical_Plant_128x128_Map:
BM128_CPZ:	binclude	"mappings/128x128/CPZ.bin"
;-----------------------------------------------------------------------------------
; NGHZ 16x16 block mappings (uncompressed)
; LevBlock_B8558: Neo_Green_Hill_16x16_Map:
BM16_NGHZ:	binclude	"mappings/16x16/NGHZ.bin"
; ----------------------------------------------------------------------------------
; NGHZ main level patterns (Nemesis compression)
; ArtNem_B9E58: Neo_Green_Hill_8x8_Tiles:
ArtNem_NGHZ:	binclude	"art/nemesis/NGHZ primary.bin"

Nghz_Init_Sprites_Dyn_Reload: ; loc_BF408:  Waterfalls
		binclude	"data\nghz\init_spr.nem"

; ----------------------------------------------------------------------------------
; NGHZ 128x128 block mappings (Kosinski compression)
; LevChunk_BF568: Neo_Green_Hill_128x128_Map:
BM128_NGHZ:	binclude	"mappings/128x128/NGHZ.bin"

; For whatever reason,the assembler compiled the end of the NGHZ chunk data twice...
; word_C2138:
		dc.w	$C00B,$F8C4,$C00B,$5200,$F8C0,$F80E,$F0,0

; ===========================================================================
; Leftover data from an earlier build; CPZ's chunk data at this point more
; closely resembles the Nick Arcade prototype,in addition to all chunk data
; being uncompressed rather than Kosinski-compressed

; This is presumably the result reusing EEPROM chips and not allocating memory
; correctly,so any large chunks of padding simply left in whatever was in the
; cartridge at this point; the Nick Arcade prototype had something similar,with
; leftovers from ToeJam & Earl REV00 and some source code remnants

; LevChunk_C2148:
		binclude	"misc/leftovers/Incomplete chunk data for earlier CNZ.bin"
; LevBlock_C943C:
		binclude	"misc/leftovers/Block data for earlier CPZ.bin"
; ArtNem_CAA1C:
		binclude	"misc/leftovers/Art data for earlier CPZ.bin"
; ArtNem_CDFC6:
		binclude	"misc/leftovers/Initial animated tiles for earlier CPZ.bin"
; LevChunk_CE03A:
		binclude	"misc/leftovers/Chunk data for earlier CPZ.bin"
; LevBlock_d603A:
		binclude	"misc/leftovers/Block data for earlier NGHZ.bin"
; ArtNem_d793A:
		binclude	"misc/leftovers/Art data for earlier NGHZ.bin"
; ArtNem_DCEEA:
		binclude	"misc/leftovers/Initial animated tiles for earlier NGHZ.bin"
; LevChunk_Dd04A:
		binclude	"misc/leftovers/Chunk data for earlier NGHZ.bin"

		align 4

; ===========================================================================
; A second set of leftover build data,this time for NGHZ exclusively; oddly,
; the chunk data here is created through manually writing bytes,and can be
; viewed in a text editor (although the Japanese may not appear correctly)

; The fact this is here is hilarious,as it means the EEPROM was used at least
; FOUR TIMES (once for Chiki Chiki Boys,and three times for Sonic 2 builds
; leading up to Simon Wai) and somehow this set never got overwritten,fascinating

; ArtNem_E504A:
		binclude	"misc/leftovers/Art data for earlier earlier NGHZ.bin"
; ArtNem_E57E6:
		binclude	"misc/leftovers/Initial animated tiles for earlier NGHZ.bin"
; LevChunk_E5946:
		binclude	"misc/leftovers/Uncompiled chunk data for NGHZ.bin"

; ===========================================================================
; Moving the music and sound effects would cause them to break due to using
; hardcoded pointers; I have already have converted the music to ASM,but
; the sound effects are still data
;
; $E8000 => Duplicate Sega PCM (shorter than used version)
; $Ed000 => DAC samples
; $F0000 => Music $98 to $9F
; $F1E8C => Sega PCM
; $F8000 => Music $81 to $97
; $FF000 => Sounds $A0 to $E0

; ===========================================================================
; Unused duplicate Sega sound
Sega_SndDup:	binclude	"sound/Unused Sega PCM.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load the sound driver
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_EC000:
SoundDriverLoad:
		move	sr,-(sp)
		movem.l	d0-a6,-(sp)
		move	#$2700,sr
		lea	(Z80_Bus_Request).l,a3
		lea	(Z80_Reset).l,a2
		moveq	#0,d2
		move.w	#$100,d1
		move.w	d1,(a3)	; get Z80 bus
		move.w	d1,(a2)	; release Z80 reset (was held high by console on startup)

-		btst	d2,(a3)
		bne.s	-	; wait until the 68000 has the bus
		jsr	DecompressSoundDriver(pc)
		move.w	d2,(a2)
		move.w	d2,(a3)
		moveq	#$17,d0

-		dbf	d0,-		; wait for 2,314 cycles
		move.w	d1,(a2)		; release Z80 reset
		movem.l	(sp)+,d0-a6
		move	(sp)+,sr
		rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Handles the decompression of the sound driver (Saxman compression,an LZSS variant)
; https://segaretro.org/Saxman_compression

; a4 == start of decompressed data (used for dictionary match offsets)
; a5 == current address of end of decompressed data
; a6 == current address in compressed sound driver
; d3 == length of match minus 1
; d4 == offset into decompressed data of dictionary match
; d5 == number of bytes decompressed so far
; d6 == descriptor field
; d7 == bytes left to decompress

; Interestingly,this suggests the 68k version IS the original,rather than
; the Z80 version used for most songs in the final

; loc_EC03E: Sound_Driver_002:
DecompressSoundDriver:
		lea	Snd_Driver(pc),a6
		move.w	#Snd_Driver_End-Snd_Driver,d7 ; patched (by fixpointer.exe) after compression since the exact size can't be known beforehand
		moveq	#0,d6		; the decompressor knows it's run out of descriptor bits when it starts reading 0's in bit 8
		lea	(Z80_RAM).l,a5
		moveq	#0,d5
		lea	(Z80_RAM).l,a4
; loc_EC054:
SaxDec_Loop:
		lsr.w	#1,d6		; next descriptor bit
		btst	#8,d6		; check if we've run out of bits
		bne.s	.nobitsleft	; (lsr 'shifts in' 0's)
		jsr	SaxDec_GetByte(pc)
		move.b	d0,d6
		ori.w	#$FF00,d6	; these set bits will disappear from the high byte as the register is shifted
; loc_EC066:
.nobitsleft:
		btst	#0,d6
		beq.s	SaxDec_ReadCompressed

; loc_EC06C: SaxDec_ReadUncompressed:
		jsr	SaxDec_GetByte(pc)
		move.b	d0,(a5)+
		addq.w	#1,d5
		bra.w	SaxDec_Loop
; ---------------------------------------------------------------------------

SaxDec_ReadCompressed:
		jsr	SaxDec_GetByte(pc)
		moveq	#0,d4
		move.b	d0,d4
		jsr	SaxDec_GetByte(pc)
		move.b	d0,d3
		andi.w	#$F,d3
		addq.w	#2,d3	; d3 is the length of the match minus 1
		andi.w	#$F0,d0
		lsl.w	#4,d0
		add.w	d0,d4
		addi.w	#$12,d4
		andi.w	#$FFF,d4	; d4 is the offset into the current $1000-byte window
		; This part is a little tricky. You see,d4 currently contains the low three nibbles of an offset into the decompressed data,
		; where the dictionary match lies. The way the high nibble is decided is first by taking it from d5 - the offset of the end
		; of the decompressed data so far. Then,we see if the resulting offset in d4 is somehow higher than d5.
		; If it is,then it's invalid... *unless* you subtract $1000 from it,in which case it refers to data in the previous $1000 block of bytes.
		; This is all just a really gimmicky way of having an offset with a range of $1000 bytes from the end of the decompressed data.
		; If,however,we cannot subtract $1000 because that would put the pointer before the start of the decompressed data,then
		; this is actually a 'zero-fill' match,which encodes a series of zeroes.
		move.w	d5,d0
		andi.w	#$F000,d0
		add.w	d0,d4
		cmp.w	d4,d5
		bcc.s	SaxDec_IsDictionaryReference
		subi.w	#$1000,d4
		bcc.s	SaxDec_IsDictionaryReference

; SaxDec_IsSequenceOfZeroes:
		add.w	d3,d5
		addq.w	#1,d5

-		move.b	#0,(a5)+
		addq.w	#1,d4
		dbf	d3,-
		bra.w	SaxDec_Loop
; ---------------------------------------------------------------------------

SaxDec_IsDictionaryReference:
		add.w	d3,d5
		addq.w	#1,d5

-		move.b	(a4,d4.w),(a5)+
		addq.w	#1,d4
		dbf	d3,-

		bra.w	SaxDec_Loop
; End of function DecompressSoundDriver


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


SaxDec_GetByte:
		move.b	(a6)+,d0
		subq.w	#1,d7	; decrement the remaining number of bytes
		bne.s	+
		addq.w	#4,sp	; exit the decompressor by messing with the track
+
		rts
; End of function SaxDec_GetByte

; ===========================================================================
; ---------------------------------------------------------------------------
; Sound driver (Saxman-compressed)
;
; Evidently,it's similar to the final,just lacking several features (such
; as Saxman-compressed music),so it is possible to replace songs using a
; program like SMPS2ASM
; ---------------------------------------------------------------------------

Snd_Driver:
	save
	include "s2.sounddriver.asm" ; CPU Z80
	restore
	padding off
	!org (Snd_Driver+Size_of_Snd_driver_guess) ; don't worry; I know what I'm doing
Snd_Driver_End:

; ---------------------------------------------------------------------------
; Filler (free space)
; ---------------------------------------------------------------------------
	; the DAC data has to line up with the end of the bank.

	; actually it only has to fit within one bank,but we'll line it up to the end anyway
	; because the padding gives the sound driver some room to grow
	cnop (-Size_of_DAC_samples)-$8DD,$8000
; ---------------------------------------------------------------------------
; DAC samples
; ---------------------------------------------------------------------------
; loc_Ed000:
DACSamples_Start:
DAC_Sample01:	binclude	"sound/DAC/Kick.dpcm"
DAC_Sample01_End:

DAC_Sample02:	binclude	"sound/DAC/Snare.dpcm"
DAC_Sample02_End:

DAC_Sample05:	binclude	"sound/DAC/Timpani.dpcm"
DAC_Sample05_End:

DAC_Sample06:	binclude	"sound/DAC/Tom.dpcm"
DAC_Sample06_End:

DAC_Sample03:	binclude	"sound/DAC/Clap.dpcm"
DAC_Sample03_End:

DAC_Sample04:	binclude	"sound/DAC/Scratch.dpcm"
DAC_Sample04_End:
DACSamples_End:

	if DACSamples_End - DACSamples_Start > $8000
		fatal "DAC samples must fit within $8000 bytes,but you have $\{DACSamples_End-DACSamples_Start } bytes of DAC samples."
	endif
	if DACSamples_End - DACSamples_Start > Size_of_DAC_samples
		fatal "Size_of_DAC_samples = $\{Size_of_DAC_samples},but you have $\{DACSamples_End-DACSamples_Start} bytes of DAC samples."
	endif

; ---------------------------------------------------------------------------
; Music pointers
; ---------------------------------------------------------------------------
; loc_F0000:
MusicPoint1:	startBank
MusPtr_ExtraLife:	rom_ptr_z80	Mus_ExtraLife	; $98
MusPtr_Title:		rom_ptr_z80	Mus_Title	; $99
MusPtr_ActClear:	rom_ptr_z80	Mus_ActClear	; $9A
MusPtr_GameOver:	rom_ptr_z80	Mus_GameOver	; $9B
MusPtr_Continue:	rom_ptr_z80	Mus_Continue	; $9C
MusPtr_Emerald:		rom_ptr_z80	Mus_Emerald	; $9D-$9F

; loc_F000C:
Mus_ExtraLife:	include		"sound/music/Extra life.asm"
Mus_Title:	include		"sound/music/Title screen.asm"
Mus_ActClear:	include		"sound/music/End of level.asm"
Mus_GameOver:	include		"sound/music/Game over.asm"
Mus_Continue:	include		"sound/music/Continue.asm"
Mus_Emerald:	include		"sound/music/Got an emerald.asm"
	finishBank

; ----------------------------------------------------------------------------------
; Filler (free space)
; ----------------------------------------------------------------------------------
	; the PCM data has to line up with the end of the bank.
	cnop -Size_of_SEGA_sound,$8000
; -------------------------------------------------------------------------------
; Sega Intro Sound
; 8-bit unsigned raw audio at 16Khz
; -------------------------------------------------------------------------------
; loc_F1E8C:
Sega_Snd:	binclude	"sound/Sega PCM.bin"
Sega_Snd_End:

	if Sega_Snd_End - Sega_Snd > $8000
		fatal "Sega sound must fit within $8000 bytes,but you have a $\{Sega_Snd_End-Sega_Snd} byte Sega sound."
	endif
	if Sega_Snd_End - Sega_Snd > Size_of_SEGA_sound
		fatal "Size_of_SEGA_sound = $\{Size_of_SEGA_sound},but you have a $\{Sega_Snd_End-Sega_Snd} byte Sega sound."
	endif

; ------------------------------------------------------------------------------
; Music pointers
; ------------------------------------------------------------------------------
; loc_F8000: Music_81_To_97:
MusicPoint2:	startBank
MusPtr_OOZ:		rom_ptr_z80	Mus_OOZ		; $81
MusPtr_GHZ:		rom_ptr_z80	Mus_GHZ		; $82
MusPtr_MTZ:		rom_ptr_z80	Mus_MTZ		; $83
MusPtr_CNZ:		rom_ptr_z80	Mus_CNZ		; $84
MusPtr_DHZ:		rom_ptr_z80	Mus_DHZ		; $85
MusPtr_HPZ:		rom_ptr_z80	Mus_HPZ		; $86
MusPtr_NGHZ:		rom_ptr_z80	Mus_NGHZ	; $87
MusPtr_DEZ:		rom_ptr_z80	Mus_DEZ		; $88
MusPtr_SpecStg:		rom_ptr_z80	Mus_SpecStg	; $89
MusPtr_LevelSel:	rom_ptr_z80	Mus_LevelSel	; $8A
MusPtr_LevelSelDup:	rom_ptr_z80	Mus_LevelSel	; $8B ; yes,the same song is referenced twice
MusPtr_FinalBoss:	rom_ptr_z80	Mus_FinalBoss	; $8C
MusPtr_CPZ:		rom_ptr_z80	Mus_CPZ		; $8D
MusPtr_Boss:		rom_ptr_z80	Mus_Boss	; $8E
MusPtr_RWZ:		rom_ptr_z80	Mus_RWZ		; $8F
MusPtr_SSZ:		rom_ptr_z80	Mus_SSZ		; $90 and $91
MusPtr_Unused1:		rom_ptr_z80	Mus_Unused1	; $92
MusPtr_BOZ:		rom_ptr_z80	Mus_BOZ		; $93
MusPtr_Unused2:		rom_ptr_z80	Mus_Unused2	; $94
MusPtr_Invinc:		rom_ptr_z80	Mus_Invinc	; $95
MusPtr_HTZ:		rom_ptr_z80	Mus_HTZ		; $96 and $97

; loc_F802A:
Mus_OOZ:	include		"sound/music/OOZ.asm"		; CNZ 2-player theme in final
Mus_GHZ:	include		"sound/music/GHZ.asm"
Mus_MTZ:	include		"sound/music/MTZ.asm"
Mus_CNZ:	include		"sound/music/CNZ.asm"
Mus_DHZ:	include		"sound/music/DHZ.asm"
Mus_HPZ:	include		"sound/music/HPZ.asm"		; DHZ/MCZ 2-player theme in final
Mus_NGHZ:	include		"sound/music/NGHZ.asm"
Mus_DEZ:	include		"sound/music/DEZ.asm"		; Technically used in this build for the extra life jingle when collecting 100
								; or 200 rings,but labeled as DEZ regardless to prevent confusion
Mus_SpecStg:	include		"sound/music/Special Stage.asm"
Mus_LevelSel:	include		"sound/music/Level select.asm"
Mus_FinalBoss:	include		"sound/music/Final boss.asm"
Mus_CPZ:	include		"sound/music/CPZ.asm"
Mus_Boss	include		"sound/music/Boss.asm"
Mus_RWZ:	include		"sound/music/RWZ.asm"		; SCZ theme in final
Mus_SSZ:	include		"sound/music/SSZ.asm"		; OOZ theme in final
Mus_Unused1:	include		"sound/music/Unused 1.asm"	; WFZ theme in final
Mus_BOZ:	include		"sound/music/BOZ.asm"		; GHZ/EHZ 2-player theme in final
Mus_Unused2:	include		"sound/music/Unused 2.asm"	; 2-player results theme in final
Mus_Invinc:	include		"sound/music/Invincible.asm"	; Super Sonic theme in final
Mus_HTZ:	include		"sound/music/HTZ.asm"

	org $FF000
; loc_FF000: Sfx_A0_To_F9:
SoundIndex:
SndPtr_Jump:		rom_ptr_z80	Sfx_A0
SndPtr_Checkpoint:	rom_ptr_z80	Sfx_A1
SndPtr_SpikeSwitch:	rom_ptr_z80	Sfx_A2
SndPtr_Hurt:		rom_ptr_z80	Sfx_A3
SndPtr_Skidding:	rom_ptr_z80	Sfx_A4
SndPtr_MissileDissolve:	rom_ptr_z80	Sfx_A5
SndPtr_HurtBySpikes:	rom_ptr_z80	Sfx_A6
SndPtr_PushBlock:	rom_ptr_z80	Sfx_A7
SndPtr_SSGoal:		rom_ptr_z80	Sfx_A8
SndPtr_Bwoop:		rom_ptr_z80	Sfx_A9
SndPtr_Splash:		rom_ptr_z80	Sfx_AA
SndPtr_Swish:		rom_ptr_z80	Sfx_AB
SndPtr_BossHit:		rom_ptr_z80	Sfx_AC
SndPtr_InhalingBubble:	rom_ptr_z80	Sfx_AD
SndPtr_ArrowFiring:
SndPtr_LavaBall:	rom_ptr_z80	Sfx_AE
SndPtr_Shield:		rom_ptr_z80	Sfx_AF
SndPtr_Saw:		rom_ptr_z80	Sfx_B0
SndPtr_Electric:	rom_ptr_z80	Sfx_B1
SndPtr_Drown:		rom_ptr_z80	Sfx_B2
SndPtr_FireBurn:	rom_ptr_z80	Sfx_B3
SndPtr_Bumper:		rom_ptr_z80	Sfx_B4
SndPtr_Ring:
SndPtr_RingRight:	rom_ptr_z80	Sfx_B5
SndPtr_SpikesMove:	rom_ptr_z80	Sfx_B6
SndPtr_Rumbling:	rom_ptr_z80	Sfx_B7
			rom_ptr_z80	Sfx_B8
SndPtr_Smash:		rom_ptr_z80	Sfx_B9
SndPtr_SSGlass:		rom_ptr_z80	Sfx_BA
SndPtr_DoorSlam:	rom_ptr_z80	Sfx_BB
SndPtr_SpindashRelease:	rom_ptr_z80	Sfx_BC
SndPtr_Hammer:		rom_ptr_z80	Sfx_BD
SndPtr_Roll:		rom_ptr_z80	Sfx_BE
SndPtr_ContinueJingle:	rom_ptr_z80	Sfx_BF
SndPtr_BasaranFlap:	rom_ptr_z80	Sfx_C0
SndPtr_Explosion:	rom_ptr_z80	Sfx_C1
SndPtr_WaterWarning:	rom_ptr_z80	Sfx_C2
SndPtr_EnterGiantRing:	rom_ptr_z80	Sfx_C3
SndPtr_BossExplosion:	rom_ptr_z80	Sfx_C4
SndPtr_TallyEnd:	rom_ptr_z80	Sfx_C5
SndPtr_RingSpill:	rom_ptr_z80	Sfx_C6
			rom_ptr_z80	Sfx_C7
SndPtr_Flamethrower:	rom_ptr_z80	Sfx_C8
SndPtr_Bonus:		rom_ptr_z80	Sfx_C9
SndPtr_SpecStageEntry:	rom_ptr_z80	Sfx_CA
SndPtr_SlowSmash:	rom_ptr_z80	Sfx_CB
SndPtr_Spring:		rom_ptr_z80	Sfx_CC
SndPtr_Blip:		rom_ptr_z80	Sfx_CD
SndPtr_RingLeft:	rom_ptr_z80	Sfx_CE
SndPtr_Signpost:	rom_ptr_z80	Sfx_CF
SndPtr_CNZBossZap:	rom_ptr_z80	Sfx_D0
			rom_ptr_z80	Sfx_D1
			rom_ptr_z80	Sfx_D2
SndPtr_Signpost2P:	rom_ptr_z80	Sfx_D3
SndPtr_OOZLidPop:	rom_ptr_z80	Sfx_D4
SndPtr_SlidingSpike:	rom_ptr_z80	Sfx_D5
SndPtr_CNZElevator:	rom_ptr_z80	Sfx_D6
SndPtr_PlatformKnock:	rom_ptr_z80	Sfx_D7
SndPtr_BonusBumper:	rom_ptr_z80	Sfx_D8
SndPtr_LargeBumper:	rom_ptr_z80	Sfx_D9
SndPtr_Gloop:		rom_ptr_z80	Sfx_DA
SndPtr_PreArrowFiring:	rom_ptr_z80	Sfx_DB
SndPtr_Fire:		rom_ptr_z80	Sfx_DC
SndPtr_ArrowStick:	rom_ptr_z80	Sfx_DD
SndPtr_Helicopter:
SndPtr_WingFortress:	rom_ptr_z80	Sfx_DE
SndPtr_SuperTransform:	rom_ptr_z80	Sfx_DF
SndPtr_SpindashRev:	rom_ptr_z80	Sfx_E0
SndPtr__End:

Sfx_A0: ; loc_FF082:
		include	"sound/SFX/A0 - Jump.asm"
Sfx_A1: ; loc_FF098:
		include	"sound/SFX/A1 - Lamppost.asm"
Sfx_A2: ; loc_FF0C2:
		include	"sound/SFX/A2.asm"
Sfx_A3: ; loc_FF0E1:
		include	"sound/SFX/A3 - Death.asm"
Sfx_A4: ; loc_FF113:
		include	"sound/SFX/A4 - Skid.asm"
Sfx_A5: ; loc_FF148:
		include	"sound/SFX/A5.asm"
Sfx_A6: ; loc_FF174:
		include	"sound/SFX/A6 - Hit Spikes.asm"
Sfx_A7: ; loc_FF1A3:
		include	"sound/SFX/A7 - Push Block.asm"
Sfx_A8: ; loc_FF1d2:
		include	"sound/SFX/A8 - SS Goal.asm"
Sfx_A9: ; loc_FF1EC:
		include	"sound/SFX/A9 - SS Item.asm"
Sfx_AA: ; loc_FF1FE:
		include	"sound/SFX/AA - Splash.asm"
Sfx_AB: ; loc_FF23F:
		include	"sound/SFX/AB.asm"
Sfx_AC: ; loc_FF25E:
		include	"sound/SFX/AC - Hit Boss.asm"
Sfx_AD: ; loc_FF292:
		include	"sound/SFX/AD - Get Bubble.asm"
Sfx_AE: ; loc_FF2C8:
		include	"sound/SFX/AE - Fireball.asm"
Sfx_AF: ; loc_FF312:
		include	"sound/SFX/AF - Shield.asm"
Sfx_B0: ; loc_FF33F:
		include	"sound/SFX/B0 - Saw.asm"
Sfx_B1: ; loc_FF370:
		include	"sound/SFX/B1 - Electric.asm"
Sfx_B2: ; loc_FF39C:
		include	"sound/SFX/B2 - Drown Death.asm"
Sfx_B3: ; loc_FF3EB:
		include	"sound/SFX/B3 - Flamethrower.asm"
Sfx_B4: ; loc_FF41C:
		include	"sound/SFX/B4 - Bumper.asm"
Sfx_B5: ; loc_FF477:
		include	"sound/SFX/B5 - Ring.asm"
Sfx_B6: ; loc_FF48C:
		include	"sound/SFX/B6 - Spikes Move.asm"
Sfx_B7: ; loc_FF4A9:
		include	"sound/SFX/B7 - Rumbling.asm"
Sfx_B8: ; loc_FF4E4:
		include	"sound/SFX/B8.asm"
Sfx_B9: ; loc_FF501:
		include	"sound/SFX/B9 - Collapse.asm"
Sfx_BA: ; loc_FF54B:
		include	"sound/SFX/BA - SS Glass.asm"
Sfx_BB: ; loc_FF573:
		include	"sound/SFX/BB - Door.asm"
Sfx_BC: ; loc_FF59E:
		include	"sound/SFX/BC - Teleport.asm"
Sfx_BD: ; loc_FF5DF:
		include	"sound/SFX/BD - ChainStomp.asm"
Sfx_BE: ; loc_FF632:
		include	"sound/SFX/BE - Roll.asm"
Sfx_BF: ; loc_FF66C:
		include	"sound/SFX/BF - Get Continue.asm"
Sfx_C0: ; loc_FF6DE:
		include	"sound/SFX/C0 - Basaran Flap.asm"
Sfx_C1: ; loc_FF70C:
		include	"sound/SFX/C1 - Break Item.asm"
Sfx_C2: ; loc_FF746:
		include	"sound/SFX/C2 - Drown Warning.asm"
Sfx_C3: ; loc_FF757:
		include	"sound/SFX/C3 - Giant Ring.asm"
Sfx_C4: ; loc_FF7d1:
		include	"sound/SFX/C4 - Bomb.asm"
Sfx_C5: ; loc_FF7F9:
		include	"sound/SFX/C5 - Cash Register.asm"
Sfx_C6: ; loc_FF860:
		include	"sound/SFX/C6 - Ring Loss.asm"
Sfx_C7: ; loc_FF888:
		include	"sound/SFX/C7 - Chain Rising.asm"
Sfx_C8: ; loc_FF8B6:
		include	"sound/SFX/C8 - Burning.asm"
Sfx_C9: ; loc_FF8C7:
		include	"sound/SFX/C9 - Hidden Bonus.asm"
Sfx_CA: ; loc_FF8F4:
		include	"sound/SFX/CA - Enter SS.asm"
Sfx_CB: ; loc_FF921:
		include	"sound/SFX/CB - Wall Smash.asm"
Sfx_CC: ; loc_FF954:
		include	"sound/SFX/CC - Spring.asm"
Sfx_CD: ; loc_FF98E:
		include	"sound/SFX/CD - Switch.asm"
Sfx_CE: ; loc_FF99B:
		include	"sound/SFX/CE - Ring Left Speaker.asm"
Sfx_CF: ; loc_FF9B0:
		include	"sound/SFX/CF - Signpost.asm"
; final 16 sounds were ripped by MDTravisYT
Sfx_D0: ; loc_FF9E7:
		include	"sound/SFX/D0 - CNZ Boss Zap.asm"
Sfx_D1: ; loc_FFA1B:
		include	"sound/SFX/D1 - Unknown (Unused).asm"
Sfx_D2: ; loc_FFA43:
		include	"sound/SFX/D2 - Unknown (Unused).asm"
Sfx_D3: ; loc_FFA74:
		include	"sound/SFX/D3 - Signpost 2P.asm"
Sfx_D4: ; loc_FFAA1:
		include	"sound/SFX/D4 - OOZ Lid Pop.asm"
Sfx_D5: ; loc_FFAE0:
		include	"sound/SFX/D5 - Sliding Spike.asm"
Sfx_D6: ; loc_FFB0D:
		include	"sound/SFX/D6 - CNZ Elevator.asm"
Sfx_D7: ; loc_FFB53:
		include	"sound/SFX/D7 - Platform Knock.asm"
Sfx_D8: ; loc_FFB80:
		include	"sound/SFX/D8 - Bonus Bumper.asm"
Sfx_D9: ; loc_FFBB7:
		include	"sound/SFX/D9 - Large Bumper.asm"
Sfx_DA: ; loc_FFC06:
		include	"sound/SFX/DA - Gloop.asm"
Sfx_DB: ; loc_FFC47:
		include	"sound/SFX/DB - Pre-Arrow Firing.asm"
Sfx_DC: ; loc_FFC64:
		include	"sound/SFX/DC - Fire.asm"
Sfx_DD: ; loc_FFCC1:
		include	"sound/SFX/DD - Arrow Stick.asm"
Sfx_DE: ; loc_FFCEB:
		include	"sound/SFX/DE - Helicopter.asm"
Sfx_DF: ; loc_FFd28:
		include	"sound/SFX/DF - Super Transform.asm"
Sfx_E0: ; loc_FFd73:
		include	"sound/SFX/E0 - Spin Dash Rev.asm"
	finishBank

; end of 'ROM'
	if padToPowerOfTwo && (*)&(*-1)
		cnop	-1,2<<lastbit(*-1)
		dc.b	0
paddingSoFar	:= paddingSoFar+1
	else
		even
	endif
	if MOMPASS=2
		; "About" because it will be off by the same amount that Size_of_Snd_driver_guess is incorrect (if you changed it),and because I may have missed a small amount of internal padding somewhere
		message "ROM size is $\{*} bytes (\{*/1024.0} kb). About $\{paddingSoFar} bytes are padding. "
	endif
EndOfRom:
		END